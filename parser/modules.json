[
  {
    "module_name": "Arg",
    "module_info":
      "<p>Parsing of command line arguments.</p><p>This module provides a general mechanism for extracting options and\n   arguments from the command line to the program.</p><p>Syntax of command lines:\n    A keyword is a character string starting with a <code class=\"code\">-</code>.\n    An option is a keyword alone or followed by an argument.\n    The types of keywords are: <code class=\"code\"><span class=\"constructor\">Unit</span></code>, <code class=\"code\"><span class=\"constructor\">Bool</span></code>, <code class=\"code\"><span class=\"constructor\">Set</span></code>, <code class=\"code\"><span class=\"constructor\">Clear</span></code>,\n    <code class=\"code\"><span class=\"constructor\">String</span></code>, <code class=\"code\"><span class=\"constructor\">Set_string</span></code>, <code class=\"code\"><span class=\"constructor\">Int</span></code>, <code class=\"code\"><span class=\"constructor\">Set_int</span></code>, <code class=\"code\"><span class=\"constructor\">Float</span></code>, <code class=\"code\"><span class=\"constructor\">Set_float</span></code>,\n    <code class=\"code\"><span class=\"constructor\">Tuple</span></code>, <code class=\"code\"><span class=\"constructor\">Symbol</span></code>, and <code class=\"code\"><span class=\"constructor\">Rest</span></code>.\n    <code class=\"code\"><span class=\"constructor\">Unit</span></code>, <code class=\"code\"><span class=\"constructor\">Set</span></code> and <code class=\"code\"><span class=\"constructor\">Clear</span></code> keywords take no argument. A <code class=\"code\"><span class=\"constructor\">Rest</span></code>\n    keyword takes the remaining of the command line as arguments.\n    Every other keyword takes the following word on the command line\n    as argument.  For compatibility with GNU getopt_long, <code class=\"code\">keyword=arg</code>\n    is also allowed.\n    Arguments not preceded by a keyword are called anonymous arguments.</p><p>Examples (<code class=\"code\">cmd</code> is assumed to be the command name):</p><ul>\n<li>  <code class=\"code\">cmd&nbsp;-flag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>(a unit option)</li>\n<li>  <code class=\"code\">cmd&nbsp;-int&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>(an int option with argument <code class=\"code\">1</code>)</li>\n<li>  <code class=\"code\">cmd&nbsp;-string&nbsp;foobar&nbsp;&nbsp;</code>(a string option with argument <code class=\"code\"><span class=\"string\">\"foobar\"</span></code>)</li>\n<li>  <code class=\"code\">cmd&nbsp;-float&nbsp;12.34&nbsp;&nbsp;&nbsp;&nbsp;</code>(a float option with argument <code class=\"code\">12.34</code>)</li>\n<li>  <code class=\"code\">cmd&nbsp;a&nbsp;b&nbsp;c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>(three anonymous arguments: <code class=\"code\"><span class=\"string\">\"a\"</span></code>, <code class=\"code\"><span class=\"string\">\"b\"</span></code>, and <code class=\"code\"><span class=\"string\">\"c\"</span></code>)</li>\n<li>  <code class=\"code\">cmd&nbsp;a&nbsp;b&nbsp;--&nbsp;c&nbsp;d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>(two anonymous arguments and a rest option with\n                           two arguments)</li>\n</ul>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "spec",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Unit\"><span class=\"constructor\">Unit</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(unit -&gt; unit)</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Call the function with unit argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Bool\"><span class=\"constructor\">Bool</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(bool -&gt; unit)</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Call the function with a bool argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Set\"><span class=\"constructor\">Set</span></span> <span class=\"keyword\">of</span> <code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Set the reference to true</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Clear\"><span class=\"constructor\">Clear</span></span> <span class=\"keyword\">of</span> <code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Set the reference to false</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.String\"><span class=\"constructor\">String</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(string -&gt; unit)</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Call the function with a string argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Set_string\"><span class=\"constructor\">Set_string</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string <a href=\"Pervasives.html#TYPEref\">ref</a></code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Set the reference to the string argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Int\"><span class=\"constructor\">Int</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(int -&gt; unit)</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Call the function with an int argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Set_int\"><span class=\"constructor\">Set_int</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int <a href=\"Pervasives.html#TYPEref\">ref</a></code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Set the reference to the int argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Float\"><span class=\"constructor\">Float</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(float -&gt; unit)</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Call the function with a float argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Set_float\"><span class=\"constructor\">Set_float</span></span> <span class=\"keyword\">of</span> <code class=\"type\">float <a href=\"Pervasives.html#TYPEref\">ref</a></code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Set the reference to the float argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Tuple\"><span class=\"constructor\">Tuple</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Arg.html#TYPEspec\">spec</a> list</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Take several arguments according to the\n                                   spec list</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Symbol\"><span class=\"constructor\">Symbol</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string list * (string -&gt; unit)</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Take one of the symbols as argument and\n                                   call the function with the symbol</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Rest\"><span class=\"constructor\">Rest</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(string -&gt; unit)</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Stop interpreting keywords and call the\n                                   function with each remaining argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Expand\"><span class=\"constructor\">Expand</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(string -&gt; string array)</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>If the remaining arguments to process\n                                           are of the form\n                                           <code class=\"code\">[<span class=\"string\">\"-foo\"</span>;&nbsp;<span class=\"string\">\"arg\"</span>]&nbsp;@&nbsp;rest</code> where \"foo\" is\n                                           registered as <code class=\"code\"><span class=\"constructor\">Expand</span>&nbsp;f</code>, then the\n                                           arguments <code class=\"code\">f&nbsp;<span class=\"string\">\"arg\"</span>&nbsp;@&nbsp;rest</code> are\n                                           processed. Only allowed in\n                                           <code class=\"code\">parse_and_expand_argv_dynamic</code>.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>"
              ],
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The concrete type describing the behavior associated\n   with a keyword.</p>\n</div>"
              ]
            ]
          ],
          [ "Type", [ "key", "string", "None" ] ],
          [ "Type", [ "doc", "string", "None" ] ],
          [ "Type", [ "usage_msg", "string", "None" ] ],
          [ "Type", [ "anon_fun", "string -> unit", "None" ] ],
          [
            "Function",
            [
              "parse",
              "(",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Arg</span>.parse&nbsp;speclist&nbsp;anon_fun&nbsp;usage_msg</code> parses the command line.\n    <code class=\"code\">speclist</code> is a list of triples <code class=\"code\">(key,&nbsp;spec,&nbsp;doc)</code>.\n    <code class=\"code\">key</code> is the option keyword, it must start with a <code class=\"code\"><span class=\"string\">'-'</span></code> character.\n    <code class=\"code\">spec</code> gives the option type and the function to call when this option\n    is found on the command line.\n    <code class=\"code\">doc</code> is a one-line description of this option.\n    <code class=\"code\">anon_fun</code> is called on anonymous arguments.\n    The functions in <code class=\"code\">spec</code> and <code class=\"code\">anon_fun</code> are called in the same order\n    as their arguments appear on the command line.</p>\n\n<p>If an error occurs, <code class=\"code\"><span class=\"constructor\">Arg</span>.parse</code> exits the program, after printing\n    to standard error an error message as follows:</p>\n<ul>\n<li>  The reason for the error: unknown option, invalid or missing argument, etc.</li>\n<li>  <code class=\"code\">usage_msg</code></li>\n<li>  The list of options, each followed by the corresponding <code class=\"code\">doc</code> string.\n    Beware: options that have an empty <code class=\"code\">doc</code> string will not be included in the\n    list.</li>\n</ul>\n<p>For the user to be able to specify anonymous arguments starting with a\n    <code class=\"code\">-</code>, include for example <code class=\"code\">(<span class=\"string\">\"-\"</span>,&nbsp;<span class=\"constructor\">String</span>&nbsp;anon_fun,&nbsp;doc)</code> in <code class=\"code\">speclist</code>.</p>\n\n<p>By default, <code class=\"code\">parse</code> recognizes two unit options, <code class=\"code\">-help</code> and <code class=\"code\">--help</code>,\n    which will print to standard output <code class=\"code\">usage_msg</code> and the list of\n    options, and exit the program.  You can override this behaviour\n    by specifying your own <code class=\"code\">-help</code> and <code class=\"code\">--help</code> options in <code class=\"code\">speclist</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "parse_dynamic",
              "(",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Arg.html#VALparse\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse</code></a>, except that the <code class=\"code\">speclist</code> argument is a reference\n    and may be updated during the parsing. A typical use for this feature\n    is to parse command lines of the form:</p>\n<ul>\n<li>    command subcommand <code class=\"code\">options</code>\n    where the list of options depends on the value of the subcommand argument.</li>\n</ul>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "parse_argv",
              "?current:int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv&nbsp;~current&nbsp;args&nbsp;speclist&nbsp;anon_fun&nbsp;usage_msg</code> parses\n  the array <code class=\"code\">args</code> as if it were the command line.  It uses and updates\n  the value of <code class=\"code\">~current</code> (if given), or <a href=\"Arg.html#VALcurrent\"><code class=\"code\"><span class=\"constructor\">Arg</span>.current</code></a>.  You must set\n  it before calling <code class=\"code\">parse_argv</code>.  The initial value of <code class=\"code\">current</code>\n  is the index of the program name (argument 0) in the array.\n  If an error occurs, <code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv</code> raises <a href=\"Arg.html#EXCEPTIONBad\"><code class=\"code\"><span class=\"constructor\">Arg</span>.<span class=\"constructor\">Bad</span></code></a> with\n  the error message as argument.  If option <code class=\"code\">-help</code> or <code class=\"code\">--help</code> is\n  given, <code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv</code> raises <a href=\"Arg.html#EXCEPTIONHelp\"><code class=\"code\"><span class=\"constructor\">Arg</span>.<span class=\"constructor\">Help</span></code></a> with the help message\n  as argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "parse_argv_dynamic",
              "?current:int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Arg.html#VALparse_argv\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv</code></a>, except that the <code class=\"code\">speclist</code> argument is a\n    reference and may be updated during the parsing.\n    See <a href=\"Arg.html#VALparse_dynamic\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_dynamic</code></a>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "parse_and_expand_argv_dynamic",
              "int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Arg.html#VALparse_argv_dynamic\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv_dynamic</code></a>, except that the <code class=\"code\">argv</code> argument is a\n    reference and may be updated during the parsing of <code class=\"code\"><span class=\"constructor\">Expand</span></code> arguments.\n    See <a href=\"Arg.html#VALparse_argv_dynamic\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv_dynamic</code></a>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "parse_expand",
              "(",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Arg.html#VALparse\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse</code></a>, except that the <code class=\"code\"><span class=\"constructor\">Expand</span></code> arguments are allowed and\n    the <a href=\"Arg.html#VALcurrent\"><code class=\"code\"><span class=\"constructor\">Arg</span>.current</code></a> reference is not updated.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Exception",
            [
              "Help",
              [ "Some", "string" ],
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Raised by <code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv</code> when the user asks for help.</p>\n</div>"
              ]
            ]
          ],
          [
            "Exception",
            [
              "Bad",
              [ "Some", "string" ],
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Functions in <code class=\"code\">spec</code> or <code class=\"code\">anon_fun</code> can raise <code class=\"code\"><span class=\"constructor\">Arg</span>.<span class=\"constructor\">Bad</span></code> with an error\n    message to reject invalid arguments.\n    <code class=\"code\"><span class=\"constructor\">Arg</span>.<span class=\"constructor\">Bad</span></code> is also raised by <a href=\"Arg.html#VALparse_argv\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv</code></a> in case of an error.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "usage",
              "(",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Arg</span>.usage&nbsp;speclist&nbsp;usage_msg</code> prints to standard error\n    an error message that includes the list of valid options.  This is\n    the same message that <a href=\"Arg.html#VALparse\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse</code></a> prints in case of error.\n    <code class=\"code\">speclist</code> and <code class=\"code\">usage_msg</code> are the same as for <a href=\"Arg.html#VALparse\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "usage_string",
              "(",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Returns the message that would have been printed by <a href=\"Arg.html#VALusage\"><code class=\"code\"><span class=\"constructor\">Arg</span>.usage</code></a>,\n    if provided with the same parameters.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "align",
              "?limit:int ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Align the documentation strings by inserting spaces at the first alignment\n    separator (tab or, if tab is not found, space), according to the length of\n    the keyword.  Use a alignment separator as the first character in a doc\n    string if you want to align the whole string.  The doc strings corresponding\n    to <code class=\"code\"><span class=\"constructor\">Symbol</span></code> arguments are aligned on the next line.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Array",
    "module_info": "<p>Array operations.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "length",
              "'a array -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the length (number of elements) of the given array.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "get",
              "'a array -> int -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.get&nbsp;a&nbsp;n</code> returns the element number <code class=\"code\">n</code> of array <code class=\"code\">a</code>.\n   The first element has number 0.\n   The last element has number <code class=\"code\"><span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1</code>.\n   You can also write <code class=\"code\">a.(n)</code> instead of <code class=\"code\"><span class=\"constructor\">Array</span>.get&nbsp;a&nbsp;n</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"index&nbsp;out&nbsp;of&nbsp;bounds\"</span></code>\n   if <code class=\"code\">n</code> is outside the range 0 to <code class=\"code\">(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "set",
              "'a array -> int -> 'a -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.set&nbsp;a&nbsp;n&nbsp;x</code> modifies array <code class=\"code\">a</code> in place, replacing\n   element number <code class=\"code\">n</code> with <code class=\"code\">x</code>.\n   You can also write <code class=\"code\">a.(n)&nbsp;&lt;-&nbsp;x</code> instead of <code class=\"code\"><span class=\"constructor\">Array</span>.set&nbsp;a&nbsp;n&nbsp;x</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"index&nbsp;out&nbsp;of&nbsp;bounds\"</span></code>\n   if <code class=\"code\">n</code> is outside the range 0 to <code class=\"code\"><span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "make",
              "int -> 'a -> 'a array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.make&nbsp;n&nbsp;x</code> returns a fresh array of length <code class=\"code\">n</code>,\n   initialized with <code class=\"code\">x</code>.\n   All the elements of this new array are initially\n   physically equal to <code class=\"code\">x</code> (in the sense of the <code class=\"code\">==</code> predicate).\n   Consequently, if <code class=\"code\">x</code> is mutable, it is shared among all elements\n   of the array, and modifying <code class=\"code\">x</code> through one of the array entries\n   will modify all other entries at the same time.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;<span class=\"constructor\">Sys</span>.max_array_length</code>.\n   If the value of <code class=\"code\">x</code> is a floating-point number, then the maximum\n   size is only <code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length&nbsp;/&nbsp;2</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "create",
              "int -> 'a -> 'a array",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><code class=\"code\"><span class=\"constructor\">Array</span>.create</code> is an alias for <a href=\"Array.html#VALmake\"><code class=\"code\"><span class=\"constructor\">Array</span>.make</code></a>.</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "create_float",
              "int -> float array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.create_float&nbsp;n</code> returns a fresh float array of length <code class=\"code\">n</code>,\n    with uninitialized data.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "make_float",
              "int -> float array",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><code class=\"code\"><span class=\"constructor\">Array</span>.make_float</code> is an alias for <a href=\"Array.html#VALcreate_float\"><code class=\"code\"><span class=\"constructor\">Array</span>.create_float</code></a>.</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "init",
              "int -> (int -> 'a) -> 'a array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.init&nbsp;n&nbsp;f</code> returns a fresh array of length <code class=\"code\">n</code>,\n   with element number <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.\n   In other terms, <code class=\"code\"><span class=\"constructor\">Array</span>.init&nbsp;n&nbsp;f</code> tabulates the results of <code class=\"code\">f</code>\n   applied to the integers <code class=\"code\">0</code> to <code class=\"code\">n-1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;<span class=\"constructor\">Sys</span>.max_array_length</code>.\n   If the return type of <code class=\"code\">f</code> is <code class=\"code\">float</code>, then the maximum\n   size is only <code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length&nbsp;/&nbsp;2</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "make_matrix",
              "int -> int -> 'a -> 'a array array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.make_matrix&nbsp;dimx&nbsp;dimy&nbsp;e</code> returns a two-dimensional array\n   (an array of arrays) with first dimension <code class=\"code\">dimx</code> and\n   second dimension <code class=\"code\">dimy</code>. All the elements of this new matrix\n   are initially physically equal to <code class=\"code\">e</code>.\n   The element (<code class=\"code\">x,y</code>) of a matrix <code class=\"code\">m</code> is accessed\n   with the notation <code class=\"code\">m.(x).(y)</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">dimx</code> or <code class=\"code\">dimy</code> is negative or\n   greater than <a href=\"Sys.html#VALmax_array_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length</code></a>.\n   If the value of <code class=\"code\">e</code> is a floating-point number, then the maximum\n   size is only <code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length&nbsp;/&nbsp;2</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "create_matrix",
              "int -> int -> 'a -> 'a array array",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><code class=\"code\"><span class=\"constructor\">Array</span>.create_matrix</code> is an alias for <a href=\"Array.html#VALmake_matrix\"><code class=\"code\"><span class=\"constructor\">Array</span>.make_matrix</code></a>.</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "append",
              "'a array -> 'a array -> 'a array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.append&nbsp;v1&nbsp;v2</code> returns a fresh array containing the\n   concatenation of the arrays <code class=\"code\">v1</code> and <code class=\"code\">v2</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "concat",
              "'a array list -> 'a array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALappend\"><code class=\"code\"><span class=\"constructor\">Array</span>.append</code></a>, but concatenates a list of arrays.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sub",
              "'a array -> int -> int -> 'a array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.sub&nbsp;a&nbsp;start&nbsp;len</code> returns a fresh array of length <code class=\"code\">len</code>,\n   containing the elements number <code class=\"code\">start</code> to <code class=\"code\">start&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>\n   of array <code class=\"code\">a</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Array.sub\"</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">a</code>; that is, if\n   <code class=\"code\">start&nbsp;&lt;&nbsp;0</code>, or <code class=\"code\">len&nbsp;&lt;&nbsp;0</code>, or <code class=\"code\">start&nbsp;+&nbsp;len&nbsp;&gt;&nbsp;<span class=\"constructor\">Array</span>.length&nbsp;a</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "copy",
              "'a array -> 'a array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.copy&nbsp;a</code> returns a copy of <code class=\"code\">a</code>, that is, a fresh array\n   containing the same elements as <code class=\"code\">a</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fill",
              "'a array -> int -> int -> 'a -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fill&nbsp;a&nbsp;ofs&nbsp;len&nbsp;x</code> modifies the array <code class=\"code\">a</code> in place,\n   storing <code class=\"code\">x</code> in elements number <code class=\"code\">ofs</code> to <code class=\"code\">ofs&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Array.fill\"</span></code> if <code class=\"code\">ofs</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">a</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "blit",
              "'a array -> int -> 'a array -> int -> int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.blit&nbsp;v1&nbsp;o1&nbsp;v2&nbsp;o2&nbsp;len</code> copies <code class=\"code\">len</code> elements\n   from array <code class=\"code\">v1</code>, starting at element number <code class=\"code\">o1</code>, to array <code class=\"code\">v2</code>,\n   starting at element number <code class=\"code\">o2</code>. It works correctly even if\n   <code class=\"code\">v1</code> and <code class=\"code\">v2</code> are the same array, and the source and\n   destination chunks overlap.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Array.blit\"</span></code> if <code class=\"code\">o1</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">v1</code>, or if <code class=\"code\">o2</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">v2</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_list",
              "'a array -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.to_list&nbsp;a</code> returns the list of all the elements of <code class=\"code\">a</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_list",
              "'a list -> 'a array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.of_list&nbsp;l</code> returns a fresh array containing the elements\n   of <code class=\"code\">l</code>.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "iter",
              "('a -> unit) -> 'a array -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.iter&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> in turn to all\n   the elements of <code class=\"code\">a</code>.  It is equivalent to\n   <code class=\"code\">f&nbsp;a.(0);&nbsp;f&nbsp;a.(1);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1);&nbsp;()</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "iteri",
              "(int -> 'a -> unit) -> 'a array -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Array</span>.iter</code></a>, but the\n   function is applied with the index of the element as first argument,\n   and the element itself as second argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "map",
              "('a -> 'b) -> 'a array -> 'b array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.map&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>,\n   and builds an array with the results returned by <code class=\"code\">f</code>:\n   <code class=\"code\">[|&nbsp;f&nbsp;a.(0);&nbsp;f&nbsp;a.(1);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;|]</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mapi",
              "(int -> 'a -> 'b) -> 'a array -> 'b array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Array</span>.map</code></a>, but the\n   function is applied to the index of the element as first argument,\n   and the element itself as second argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fold_left",
              "('a -> 'b -> 'a) -> 'a -> 'b array -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_left&nbsp;f&nbsp;x&nbsp;a</code> computes\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;x&nbsp;a.(0))&nbsp;a.(1))&nbsp;...)&nbsp;a.(n-1)</code>,\n   where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fold_right",
              "('b -> 'a -> 'a) -> 'b array -> 'a -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_right&nbsp;f&nbsp;a&nbsp;x</code> computes\n   <code class=\"code\">f&nbsp;a.(0)&nbsp;(f&nbsp;a.(1)&nbsp;(&nbsp;...&nbsp;(f&nbsp;a.(n-1)&nbsp;x)&nbsp;...))</code>,\n   where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators on two arrays" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "iter2",
              "('a -> 'b -> unit) -> 'a array -> 'b array -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.iter2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>\n   and <code class=\"code\">b</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the arrays are not the same size.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "map2",
              "('a -> 'b -> 'c) -> 'a array -> 'b array -> 'c array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.map2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>\n   and <code class=\"code\">b</code>, and builds an array with the results returned by <code class=\"code\">f</code>:\n   <code class=\"code\">[|&nbsp;f&nbsp;a.(0)&nbsp;b.(0);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;b.(<span class=\"constructor\">Array</span>.length&nbsp;b&nbsp;-&nbsp;1)|]</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the arrays are not the same size.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Array scanning" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "for_all",
              "('a -> bool) -> 'a array -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.for_all&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if all elements of the array\n   satisfy the predicate <code class=\"code\">p</code>. That is, it returns\n   <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;...&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "exists",
              "('a -> bool) -> 'a array -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.exists&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if at least one element of\n    the array satisfies the predicate <code class=\"code\">p</code>. That is, it returns\n    <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;...&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mem",
              "'a -> 'a array -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;a&nbsp;l</code> is true if and only if <code class=\"code\">a</code> is equal\n   to an element of <code class=\"code\">l</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "memq",
              "'a -> 'a array -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALmem\"><code class=\"code\"><span class=\"constructor\">Array</span>.mem</code></a>, but uses physical equality instead of structural\n   equality to compare array elements.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Sorting" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "sort",
              "('a -> 'a -> int) -> 'a array -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Sort an array in increasing order according to a comparison\n   function.  The comparison function must return 0 if its arguments\n   compare as equal, a positive integer if the first is greater,\n   and a negative integer if the first is smaller (see below for a\n   complete specification).  For example, <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a> is\n   a suitable comparison function, provided there are no floating-point\n   NaN values in the data.  After calling <code class=\"code\"><span class=\"constructor\">Array</span>.sort</code>, the\n   array is sorted in place in increasing order.\n   <code class=\"code\"><span class=\"constructor\">Array</span>.sort</code> is guaranteed to run in constant heap space\n   and (at most) logarithmic stack space.</p>\n\n<p>The current implementation uses Heap Sort.  It runs in constant\n   stack space.</p>\n\n<p>Specification of the comparison function:\n   Let <code class=\"code\">a</code> be the array and <code class=\"code\">cmp</code> the comparison function.  The following\n   must be true for all x, y, z in a :</p>\n<ul>\n<li>  <code class=\"code\">cmp&nbsp;x&nbsp;y</code> &gt; 0 if and only if <code class=\"code\">cmp&nbsp;y&nbsp;x</code> &lt; 0</li>\n<li>  if <code class=\"code\">cmp&nbsp;x&nbsp;y</code> &gt;= 0 and <code class=\"code\">cmp&nbsp;y&nbsp;z</code> &gt;= 0 then <code class=\"code\">cmp&nbsp;x&nbsp;z</code> &gt;= 0</li>\n</ul>\n<p>When <code class=\"code\"><span class=\"constructor\">Array</span>.sort</code> returns, <code class=\"code\">a</code> contains the same elements as before,\n   reordered in such a way that for all i and j valid indices of <code class=\"code\">a</code> :</p>\n<ul>\n<li>  <code class=\"code\">cmp&nbsp;a.(i)&nbsp;a.(j)</code> &gt;= 0 if and only if i &gt;= j</li>\n</ul>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "stable_sort",
              "('a -> 'a -> int) -> 'a array -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a>, but the sorting algorithm is stable (i.e.\n   elements that compare equal are kept in their original order) and\n   not guaranteed to run in constant heap space.</p>\n\n<p>The current implementation uses Merge Sort. It uses <code class=\"code\">n/2</code>\n   words of heap space, where <code class=\"code\">n</code> is the length of the array.\n   It is usually faster than the current implementation of <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fast_sort",
              "('a -> 'a -> int) -> 'a array -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a> or <a href=\"Array.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">Array</span>.stable_sort</code></a>, whichever is faster\n    on typical input.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "to_seq",
              "'a array -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the array, in increasing order. Modifications of the\n    array during iteration will be reflected in the iterator.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_seqi",
              "'a array -> (int * 'a)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the array, in increasing order, yielding indices along elements.\n    Modifications of the array during iteration will be reflected in the\n    iterator.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_seq",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Create an array from the generator</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "ArrayLabels",
    "module_info": "<p>Array operations.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "length",
              "'a array -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the length (number of elements) of the given array.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "get",
              "'a array -> int -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.get&nbsp;a&nbsp;n</code> returns the element number <code class=\"code\">n</code> of array <code class=\"code\">a</code>.\n   The first element has number 0.\n   The last element has number <code class=\"code\"><span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1</code>.\n   You can also write <code class=\"code\">a.(n)</code> instead of <code class=\"code\"><span class=\"constructor\">Array</span>.get&nbsp;a&nbsp;n</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"index&nbsp;out&nbsp;of&nbsp;bounds\"</span></code>\n   if <code class=\"code\">n</code> is outside the range 0 to <code class=\"code\">(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "set",
              "'a array -> int -> 'a -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.set&nbsp;a&nbsp;n&nbsp;x</code> modifies array <code class=\"code\">a</code> in place, replacing\n   element number <code class=\"code\">n</code> with <code class=\"code\">x</code>.\n   You can also write <code class=\"code\">a.(n)&nbsp;&lt;-&nbsp;x</code> instead of <code class=\"code\"><span class=\"constructor\">Array</span>.set&nbsp;a&nbsp;n&nbsp;x</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"index&nbsp;out&nbsp;of&nbsp;bounds\"</span></code>\n   if <code class=\"code\">n</code> is outside the range 0 to <code class=\"code\"><span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "make",
              "int -> 'a -> 'a array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.make&nbsp;n&nbsp;x</code> returns a fresh array of length <code class=\"code\">n</code>,\n   initialized with <code class=\"code\">x</code>.\n   All the elements of this new array are initially\n   physically equal to <code class=\"code\">x</code> (in the sense of the <code class=\"code\">==</code> predicate).\n   Consequently, if <code class=\"code\">x</code> is mutable, it is shared among all elements\n   of the array, and modifying <code class=\"code\">x</code> through one of the array entries\n   will modify all other entries at the same time.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;<span class=\"constructor\">Sys</span>.max_array_length</code>.\n   If the value of <code class=\"code\">x</code> is a floating-point number, then the maximum\n   size is only <code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length&nbsp;/&nbsp;2</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "create",
              "int -> 'a -> 'a array",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><code class=\"code\"><span class=\"constructor\">Array</span>.create</code> is an alias for <a href=\"Array.html#VALmake\"><code class=\"code\"><span class=\"constructor\">Array</span>.make</code></a>.</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "init",
              "int -> f:(int -> 'a) -> 'a array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.init&nbsp;n&nbsp;f</code> returns a fresh array of length <code class=\"code\">n</code>,\n   with element number <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.\n   In other terms, <code class=\"code\"><span class=\"constructor\">Array</span>.init&nbsp;n&nbsp;f</code> tabulates the results of <code class=\"code\">f</code>\n   applied to the integers <code class=\"code\">0</code> to <code class=\"code\">n-1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;<span class=\"constructor\">Sys</span>.max_array_length</code>.\n   If the return type of <code class=\"code\">f</code> is <code class=\"code\">float</code>, then the maximum\n   size is only <code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length&nbsp;/&nbsp;2</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "make_matrix",
              "dimx:int -> dimy:int -> 'a -> 'a array array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.make_matrix&nbsp;dimx&nbsp;dimy&nbsp;e</code> returns a two-dimensional array\n   (an array of arrays) with first dimension <code class=\"code\">dimx</code> and\n   second dimension <code class=\"code\">dimy</code>. All the elements of this new matrix\n   are initially physically equal to <code class=\"code\">e</code>.\n   The element (<code class=\"code\">x,y</code>) of a matrix <code class=\"code\">m</code> is accessed\n   with the notation <code class=\"code\">m.(x).(y)</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">dimx</code> or <code class=\"code\">dimy</code> is negative or\n   greater than <a href=\"Sys.html#VALmax_array_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length</code></a>.\n   If the value of <code class=\"code\">e</code> is a floating-point number, then the maximum\n   size is only <code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length&nbsp;/&nbsp;2</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "create_matrix",
              "dimx:int -> dimy:int -> 'a -> 'a array array",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><code class=\"code\"><span class=\"constructor\">Array</span>.create_matrix</code> is an alias for\n   <a href=\"Array.html#VALmake_matrix\"><code class=\"code\"><span class=\"constructor\">Array</span>.make_matrix</code></a>.</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "append",
              "'a array -> 'a array -> 'a array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.append&nbsp;v1&nbsp;v2</code> returns a fresh array containing the\n   concatenation of the arrays <code class=\"code\">v1</code> and <code class=\"code\">v2</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "concat",
              "'a array list -> 'a array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALappend\"><code class=\"code\"><span class=\"constructor\">Array</span>.append</code></a>, but concatenates a list of arrays.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sub",
              "'a array -> pos:int -> len:int -> 'a array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.sub&nbsp;a&nbsp;start&nbsp;len</code> returns a fresh array of length <code class=\"code\">len</code>,\n   containing the elements number <code class=\"code\">start</code> to <code class=\"code\">start&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>\n   of array <code class=\"code\">a</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Array.sub\"</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">a</code>; that is, if\n   <code class=\"code\">start&nbsp;&lt;&nbsp;0</code>, or <code class=\"code\">len&nbsp;&lt;&nbsp;0</code>, or <code class=\"code\">start&nbsp;+&nbsp;len&nbsp;&gt;&nbsp;<span class=\"constructor\">Array</span>.length&nbsp;a</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "copy",
              "'a array -> 'a array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.copy&nbsp;a</code> returns a copy of <code class=\"code\">a</code>, that is, a fresh array\n   containing the same elements as <code class=\"code\">a</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fill",
              "'a array -> pos:int -> len:int -> 'a -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fill&nbsp;a&nbsp;ofs&nbsp;len&nbsp;x</code> modifies the array <code class=\"code\">a</code> in place,\n   storing <code class=\"code\">x</code> in elements number <code class=\"code\">ofs</code> to <code class=\"code\">ofs&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Array.fill\"</span></code> if <code class=\"code\">ofs</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">a</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "blit",
              "src:'a array -> src_pos:int -> dst:'a array -> dst_pos:int -> len:int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.blit&nbsp;v1&nbsp;o1&nbsp;v2&nbsp;o2&nbsp;len</code> copies <code class=\"code\">len</code> elements\n   from array <code class=\"code\">v1</code>, starting at element number <code class=\"code\">o1</code>, to array <code class=\"code\">v2</code>,\n   starting at element number <code class=\"code\">o2</code>. It works correctly even if\n   <code class=\"code\">v1</code> and <code class=\"code\">v2</code> are the same array, and the source and\n   destination chunks overlap.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Array.blit\"</span></code> if <code class=\"code\">o1</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">v1</code>, or if <code class=\"code\">o2</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">v2</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_list",
              "'a array -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.to_list&nbsp;a</code> returns the list of all the elements of <code class=\"code\">a</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_list",
              "'a list -> 'a array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.of_list&nbsp;l</code> returns a fresh array containing the elements\n   of <code class=\"code\">l</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "iter",
              "f:('a -> unit) -> 'a array -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.iter&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> in turn to all\n   the elements of <code class=\"code\">a</code>.  It is equivalent to\n   <code class=\"code\">f&nbsp;a.(0);&nbsp;f&nbsp;a.(1);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1);&nbsp;()</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "map",
              "f:('a -> 'b) -> 'a array -> 'b array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.map&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>,\n   and builds an array with the results returned by <code class=\"code\">f</code>:\n   <code class=\"code\">[|&nbsp;f&nbsp;a.(0);&nbsp;f&nbsp;a.(1);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;|]</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "iteri",
              "f:(int -> 'a -> unit) -> 'a array -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Array</span>.iter</code></a>, but the\n   function is applied to the index of the element as first argument,\n   and the element itself as second argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mapi",
              "f:(int -> 'a -> 'b) -> 'a array -> 'b array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Array</span>.map</code></a>, but the\n   function is applied to the index of the element as first argument,\n   and the element itself as second argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fold_left",
              "f:('a -> 'b -> 'a) -> init:'a -> 'b array -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_left&nbsp;f&nbsp;x&nbsp;a</code> computes\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;x&nbsp;a.(0))&nbsp;a.(1))&nbsp;...)&nbsp;a.(n-1)</code>,\n   where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fold_right",
              "f:('b -> 'a -> 'a) -> 'b array -> init:'a -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_right&nbsp;f&nbsp;a&nbsp;x</code> computes\n   <code class=\"code\">f&nbsp;a.(0)&nbsp;(f&nbsp;a.(1)&nbsp;(&nbsp;...&nbsp;(f&nbsp;a.(n-1)&nbsp;x)&nbsp;...))</code>,\n   where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators on two arrays" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "iter2",
              "f:('a -> 'b -> unit) -> 'a array -> 'b array -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.iter2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>\n   and <code class=\"code\">b</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the arrays are not the same size.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "map2",
              "f:('a -> 'b -> 'c) -> 'a array -> 'b array -> 'c array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.map2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>\n   and <code class=\"code\">b</code>, and builds an array with the results returned by <code class=\"code\">f</code>:\n   <code class=\"code\">[|&nbsp;f&nbsp;a.(0)&nbsp;b.(0);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;b.(<span class=\"constructor\">Array</span>.length&nbsp;b&nbsp;-&nbsp;1)|]</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the arrays are not the same size.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Array scanning" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "exists",
              "f:('a -> bool) -> 'a array -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.exists&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if at least one element of\n    the array satisfies the predicate <code class=\"code\">p</code>. That is, it returns\n    <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;...&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "for_all",
              "f:('a -> bool) -> 'a array -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.for_all&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if all elements of the array\n   satisfy the predicate <code class=\"code\">p</code>. That is, it returns\n   <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;...&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mem",
              "'a -> set:'a array -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;x&nbsp;a</code> is true if and only if <code class=\"code\">x</code> is equal\n   to an element of <code class=\"code\">a</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "memq",
              "'a -> set:'a array -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALmem\"><code class=\"code\"><span class=\"constructor\">Array</span>.mem</code></a>, but uses physical equality instead of structural\n   equality to compare list elements.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "create_float",
              "int -> float array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.create_float&nbsp;n</code> returns a fresh float array of length <code class=\"code\">n</code>,\n    with uninitialized data.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "make_float",
              "int -> float array",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><code class=\"code\"><span class=\"constructor\">Array</span>.make_float</code> is an alias for\n    <a href=\"Array.html#VALcreate_float\"><code class=\"code\"><span class=\"constructor\">Array</span>.create_float</code></a>.</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Sorting" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "sort",
              "cmp:('a -> 'a -> int) -> 'a array -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Sort an array in increasing order according to a comparison\n   function.  The comparison function must return 0 if its arguments\n   compare as equal, a positive integer if the first is greater,\n   and a negative integer if the first is smaller (see below for a\n   complete specification).  For example, <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a> is\n   a suitable comparison function, provided there are no floating-point\n   NaN values in the data.  After calling <code class=\"code\"><span class=\"constructor\">Array</span>.sort</code>, the\n   array is sorted in place in increasing order.\n   <code class=\"code\"><span class=\"constructor\">Array</span>.sort</code> is guaranteed to run in constant heap space\n   and (at most) logarithmic stack space.</p>\n\n<p>The current implementation uses Heap Sort.  It runs in constant\n   stack space.</p>\n\n<p>Specification of the comparison function:\n   Let <code class=\"code\">a</code> be the array and <code class=\"code\">cmp</code> the comparison function.  The following\n   must be true for all x, y, z in a :</p>\n<ul>\n<li>  <code class=\"code\">cmp&nbsp;x&nbsp;y</code> &gt; 0 if and only if <code class=\"code\">cmp&nbsp;y&nbsp;x</code> &lt; 0</li>\n<li>  if <code class=\"code\">cmp&nbsp;x&nbsp;y</code> &gt;= 0 and <code class=\"code\">cmp&nbsp;y&nbsp;z</code> &gt;= 0 then <code class=\"code\">cmp&nbsp;x&nbsp;z</code> &gt;= 0</li>\n</ul>\n<p>When <code class=\"code\"><span class=\"constructor\">Array</span>.sort</code> returns, <code class=\"code\">a</code> contains the same elements as before,\n   reordered in such a way that for all i and j valid indices of <code class=\"code\">a</code> :</p>\n<ul>\n<li>  <code class=\"code\">cmp&nbsp;a.(i)&nbsp;a.(j)</code> &gt;= 0 if and only if i &gt;= j</li>\n</ul>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "stable_sort",
              "cmp:('a -> 'a -> int) -> 'a array -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a>, but the sorting algorithm is stable (i.e.\n   elements that compare equal are kept in their original order) and\n   not guaranteed to run in constant heap space.</p>\n\n<p>The current implementation uses Merge Sort. It uses <code class=\"code\">n/2</code>\n   words of heap space, where <code class=\"code\">n</code> is the length of the array.\n   It is usually faster than the current implementation of <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fast_sort",
              "cmp:('a -> 'a -> int) -> 'a array -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a> or <a href=\"Array.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">Array</span>.stable_sort</code></a>, whichever is\n    faster on typical input.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "to_seq",
              "'a array -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the array, in increasing order</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_seqi",
              "'a array -> (int * 'a)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the array, in increasing order, yielding indices along elements</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_seq",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Create an array from the generator</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Bigarray",
    "module_info":
      "<p>Large, multi-dimensional, numerical arrays.</p><p>This module implements multi-dimensional arrays of integers and\n   floating-point numbers, thereafter referred to as 'big arrays',\n   to distinguish them from the standard OCaml arrays described in\n   <a href=\"Array.html\"><code class=\"code\"><span class=\"constructor\">Array</span></code></a>.</p><p>The implementation allows efficient sharing of large numerical\n   arrays between OCaml code and C or Fortran numerical libraries.</p><p>The main differences between 'big arrays' and standard OCaml\n   arrays are as follows:</p><ul>\n<li>Big arrays are not limited in size, unlike OCaml arrays.\n     (Normal float arrays are limited to 2,097,151 elements on a 32-bit\n     platform, and normal arrays of other types to 4,194,303 elements.)</li>\n<li>Big arrays are multi-dimensional.  Any number of dimensions\n     between 0 and 16 is supported.  In contrast, OCaml arrays\n     are mono-dimensional and require encoding multi-dimensional\n     arrays as arrays of arrays.</li>\n<li>Big arrays can only contain integers and floating-point numbers,\n     while OCaml arrays can contain arbitrary OCaml data types.</li>\n<li>Big arrays provide more space-efficient storage of\n     integer and floating-point elements than normal OCaml arrays, in\n     particular because they support 'small' types such as\n     single-precision floats and 8 and 16-bit integers, in addition to\n     the standard OCaml types of double-precision floats and 32 and\n     64-bit integers.</li>\n<li>The memory layout of big arrays is entirely compatible with that\n     of arrays in C and Fortran, allowing large arrays to be passed\n     back and forth between OCaml code and C / Fortran code with no\n     data copying at all.</li>\n<li>Big arrays support interesting high-level operations that normal\n     arrays do not provide efficiently, such as extracting sub-arrays\n     and 'slicing' a multi-dimensional array along certain dimensions,\n     all without any copying.</li>\n</ul><p>Users of this module are encouraged to do <code class=\"code\"><span class=\"keyword\">open</span>&nbsp;<span class=\"constructor\">Bigarray</span></code> in their\n   source, then refer to array types and operations via short dot\n   notation, e.g. <code class=\"code\"><span class=\"constructor\">Array1</span>.t</code> or <code class=\"code\"><span class=\"constructor\">Array2</span>.sub</code>.</p><p>Big arrays support all the OCaml ad-hoc polymorphic operations:</p><ul>\n<li>comparisons (<code class=\"code\">=</code>, <code class=\"code\">&lt;&gt;</code>, <code class=\"code\">&lt;=</code>, etc, as well as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>);</li>\n<li>hashing (module <code class=\"code\"><span class=\"constructor\">Hash</span></code>);</li>\n<li>and structured input-output (the functions from the\n     <a href=\"Marshal.html\"><code class=\"code\"><span class=\"constructor\">Marshal</span></code></a> module, as well as <a href=\"Pervasives.html#VALoutput_value\"><code class=\"code\">output_value</code></a>\n     and <a href=\"Pervasives.html#VALinput_value\"><code class=\"code\">input_value</code></a>).</li>\n</ul>",
    "sections": [
      {
        "section_name": [ "Some", "Element kinds" ],
        "section_info": [
          "Some",
          "<p>Big arrays can contain elements of the following kinds:</p><ul>\n<li>IEEE single precision (32 bits) floating-point numbers\n   (<a href=\"Bigarray.html#TYPEfloat32_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.float32_elt</code></a>),</li>\n<li>IEEE double precision (64 bits) floating-point numbers\n   (<a href=\"Bigarray.html#TYPEfloat64_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.float64_elt</code></a>),</li>\n<li>IEEE single precision (2 * 32 bits) floating-point complex numbers\n   (<a href=\"Bigarray.html#TYPEcomplex32_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.complex32_elt</code></a>),</li>\n<li>IEEE double precision (2 * 64 bits) floating-point complex numbers\n   (<a href=\"Bigarray.html#TYPEcomplex64_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.complex64_elt</code></a>),</li>\n<li>8-bit integers (signed or unsigned)\n   (<a href=\"Bigarray.html#TYPEint8_signed_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.int8_signed_elt</code></a> or <a href=\"Bigarray.html#TYPEint8_unsigned_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.int8_unsigned_elt</code></a>),</li>\n<li>16-bit integers (signed or unsigned)\n   (<a href=\"Bigarray.html#TYPEint16_signed_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.int16_signed_elt</code></a> or <a href=\"Bigarray.html#TYPEint16_unsigned_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.int16_unsigned_elt</code></a>),</li>\n<li>OCaml integers (signed, 31 bits on 32-bit architectures,\n   63 bits on 64-bit architectures) (<a href=\"Bigarray.html#TYPEint_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.int_elt</code></a>),</li>\n<li>32-bit signed integers (<a href=\"Bigarray.html#TYPEint32_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.int32_elt</code></a>),</li>\n<li>64-bit signed integers (<a href=\"Bigarray.html#TYPEint64_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.int64_elt</code></a>),</li>\n<li>platform-native signed integers (32 bits on 32-bit architectures,\n   64 bits on 64-bit architectures) (<a href=\"Bigarray.html#TYPEnativeint_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.nativeint_elt</code></a>).</li>\n</ul><p>Each element kind is represented at the type level by one of the\n   <code class=\"code\">*_elt</code> types defined below (defined with a single constructor instead\n   of abstract types for technical injectivity reasons).</p>"
        ],
        "elements": [
          [
            "Typevariant",
            [
              "float32_elt",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat32_elt.Float32_elt\"><span class=\"constructor\">Float32_elt</span></span></code></td>\n\n</tr></tbody>"
              ],
              "None"
            ]
          ],
          [
            "Typevariant",
            [
              "float64_elt",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat64_elt.Float64_elt\"><span class=\"constructor\">Float64_elt</span></span></code></td>\n\n</tr></tbody>"
              ],
              "None"
            ]
          ],
          [
            "Typevariant",
            [
              "int8_signed_elt",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint8_signed_elt.Int8_signed_elt\"><span class=\"constructor\">Int8_signed_elt</span></span></code></td>\n\n</tr></tbody>"
              ],
              "None"
            ]
          ],
          [
            "Typevariant",
            [
              "int8_unsigned_elt",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint8_unsigned_elt.Int8_unsigned_elt\"><span class=\"constructor\">Int8_unsigned_elt</span></span></code></td>\n\n</tr></tbody>"
              ],
              "None"
            ]
          ],
          [
            "Typevariant",
            [
              "int16_signed_elt",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint16_signed_elt.Int16_signed_elt\"><span class=\"constructor\">Int16_signed_elt</span></span></code></td>\n\n</tr></tbody>"
              ],
              "None"
            ]
          ],
          [
            "Typevariant",
            [
              "int16_unsigned_elt",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint16_unsigned_elt.Int16_unsigned_elt\"><span class=\"constructor\">Int16_unsigned_elt</span></span></code></td>\n\n</tr></tbody>"
              ],
              "None"
            ]
          ],
          [
            "Typevariant",
            [
              "int32_elt",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint32_elt.Int32_elt\"><span class=\"constructor\">Int32_elt</span></span></code></td>\n\n</tr></tbody>"
              ],
              "None"
            ]
          ],
          [
            "Typevariant",
            [
              "int64_elt",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint64_elt.Int64_elt\"><span class=\"constructor\">Int64_elt</span></span></code></td>\n\n</tr></tbody>"
              ],
              "None"
            ]
          ],
          [
            "Typevariant",
            [
              "int_elt",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint_elt.Int_elt\"><span class=\"constructor\">Int_elt</span></span></code></td>\n\n</tr></tbody>"
              ],
              "None"
            ]
          ],
          [
            "Typevariant",
            [
              "nativeint_elt",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTnativeint_elt.Nativeint_elt\"><span class=\"constructor\">Nativeint_elt</span></span></code></td>\n\n</tr></tbody>"
              ],
              "None"
            ]
          ],
          [
            "Typevariant",
            [
              "complex32_elt",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcomplex32_elt.Complex32_elt\"><span class=\"constructor\">Complex32_elt</span></span></code></td>\n\n</tr></tbody>"
              ],
              "None"
            ]
          ],
          [
            "Typevariant",
            [
              "complex64_elt",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcomplex64_elt.Complex64_elt\"><span class=\"constructor\">Complex64_elt</span></span></code></td>\n\n</tr></tbody>"
              ],
              "None"
            ]
          ],
          [
            "Type",
            [
              "('a, 'b)",
              "=",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>To each element kind is associated an OCaml type, which is\n   the type of OCaml values that can be stored in the big array\n   or read back from it.  This type is not necessarily the same\n   as the type of the array elements proper: for instance,\n   a big array whose elements are of kind <code class=\"code\">float32_elt</code> contains\n   32-bit single precision floats, but reading or writing one of\n   its elements from OCaml uses the OCaml type <code class=\"code\">float</code>, which is\n   64-bit double precision floats.</p>\n\n<p>The GADT type <code class=\"code\">(<span class=\"keywordsign\">'</span>a,&nbsp;<span class=\"keywordsign\">'</span>b)&nbsp;kind</code> captures this association\n   of an OCaml type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code> for values read or written in the big array,\n   and of an element kind <code class=\"code\"><span class=\"keywordsign\">'</span>b</code> which represents the actual contents\n   of the big array. Its constructors list all possible associations\n   of OCaml types with element kinds, and are re-exported below for\n   backward-compatibility reasons.</p>\n\n<p>Using a generalized algebraic datatype (GADT) here allows to write\n   well-typed polymorphic functions whose return type depend on the\n   argument type, such as:</p>\n\n<pre class=\"codepre\"><code class=\"code\">  <span class=\"keyword\">let</span> zero : <span class=\"keyword\">type</span> a b. (a, b) kind <span class=\"keywordsign\">-&gt;</span> a = <span class=\"keyword\">function</span>\n    <span class=\"keywordsign\">|</span> <span class=\"constructor\">Float32</span> <span class=\"keywordsign\">-&gt;</span> 0.0 <span class=\"keywordsign\">|</span> <span class=\"constructor\">Complex32</span> <span class=\"keywordsign\">-&gt;</span> <span class=\"constructor\">Complex</span>.zero\n    <span class=\"keywordsign\">|</span> <span class=\"constructor\">Float64</span> <span class=\"keywordsign\">-&gt;</span> 0.0 <span class=\"keywordsign\">|</span> <span class=\"constructor\">Complex64</span> <span class=\"keywordsign\">-&gt;</span> <span class=\"constructor\">Complex</span>.zero\n    <span class=\"keywordsign\">|</span> <span class=\"constructor\">Int8_signed</span> <span class=\"keywordsign\">-&gt;</span> 0 <span class=\"keywordsign\">|</span> <span class=\"constructor\">Int8_unsigned</span> <span class=\"keywordsign\">-&gt;</span> 0\n    <span class=\"keywordsign\">|</span> <span class=\"constructor\">Int16_signed</span> <span class=\"keywordsign\">-&gt;</span> 0 <span class=\"keywordsign\">|</span> <span class=\"constructor\">Int16_unsigned</span> <span class=\"keywordsign\">-&gt;</span> 0\n    <span class=\"keywordsign\">|</span> <span class=\"constructor\">Int32</span> <span class=\"keywordsign\">-&gt;</span> 0l <span class=\"keywordsign\">|</span> <span class=\"constructor\">Int64</span> <span class=\"keywordsign\">-&gt;</span> 0<span class=\"constructor\">L</span>\n    <span class=\"keywordsign\">|</span> <span class=\"constructor\">Int</span> <span class=\"keywordsign\">-&gt;</span> 0 <span class=\"keywordsign\">|</span> <span class=\"constructor\">Nativeint</span> <span class=\"keywordsign\">-&gt;</span> 0n\n    <span class=\"keywordsign\">|</span> <span class=\"constructor\">Char</span> <span class=\"keywordsign\">-&gt;</span> <span class=\"string\">'\\000'</span>\n</code></pre></div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "float32",
              "(float,",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "float64",
              "(float,",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "complex32",
              "(",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "complex64",
              "(",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "int8_signed",
              "(int,",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "int8_unsigned",
              "(int,",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "int16_signed",
              "(int,",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "int16_unsigned",
              "(int,",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "int",
              "(int,",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "int32",
              "(int32,",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "int64",
              "(int64,",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "nativeint",
              "(nativeint,",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "char",
              "(char,",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>As shown by the types of the values above,\n   big arrays of kind <code class=\"code\">float32_elt</code> and <code class=\"code\">float64_elt</code> are\n   accessed using the OCaml type <code class=\"code\">float</code>.  Big arrays of complex kinds\n   <code class=\"code\">complex32_elt</code>, <code class=\"code\">complex64_elt</code> are accessed with the OCaml type\n   <a href=\"Complex.html#TYPEt\"><code class=\"code\"><span class=\"constructor\">Complex</span>.t</code></a>. Big arrays of\n   integer kinds are accessed using the smallest OCaml integer\n   type large enough to represent the array elements:\n   <code class=\"code\">int</code> for 8- and 16-bit integer bigarrays, as well as OCaml-integer\n   bigarrays; <code class=\"code\">int32</code> for 32-bit integer bigarrays; <code class=\"code\">int64</code>\n   for 64-bit integer bigarrays; and <code class=\"code\">nativeint</code> for\n   platform-native integer bigarrays.  Finally, big arrays of\n   kind <code class=\"code\">int8_unsigned_elt</code> can also be accessed as arrays of\n   characters instead of arrays of small integers, by using\n   the kind value <code class=\"code\">char</code> instead of <code class=\"code\">int8_unsigned</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "kind_size_in_bytes",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">kind_size_in_bytes&nbsp;k</code> is the number of bytes used to store\n   an element of type <code class=\"code\">k</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Array layouts" ],
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "c_layout",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTc_layout.C_layout_typ\"><span class=\"constructor\">C_layout_typ</span></span></code></td>\n\n</tr></tbody>"
              ],
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALfortran_layout\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.fortran_layout</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Typevariant",
            [
              "fortran_layout",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfortran_layout.Fortran_layout_typ\"><span class=\"constructor\">Fortran_layout_typ</span></span></code></td>\n\n</tr></tbody>"
              ],
              [
                "Some",
                "<div class=\"info-desc\">\n<p>To facilitate interoperability with existing C and Fortran code,\n   this library supports two different memory layouts for big arrays,\n   one compatible with the C conventions,\n   the other compatible with the Fortran conventions.</p>\n\n<p>In the C-style layout, array indices start at 0, and\n   multi-dimensional arrays are laid out in row-major format.\n   That is, for a two-dimensional array, all elements of\n   row 0 are contiguous in memory, followed by all elements of\n   row 1, etc.  In other terms, the array elements at <code class=\"code\">(x,y)</code>\n   and <code class=\"code\">(x,&nbsp;y+1)</code> are adjacent in memory.</p>\n\n<p>In the Fortran-style layout, array indices start at 1, and\n   multi-dimensional arrays are laid out in column-major format.\n   That is, for a two-dimensional array, all elements of\n   column 0 are contiguous in memory, followed by all elements of\n   column 1, etc.  In other terms, the array elements at <code class=\"code\">(x,y)</code>\n   and <code class=\"code\">(x+1,&nbsp;y)</code> are adjacent in memory.</p>\n\n<p>Each layout style is identified at the type level by the\n   phantom types <a href=\"Bigarray.html#VALc_layout\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.c_layout</code></a> and <a href=\"Bigarray.html#VALfortran_layout\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.fortran_layout</code></a>\n   respectively.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": [
          {
            "section_name": [ "Some", "Supported layouts" ],
            "section_info": [
              "Some",
              "<p>The GADT type <code class=\"code\"><span class=\"keywordsign\">'</span>a&nbsp;layout</code> represents one of the two supported\n   memory layouts: C-style or Fortran-style. Its constructors are\n   re-exported as values below for backward-compatibility reasons.</p>"
            ],
            "elements": [
              [ "Type", [ "'a", "=", "None" ] ],
              [ "Function", [ "c_layout", "c_layout", "None" ] ],
              [ "Function", [ "fortran_layout", "fortran_layout", "None" ] ]
            ],
            "sub_sections": []
          }
        ]
      }
    ]
  },
  {
    "module_name": "Buffer",
    "module_info":
      "<p>Extensible buffers.</p><p>This module implements buffers that automatically expand\n   as necessary.  It provides accumulative concatenation of strings\n   in quasi-linear time (instead of quadratic time when strings are\n   concatenated pairwise).</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "t",
              "None",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The abstract type of buffers.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "create",
              "int ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">create&nbsp;n</code> returns a fresh buffer, initially empty.\n   The <code class=\"code\">n</code> parameter is the initial size of the internal byte sequence\n   that holds the buffer contents. That byte sequence is automatically\n   reallocated when more than <code class=\"code\">n</code> characters are stored in the buffer,\n   but shrinks back to <code class=\"code\">n</code> characters when <code class=\"code\">reset</code> is called.\n   For best performance, <code class=\"code\">n</code> should be of the same order of magnitude\n   as the number of characters that are expected to be stored in\n   the buffer (for instance, 80 for a buffer that holds one output\n   line).  Nothing bad will happen if the buffer grows beyond that\n   limit, however. In doubt, take <code class=\"code\">n&nbsp;=&nbsp;16</code> for instance.\n   If <code class=\"code\">n</code> is not between 1 and <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>, it will\n   be clipped to that interval.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "contents",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the current contents of the buffer.\n    The buffer itself is unchanged.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_bytes",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the current contents of the buffer.\n    The buffer itself is unchanged.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sub",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Buffer</span>.sub&nbsp;b&nbsp;off&nbsp;len</code> returns a copy of <code class=\"code\">len</code> bytes from the\n    current contents of the buffer <code class=\"code\">b</code>, starting at offset <code class=\"code\">off</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">srcoff</code> and <code class=\"code\">len</code> do not designate a valid\n    range of <code class=\"code\">b</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "blit",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Buffer</span>.blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> characters from\n   the current contents of the buffer <code class=\"code\">src</code>, starting at offset <code class=\"code\">srcoff</code>\n   to <code class=\"code\">dst</code>, starting at character <code class=\"code\">dstoff</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">srcoff</code> and <code class=\"code\">len</code> do not designate a valid\n   range of <code class=\"code\">src</code>, or if <code class=\"code\">dstoff</code> and <code class=\"code\">len</code> do not designate a valid\n   range of <code class=\"code\">dst</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.2</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "nth",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Get the n-th character of the buffer. Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if\n    index out of bounds</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "length",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the number of characters currently contained in the buffer.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "clear",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Empty the buffer.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "reset",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Empty the buffer and deallocate the internal byte sequence holding the\n   buffer contents, replacing it with the initial internal byte sequence\n   of length <code class=\"code\">n</code> that was allocated by <a href=\"Buffer.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Buffer</span>.create</code></a> <code class=\"code\">n</code>.\n   For long-lived buffers that may have grown a lot, <code class=\"code\">reset</code> allows\n   faster reclamation of the space used by the buffer.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add_char",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">add_char&nbsp;b&nbsp;c</code> appends the character <code class=\"code\">c</code> at the end of buffer <code class=\"code\">b</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add_utf_8_uchar",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">add_utf_8_uchar&nbsp;b&nbsp;u</code> appends the <a href=\"https://tools.ietf.org/html/rfc3629\">\n    UTF-8</a> encoding of <code class=\"code\">u</code> at the end of buffer <code class=\"code\">b</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add_utf_16le_uchar",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">add_utf_16le_uchar&nbsp;b&nbsp;u</code> appends the\n    <a href=\"https://tools.ietf.org/html/rfc2781\">UTF-16LE</a> encoding of <code class=\"code\">u</code>\n    at the end of buffer <code class=\"code\">b</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add_utf_16be_uchar",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">add_utf_16be_uchar&nbsp;b&nbsp;u</code> appends the\n    <a href=\"https://tools.ietf.org/html/rfc2781\">UTF-16BE</a> encoding of <code class=\"code\">u</code>\n    at the end of buffer <code class=\"code\">b</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add_string",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">add_string&nbsp;b&nbsp;s</code> appends the string <code class=\"code\">s</code> at the end of buffer <code class=\"code\">b</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add_bytes",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">add_bytes&nbsp;b&nbsp;s</code> appends the byte sequence <code class=\"code\">s</code> at the end of buffer <code class=\"code\">b</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add_substring",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">add_substring&nbsp;b&nbsp;s&nbsp;ofs&nbsp;len</code> takes <code class=\"code\">len</code> characters from offset\n   <code class=\"code\">ofs</code> in string <code class=\"code\">s</code> and appends them at the end of buffer <code class=\"code\">b</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add_subbytes",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">add_subbytes&nbsp;b&nbsp;s&nbsp;ofs&nbsp;len</code> takes <code class=\"code\">len</code> characters from offset\n    <code class=\"code\">ofs</code> in byte sequence <code class=\"code\">s</code> and appends them at the end of buffer <code class=\"code\">b</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add_substitute",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">add_substitute&nbsp;b&nbsp;f&nbsp;s</code> appends the string pattern <code class=\"code\">s</code> at the end\n   of buffer <code class=\"code\">b</code> with substitution.\n   The substitution process looks for variables into\n   the pattern and substitutes each variable name by its value, as\n   obtained by applying the mapping <code class=\"code\">f</code> to the variable name. Inside the\n   string pattern, a variable name immediately follows a non-escaped\n   <code class=\"code\">$</code> character and is one of the following:</p>\n<ul>\n<li>a non empty sequence of alphanumeric or <code class=\"code\">_</code> characters,</li>\n<li>an arbitrary sequence of characters enclosed by a pair of\n   matching parentheses or curly brackets.\n   An escaped <code class=\"code\">$</code> character is a <code class=\"code\">$</code> that immediately follows a backslash\n   character; it then stands for a plain <code class=\"code\">$</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the closing character of a parenthesized variable\n   cannot be found.</li>\n</ul>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add_buffer",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">add_buffer&nbsp;b1&nbsp;b2</code> appends the current contents of buffer <code class=\"code\">b2</code>\n   at the end of buffer <code class=\"code\">b1</code>.  <code class=\"code\">b2</code> is not modified.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add_channel",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">add_channel&nbsp;b&nbsp;ic&nbsp;n</code> reads at most <code class=\"code\">n</code> characters from the\n   input channel <code class=\"code\">ic</code> and stores them at the end of buffer <code class=\"code\">b</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">End_of_file</span></code> if the channel contains fewer than <code class=\"code\">n</code>\n   characters. In this case, the characters are still added to\n   the buffer, so as to avoid loss of data.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "output_buffer",
              "out_channel",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">output_buffer&nbsp;oc&nbsp;b</code> writes the current contents of buffer <code class=\"code\">b</code>\n   on the output channel <code class=\"code\">oc</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "truncate",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">truncate&nbsp;b&nbsp;len</code> truncates the length of <code class=\"code\">b</code> to <code class=\"code\">len</code>\n  Note: the internal byte sequence is not shortened.\n  Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">len&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">len&nbsp;&gt;&nbsp;length&nbsp;b</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "to_seq",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the buffer, in increasing order.\n    Modification of the buffer during iteration is undefined behavior.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_seqi",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the buffer, in increasing order, yielding indices along chars.\n    Modification of the buffer during iteration is undefined behavior.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add_seq",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Add chars to the buffer</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_seq",
              "char",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Create a buffer from the generator</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Bytes",
    "module_info":
      "<p>Byte sequence operations.</p><p>A byte sequence is a mutable data structure that contains a\n   fixed-length sequence of bytes. Each byte can be indexed in\n   constant time for reading or writing.</p><p>Given a byte sequence <code class=\"code\">s</code> of length <code class=\"code\">l</code>, we can access each of the\n   <code class=\"code\">l</code> bytes of <code class=\"code\">s</code> via its index in the sequence. Indexes start at\n   <code class=\"code\">0</code>, and we will call an index valid in <code class=\"code\">s</code> if it falls within the\n   range <code class=\"code\">[0...l-1]</code> (inclusive). A position is the point between two\n   bytes or at the beginning or end of the sequence.  We call a\n   position valid in <code class=\"code\">s</code> if it falls within the range <code class=\"code\">[0...l]</code>\n   (inclusive). Note that the byte at index <code class=\"code\">n</code> is between positions\n   <code class=\"code\">n</code> and <code class=\"code\">n+1</code>.</p><p>Two parameters <code class=\"code\">start</code> and <code class=\"code\">len</code> are said to designate a valid\n   range of <code class=\"code\">s</code> if <code class=\"code\">len&nbsp;&gt;=&nbsp;0</code> and <code class=\"code\">start</code> and <code class=\"code\">start+len</code> are valid\n   positions in <code class=\"code\">s</code>.</p><p>Byte sequences can be modified in place, for instance via the <code class=\"code\">set</code>\n   and <code class=\"code\">blit</code> functions described below.  See also strings (module\n   <a href=\"String.html\"><code class=\"code\"><span class=\"constructor\">String</span></code></a>), which are almost the same data structure, but cannot be\n   modified in place.</p><p>Bytes are represented by the OCaml type <code class=\"code\">char</code>.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "length",
              "bytes -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the length (number of bytes) of the argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "get",
              "bytes -> int -> char",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">get&nbsp;s&nbsp;n</code> returns the byte at index <code class=\"code\">n</code> in argument <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is not a valid index in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "set",
              "bytes -> int -> char -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">set&nbsp;s&nbsp;n&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing the byte at index <code class=\"code\">n</code>\n    with <code class=\"code\">c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is not a valid index in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "create",
              "int -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">create&nbsp;n</code> returns a new byte sequence of length <code class=\"code\">n</code>. The\n    sequence is uninitialized and contains arbitrary bytes.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "make",
              "int -> char -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">make&nbsp;n&nbsp;c</code> returns a new byte sequence of length <code class=\"code\">n</code>, filled with\n    the byte <code class=\"code\">c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "init",
              "int -> (int -> char) -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Bytes</span>.init&nbsp;n&nbsp;f</code> returns a fresh byte sequence of length <code class=\"code\">n</code>, with\n    character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code> (in increasing\n    index order).</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "empty",
              "bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>A byte sequence of size 0.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "copy",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a new byte sequence that contains the same bytes as the\n    argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_string",
              "string -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a new byte sequence that contains the same bytes as the\n    given string.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_string",
              "bytes -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a new string that contains the same bytes as the given byte\n    sequence.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sub",
              "bytes -> int -> int -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">sub&nbsp;s&nbsp;start&nbsp;len</code> returns a new byte sequence of length <code class=\"code\">len</code>,\n    containing the subsequence of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code>\n    and has length <code class=\"code\">len</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not designate a\n    valid range of <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sub_string",
              "bytes -> int -> int -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">sub</code> but return a string instead of a byte sequence.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "extend",
              "bytes -> int -> int -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">extend&nbsp;s&nbsp;left&nbsp;right</code> returns a new byte sequence that contains\n    the bytes of <code class=\"code\">s</code>, with <code class=\"code\">left</code> uninitialized bytes prepended and\n    <code class=\"code\">right</code> uninitialized bytes appended to it. If <code class=\"code\">left</code> or <code class=\"code\">right</code>\n    is negative, then bytes are removed (instead of appended) from\n    the corresponding side of <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result length is negative or\n    longer than <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fill",
              "bytes -> int -> int -> char -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing <code class=\"code\">len</code>\n    characters with <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not designate a\n    valid range of <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "blit",
              "bytes -> int -> bytes -> int -> int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from sequence\n    <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to sequence <code class=\"code\">dst</code>, starting at\n    index <code class=\"code\">dstoff</code>. It works correctly even if <code class=\"code\">src</code> and <code class=\"code\">dst</code> are the\n    same byte sequence, and the source and destination intervals\n    overlap.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">srcoff</code> and <code class=\"code\">len</code> do not\n    designate a valid range of <code class=\"code\">src</code>, or if <code class=\"code\">dstoff</code> and <code class=\"code\">len</code>\n    do not designate a valid range of <code class=\"code\">dst</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "blit_string",
              "string -> int -> bytes -> int -> int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from string\n    <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to byte sequence <code class=\"code\">dst</code>,\n    starting at index <code class=\"code\">dstoff</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">srcoff</code> and <code class=\"code\">len</code> do not\n    designate a valid range of <code class=\"code\">src</code>, or if <code class=\"code\">dstoff</code> and <code class=\"code\">len</code>\n    do not designate a valid range of <code class=\"code\">dst</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "concat",
              "bytes -> bytes list -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">concat&nbsp;sep&nbsp;sl</code> concatenates the list of byte sequences <code class=\"code\">sl</code>,\n    inserting the separator byte sequence <code class=\"code\">sep</code> between each, and\n    returns the result as a new byte sequence.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result is longer than\n    <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "cat",
              "bytes -> bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">cat&nbsp;s1&nbsp;s2</code> concatenates <code class=\"code\">s1</code> and <code class=\"code\">s2</code> and returns the result\n     as new byte sequence.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result is longer than\n    <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "iter",
              "(char -> unit) -> bytes -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code>.\n    It is equivalent to <code class=\"code\">f&nbsp;(get&nbsp;s&nbsp;0);&nbsp;f&nbsp;(get&nbsp;s&nbsp;1);&nbsp;...;&nbsp;f&nbsp;(get&nbsp;s<br>\n&nbsp;&nbsp;&nbsp;&nbsp;(length&nbsp;s&nbsp;-&nbsp;1));&nbsp;()</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "iteri",
              "(int -> char -> unit) -> bytes -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Bytes.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.iter</code></a>, but the function is applied to the index of\n    the byte as first argument and the byte itself as second\n    argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "map",
              "(char -> char) -> bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code>\n    (in increasing index order) and stores the resulting bytes in\n    a new sequence that is returned as the result.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mapi",
              "(int -> char -> char) -> bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its\n    index (in increasing index order) and stores the resulting bytes\n    in a new sequence that is returned as the result.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "trim",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, without leading and trailing\n    whitespace. The bytes regarded as whitespace are the ASCII\n    characters <code class=\"code\"><span class=\"string\">'&nbsp;'</span></code>, <code class=\"code\"><span class=\"string\">'\\012'</span></code>, <code class=\"code\"><span class=\"string\">'\\n'</span></code>, <code class=\"code\"><span class=\"string\">'\\r'</span></code>, and <code class=\"code\"><span class=\"string\">'\\t'</span></code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "escaped",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with special characters represented\n    by escape sequences, following the lexical conventions of OCaml.\n    All characters outside the ASCII printable range (32..126) are\n    escaped, as well as backslash and double-quote.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result is longer than\n    <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "index",
              "bytes -> char -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">index&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "index_opt",
              "bytes -> char -> int option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">index_opt&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rindex",
              "bytes -> char -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">rindex&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rindex_opt",
              "bytes -> char -> int option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "index_from",
              "bytes -> int -> char -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the first occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.  <code class=\"code\"><span class=\"constructor\">Bytes</span>.index&nbsp;s&nbsp;c</code> is\n    equivalent to <code class=\"code\"><span class=\"constructor\">Bytes</span>.index_from&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.\n    Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "index_from_opt",
              "bytes -> int -> char -> int option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">index_from&nbsp;_opts&nbsp;i&nbsp;c</code> returns the index of the first occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.\n    <code class=\"code\"><span class=\"constructor\">Bytes</span>.index_opt&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">Bytes</span>.index_from_opt&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rindex_from",
              "bytes -> int -> char -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.  <code class=\"code\">rindex&nbsp;s&nbsp;c</code> is equivalent\n    to <code class=\"code\">rindex_from&nbsp;s&nbsp;(<span class=\"constructor\">Bytes</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.\n    Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rindex_from_opt",
              "bytes -> int -> char -> int option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence\n    of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not\n    occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.  <code class=\"code\">rindex_opt&nbsp;s&nbsp;c</code> is equivalent to\n    <code class=\"code\">rindex_from&nbsp;s&nbsp;(<span class=\"constructor\">Bytes</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "contains",
              "bytes -> char -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">contains&nbsp;s&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "contains_from",
              "bytes -> int -> char -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> after\n    position <code class=\"code\">start</code>.  <code class=\"code\">contains&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\">contains_from<br>\n&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rcontains_from",
              "bytes -> int -> char -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> before\n    position <code class=\"code\">stop+1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">stop&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">stop+1</code> is not a valid\n    position in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uppercase",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lowercase",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "capitalize",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uncapitalize",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uppercase_ascii",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lowercase_ascii",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "capitalize_ascii",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uncapitalize_ascii",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Type",
            [
              "t",
              "bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>An alias for the type of byte sequences.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "compare",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The comparison function for byte sequences, with the same\n    specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>,\n    this function <code class=\"code\">compare</code> allows the module <code class=\"code\"><span class=\"constructor\">Bytes</span></code> to be passed as\n    argument to the functors <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "equal",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The equality function for byte sequences.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "BytesLabels",
    "module_info": "<p>Byte sequence operations.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "length",
              "bytes -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the length (number of bytes) of the argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "get",
              "bytes -> int -> char",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">get&nbsp;s&nbsp;n</code> returns the byte at index <code class=\"code\">n</code> in argument <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is not a valid index in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "set",
              "bytes -> int -> char -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">set&nbsp;s&nbsp;n&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing the byte at index <code class=\"code\">n</code>\n    with <code class=\"code\">c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is not a valid index in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "create",
              "int -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">create&nbsp;n</code> returns a new byte sequence of length <code class=\"code\">n</code>. The\n    sequence is uninitialized and contains arbitrary bytes.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "make",
              "int -> char -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">make&nbsp;n&nbsp;c</code> returns a new byte sequence of length <code class=\"code\">n</code>, filled with\n    the byte <code class=\"code\">c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "init",
              "int -> f:(int -> char) -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">init&nbsp;n&nbsp;f</code> returns a fresh byte sequence of length <code class=\"code\">n</code>,\n    with character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "empty",
              "bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>A byte sequence of size 0.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "copy",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a new byte sequence that contains the same bytes as the\n    argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_string",
              "string -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a new byte sequence that contains the same bytes as the\n    given string.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_string",
              "bytes -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a new string that contains the same bytes as the given byte\n    sequence.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sub",
              "bytes -> pos:int -> len:int -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">sub&nbsp;s&nbsp;start&nbsp;len</code> returns a new byte sequence of length <code class=\"code\">len</code>,\n    containing the subsequence of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code>\n    and has length <code class=\"code\">len</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not designate a\n    valid range of <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sub_string",
              "bytes -> pos:int -> len:int -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">sub</code> but return a string instead of a byte sequence.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "extend",
              "bytes -> left:int -> right:int -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">extend&nbsp;s&nbsp;left&nbsp;right</code> returns a new byte sequence that contains\n    the bytes of <code class=\"code\">s</code>, with <code class=\"code\">left</code> uninitialized bytes prepended and\n    <code class=\"code\">right</code> uninitialized bytes appended to it. If <code class=\"code\">left</code> or <code class=\"code\">right</code>\n    is negative, then bytes are removed (instead of appended) from\n    the corresponding side of <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result length is negative or\n    longer than <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fill",
              "bytes -> pos:int -> len:int -> char -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing <code class=\"code\">len</code>\n    characters with <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not designate a\n    valid range of <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "blit",
              "src:bytes -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from sequence\n    <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to sequence <code class=\"code\">dst</code>, starting at\n    index <code class=\"code\">dstoff</code>. It works correctly even if <code class=\"code\">src</code> and <code class=\"code\">dst</code> are the\n    same byte sequence, and the source and destination intervals\n    overlap.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">srcoff</code> and <code class=\"code\">len</code> do not\n    designate a valid range of <code class=\"code\">src</code>, or if <code class=\"code\">dstoff</code> and <code class=\"code\">len</code>\n    do not designate a valid range of <code class=\"code\">dst</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "blit_string",
              "src:string -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from string\n    <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to byte sequence <code class=\"code\">dst</code>,\n    starting at index <code class=\"code\">dstoff</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">srcoff</code> and <code class=\"code\">len</code> do not\n    designate a valid range of <code class=\"code\">src</code>, or if <code class=\"code\">dstoff</code> and <code class=\"code\">len</code>\n    do not designate a valid range of <code class=\"code\">dst</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "concat",
              "sep:bytes -> bytes list -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">concat&nbsp;sep&nbsp;sl</code> concatenates the list of byte sequences <code class=\"code\">sl</code>,\n    inserting the separator byte sequence <code class=\"code\">sep</code> between each, and\n    returns the result as a new byte sequence.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "cat",
              "bytes -> bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">cat&nbsp;s1&nbsp;s2</code> concatenates <code class=\"code\">s1</code> and <code class=\"code\">s2</code> and returns the result\n     as new byte sequence.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result is longer than\n    <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "iter",
              "f:(char -> unit) -> bytes -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code>.\n    It is equivalent to <code class=\"code\">f&nbsp;(get&nbsp;s&nbsp;0);&nbsp;f&nbsp;(get&nbsp;s&nbsp;1);&nbsp;...;&nbsp;f&nbsp;(get&nbsp;s<br>\n&nbsp;&nbsp;&nbsp;&nbsp;(length&nbsp;s&nbsp;-&nbsp;1));&nbsp;()</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "iteri",
              "f:(int -> char -> unit) -> bytes -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Bytes.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.iter</code></a>, but the function is applied to the index of\n    the byte as first argument and the byte itself as second\n    argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "map",
              "f:(char -> char) -> bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code> and\n    stores the resulting bytes in a new sequence that is returned as\n    the result.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mapi",
              "f:(int -> char -> char) -> bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its\n    index (in increasing index order) and stores the resulting bytes\n    in a new sequence that is returned as the result.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "trim",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, without leading and trailing\n    whitespace. The bytes regarded as whitespace are the ASCII\n    characters <code class=\"code\"><span class=\"string\">'&nbsp;'</span></code>, <code class=\"code\"><span class=\"string\">'\\012'</span></code>, <code class=\"code\"><span class=\"string\">'\\n'</span></code>, <code class=\"code\"><span class=\"string\">'\\r'</span></code>, and <code class=\"code\"><span class=\"string\">'\\t'</span></code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "escaped",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with special characters represented\n    by escape sequences, following the lexical conventions of OCaml.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "index",
              "bytes -> char -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">index&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "index_opt",
              "bytes -> char -> int option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">index_opt&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rindex",
              "bytes -> char -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">rindex&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rindex_opt",
              "bytes -> char -> int option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "index_from",
              "bytes -> int -> char -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the first occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.  <code class=\"code\"><span class=\"constructor\">Bytes</span>.index&nbsp;s&nbsp;c</code> is\n    equivalent to <code class=\"code\"><span class=\"constructor\">Bytes</span>.index_from&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.\n    Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "index_from_opt",
              "bytes -> int -> char -> int option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">index_from&nbsp;_opts&nbsp;i&nbsp;c</code> returns the index of the first occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.\n    <code class=\"code\"><span class=\"constructor\">Bytes</span>.index_opt&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">Bytes</span>.index_from_opt&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rindex_from",
              "bytes -> int -> char -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.  <code class=\"code\">rindex&nbsp;s&nbsp;c</code> is equivalent\n    to <code class=\"code\">rindex_from&nbsp;s&nbsp;(<span class=\"constructor\">Bytes</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.\n    Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rindex_from_opt",
              "bytes -> int -> char -> int option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence\n    of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not\n    occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.  <code class=\"code\">rindex_opt&nbsp;s&nbsp;c</code> is equivalent to\n    <code class=\"code\">rindex_from&nbsp;s&nbsp;(<span class=\"constructor\">Bytes</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "contains",
              "bytes -> char -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">contains&nbsp;s&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "contains_from",
              "bytes -> int -> char -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> after\n    position <code class=\"code\">start</code>.  <code class=\"code\">contains&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\">contains_from<br>\n&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rcontains_from",
              "bytes -> int -> char -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> before\n    position <code class=\"code\">stop+1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">stop&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">stop+1</code> is not a valid\n    position in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uppercase",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lowercase",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "capitalize",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uncapitalize",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uppercase_ascii",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lowercase_ascii",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "capitalize_ascii",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uncapitalize_ascii",
              "bytes -> bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Type",
            [
              "t",
              "bytes",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>An alias for the type of byte sequences.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "compare",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The comparison function for byte sequences, with the same\n    specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>,\n    this function <code class=\"code\">compare</code> allows the module <code class=\"code\"><span class=\"constructor\">Bytes</span></code> to be passed as\n    argument to the functors <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "equal",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The equality function for byte sequences.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "to_seq",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the string, in increasing index order. Modifications of the\n    string during iteration will be reflected in the iterator.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_seqi",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the string, in increasing order, yielding indices along chars</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_seq",
              "char",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Create a string from the generator</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Callback",
    "module_info":
      "<p>Registering OCaml values with the C runtime.</p><p>This module allows OCaml values to be registered with the C runtime\n   under a symbolic name, so that C code can later call back registered\n   OCaml functions, or raise registered OCaml exceptions.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "register",
              "string -> 'a -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Callback</span>.register&nbsp;n&nbsp;v</code> registers the value <code class=\"code\">v</code> under\n   the name <code class=\"code\">n</code>. C code can later retrieve a handle to <code class=\"code\">v</code>\n   by calling <code class=\"code\">caml_named_value(n)</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "register_exception",
              "string -> exn -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Callback</span>.register_exception&nbsp;n&nbsp;exn</code> registers the\n   exception contained in the exception value <code class=\"code\">exn</code>\n   under the name <code class=\"code\">n</code>. C code can later retrieve a handle to\n   the exception by calling <code class=\"code\">caml_named_value(n)</code>. The exception\n   value thus obtained is suitable for passing as first argument\n   to <code class=\"code\">raise_constant</code> or <code class=\"code\">raise_with_arg</code>.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Char",
    "module_info": "<p>Character operations.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "code",
              "char -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the ASCII code of the argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "chr",
              "int -> char",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the character with the given ASCII code.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Char.chr\"</span></code> if the argument is\n   outside the range 0--255.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "escaped",
              "char -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a string representing the given character,\n    with special characters escaped following the lexical conventions\n    of OCaml.\n    All characters outside the ASCII printable range (32..126) are\n    escaped, as well as backslash, double-quote, and single-quote.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lowercase",
              "char -> char",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Convert the given character to its equivalent lowercase character,\n   using the ISO Latin-1 (8859-1) character set.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uppercase",
              "char -> char",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Convert the given character to its equivalent uppercase character,\n   using the ISO Latin-1 (8859-1) character set.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lowercase_ascii",
              "char -> char",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given character to its equivalent lowercase character,\n   using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uppercase_ascii",
              "char -> char",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given character to its equivalent uppercase character,\n   using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Type",
            [
              "t",
              "char",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>An alias for the type of characters.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "compare",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The comparison function for characters, with the same specification as\n    <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>, this function <code class=\"code\">compare</code>\n    allows the module <code class=\"code\"><span class=\"constructor\">Char</span></code> to be passed as argument to the functors\n    <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "equal",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The equal function for chars.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Complex",
    "module_info":
      "<p>Complex numbers.</p><p>This module provides arithmetic operations on complex numbers.\n    Complex numbers are represented by their real and imaginary parts\n    (cartesian representation).  Each part is represented by a\n    double-precision floating-point number (type <code class=\"code\">float</code>).</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "t",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.re\">re</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.im\">im</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n\n</tr></tbody>"
              ],
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The type of complex numbers.  <code class=\"code\">re</code> is the real part and <code class=\"code\">im</code> the\n    imaginary part.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "zero",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The complex number <code class=\"code\">0</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "one",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The complex number <code class=\"code\">1</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "i",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The complex number <code class=\"code\">i</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "neg",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Unary negation.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "conj",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Conjugate: given the complex <code class=\"code\">x&nbsp;+&nbsp;i.y</code>, returns <code class=\"code\">x&nbsp;-&nbsp;i.y</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add",
              "t",
              [
                "Some", "<div class=\"info-desc\">\n<p>Addition</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sub",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Subtraction</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mul",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Multiplication</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "inv",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Multiplicative inverse (<code class=\"code\">1/z</code>).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "div",
              "t",
              [
                "Some", "<div class=\"info-desc\">\n<p>Division</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sqrt",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Square root.  The result <code class=\"code\">x&nbsp;+&nbsp;i.y</code> is such that <code class=\"code\">x&nbsp;&gt;&nbsp;0</code> or\n    <code class=\"code\">x&nbsp;=&nbsp;0</code> and <code class=\"code\">y&nbsp;&gt;=&nbsp;0</code>.\n    This function has a discontinuity along the negative real axis.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "norm2",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Norm squared: given <code class=\"code\">x&nbsp;+&nbsp;i.y</code>, returns <code class=\"code\">x^2&nbsp;+&nbsp;y^2</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "norm",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Norm: given <code class=\"code\">x&nbsp;+&nbsp;i.y</code>, returns <code class=\"code\">sqrt(x^2&nbsp;+&nbsp;y^2)</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "arg",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Argument.  The argument of a complex number is the angle\n    in the complex plane between the positive real axis and a line\n    passing through zero and the number.  This angle ranges from\n    <code class=\"code\">-pi</code> to <code class=\"code\">pi</code>.  This function has a discontinuity along the\n    negative real axis.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "polar",
              "float -> float ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">polar&nbsp;norm&nbsp;arg</code> returns the complex having norm <code class=\"code\">norm</code>\n    and argument <code class=\"code\">arg</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "exp",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Exponentiation.  <code class=\"code\">exp&nbsp;z</code> returns <code class=\"code\">e</code> to the <code class=\"code\">z</code> power.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "log",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Natural logarithm (in base <code class=\"code\">e</code>).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "pow",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Power function.  <code class=\"code\">pow&nbsp;z1&nbsp;z2</code> returns <code class=\"code\">z1</code> to the <code class=\"code\">z2</code> power.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Digest",
    "module_info":
      "<p>MD5 message digest.</p><p>This module provides functions to compute 128-bit 'digests' of\n   arbitrary-length strings or files. The digests are of cryptographic\n   quality: it is very hard, given a digest, to forge a string having\n   that digest. The algorithm used is MD5. This module should not be\n   used for secure and sensitive cryptographic applications. For these\n   kind of applications more recent and stronger cryptographic\n   primitives should be used instead.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Type",
            [
              "t",
              "string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The type of digests: 16-character strings.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "compare",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The comparison function for 16-character digest, with the same\n    specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a> and the implementation\n    shared with <a href=\"String.html#VALcompare\"><code class=\"code\"><span class=\"constructor\">String</span>.compare</code></a>. Along with the type <code class=\"code\">t</code>, this\n    function <code class=\"code\">compare</code> allows the module <code class=\"code\"><span class=\"constructor\">Digest</span></code> to be passed as\n    argument to the functors <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "equal",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The equal function for 16-character digest.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "string",
              "string ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the digest of the given string.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "bytes",
              "bytes ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the digest of the given byte sequence.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "substring",
              "string -> int -> int ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Digest</span>.substring&nbsp;s&nbsp;ofs&nbsp;len</code> returns the digest of the substring\n   of <code class=\"code\">s</code> starting at index <code class=\"code\">ofs</code> and containing <code class=\"code\">len</code> characters.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "subbytes",
              "bytes -> int -> int ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Digest</span>.subbytes&nbsp;s&nbsp;ofs&nbsp;len</code> returns the digest of the subsequence\n    of <code class=\"code\">s</code> starting at index <code class=\"code\">ofs</code> and containing <code class=\"code\">len</code> bytes.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "channel",
              "in_channel",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>If <code class=\"code\">len</code> is nonnegative, <code class=\"code\"><span class=\"constructor\">Digest</span>.channel&nbsp;ic&nbsp;len</code> reads <code class=\"code\">len</code>\n   characters from channel <code class=\"code\">ic</code> and returns their digest, or raises\n   <code class=\"code\"><span class=\"constructor\">End_of_file</span></code> if end-of-file is reached before <code class=\"code\">len</code> characters\n   are read.  If <code class=\"code\">len</code> is negative, <code class=\"code\"><span class=\"constructor\">Digest</span>.channel&nbsp;ic&nbsp;len</code> reads\n   all characters from <code class=\"code\">ic</code> until end-of-file is reached and return\n   their digest.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "file",
              "string ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the digest of the file whose name is given.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "output",
              "out_channel",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Write a digest on the given output channel.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "input",
              "in_channel",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Read a digest from the given input channel.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_hex",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the printable hexadecimal representation of the given digest.\n    Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the argument is not exactly 16 bytes.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "from_hex",
              "string ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert a hexadecimal representation back into the corresponding digest.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the argument is not exactly 32 hexadecimal\n   characters.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Ephemeron",
    "module_info": "<p>Ephemerons and weak hash table</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": [
          "Some",
          "<p>Ephemerons and weak hash table are useful when one wants to cache\n    or memorize the computation of a function, as long as the\n    arguments and the function are used, without creating memory leaks\n    by continuously keeping old computation results that are not\n    useful anymore because one argument or the function is freed. An\n    implementation using <a href=\"Hashtbl.html#TYPEt\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.t</code></a> is not suitable because all\n    associations would keep in memory the arguments and the result.</p><p>Ephemerons can also be used for \"adding\" a field to an arbitrary\n    boxed ocaml value: you can attach an information to a value\n    created by an external library without memory leaks.</p><p>Ephemerons hold some keys and one or no data. They are all boxed\n    ocaml values. The keys of an ephemeron have the same behavior\n    than weak pointers according to the garbage collector. In fact\n    ocaml weak pointers are implemented as ephemerons without data.</p><p>The keys and data of an ephemeron are said to be full if they\n    point to a value, empty if the value have never been set, have\n    been unset, or was erased by the GC. In the function that accesses\n    the keys or data these two states are represented by the <code class=\"code\">option</code>\n    type.</p><p>The data is considered by the garbage collector alive if all the\n    full keys are alive and if the ephemeron is alive. When one of the\n    keys is not considered alive anymore by the GC, the data is\n    emptied from the ephemeron. The data could be alive for another\n    reason and in that case the GC will not free it, but the ephemeron\n    will not hold the data anymore.</p><p>The ephemerons complicate the notion of liveness of values, because\n    it is not anymore an equivalence with the reachability from root\n    value by usual pointers (not weak and not ephemerons). With ephemerons\n    the notion of liveness is constructed by the least fixpoint of:\n       A value is alive if:</p><ul>\n<li>it is a root value</li>\n<li>it is reachable from alive value by usual pointers</li>\n<li>it is the data of an alive ephemeron with all its full keys alive</li>\n</ul><p>Notes:</p><ul>\n<li>All the types defined in this module cannot be marshaled\n    using <a href=\"Pervasives.html#VALoutput_value\"><code class=\"code\">output_value</code></a> or the functions of the\n    <a href=\"Marshal.html\"><code class=\"code\"><span class=\"constructor\">Marshal</span></code></a> module.</li>\n</ul><p>Ephemerons are defined in a language agnostic way in this paper:\n    B. Hayes, Ephemerons: a New Finalization Mechanism, OOPSLA'9</p>"
        ],
        "elements": [
          [
            "Moduletype",
            [
              "S",
              [
                "Some",
                "<p>The output signature of the functor <a href=\"Ephemeron.K1.Make.html\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Ephemeron.K2.Make.html\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K2</span>.<span class=\"constructor\">Make</span></code></a>.</p>"
              ]
            ]
          ],
          [
            "Moduletype",
            [
              "SeededS",
              [
                "Some",
                "<p>The output signature of the functor <a href=\"Ephemeron.K1.MakeSeeded.html\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.<span class=\"constructor\">MakeSeeded</span></code></a> and <a href=\"Ephemeron.K2.MakeSeeded.html\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K2</span>.<span class=\"constructor\">MakeSeeded</span></code></a>.</p>"
              ]
            ]
          ],
          [ "Module", [ "K1", "None" ] ],
          [ "Module", [ "K2", "None" ] ],
          [ "Module", [ "Kn", "None" ] ],
          [ "Module", [ "GenHashTable", "None" ] ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Filename",
    "module_info": "<p>Operations on file names.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "current_dir_name",
              "string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The conventional name for the current directory (e.g. <code class=\"code\">.</code> in Unix).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "parent_dir_name",
              "string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The conventional name for the parent of the current directory\n   (e.g. <code class=\"code\">..</code> in Unix).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "dir_sep",
              "string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The directory separator (e.g. <code class=\"code\">/</code> in Unix).</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.2</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "concat",
              "string -> string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">concat&nbsp;dir&nbsp;file</code> returns a file name that designates file\n   <code class=\"code\">file</code> in directory <code class=\"code\">dir</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "is_relative",
              "string -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the file name is relative to the current\n   directory, <code class=\"code\"><span class=\"keyword\">false</span></code> if it is absolute (i.e. in Unix, starts\n   with <code class=\"code\">/</code>).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "is_implicit",
              "string -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the file name is relative and does not start\n   with an explicit reference to the current directory (<code class=\"code\">./</code> or\n   <code class=\"code\">../</code> in Unix), <code class=\"code\"><span class=\"keyword\">false</span></code> if it starts with an explicit reference\n   to the root directory or the current directory.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "check_suffix",
              "string -> string -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">check_suffix&nbsp;name&nbsp;suff</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the filename <code class=\"code\">name</code>\n   ends with the suffix <code class=\"code\">suff</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "chop_suffix",
              "string -> string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">chop_suffix&nbsp;name&nbsp;suff</code> removes the suffix <code class=\"code\">suff</code> from\n   the filename <code class=\"code\">name</code>. The behavior is undefined if <code class=\"code\">name</code> does not\n   end with the suffix <code class=\"code\">suff</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "extension",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">extension&nbsp;name</code> is the shortest suffix <code class=\"code\">ext</code> of <code class=\"code\">name0</code> where:</p>\n\n<ul>\n<li><code class=\"code\">name0</code> is the longest suffix of <code class=\"code\">name</code> that does not\n      contain a directory separator;</li>\n<li><code class=\"code\">ext</code> starts with a period;</li>\n<li><code class=\"code\">ext</code> is preceded by at least one non-period character\n      in <code class=\"code\">name0</code>.</li>\n</ul>\n<p>If such a suffix does not exist, <code class=\"code\">extension&nbsp;name</code> is the empty\n    string.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.04</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "remove_extension",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the given file name without its extension, as defined\n    in <a href=\"Filename.html#VALextension\"><code class=\"code\"><span class=\"constructor\">Filename</span>.extension</code></a>. If the extension is empty, the function\n    returns the given file name.</p>\n\n<p>The following invariant holds for any file name <code class=\"code\">s</code>:</p>\n\n<p><code class=\"code\">remove_extension&nbsp;s&nbsp;^&nbsp;extension&nbsp;s&nbsp;=&nbsp;s</code></p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.04</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "chop_extension",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Filename.html#VALremove_extension\"><code class=\"code\"><span class=\"constructor\">Filename</span>.remove_extension</code></a>, but raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code>\n    if the given name has an empty extension.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "basename",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Split a file name into directory name / base file name.\n   If <code class=\"code\">name</code> is a valid file name, then <code class=\"code\">concat&nbsp;(dirname&nbsp;name)&nbsp;(basename&nbsp;name)</code>\n   returns a file name which is equivalent to <code class=\"code\">name</code>. Moreover,\n   after setting the current directory to <code class=\"code\">dirname&nbsp;name</code> (with <a href=\"Sys.html#VALchdir\"><code class=\"code\"><span class=\"constructor\">Sys</span>.chdir</code></a>),\n   references to <code class=\"code\">basename&nbsp;name</code> (which is a relative file name)\n   designate the same file as <code class=\"code\">name</code> before the call to <a href=\"Sys.html#VALchdir\"><code class=\"code\"><span class=\"constructor\">Sys</span>.chdir</code></a>.</p>\n\n<p>This function conforms to the specification of POSIX.1-2008 for the\n   <code class=\"code\">basename</code> utility.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "dirname",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Filename.html#VALbasename\"><code class=\"code\"><span class=\"constructor\">Filename</span>.basename</code></a>.\n   This function conforms to the specification of POSIX.1-2008 for the\n   <code class=\"code\">dirname</code> utility.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "temp_file",
              "?temp_dir:string -> string -> string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">temp_file&nbsp;prefix&nbsp;suffix</code> returns the name of a\n   fresh temporary file in the temporary directory.\n   The base name of the temporary file is formed by concatenating\n   <code class=\"code\">prefix</code>, then a suitably chosen integer number, then <code class=\"code\">suffix</code>.\n   The optional argument <code class=\"code\">temp_dir</code> indicates the temporary directory\n   to use, defaulting to the current result of <a href=\"Filename.html#VALget_temp_dir_name\"><code class=\"code\"><span class=\"constructor\">Filename</span>.get_temp_dir_name</code></a>.\n   The temporary file is created empty, with permissions <code class=\"code\">0o600</code>\n   (readable and writable only by the file owner).  The file is\n   guaranteed to be different from any other file that existed when\n   <code class=\"code\">temp_file</code> was called.\n   Raise <code class=\"code\"><span class=\"constructor\">Sys_error</span></code> if the file could not be created.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Before 3.11.2 </b> no ?temp_dir optional argument</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "open_temp_file",
              "?mode:",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Filename.html#VALtemp_file\"><code class=\"code\"><span class=\"constructor\">Filename</span>.temp_file</code></a>, but returns both the name of a fresh\n   temporary file, and an output channel opened (atomically) on\n   this file.  This function is more secure than <code class=\"code\">temp_file</code>: there\n   is no risk that the temporary file will be modified (e.g. replaced\n   by a symbolic link) before the program opens it.  The optional argument\n   <code class=\"code\">mode</code> is a list of additional flags to control the opening of the file.\n   It can contain one or several of <code class=\"code\"><span class=\"constructor\">Open_append</span></code>, <code class=\"code\"><span class=\"constructor\">Open_binary</span></code>,\n   and <code class=\"code\"><span class=\"constructor\">Open_text</span></code>.  The default is <code class=\"code\">[<span class=\"constructor\">Open_text</span>]</code> (open in text mode). The\n   file is created with permissions <code class=\"code\">perms</code> (defaults to readable and\n   writable only by the file owner, <code class=\"code\">0o600</code>).</p>\n</div><ul class=\"info-attributes\">\n<li><b>Before 4.03.0 </b> no ?perms optional argument</li>\n<li><b>Before 3.11.2 </b> no ?temp_dir optional argument</li>\n<li><b>Raises</b> <code>Sys_error</code> if the file could not be opened.</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "get_temp_dir_name",
              "unit -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The name of the temporary directory:\n    Under Unix, the value of the <code class=\"code\"><span class=\"constructor\">TMPDIR</span></code> environment variable, or \"/tmp\"\n    if the variable is not set.\n    Under Windows, the value of the <code class=\"code\"><span class=\"constructor\">TEMP</span></code> environment variable, or \".\"\n    if the variable is not set.\n    The temporary directory can be changed with <a href=\"Filename.html#VALset_temp_dir_name\"><code class=\"code\"><span class=\"constructor\">Filename</span>.set_temp_dir_name</code></a>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "set_temp_dir_name",
              "string -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Change the temporary directory returned by <a href=\"Filename.html#VALget_temp_dir_name\"><code class=\"code\"><span class=\"constructor\">Filename</span>.get_temp_dir_name</code></a>\n    and used by <a href=\"Filename.html#VALtemp_file\"><code class=\"code\"><span class=\"constructor\">Filename</span>.temp_file</code></a> and <a href=\"Filename.html#VALopen_temp_file\"><code class=\"code\"><span class=\"constructor\">Filename</span>.open_temp_file</code></a>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "temp_dir_name",
              "string",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>You should use <a href=\"Filename.html#VALget_temp_dir_name\"><code class=\"code\"><span class=\"constructor\">Filename</span>.get_temp_dir_name</code></a> instead.</div><div class=\"info-desc\">\n<p>The name of the initial temporary directory:\n    Under Unix, the value of the <code class=\"code\"><span class=\"constructor\">TMPDIR</span></code> environment variable, or \"/tmp\"\n    if the variable is not set.\n    Under Windows, the value of the <code class=\"code\"><span class=\"constructor\">TEMP</span></code> environment variable, or \".\"\n    if the variable is not set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 3.09.1</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "quote",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a quoted version of a file name, suitable for use as\n    one argument in a command line, escaping all meta-characters.\n    Warning: under Windows, the output is only suitable for use\n    with programs that follow the standard Windows quoting\n    conventions.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Float",
    "module_info":
      "<h2 id=\"1_Floatingpointarithmetic\">Floating-point arithmetic</h2><p>OCaml's floating-point numbers follow the\n    IEEE 754 standard, using double precision (64 bits) numbers.\n    Floating-point operations never raise an exception on overflow,\n    underflow, division by zero, etc.  Instead, special IEEE numbers\n    are returned as appropriate, such as <code class=\"code\">infinity</code> for <code class=\"code\">1.0&nbsp;/.&nbsp;0.0</code>,\n    <code class=\"code\">neg_infinity</code> for <code class=\"code\">-1.0&nbsp;/.&nbsp;0.0</code>, and <code class=\"code\">nan</code> ('not a number')\n    for <code class=\"code\">0.0&nbsp;/.&nbsp;0.0</code>.  These special numbers then propagate through\n    floating-point computations as expected: for instance,\n    <code class=\"code\">1.0&nbsp;/.&nbsp;infinity</code> is <code class=\"code\">0.0</code>, and any arithmetic operation with <code class=\"code\">nan</code>\n    as argument returns <code class=\"code\">nan</code> as result.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "neg",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Unary negation.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add",
              "float -> float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Floating-point addition.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sub",
              "float -> float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Floating-point subtraction.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mul",
              "float -> float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Floating-point multiplication.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "div",
              "float -> float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Floating-point division.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rem",
              "float -> float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">rem&nbsp;a&nbsp;b</code> returns the remainder of <code class=\"code\">a</code> with respect to <code class=\"code\">b</code>.  The returned\n    value is <code class=\"code\">a&nbsp;-.&nbsp;n&nbsp;*.&nbsp;b</code>, where <code class=\"code\">n</code> is the quotient <code class=\"code\">a&nbsp;/.&nbsp;b</code> rounded towards\n    zero to an integer.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "abs",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">abs&nbsp;f</code> returns the absolute value of <code class=\"code\">f</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "infinity",
              "float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Positive infinity.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "neg_infinity",
              "float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Negative infinity.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "nan",
              "float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>A special floating-point value denoting the result of an\n    undefined operation such as <code class=\"code\">0.0&nbsp;/.&nbsp;0.0</code>.  Stands for\n    'not a number'.  Any floating-point operation with <code class=\"code\">nan</code> as\n    argument returns <code class=\"code\">nan</code> as result.  As for floating-point comparisons,\n    <code class=\"code\">=</code>, <code class=\"code\">&lt;</code>, <code class=\"code\">&lt;=</code>, <code class=\"code\">&gt;</code> and <code class=\"code\">&gt;=</code> return <code class=\"code\"><span class=\"keyword\">false</span></code> and <code class=\"code\">&lt;&gt;</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code>\n    if one or both of their arguments is <code class=\"code\">nan</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "pi",
              "float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The constant pi.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "max_float",
              "float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The largest positive finite value of type <code class=\"code\">float</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "min_float",
              "float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The smallest positive, non-zero, non-denormalized value of type <code class=\"code\">float</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "epsilon",
              "float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The difference between <code class=\"code\">1.0</code> and the smallest exactly representable\n    floating-point number greater than <code class=\"code\">1.0</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_int",
              "int -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert an integer to floating-point.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_int",
              "float -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Truncate the given floating-point number to an integer.\n    The result is unspecified if the argument is <code class=\"code\">nan</code> or falls outside the\n    range of representable integers.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_string",
              "string -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given string to a float.  The string is read in decimal\n    (by default) or in hexadecimal (marked by <code class=\"code\">0x</code> or <code class=\"code\">0<span class=\"constructor\">X</span></code>).\n    The format of decimal floating-point numbers is\n    <code class=\"code\">&nbsp;[-]&nbsp;dd.ddd&nbsp;(e<span class=\"keywordsign\">|</span><span class=\"constructor\">E</span>)&nbsp;[+|-]&nbsp;dd&nbsp;</code>, where <code class=\"code\">d</code> stands for a decimal digit.\n    The format of hexadecimal floating-point numbers is\n    <code class=\"code\">&nbsp;[-]&nbsp;0(x<span class=\"keywordsign\">|</span><span class=\"constructor\">X</span>)&nbsp;hh.hhh&nbsp;(p<span class=\"keywordsign\">|</span><span class=\"constructor\">P</span>)&nbsp;[+|-]&nbsp;dd&nbsp;</code>, where <code class=\"code\">h</code> stands for an\n    hexadecimal digit and <code class=\"code\">d</code> for a decimal digit.\n    In both cases, at least one of the integer and fractional parts must be\n    given; the exponent part is optional.\n    The <code class=\"code\">_</code> (underscore) character can appear anywhere in the string\n    and is ignored.\n    Depending on the execution platforms, other representations of\n    floating-point numbers can be accepted, but should not be relied upon.\n    Raise <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"float_of_string\"</span></code> if the given string is not a valid\n    representation of a float.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_string_opt",
              "string -> float option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">of_string</code>, but returns <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_string",
              "float -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the string representation of a floating-point number.</p>\n</div>"
              ]
            ]
          ],
          [
            "Type",
            [
              "fpclass",
              "fpclass",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The five classes of floating-point numbers, as determined by\n    the <a href=\"Float.html#VALclassify_float\"><code class=\"code\"><span class=\"constructor\">Float</span>.classify_float</code></a> function.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "classify_float",
              "float ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the class of the given floating-point number:\n    normal, subnormal, zero, infinite, or not a number.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "pow",
              "float -> float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Exponentiation.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sqrt",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Square root.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "exp",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Exponential.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "log",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Natural logarithm.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "log10",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Base 10 logarithm.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "expm1",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">expm1&nbsp;x</code> computes <code class=\"code\">exp&nbsp;x&nbsp;-.&nbsp;1.0</code>, giving numerically-accurate results\n    even if <code class=\"code\">x</code> is close to <code class=\"code\">0.0</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "log1p",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">log1p&nbsp;x</code> computes <code class=\"code\">log(1.0&nbsp;+.&nbsp;x)</code> (natural logarithm),\n    giving numerically-accurate results even if <code class=\"code\">x</code> is close to <code class=\"code\">0.0</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "cos",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Cosine.  Argument is in radians.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sin",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Sine.  Argument is in radians.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "tan",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Tangent.  Argument is in radians.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "acos",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Arc cosine.  The argument must fall within the range <code class=\"code\">[-1.0,&nbsp;1.0]</code>.\n    Result is in radians and is between <code class=\"code\">0.0</code> and <code class=\"code\">pi</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "asin",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Arc sine.  The argument must fall within the range <code class=\"code\">[-1.0,&nbsp;1.0]</code>.\n    Result is in radians and is between <code class=\"code\">-pi/2</code> and <code class=\"code\">pi/2</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "atan",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Arc tangent.\n    Result is in radians and is between <code class=\"code\">-pi/2</code> and <code class=\"code\">pi/2</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "atan2",
              "float -> float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">atan2&nbsp;y&nbsp;x</code> returns the arc tangent of <code class=\"code\">y&nbsp;/.&nbsp;x</code>.  The signs of <code class=\"code\">x</code>\n    and <code class=\"code\">y</code> are used to determine the quadrant of the result.\n    Result is in radians and is between <code class=\"code\">-pi</code> and <code class=\"code\">pi</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "hypot",
              "float -> float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">hypot&nbsp;x&nbsp;y</code> returns <code class=\"code\">sqrt(x&nbsp;*.&nbsp;x&nbsp;+&nbsp;y&nbsp;*.&nbsp;y)</code>, that is, the length\n    of the hypotenuse of a right-angled triangle with sides of length\n    <code class=\"code\">x</code> and <code class=\"code\">y</code>, or, equivalently, the distance of the point <code class=\"code\">(x,y)</code>\n    to origin.  If one of <code class=\"code\">x</code> or <code class=\"code\">y</code> is infinite, returns <code class=\"code\">infinity</code>\n    even if the other is <code class=\"code\">nan</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "cosh",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Hyperbolic cosine.  Argument is in radians.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sinh",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Hyperbolic sine.  Argument is in radians.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "tanh",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Hyperbolic tangent.  Argument is in radians.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "ceil",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Round above to an integer value.\n    <code class=\"code\">ceil&nbsp;f</code> returns the least integer value greater than or equal to <code class=\"code\">f</code>.\n    The result is returned as a float.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "floor",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Round below to an integer value.\n    <code class=\"code\">floor&nbsp;f</code> returns the greatest integer value less than or\n    equal to <code class=\"code\">f</code>.\n    The result is returned as a float.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "copysign",
              "float -> float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">copysign&nbsp;x&nbsp;y</code> returns a float whose absolute value is that of <code class=\"code\">x</code>\n    and whose sign is that of <code class=\"code\">y</code>.  If <code class=\"code\">x</code> is <code class=\"code\">nan</code>, returns <code class=\"code\">nan</code>.\n    If <code class=\"code\">y</code> is <code class=\"code\">nan</code>, returns either <code class=\"code\">x</code> or <code class=\"code\">-.&nbsp;x</code>, but it is not\n    specified which.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "frexp",
              "float -> float * int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">frexp&nbsp;f</code> returns the pair of the significant\n    and the exponent of <code class=\"code\">f</code>.  When <code class=\"code\">f</code> is zero, the\n    significant <code class=\"code\">x</code> and the exponent <code class=\"code\">n</code> of <code class=\"code\">f</code> are equal to\n    zero.  When <code class=\"code\">f</code> is non-zero, they are defined by\n    <code class=\"code\">f&nbsp;=&nbsp;x&nbsp;*.&nbsp;2&nbsp;**&nbsp;n</code> and <code class=\"code\">0.5&nbsp;&lt;=&nbsp;x&nbsp;&lt;&nbsp;1.0</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "ldexp",
              "float -> int -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">ldexp&nbsp;x&nbsp;n</code> returns <code class=\"code\">x&nbsp;*.&nbsp;2&nbsp;**&nbsp;n</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "modf",
              "float -> float * float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">modf&nbsp;f</code> returns the pair of the fractional and integral\n    part of <code class=\"code\">f</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Type",
            [
              "t",
              "float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>An alias for the type of floating-point numbers.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "compare",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">compare&nbsp;x&nbsp;y</code> returns <code class=\"code\">0</code> if <code class=\"code\">x</code> is equal to <code class=\"code\">y</code>, a negative integer if <code class=\"code\">x</code>\n    is less than <code class=\"code\">y</code>, and a positive integer if <code class=\"code\">x</code> is greater than\n    <code class=\"code\">y</code>. <code class=\"code\">compare</code> treats <code class=\"code\">nan</code> as equal to itself and less than any other float\n    value.  This treatment of <code class=\"code\">nan</code> ensures that <code class=\"code\">compare</code> defines a total\n    ordering relation.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "equal",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The equal function for floating-point numbers, compared using <a href=\"Float.html#VALcompare\"><code class=\"code\"><span class=\"constructor\">Float</span>.compare</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "hash",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The hash function for floating-point numbers.</p>\n</div>"
              ]
            ]
          ],
          [ "Module", [ "Array", "None" ] ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Format",
    "module_info":
      "<p>Pretty-printing.</p><p>This module implements a pretty-printing facility to format values\n   within <a href=\"Format.html#boxes\">'pretty-printing boxes'</a> and <a href=\"Format.html#tags\">'semantic tags'</a>\n   combined with a set of <a href=\"Format.html#fpp\">printf-like functions</a>.\n   The pretty-printer splits lines at specified <a href=\"Format.html#breaks\">break hints</a>,\n   and indents lines according to the box structure.\n   Similarly, <a href=\"Format.html#tags\">semantic tags</a> can be used to decouple text\n   presentation from its contents.</p><p>This pretty-printing facility is implemented as an overlay on top of\n   abstract <a href=\"Format.html#formatter\">formatters</a> which provide basic output\n   functions.\n   Some formatters are predefined, notably:</p><ul>\n<li><a href=\"Format.html#VALstd_formatter\"><code class=\"code\"><span class=\"constructor\">Format</span>.std_formatter</code></a> outputs to <a href=\"Pervasives.html#VALstdout\">stdout</a></li>\n<li><a href=\"Format.html#VALerr_formatter\"><code class=\"code\"><span class=\"constructor\">Format</span>.err_formatter</code></a> outputs to <a href=\"Pervasives.html#VALstderr\">stderr</a></li>\n</ul><p>Most functions in the <a href=\"Format.html\"><code class=\"code\"><span class=\"constructor\">Format</span></code></a> module come in two variants:\n   a short version that operates on <a href=\"Format.html#VALstd_formatter\"><code class=\"code\"><span class=\"constructor\">Format</span>.std_formatter</code></a> and the\n   generic version prefixed by <code class=\"code\">pp_</code> that takes a formatter\n   as its first argument.</p><p>More formatters can be created with <a href=\"Format.html#VALformatter_of_out_channel\"><code class=\"code\"><span class=\"constructor\">Format</span>.formatter_of_out_channel</code></a>,\n   <a href=\"Format.html#VALformatter_of_buffer\"><code class=\"code\"><span class=\"constructor\">Format</span>.formatter_of_buffer</code></a>, <a href=\"Format.html#VALformatter_of_symbolic_output_buffer\"><code class=\"code\"><span class=\"constructor\">Format</span>.formatter_of_symbolic_output_buffer</code></a>\n   or using <a href=\"Format.html#formatter\">custom formatters</a>.</p>",
    "sections": [
      {
        "section_name": [ "Some", "Introduction" ],
        "section_info": [
          "Some",
          "<p>For a gentle introduction to the basics of pretty-printing using\n   <code class=\"code\"><span class=\"constructor\">Format</span></code>, read\n   <a href=\"http://caml.inria.fr/resources/doc/guides/format.en.html\">\n    http://caml.inria.fr/resources/doc/guides/format.en.html</a>.</p><p>You may consider this module as providing an extension to the\n   <code class=\"code\">printf</code> facility to provide automatic line splitting. The addition of\n   pretty-printing annotations to your regular <code class=\"code\">printf</code> format strings gives\n   you fancy indentation and line breaks.\n   Pretty-printing annotations are described below in the documentation of\n   the function <a href=\"Format.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Format</span>.fprintf</code></a>.</p><p>You may also use the explicit pretty-printing box management and printing\n   functions provided by this module. This style is more basic but more\n   verbose than the concise <code class=\"code\">fprintf</code> format strings.</p><p>For instance, the sequence\n   <code class=\"code\">open_box&nbsp;0;&nbsp;print_string&nbsp;<span class=\"string\">\"x&nbsp;=\"</span>;&nbsp;print_space&nbsp;();<br>\n&nbsp;&nbsp;&nbsp;&nbsp;print_int&nbsp;1;&nbsp;close_box&nbsp;();&nbsp;print_newline&nbsp;()</code>\n   that prints <code class=\"code\">x&nbsp;=&nbsp;1</code> within a pretty-printing box, can be\n   abbreviated as <code class=\"code\">printf&nbsp;<span class=\"string\">\"@[%s@&nbsp;%i@]@.\"</span>&nbsp;<span class=\"string\">\"x&nbsp;=\"</span>&nbsp;1</code>, or even shorter\n   <code class=\"code\">printf&nbsp;<span class=\"string\">\"@[x&nbsp;=@&nbsp;%i@]@.\"</span>&nbsp;1</code>.</p><p>Rule of thumb for casual users of this library:</p><ul>\n<li>use simple pretty-printing boxes (as obtained by <code class=\"code\">open_box&nbsp;0</code>);</li>\n<li>use simple break hints as obtained by <code class=\"code\">print_cut&nbsp;()</code> that outputs a\n   simple break hint, or by <code class=\"code\">print_space&nbsp;()</code> that outputs a space\n   indicating a break hint;</li>\n<li>once a pretty-printing box is open, display its material with basic\n   printing functions (e. g. <code class=\"code\">print_int</code> and <code class=\"code\">print_string</code>);</li>\n<li>when the material for a pretty-printing box has been printed, call\n   <code class=\"code\">close_box&nbsp;()</code> to close the box;</li>\n<li>at the end of pretty-printing, flush the pretty-printer to display all\n   the remaining material, e.g. evaluate <code class=\"code\">print_newline&nbsp;()</code>.</li>\n</ul><p>The behavior of pretty-printing commands is unspecified\n   if there is no open pretty-printing box. Each box opened by\n   one of the <code class=\"code\">open_</code> functions below must be closed using <code class=\"code\">close_box</code>\n   for proper formatting. Otherwise, some of the material printed in the\n   boxes may not be output, or may be formatted incorrectly.</p><p>In case of interactive use, each phrase is executed in the initial state\n   of the standard pretty-printer: after each phrase execution, the\n   interactive system closes all open pretty-printing boxes, flushes all\n   pending text, and resets the standard pretty-printer.</p><p>Warning: mixing calls to pretty-printing functions of this module with\n   calls to <a href=\"Pervasives.html\"><code class=\"code\"><span class=\"constructor\">Pervasives</span></code></a> low level output functions is error prone.</p><p>The pretty-printing functions output material that is delayed in the\n   pretty-printer queue and stacks in order to compute proper line\n   splitting. In contrast, basic I/O output functions write directly in\n   their output device. As a consequence, the output of a basic I/O function\n   may appear before the output of a pretty-printing function that has been\n   called before. For instance,\n   <code class=\"code\"><br>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"constructor\">Pervasives</span>.print_string&nbsp;<span class=\"string\">\"&lt;\"</span>;<br>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"constructor\">Format</span>.print_string&nbsp;<span class=\"string\">\"PRETTY\"</span>;<br>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"constructor\">Pervasives</span>.print_string&nbsp;<span class=\"string\">\"&gt;\"</span>;<br>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"constructor\">Format</span>.print_string&nbsp;<span class=\"string\">\"TEXT\"</span>;<br>\n&nbsp;&nbsp;&nbsp;</code>\n   leads to output <code class=\"code\">&lt;&gt;<span class=\"constructor\">PRETTYTEXT</span></code>.</p>"
        ],
        "elements": [
          [
            "Typevariant",
            [
              "formatter",
              "None",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Abstract data corresponding to a pretty-printer (also called a\n    formatter) and all its machinery. See also <a href=\"Format.html#formatter\"><i>Defining formatters</i></a>.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Pretty-printing boxes" ],
        "section_info": [
          "Some",
          "<p>The pretty-printing engine uses the concepts of pretty-printing box and\n  break hint to drive indentation and line splitting behavior of the\n  pretty-printer.</p><p>Each different pretty-printing box kind introduces a specific line splitting\n  policy:</p><ul>\n<li>within an <em>horizontal</em> box, break hints never split the line (but the\n    line may be split in a box nested deeper),</li>\n<li>within a <em>vertical</em> box, break hints always split the line,</li>\n<li>within an <em>horizontal/vertical</em> box, if the box fits on the current line\n    then break hints never split the line, otherwise break hint always split\n    the line,</li>\n<li>within a <em>compacting</em> box, a break hint never splits the line,\n    unless there is no more room on the current line.</li>\n</ul><p>Note that line splitting policy is box specific: the policy of a box does\n  not rule the policy of inner boxes. For instance, if a vertical box is\n  nested in an horizontal box, all break hints within the vertical box will\n  split the line.</p>"
        ],
        "elements": [
          [ "Function", [ "pp_open_box", "formatter", "None" ] ],
          [
            "Function",
            [
              "open_box",
              "int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_open_box&nbsp;ppf&nbsp;d</code> opens a new compacting pretty-printing box with\n    offset <code class=\"code\">d</code> in the formatter <code class=\"code\">ppf</code>.</p>\n\n<p>Within this box, the pretty-printer prints as much as possible material on\n   every line.</p>\n\n<p>A break hint splits the line if there is no more room on the line to\n   print the remainder of the box.</p>\n\n<p>Within this box, the pretty-printer emphasizes the box structure: a break\n   hint also splits the line if the splitting ``moves to the left''\n   (i.e. the new line gets an indentation smaller than the one of the current\n   line).</p>\n\n<p>This box is the general purpose pretty-printing box.</p>\n\n<p>If the pretty-printer splits the line in the box, offset <code class=\"code\">d</code> is added to\n   the current indentation.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_close_box", "formatter", "None" ] ],
          [
            "Function",
            [
              "close_box",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Closes the most recently open pretty-printing box.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_open_hbox", "formatter", "None" ] ],
          [
            "Function",
            [
              "open_hbox",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_open_hbox&nbsp;ppf&nbsp;()</code> opens a new 'horizontal' pretty-printing box.</p>\n\n<p>This box prints material on a single line.</p>\n\n<p>Break hints in a horizontal box never split the line.\n  (Line splitting may still occur inside boxes nested deeper).</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_open_vbox", "formatter", "None" ] ],
          [
            "Function",
            [
              "open_vbox",
              "int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_open_vbox&nbsp;ppf&nbsp;d</code> opens a new 'vertical' pretty-printing box\n  with offset <code class=\"code\">d</code>.</p>\n\n<p>This box prints material on as many lines as break hints in the box.</p>\n\n<p>Every break hint in a vertical box splits the line.</p>\n\n<p>If the pretty-printer splits the line in the box, <code class=\"code\">d</code> is added to the\n  current indentation.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_open_hvbox", "formatter", "None" ] ],
          [
            "Function",
            [
              "open_hvbox",
              "int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_open_hvbox&nbsp;ppf&nbsp;d</code> opens a new 'horizontal/vertical' pretty-printing box\n  with offset <code class=\"code\">d</code>.</p>\n\n<p>This box behaves as an horizontal box if it fits on a single line,\n  otherwise it behaves as a vertical box.</p>\n\n<p>If the pretty-printer splits the line in the box, <code class=\"code\">d</code> is added to the\n  current indentation.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_open_hovbox", "formatter", "None" ] ],
          [
            "Function",
            [
              "open_hovbox",
              "int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_open_hovbox&nbsp;ppf&nbsp;d</code> opens a new 'horizontal-or-vertical'\n  pretty-printing box with offset <code class=\"code\">d</code>.</p>\n\n<p>This box prints material as much as possible on every line.</p>\n\n<p>A break hint splits the line if there is no more room on the line to\n  print the remainder of the box.</p>\n\n<p>If the pretty-printer splits the line in the box, <code class=\"code\">d</code> is added to the\n  current indentation.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Formatting functions" ],
        "section_info": "None",
        "elements": [
          [ "Function", [ "pp_print_string", "formatter", "None" ] ],
          [
            "Function",
            [
              "print_string",
              "string -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_print_string&nbsp;ppf&nbsp;s</code> prints <code class=\"code\">s</code> in the current pretty-printing box.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_print_as", "formatter", "None" ] ],
          [
            "Function",
            [
              "print_as",
              "int -> string -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_print_as&nbsp;ppf&nbsp;len&nbsp;s</code> prints <code class=\"code\">s</code> in the current pretty-printing box.\n  The pretty-printer formats <code class=\"code\">s</code> as if it were of length <code class=\"code\">len</code>.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_print_int", "formatter", "None" ] ],
          [
            "Function",
            [
              "print_int",
              "int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Print an integer in the current pretty-printing box.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_print_float", "formatter", "None" ] ],
          [
            "Function",
            [
              "print_float",
              "float -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Print a floating point number in the current pretty-printing box.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_print_char", "formatter", "None" ] ],
          [
            "Function",
            [
              "print_char",
              "char -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Print a character in the current pretty-printing box.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_print_bool", "formatter", "None" ] ],
          [
            "Function",
            [
              "print_bool",
              "bool -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Print a boolean in the current pretty-printing box.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Break hints" ],
        "section_info": [
          "Some",
          "<p>A 'break hint' tells the pretty-printer to output some space or split the\n  line whichever way is more appropriate to the current pretty-printing box\n  splitting rules.</p><p>Break hints are used to separate printing items and are mandatory to let\n  the pretty-printer correctly split lines and indent items.</p><p>Simple break hints are:</p><ul>\n<li>the 'space': output a space or split the line if appropriate,</li>\n<li>the 'cut': split the line if appropriate.</li>\n</ul><p>Note: the notions of space and line splitting are abstract for the\n  pretty-printing engine, since those notions can be completely redefined\n  by the programmer.\n  However, in the pretty-printer default setting, ``output a space'' simply\n  means printing a space character (ASCII code 32) and ``split the line''\n  means printing a newline character (ASCII code 10).</p>"
        ],
        "elements": [
          [ "Function", [ "pp_print_space", "formatter", "None" ] ],
          [
            "Function",
            [
              "print_space",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_print_space&nbsp;ppf&nbsp;()</code> emits a 'space' break hint:\n  the pretty-printer may split the line at this point,\n  otherwise it prints one space.</p>\n\n<p><code class=\"code\">pp_print_space&nbsp;ppf&nbsp;()</code> is equivalent to <code class=\"code\">pp_print_break&nbsp;ppf&nbsp;1&nbsp;0</code>.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_print_cut", "formatter", "None" ] ],
          [
            "Function",
            [
              "print_cut",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_print_cut&nbsp;ppf&nbsp;()</code> emits a 'cut' break hint:\n  the pretty-printer may split the line at this point,\n  otherwise it prints nothing.</p>\n\n<p><code class=\"code\">pp_print_cut&nbsp;ppf&nbsp;()</code> is equivalent to <code class=\"code\">pp_print_break&nbsp;ppf&nbsp;0&nbsp;0</code>.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_print_break", "formatter", "None" ] ],
          [
            "Function",
            [
              "print_break",
              "int -> int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_print_break&nbsp;ppf&nbsp;nspaces&nbsp;offset</code> emits a 'full' break hint:\n  the pretty-printer may split the line at this point,\n  otherwise it prints <code class=\"code\">nspaces</code> spaces.</p>\n\n<p>If the pretty-printer splits the line, <code class=\"code\">offset</code> is added to\n  the current indentation.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_force_newline", "formatter", "None" ] ],
          [
            "Function",
            [
              "force_newline",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Force a new line in the current pretty-printing box.</p>\n\n<p>The pretty-printer must split the line at this point,</p>\n\n<p>Not the normal way of pretty-printing, since imperative line splitting may\n  interfere with current line counters and box size calculation.\n  Using break hints within an enclosing vertical box is a better\n  alternative.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_print_if_newline", "formatter", "None" ] ],
          [
            "Function",
            [
              "print_if_newline",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Execute the next formatting command if the preceding line\n  has just been split. Otherwise, ignore the next formatting\n  command.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Pretty-printing termination" ],
        "section_info": "None",
        "elements": [
          [ "Function", [ "pp_print_flush", "formatter", "None" ] ],
          [
            "Function",
            [
              "print_flush",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>End of pretty-printing: resets the pretty-printer to initial state.</p>\n\n<p>All open pretty-printing boxes are closed, all pending text is printed.\n  In addition, the pretty-printer low level output device is flushed to\n  ensure that all pending text is really displayed.</p>\n\n<p>Note: never use <code class=\"code\">print_flush</code> in the normal course of a pretty-printing\n  routine, since the pretty-printer uses a complex buffering machinery to\n  properly indent the output; manually flushing those buffers at random\n  would conflict with the pretty-printer strategy and result to poor\n  rendering.</p>\n\n<p>Only consider using <code class=\"code\">print_flush</code> when displaying all pending material is\n  mandatory (for instance in case of interactive use when you want the user\n  to read some text) and when resetting the pretty-printer state will not\n  disturb further pretty-printing.</p>\n\n<p>Warning: If the output device of the pretty-printer is an output channel,\n  repeated calls to <code class=\"code\">print_flush</code> means repeated calls to <a href=\"Pervasives.html#VALflush\"><code class=\"code\">flush</code></a>\n  to flush the out channel; these explicit flush calls could foil the\n  buffering strategy of output channels and could dramatically impact\n  efficiency.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_print_newline", "formatter", "None" ] ],
          [
            "Function",
            [
              "print_newline",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>End of pretty-printing: resets the pretty-printer to initial state.</p>\n\n<p>All open pretty-printing boxes are closed, all pending text is printed.</p>\n\n<p>Equivalent to <a href=\"Format.html#VALprint_flush\"><code class=\"code\"><span class=\"constructor\">Format</span>.print_flush</code></a> followed by a new line.\n  See corresponding words of caution for <a href=\"Format.html#VALprint_flush\"><code class=\"code\"><span class=\"constructor\">Format</span>.print_flush</code></a>.</p>\n\n<p>Note: this is not the normal way to output a new line;\n  the preferred method is using break hints within a vertical pretty-printing\n  box.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Margin" ],
        "section_info": "None",
        "elements": [
          [ "Function", [ "pp_set_margin", "formatter", "None" ] ],
          [
            "Function",
            [
              "set_margin",
              "int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_set_margin&nbsp;ppf&nbsp;d</code> sets the right margin to <code class=\"code\">d</code> (in characters):\n  the pretty-printer splits lines that overflow the right margin according to\n  the break hints given.\n  Nothing happens if <code class=\"code\">d</code> is smaller than 2.\n  If <code class=\"code\">d</code> is too large, the right margin is set to the maximum\n  admissible value (which is greater than <code class=\"code\">10&nbsp;^&nbsp;9</code>).\n  If <code class=\"code\">d</code> is less than the current maximum indentation limit, the\n  maximum indentation limit is decreased while trying to preserve\n  a minimal ratio <code class=\"code\">max_indent/margin&gt;=50%</code> and if possible\n  the current difference <code class=\"code\">margin&nbsp;-&nbsp;max_indent</code>.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_get_margin", "formatter", "None" ] ],
          [
            "Function",
            [
              "get_margin",
              "unit -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Returns the position of the right margin.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Maximum indentation limit" ],
        "section_info": "None",
        "elements": [
          [ "Function", [ "pp_set_max_indent", "formatter", "None" ] ],
          [
            "Function",
            [
              "set_max_indent",
              "int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_set_max_indent&nbsp;ppf&nbsp;d</code> sets the maximum indentation limit of lines\n  to <code class=\"code\">d</code> (in characters):\n  once this limit is reached, new pretty-printing boxes are rejected to the\n  left, if they do not fit on the current line.</p>\n\n<p>Nothing happens if <code class=\"code\">d</code> is smaller than 2.\n  If <code class=\"code\">d</code> is too large, the limit is set to the maximum\n  admissible value (which is greater than <code class=\"code\">10&nbsp;^&nbsp;9</code>).</p>\n\n<p>If <code class=\"code\">d</code> is greater or equal than the current margin, it is ignored,\n  and the current maximum indentation limit is kept.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_get_max_indent", "formatter", "None" ] ],
          [
            "Function",
            [
              "get_max_indent",
              "unit -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the maximum indentation limit (in characters).</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Maximum formatting depth" ],
        "section_info": [
          "Some",
          "<p>The maximum formatting depth is the maximum number of pretty-printing\n  boxes simultaneously open.</p><p>Material inside boxes nested deeper is printed as an ellipsis (more\n  precisely as the text returned by <a href=\"Format.html#VALget_ellipsis_text\"><code class=\"code\"><span class=\"constructor\">Format</span>.get_ellipsis_text</code></a> <code class=\"code\">()</code>).</p>"
        ],
        "elements": [
          [ "Function", [ "pp_set_max_boxes", "formatter", "None" ] ],
          [
            "Function",
            [
              "set_max_boxes",
              "int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_set_max_boxes&nbsp;ppf&nbsp;max</code> sets the maximum number of pretty-printing\n    boxes simultaneously open.</p>\n\n<p>Material inside boxes nested deeper is printed as an ellipsis (more\n  precisely as the text returned by <a href=\"Format.html#VALget_ellipsis_text\"><code class=\"code\"><span class=\"constructor\">Format</span>.get_ellipsis_text</code></a> <code class=\"code\">()</code>).</p>\n\n<p>Nothing happens if <code class=\"code\">max</code> is smaller than 2.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_get_max_boxes", "formatter", "None" ] ],
          [
            "Function",
            [
              "get_max_boxes",
              "unit -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Returns the maximum number of pretty-printing boxes allowed before\n  ellipsis.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_over_max_boxes", "formatter", "None" ] ],
          [
            "Function",
            [
              "over_max_boxes",
              "unit -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Tests if the maximum number of pretty-printing boxes allowed have already\n  been opened.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Tabulation boxes" ],
        "section_info": [
          "Some",
          "<p>A <em>tabulation box</em> prints material on lines divided into cells of fixed\n  length. A tabulation box provides a simple way to display vertical columns\n  of left adjusted text.</p><p>This box features command <code class=\"code\">set_tab</code> to define cell boundaries, and command\n  <code class=\"code\">print_tab</code> to move from cell to cell and split the line when there is no\n  more cells to print on the line.</p><p>Note: printing within tabulation box is line directed, so arbitrary line\n  splitting inside a tabulation box leads to poor rendering. Yet, controlled\n  use of tabulation boxes allows simple printing of columns within\n  module <a href=\"Format.html\"><code class=\"code\"><span class=\"constructor\">Format</span></code></a>.</p>"
        ],
        "elements": [
          [ "Function", [ "pp_open_tbox", "formatter", "None" ] ],
          [
            "Function",
            [
              "open_tbox",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">open_tbox&nbsp;()</code> opens a new tabulation box.</p>\n\n<p>This box prints lines separated into cells of fixed width.</p>\n\n<p>Inside a tabulation box, special <em>tabulation markers</em> defines points of\n  interest on the line (for instance to delimit cell boundaries).\n  Function <a href=\"Format.html#VALset_tab\"><code class=\"code\"><span class=\"constructor\">Format</span>.set_tab</code></a> sets a tabulation marker at insertion point.</p>\n\n<p>A tabulation box features specific <em>tabulation breaks</em> to move to next\n  tabulation marker or split the line. Function <a href=\"Format.html#VALprint_tbreak\"><code class=\"code\"><span class=\"constructor\">Format</span>.print_tbreak</code></a> prints\n  a tabulation break.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_close_tbox", "formatter", "None" ] ],
          [
            "Function",
            [
              "close_tbox",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Closes the most recently opened tabulation box.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_set_tab", "formatter", "None" ] ],
          [
            "Function",
            [
              "set_tab",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Sets a tabulation marker at current insertion point.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_print_tab", "formatter", "None" ] ],
          [
            "Function",
            [
              "print_tab",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">print_tab&nbsp;()</code> emits a 'next' tabulation break hint: if not already set on\n  a tabulation marker, the insertion point moves to the first tabulation\n  marker on the right, or the pretty-printer splits the line and insertion\n  point moves to the leftmost tabulation marker.</p>\n\n<p>It is equivalent to <code class=\"code\">print_tbreak&nbsp;0&nbsp;0</code>.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_print_tbreak", "formatter", "None" ] ],
          [
            "Function",
            [
              "print_tbreak",
              "int -> int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">print_tbreak&nbsp;nspaces&nbsp;offset</code> emits a 'full' tabulation break hint.</p>\n\n<p>If not already set on a tabulation marker, the insertion point moves to the\n  first tabulation marker on the right and the pretty-printer prints\n  <code class=\"code\">nspaces</code> spaces.</p>\n\n<p>If there is no next tabulation marker on the right, the pretty-printer\n  splits the line at this point, then insertion point moves to the leftmost\n  tabulation marker of the box.</p>\n\n<p>If the pretty-printer splits the line, <code class=\"code\">offset</code> is added to\n  the current indentation.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Ellipsis" ],
        "section_info": "None",
        "elements": [
          [ "Function", [ "pp_set_ellipsis_text", "formatter", "None" ] ],
          [
            "Function",
            [
              "set_ellipsis_text",
              "string -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Set the text of the ellipsis printed when too many pretty-printing boxes\n  are open (a single dot, <code class=\"code\">.</code>, by default).</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_get_ellipsis_text", "formatter", "None" ] ],
          [
            "Function",
            [
              "get_ellipsis_text",
              "unit -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the text of the ellipsis.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Semantic tags" ],
        "section_info": "None",
        "elements": [
          [
            "Type",
            [
              "tag",
              "string",
              [
                "Some",
                "<p><i>Semantic tags</i> (or simply <em>tags</em>) are user's defined delimiters\n  to associate user's specific operations to printed entities.</p><p>Common usage of semantic tags is text decoration to get specific font or\n  text size rendering for a display device, or marking delimitation of\n  entities (e.g. HTML or TeX elements or terminal escape sequences).\n  More sophisticated usage of semantic tags could handle dynamic\n  modification of the pretty-printer behavior to properly print the material\n  within some specific tags.</p><p>In order to properly delimit printed entities, a semantic tag must be\n  opened before and closed after the entity. Semantic tags must be properly\n  nested like parentheses.</p><p>Tag specific operations occur any time a tag is opened or closed, At each\n  occurrence, two kinds of operations are performed <em>tag-marking</em> and\n  <em>tag-printing</em>:</p><ul>\n<li>The tag-marking operation is the simpler tag specific operation: it simply\n  writes a tag specific string into the output device of the\n  formatter. Tag-marking does not interfere with line-splitting computation.</li>\n<li>The tag-printing operation is the more involved tag specific operation: it\n  can print arbitrary material to the formatter. Tag-printing is tightly\n  linked to the current pretty-printer operations.</li>\n</ul><p>Roughly speaking, tag-marking is commonly used to get a better rendering of\n  texts in the rendering device, while tag-printing allows fine tuning of\n  printing routines to print the same entity differently according to the\n  semantic tags (i.e. print additional material or even omit parts of the\n  output).</p><p>More precisely: when a semantic tag is opened or closed then both and\n  successive 'tag-printing' and 'tag-marking' operations occur:</p><ul>\n<li>Tag-printing a semantic tag means calling the formatter specific function\n  <code class=\"code\">print_open_tag</code> (resp. <code class=\"code\">print_close_tag</code>) with the name of the tag as\n  argument: that tag-printing function can then print any regular material\n  to the formatter (so that this material is enqueued as usual in the\n  formatter queue for further line splitting computation).</li>\n<li>Tag-marking a semantic tag means calling the formatter specific function\n  <code class=\"code\">mark_open_tag</code> (resp. <code class=\"code\">mark_close_tag</code>) with the name of the tag as\n  argument: that tag-marking function can then return the 'tag-opening\n  marker' (resp. `tag-closing marker') for direct output into the output\n  device of the formatter.</li>\n</ul><p>Being written directly into the output device of the formatter, semantic\n  tag marker strings are not considered as part of the printing material that\n  drives line splitting (in other words, the length of the strings\n  corresponding to tag markers is considered as zero for line splitting).</p><p>Thus, semantic tag handling is in some sense transparent to pretty-printing\n  and does not interfere with usual indentation. Hence, a single\n  pretty-printing routine can output both simple 'verbatim' material or\n  richer decorated output depending on the treatment of tags. By default,\n  tags are not active, hence the output is not decorated with tag\n  information. Once <code class=\"code\">set_tags</code> is set to <code class=\"code\"><span class=\"keyword\">true</span></code>, the pretty-printer engine\n  honors tags and decorates the output accordingly.</p><p>Default tag-marking functions behave the HTML way: tags are enclosed in \"&lt;\"\n  and \"&gt;\"; hence, opening marker for tag <code class=\"code\">t</code> is <code class=\"code\"><span class=\"string\">\"&lt;t&gt;\"</span></code> and closing marker is\n  <code class=\"code\"><span class=\"string\">\"&lt;/t&gt;\"</span></code>.</p><p>Default tag-printing functions just do nothing.</p><p>Tag-marking and tag-printing functions are user definable and can\n  be set by calling <a href=\"Format.html#VALset_formatter_tag_functions\"><code class=\"code\"><span class=\"constructor\">Format</span>.set_formatter_tag_functions</code></a>.</p><p>Semantic tag operations may be set on or off with <a href=\"Format.html#VALset_tags\"><code class=\"code\"><span class=\"constructor\">Format</span>.set_tags</code></a>.\n  Tag-marking operations may be set on or off with <a href=\"Format.html#VALset_mark_tags\"><code class=\"code\"><span class=\"constructor\">Format</span>.set_mark_tags</code></a>.\n  Tag-printing operations may be set on or off with <a href=\"Format.html#VALset_print_tags\"><code class=\"code\"><span class=\"constructor\">Format</span>.set_print_tags</code></a>.</p>"
              ]
            ]
          ],
          [ "Function", [ "pp_open_tag", "formatter", "None" ] ],
          [
            "Function",
            [
              "open_tag",
              "tag",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_open_tag&nbsp;ppf&nbsp;t</code> opens the semantic tag named <code class=\"code\">t</code>.</p>\n\n<p>The <code class=\"code\">print_open_tag</code> tag-printing function of the formatter is called with\n  <code class=\"code\">t</code> as argument; then the opening tag marker for <code class=\"code\">t</code>, as given by\n  <code class=\"code\">mark_open_tag&nbsp;t</code>, is written into the output device of the formatter.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_close_tag", "formatter", "None" ] ],
          [
            "Function",
            [
              "close_tag",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_close_tag&nbsp;ppf&nbsp;()</code> closes the most recently opened semantic tag <code class=\"code\">t</code>.</p>\n\n<p>The closing tag marker, as given by <code class=\"code\">mark_close_tag&nbsp;t</code>, is written into the\n  output device of the formatter; then the <code class=\"code\">print_close_tag</code> tag-printing\n  function of the formatter is called with <code class=\"code\">t</code> as argument.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_set_tags", "formatter", "None" ] ],
          [
            "Function",
            [
              "set_tags",
              "bool -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_set_tags&nbsp;ppf&nbsp;b</code> turns on or off the treatment of semantic tags\n  (default is off).</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_set_print_tags", "formatter", "None" ] ],
          [
            "Function",
            [
              "set_print_tags",
              "bool -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_set_print_tags&nbsp;ppf&nbsp;b</code> turns on or off the tag-printing operations.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_set_mark_tags", "formatter", "None" ] ],
          [
            "Function",
            [
              "set_mark_tags",
              "bool -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_set_mark_tags&nbsp;ppf&nbsp;b</code> turns on or off the tag-marking operations.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_get_print_tags", "formatter", "None" ] ],
          [
            "Function",
            [
              "get_print_tags",
              "unit -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the current status of tag-printing operations.</p>\n</div>"
              ]
            ]
          ],
          [ "Function", [ "pp_get_mark_tags", "formatter", "None" ] ],
          [
            "Function",
            [
              "get_mark_tags",
              "unit -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the current status of tag-marking operations.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "pp_set_formatter_out_channel",
              "formatter",
              [
                "Some",
                "<div class=\"info-desc\">\n<h2 id=\"1_Redirectingthestandardformatteroutput\">Redirecting the standard formatter output</h2></div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "set_formatter_out_channel",
              "out_channel",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Redirect the standard pretty-printer output to the given channel.\n  (All the output functions of the standard formatter are set to the\n   default output functions printing to the given channel.)</p>\n\n<p><code class=\"code\">set_formatter_out_channel</code> is equivalent to\n  <a href=\"Format.html#VALpp_set_formatter_out_channel\"><code class=\"code\"><span class=\"constructor\">Format</span>.pp_set_formatter_out_channel</code></a> <code class=\"code\">std_formatter</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [ "pp_set_formatter_output_functions", "formatter", "None" ]
          ],
          [
            "Function",
            [
              "set_formatter_output_functions",
              "(string -> int -> int -> unit) -> (unit -> unit) -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pp_set_formatter_output_functions&nbsp;ppf&nbsp;out&nbsp;flush</code> redirects the\n  standard pretty-printer output functions to the functions <code class=\"code\">out</code> and\n  <code class=\"code\">flush</code>.</p>\n\n<p>The <code class=\"code\">out</code> function performs all the pretty-printer string output.\n  It is called with a string <code class=\"code\">s</code>, a start position <code class=\"code\">p</code>, and a number of\n  characters <code class=\"code\">n</code>; it is supposed to output characters <code class=\"code\">p</code> to <code class=\"code\">p&nbsp;+&nbsp;n&nbsp;-&nbsp;1</code> of\n  <code class=\"code\">s</code>.</p>\n\n<p>The <code class=\"code\">flush</code> function is called whenever the pretty-printer is flushed\n  (via conversion <code class=\"code\">%!</code>, or pretty-printing indications <code class=\"code\">@?</code> or <code class=\"code\">@.</code>, or\n  using low level functions <code class=\"code\">print_flush</code> or <code class=\"code\">print_newline</code>).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [ "pp_get_formatter_output_functions", "formatter", "None" ]
          ],
          [
            "Function",
            [
              "get_formatter_output_functions",
              "unit -> (string -> int -> int -> unit) * (unit -> unit)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the current output functions of the standard pretty-printer.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Redefining formatter output" ],
        "section_info": [
          "Some",
          "<p>The <code class=\"code\"><span class=\"constructor\">Format</span></code> module is versatile enough to let you completely redefine\n  the meaning of pretty-printing output: you may provide your own functions\n  to define how to handle indentation, line splitting, and even printing of\n  all the characters that have to be printed!</p>"
        ],
        "elements": [],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Gc",
    "module_info":
      "<p>Memory management control and statistics; finalised values.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "stat",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.minor_words\">minor_words</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of words allocated in the minor heap since\n       the program was started.  This number is accurate in\n       byte-code programs, but only an approximation in programs\n       compiled to native code.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.promoted_words\">promoted_words</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of words allocated in the minor heap that\n       survived a minor collection and were moved to the major heap\n       since the program was started.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.major_words\">major_words</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of words allocated in the major heap, including\n       the promoted words, since the program was started.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.minor_collections\">minor_collections</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of minor collections since the program was started.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.major_collections\">major_collections</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of major collection cycles completed since the program\n        was started.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.heap_words\">heap_words</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Total size of the major heap, in words.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.heap_chunks\">heap_chunks</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of contiguous pieces of memory that make up the major heap.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.live_words\">live_words</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of words of live data in the major heap, including the header\n       words.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.live_blocks\">live_blocks</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of live blocks in the major heap.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.free_words\">free_words</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of words in the free list.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.free_blocks\">free_blocks</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of blocks in the free list.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.largest_free\">largest_free</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Size (in words) of the largest block in the free list.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.fragments\">fragments</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of wasted words due to fragmentation.  These are\n       1-words free blocks placed between two live blocks.  They\n       are not available for allocation.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.compactions\">compactions</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of heap compactions since the program was started.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.top_heap_words\">top_heap_words</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Maximum size reached by the major heap, in words.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.stack_size\">stack_size</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Current size of the stack, in words.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>"
              ],
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The memory management counters are returned in a <code class=\"code\">stat</code> record.</p>\n\n<p>The total amount of memory allocated by the program since it was started\n   is (in words) <code class=\"code\">minor_words&nbsp;+&nbsp;major_words&nbsp;-&nbsp;promoted_words</code>.  Multiply by\n   the word size (4 on a 32-bit machine, 8 on a 64-bit machine) to get\n   the number of bytes.</p>\n</div>"
              ]
            ]
          ],
          [
            "Typevariant",
            [
              "control",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTcontrol.minor_heap_size\">minor_heap_size</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The size (in words) of the minor heap.  Changing\n       this parameter will trigger a minor collection.  Default: 256k.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTcontrol.major_heap_increment\">major_heap_increment</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>How much to add to the major heap when increasing it. If this\n        number is less than or equal to 1000, it is a percentage of\n        the current heap size (i.e. setting it to 100 will double the heap\n        size at each increase). If it is more than 1000, it is a fixed\n        number of words that will be added to the heap. Default: 15.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTcontrol.space_overhead\">space_overhead</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The major GC speed is computed from this parameter.\n       This is the memory that will be \"wasted\" because the GC does not\n       immediately collect unreachable blocks.  It is expressed as a\n       percentage of the memory used for live data.\n       The GC will work more (use more CPU time and collect\n       blocks more eagerly) if <code class=\"code\">space_overhead</code> is smaller.\n       Default: 80.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTcontrol.verbose\">verbose</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>This value controls the GC messages on standard error output.\n       It is a sum of some of the following flags, to print messages\n       on the corresponding events:</p>\n<ul>\n<li><code class=\"code\">0x001</code> Start of major GC cycle.</li>\n<li><code class=\"code\">0x002</code> Minor collection and major GC slice.</li>\n<li><code class=\"code\">0x004</code> Growing and shrinking of the heap.</li>\n<li><code class=\"code\">0x008</code> Resizing of stacks and memory manager tables.</li>\n<li><code class=\"code\">0x010</code> Heap compaction.</li>\n<li><code class=\"code\">0x020</code> Change of GC parameters.</li>\n<li><code class=\"code\">0x040</code> Computation of major GC slice size.</li>\n<li><code class=\"code\">0x080</code> Calling of finalisation functions.</li>\n<li><code class=\"code\">0x100</code> Bytecode executable and shared library search at start-up.</li>\n<li><code class=\"code\">0x200</code> Computation of compaction-triggering condition.</li>\n<li><code class=\"code\">0x400</code> Output GC statistics at program exit.\n       Default: 0.</li>\n</ul>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTcontrol.max_overhead\">max_overhead</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Heap compaction is triggered when the estimated amount\n       of \"wasted\" memory is more than <code class=\"code\">max_overhead</code> percent of the\n       amount of live data.  If <code class=\"code\">max_overhead</code> is set to 0, heap\n       compaction is triggered at the end of each major GC cycle\n       (this setting is intended for testing purposes only).\n       If <code class=\"code\">max_overhead&nbsp;&gt;=&nbsp;1000000</code>, compaction is never triggered.\n       If compaction is permanently disabled, it is strongly suggested\n       to set <code class=\"code\">allocation_policy</code> to 1.\n       Default: 500.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTcontrol.stack_limit\">stack_limit</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The maximum size of the stack (in words).  This is only\n       relevant to the byte-code runtime, as the native code runtime\n       uses the operating system's stack.  Default: 1024k.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTcontrol.allocation_policy\">allocation_policy</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The policy used for allocating in the heap.  Possible\n        values are 0 and 1.  0 is the next-fit policy, which is\n        quite fast but can result in fragmentation.  1 is the\n        first-fit policy, which can be slower in some cases but\n        can be better for programs with fragmentation problems.\n        Default: 0.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.0</li>\n</ul>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcontrol.window_size\">window_size</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The size of the window used by the major GC for smoothing\n        out variations in its workload. This is an integer between\n        1 and 50.\n        Default: 1.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>"
              ],
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The GC parameters are given as a <code class=\"code\">control</code> record.  Note that\n    these parameters can also be initialised by setting the\n    OCAMLRUNPARAM environment variable.  See the documentation of\n    <code class=\"code\">ocamlrun</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "stat",
              "unit ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the current values of the memory management counters in a\n   <code class=\"code\">stat</code> record.  This function examines every heap block to get the\n   statistics.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "quick_stat",
              "unit ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">stat</code> except that <code class=\"code\">live_words</code>, <code class=\"code\">live_blocks</code>, <code class=\"code\">free_words</code>,\n    <code class=\"code\">free_blocks</code>, <code class=\"code\">largest_free</code>, and <code class=\"code\">fragments</code> are set to 0.  This\n    function is much faster than <code class=\"code\">stat</code> because it does not need to go\n    through the heap.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "counters",
              "unit -> float * float * float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return <code class=\"code\">(minor_words,&nbsp;promoted_words,&nbsp;major_words)</code>.  This function\n    is as fast as <code class=\"code\">quick_stat</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "minor_words",
              "unit -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Number of words allocated in the minor heap since the program was\n    started. This number is accurate in byte-code programs, but only an\n    approximation in programs compiled to native code.</p>\n\n<p>In native code this function does not allocate.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.04</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "get",
              "unit ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the current values of the GC parameters in a <code class=\"code\">control</code> record.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "set",
              "control",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">set&nbsp;r</code> changes the GC parameters according to the <code class=\"code\">control</code> record <code class=\"code\">r</code>.\n   The normal usage is: <code class=\"code\"><span class=\"constructor\">Gc</span>.set&nbsp;{&nbsp;(<span class=\"constructor\">Gc</span>.get())&nbsp;<span class=\"keyword\">with</span>&nbsp;<span class=\"constructor\">Gc</span>.verbose&nbsp;=&nbsp;0x00d&nbsp;}</code></p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "minor",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Trigger a minor collection.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "major_slice",
              "int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">major_slice&nbsp;n</code>\n    Do a minor collection and a slice of major collection. <code class=\"code\">n</code> is the\n    size of the slice: the GC will do enough work to free (on average)\n    <code class=\"code\">n</code> words of memory. If <code class=\"code\">n</code> = 0, the GC will try to do enough work\n    to ensure that the next automatic slice has no work to do.\n    This function returns an unspecified integer (currently: 0).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "major",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Do a minor collection and finish the current major collection cycle.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "full_major",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Do a minor collection, finish the current major collection cycle,\n   and perform a complete new cycle.  This will collect all currently\n   unreachable blocks.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "compact",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Perform a full major collection and compact the heap.  Note that heap\n   compaction is a lengthy operation.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "print_stat",
              "out_channel",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Print the current values of the memory management counters (in\n   human-readable form) into the channel argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "allocated_bytes",
              "unit -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the total number of bytes allocated since the program was\n   started.  It is returned as a <code class=\"code\">float</code> to avoid overflow problems\n   with <code class=\"code\">int</code> on 32-bit machines.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "get_minor_free",
              "unit -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the current size of the free space inside the minor heap.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "get_bucket",
              "int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">get_bucket&nbsp;n</code> returns the current size of the <code class=\"code\">n</code>-th future bucket\n    of the GC smoothing system. The unit is one millionth of a full GC.\n    Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is negative, return 0 if n is larger\n    than the smoothing window.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "get_credit",
              "unit -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">get_credit&nbsp;()</code> returns the current size of the \"work done in advance\"\n    counter of the GC smoothing system. The unit is one millionth of a\n    full GC.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "huge_fallback_count",
              "unit -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the number of times we tried to map huge pages and had to fall\n    back to small pages. This is always 0 if <code class=\"code\"><span class=\"constructor\">OCAMLRUNPARAM</span></code> contains <code class=\"code\"><span class=\"constructor\">H</span>=1</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "finalise",
              "('a -> unit) -> 'a -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">finalise&nbsp;f&nbsp;v</code> registers <code class=\"code\">f</code> as a finalisation function for <code class=\"code\">v</code>.\n   <code class=\"code\">v</code> must be heap-allocated.  <code class=\"code\">f</code> will be called with <code class=\"code\">v</code> as\n   argument at some point between the first time <code class=\"code\">v</code> becomes unreachable\n   (including through weak pointers) and the time <code class=\"code\">v</code> is collected by\n   the GC. Several functions can\n   be registered for the same value, or even several instances of the\n   same function.  Each instance will be called once (or never,\n   if the program terminates before <code class=\"code\">v</code> becomes unreachable).</p>\n\n<p>The GC will call the finalisation functions in the order of\n   deallocation.  When several values become unreachable at the\n   same time (i.e. during the same GC cycle), the finalisation\n   functions will be called in the reverse order of the corresponding\n   calls to <code class=\"code\">finalise</code>.  If <code class=\"code\">finalise</code> is called in the same order\n   as the values are allocated, that means each value is finalised\n   before the values it depends upon.  Of course, this becomes\n   false if additional dependencies are introduced by assignments.</p>\n\n<p>In the presence of multiple OCaml threads it should be assumed that\n   any particular finaliser may be executed in any of the threads.</p>\n\n<p>Anything reachable from the closure of finalisation functions\n   is considered reachable, so the following code will not work\n   as expected:</p>\n<ul>\n<li><code class=\"code\">&nbsp;<span class=\"keyword\">let</span>&nbsp;v&nbsp;=&nbsp;...&nbsp;<span class=\"keyword\">in</span>&nbsp;<span class=\"constructor\">Gc</span>.finalise&nbsp;(<span class=\"keyword\">fun</span>&nbsp;_&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;...v...)&nbsp;v&nbsp;</code></li>\n</ul>\n<p>Instead you should make sure that <code class=\"code\">v</code> is not in the closure of\n   the finalisation function by writing:</p>\n<ul>\n<li><code class=\"code\">&nbsp;<span class=\"keyword\">let</span>&nbsp;f&nbsp;=&nbsp;<span class=\"keyword\">fun</span>&nbsp;x&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;...&nbsp;&nbsp;<span class=\"keyword\">let</span>&nbsp;v&nbsp;=&nbsp;...&nbsp;<span class=\"keyword\">in</span>&nbsp;<span class=\"constructor\">Gc</span>.finalise&nbsp;f&nbsp;v&nbsp;</code></li>\n</ul>\n<p>The <code class=\"code\">f</code> function can use all features of OCaml, including\n   assignments that make the value reachable again.  It can also\n   loop forever (in this case, the other\n   finalisation functions will not be called during the execution of f,\n   unless it calls <code class=\"code\">finalise_release</code>).\n   It can call <code class=\"code\">finalise</code> on <code class=\"code\">v</code> or other values to register other\n   functions or even itself.  It can raise an exception; in this case\n   the exception will interrupt whatever the program was doing when\n   the function was called.</p>\n\n<p><code class=\"code\">finalise</code> will raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">v</code> is not\n   guaranteed to be heap-allocated.  Some examples of values that are not\n   heap-allocated are integers, constant constructors, booleans,\n   the empty array, the empty list, the unit value.  The exact list\n   of what is heap-allocated or not is implementation-dependent.\n   Some constant values can be heap-allocated but never deallocated\n   during the lifetime of the program, for example a list of integer\n   constants; this is also implementation-dependent.\n   Note that values of types <code class=\"code\">float</code> are sometimes allocated and\n   sometimes not, so finalising them is unsafe, and <code class=\"code\">finalise</code> will\n   also raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> for them. Values of type <code class=\"code\"><span class=\"keywordsign\">'</span>a&nbsp;<span class=\"constructor\">Lazy</span>.t</code>\n   (for any <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>) are like <code class=\"code\">float</code> in this respect, except that the\n   compiler sometimes optimizes them in a way that prevents <code class=\"code\">finalise</code>\n   from detecting them. In this case, it will not raise\n   <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code>, but you should still avoid calling <code class=\"code\">finalise</code>\n   on lazy values.</p>\n\n<p>The results of calling <a href=\"String.html#VALmake\"><code class=\"code\"><span class=\"constructor\">String</span>.make</code></a>, <a href=\"Bytes.html#VALmake\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.make</code></a>, <a href=\"Bytes.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.create</code></a>,\n   <a href=\"Array.html#VALmake\"><code class=\"code\"><span class=\"constructor\">Array</span>.make</code></a>, and <a href=\"Pervasives.html#VALref\"><code class=\"code\">ref</code></a> are guaranteed to be\n   heap-allocated and non-constant except when the length argument is <code class=\"code\">0</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "finalise_last",
              "(unit -> unit) -> 'a -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>same as <a href=\"Gc.html#VALfinalise\"><code class=\"code\"><span class=\"constructor\">Gc</span>.finalise</code></a> except the value is not given as argument. So\n    you can't use the given value for the computation of the\n    finalisation function. The benefit is that the function is called\n    after the value is unreachable for the last time instead of the\n    first time. So contrary to <a href=\"Gc.html#VALfinalise\"><code class=\"code\"><span class=\"constructor\">Gc</span>.finalise</code></a> the value will never be\n    reachable again or used again. In particular every weak pointer\n    and ephemeron that contained this value as key or data is unset\n    before running the finalisation function. Moreover the\n    finalisation function attached with `GC.finalise` are always\n    called before the finalisation function attached with `GC.finalise_last`.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.04</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "finalise_release",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>A finalisation function may call <code class=\"code\">finalise_release</code> to tell the\n    GC that it can launch the next finalisation function without waiting\n    for the current one to return.</p>\n</div>"
              ]
            ]
          ],
          [
            "Typevariant",
            [
              "alarm",
              "None",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>An alarm is a piece of data that calls a user function at the end of\n   each major GC cycle.  The following functions are provided to create\n   and delete alarms.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "create_alarm",
              "(unit -> unit) ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">create_alarm&nbsp;f</code> will arrange for <code class=\"code\">f</code> to be called at the end of each\n   major GC cycle, starting with the current cycle or the next one.\n   A value of type <code class=\"code\">alarm</code> is returned that you can\n   use to call <code class=\"code\">delete_alarm</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "delete_alarm",
              "alarm",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">delete_alarm&nbsp;a</code> will stop the calls to the function associated\n   to <code class=\"code\">a</code>.  Calling <code class=\"code\">delete_alarm&nbsp;a</code> again has no effect.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Genlex",
    "module_info":
      "<p>A generic lexical analyzer.</p><p>This module implements a simple 'standard' lexical analyzer, presented\n   as a function from character streams to token streams. It implements\n   roughly the lexical conventions of OCaml, but is parameterized by the\n   set of keywords of your language.</p><p>Example: a lexer suitable for a desk calculator is obtained by</p><pre class=\"codepre\"><code class=\"code\">     <span class=\"keyword\">let</span> lexer = make_lexer [<span class=\"string\">\"+\"</span>;<span class=\"string\">\"-\"</span>;<span class=\"string\">\"*\"</span>;<span class=\"string\">\"/\"</span>;<span class=\"string\">\"let\"</span>;<span class=\"string\">\"=\"</span>; <span class=\"string\">\"(\"</span>; <span class=\"string\">\")\"</span>]  </code></pre><p>The associated parser would be a function from <code class=\"code\">token&nbsp;stream</code>\n   to, for instance, <code class=\"code\">int</code>, and would have rules such as:</p><pre class=\"codepre\"><code class=\"code\">           <span class=\"keyword\">let</span> <span class=\"keyword\">rec</span> parse_expr = <span class=\"keyword\">parser</span>\n             <span class=\"keywordsign\">|</span> [&lt; n1 = parse_atom; n2 = parse_remainder n1 &gt;] <span class=\"keywordsign\">-&gt;</span> n2\n           <span class=\"keyword\">and</span> parse_atom = <span class=\"keyword\">parser</span>\n             <span class=\"keywordsign\">|</span> [&lt; <span class=\"keywordsign\">'</span><span class=\"constructor\">Int</span> n &gt;] <span class=\"keywordsign\">-&gt;</span> n\n             <span class=\"keywordsign\">|</span> [&lt; <span class=\"keywordsign\">'</span><span class=\"constructor\">Kwd</span> <span class=\"string\">\"(\"</span>; n = parse_expr; <span class=\"keywordsign\">'</span><span class=\"constructor\">Kwd</span> <span class=\"string\">\")\"</span> &gt;] <span class=\"keywordsign\">-&gt;</span> n\n           <span class=\"keyword\">and</span> parse_remainder n1 = <span class=\"keyword\">parser</span>\n             <span class=\"keywordsign\">|</span> [&lt; <span class=\"keywordsign\">'</span><span class=\"constructor\">Kwd</span> <span class=\"string\">\"+\"</span>; n2 = parse_expr &gt;] <span class=\"keywordsign\">-&gt;</span> n1+n2\n             <span class=\"keywordsign\">|</span> [&lt; &gt;] <span class=\"keywordsign\">-&gt;</span> n1\n   </code></pre><p>One should notice that the use of the <code class=\"code\"><span class=\"keyword\">parser</span></code> keyword and associated\n   notation for streams are only available through camlp4 extensions. This\n   means that one has to preprocess its sources <i>e. g.</i> by using the\n   <code class=\"code\"><span class=\"string\">\"-pp\"</span></code> command-line switch of the compilers.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "token",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.Kwd\"><span class=\"constructor\">Kwd</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.Ident\"><span class=\"constructor\">Ident</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.Int\"><span class=\"constructor\">Int</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.Float\"><span class=\"constructor\">Float</span></span> <span class=\"keyword\">of</span> <code class=\"type\">float</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.String\"><span class=\"constructor\">String</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.Char\"><span class=\"constructor\">Char</span></span> <span class=\"keyword\">of</span> <code class=\"type\">char</code></code></td>\n\n</tr></tbody>"
              ],
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The type of tokens. The lexical classes are: <code class=\"code\"><span class=\"constructor\">Int</span></code> and <code class=\"code\"><span class=\"constructor\">Float</span></code>\n   for integer and floating-point numbers; <code class=\"code\"><span class=\"constructor\">String</span></code> for\n   string literals, enclosed in double quotes; <code class=\"code\"><span class=\"constructor\">Char</span></code> for\n   character literals, enclosed in single quotes; <code class=\"code\"><span class=\"constructor\">Ident</span></code> for\n   identifiers (either sequences of letters, digits, underscores\n   and quotes, or sequences of 'operator characters' such as\n   <code class=\"code\">+</code>, <code class=\"code\">*</code>, etc); and <code class=\"code\"><span class=\"constructor\">Kwd</span></code> for keywords (either identifiers or\n   single 'special characters' such as <code class=\"code\">(</code>, <code class=\"code\">}</code>, etc).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "make_lexer",
              "string list -> char",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Construct the lexer function. The first argument is the list of\n   keywords. An identifier <code class=\"code\">s</code> is returned as <code class=\"code\"><span class=\"constructor\">Kwd</span>&nbsp;s</code> if <code class=\"code\">s</code>\n   belongs to this list, and as <code class=\"code\"><span class=\"constructor\">Ident</span>&nbsp;s</code> otherwise.\n   A special character <code class=\"code\">s</code> is returned as <code class=\"code\"><span class=\"constructor\">Kwd</span>&nbsp;s</code> if <code class=\"code\">s</code>\n   belongs to this list, and cause a lexical error (exception\n   <a href=\"Stream.html#EXCEPTIONError\"><code class=\"code\"><span class=\"constructor\">Stream</span>.<span class=\"constructor\">Error</span></code></a> with the offending lexeme as its parameter) otherwise.\n   Blanks and newlines are skipped. Comments delimited by <code class=\"code\">(*</code> and <code class=\"code\">*)</code>\n   are skipped as well, and can be nested. A <a href=\"Stream.html#EXCEPTIONFailure\"><code class=\"code\"><span class=\"constructor\">Stream</span>.<span class=\"constructor\">Failure</span></code></a> exception\n   is raised if end of stream is unexpectedly reached.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Hashtbl",
    "module_info":
      "<p>Hash tables and hash functions.</p><p>Hash tables are hashed association tables, with in-place modification.</p>",
    "sections": [
      {
        "section_name": [ "Some", "Generic interface" ],
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "('a, 'b)",
              "None",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The type of hash tables from type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code> to type <code class=\"code\"><span class=\"keywordsign\">'</span>b</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "create",
              "?random:bool -> int -> ('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create&nbsp;n</code> creates a new, empty hash table, with\n   initial size <code class=\"code\">n</code>.  For best results, <code class=\"code\">n</code> should be on the\n   order of the expected number of elements that will be in\n   the table.  The table grows as needed, so <code class=\"code\">n</code> is just an\n   initial guess.</p>\n\n<p>The optional <code class=\"code\">random</code> parameter (a boolean) controls whether\n   the internal organization of the hash table is randomized at each\n   execution of <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create</code> or deterministic over all executions.</p>\n\n<p>A hash table that is created with <code class=\"code\">~random:<span class=\"keyword\">false</span></code> uses a\n   fixed hash function (<a href=\"Hashtbl.html#VALhash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash</code></a>) to distribute keys among\n   buckets.  As a consequence, collisions between keys happen\n   deterministically.  In Web-facing applications or other\n   security-sensitive applications, the deterministic collision\n   patterns can be exploited by a malicious user to create a\n   denial-of-service attack: the attacker sends input crafted to\n   create many collisions in the table, slowing the application down.</p>\n\n<p>A hash table that is created with <code class=\"code\">~random:<span class=\"keyword\">true</span></code> uses the seeded\n   hash function <a href=\"Hashtbl.html#VALseeded_hash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.seeded_hash</code></a> with a seed that is randomly\n   chosen at hash table creation time.  In effect, the hash function\n   used is randomly selected among <code class=\"code\">2^{30}</code> different hash functions.\n   All these hash functions have different collision patterns,\n   rendering ineffective the denial-of-service attack described above.\n   However, because of randomization, enumerating all elements of the\n   hash table using <a href=\"Hashtbl.html#VALfold\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.fold</code></a> or <a href=\"Hashtbl.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.iter</code></a> is no longer\n   deterministic: elements are enumerated in different orders at\n   different runs of the program.</p>\n\n<p>If no <code class=\"code\">~random</code> parameter is given, hash tables are created\n   in non-random mode by default.  This default can be changed\n   either programmatically by calling <a href=\"Hashtbl.html#VALrandomize\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.randomize</code></a> or by\n   setting the <code class=\"code\"><span class=\"constructor\">R</span></code> flag in the <code class=\"code\"><span class=\"constructor\">OCAMLRUNPARAM</span></code> environment variable.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Before 4.00.0 </b> the <code class=\"code\">random</code> parameter was not present and all\n   hash tables were created in non-randomized mode.</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "clear",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Empty a hash table. Use <code class=\"code\">reset</code> instead of <code class=\"code\">clear</code> to shrink the\n    size of the bucket table to its initial size.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "reset",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Empty a hash table and shrink the size of the bucket table\n    to its initial size.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "copy",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the given hashtable.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.add&nbsp;tbl&nbsp;x&nbsp;y</code> adds a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code> in table <code class=\"code\">tbl</code>.\n   Previous bindings for <code class=\"code\">x</code> are not removed, but simply\n   hidden. That is, after performing <a href=\"Hashtbl.html#VALremove\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.remove</code></a><code class=\"code\">&nbsp;tbl&nbsp;x</code>,\n   the previous binding for <code class=\"code\">x</code>, if any, is restored.\n   (Same behavior as with association lists.)</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "find",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.find&nbsp;tbl&nbsp;x</code> returns the current binding of <code class=\"code\">x</code> in <code class=\"code\">tbl</code>,\n   or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such binding exists.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "find_opt",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.find_opt&nbsp;tbl&nbsp;x</code> returns the current binding of <code class=\"code\">x</code> in <code class=\"code\">tbl</code>,\n    or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such binding exists.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "find_all",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.find_all&nbsp;tbl&nbsp;x</code> returns the list of all data\n   associated with <code class=\"code\">x</code> in <code class=\"code\">tbl</code>.\n   The current binding is returned first, then the previous\n   bindings, in reverse order of introduction in the table.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mem",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.mem&nbsp;tbl&nbsp;x</code> checks if <code class=\"code\">x</code> is bound in <code class=\"code\">tbl</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "remove",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.remove&nbsp;tbl&nbsp;x</code> removes the current binding of <code class=\"code\">x</code> in <code class=\"code\">tbl</code>,\n   restoring the previous binding if it exists.\n   It does nothing if <code class=\"code\">x</code> is not bound in <code class=\"code\">tbl</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "replace",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.replace&nbsp;tbl&nbsp;x&nbsp;y</code> replaces the current binding of <code class=\"code\">x</code>\n   in <code class=\"code\">tbl</code> by a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code>.  If <code class=\"code\">x</code> is unbound in <code class=\"code\">tbl</code>,\n   a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code> is added to <code class=\"code\">tbl</code>.\n   This is functionally equivalent to <a href=\"Hashtbl.html#VALremove\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.remove</code></a><code class=\"code\">&nbsp;tbl&nbsp;x</code>\n   followed by <a href=\"Hashtbl.html#VALadd\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.add</code></a><code class=\"code\">&nbsp;tbl&nbsp;x&nbsp;y</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "iter",
              "('a -> 'b -> unit) -> ('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.iter&nbsp;f&nbsp;tbl</code> applies <code class=\"code\">f</code> to all bindings in table <code class=\"code\">tbl</code>.\n   <code class=\"code\">f</code> receives the key as first argument, and the associated value\n   as second argument. Each binding is presented exactly once to <code class=\"code\">f</code>.</p>\n\n<p>The order in which the bindings are passed to <code class=\"code\">f</code> is unspecified.\n   However, if the table contains several bindings for the same key,\n   they are passed to <code class=\"code\">f</code> in reverse order of introduction, that is,\n   the most recent binding is passed first.</p>\n\n<p>If the hash table was created in non-randomized mode, the order\n   in which the bindings are enumerated is reproducible between\n   successive runs of the program, and even between minor versions\n   of OCaml.  For randomized hash tables, the order of enumeration\n   is entirely random.</p>\n\n<p>The behavior is not defined if the hash table is modified\n   by <code class=\"code\">f</code> during the iteration.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "filter_map_inplace",
              "('a -> 'b -> 'b option) -> ('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.filter_map_inplace&nbsp;f&nbsp;tbl</code> applies <code class=\"code\">f</code> to all bindings in\n    table <code class=\"code\">tbl</code> and update each binding depending on the result of\n    <code class=\"code\">f</code>.  If <code class=\"code\">f</code> returns <code class=\"code\"><span class=\"constructor\">None</span></code>, the binding is discarded.  If it\n    returns <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;new_val</code>, the binding is update to associate the key\n    to <code class=\"code\">new_val</code>.</p>\n\n<p>Other comments for <a href=\"Hashtbl.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.iter</code></a> apply as well.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fold",
              "('a -> 'b -> 'c -> 'c) -> ('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.fold&nbsp;f&nbsp;tbl&nbsp;init</code> computes\n   <code class=\"code\">(f&nbsp;kN&nbsp;dN&nbsp;...&nbsp;(f&nbsp;k1&nbsp;d1&nbsp;init)...)</code>,\n   where <code class=\"code\">k1&nbsp;...&nbsp;kN</code> are the keys of all bindings in <code class=\"code\">tbl</code>,\n   and <code class=\"code\">d1&nbsp;...&nbsp;dN</code> are the associated values.\n   Each binding is presented exactly once to <code class=\"code\">f</code>.</p>\n\n<p>The order in which the bindings are passed to <code class=\"code\">f</code> is unspecified.\n   However, if the table contains several bindings for the same key,\n   they are passed to <code class=\"code\">f</code> in reverse order of introduction, that is,\n   the most recent binding is passed first.</p>\n\n<p>If the hash table was created in non-randomized mode, the order\n   in which the bindings are enumerated is reproducible between\n   successive runs of the program, and even between minor versions\n   of OCaml.  For randomized hash tables, the order of enumeration\n   is entirely random.</p>\n\n<p>The behavior is not defined if the hash table is modified\n   by <code class=\"code\">f</code> during the iteration.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "length",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.length&nbsp;tbl</code> returns the number of bindings in <code class=\"code\">tbl</code>.\n   It takes constant time.  Multiple bindings are counted once each, so\n   <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.length</code> gives the number of times <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.iter</code> calls its\n   first argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "randomize",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>After a call to <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.randomize()</code>, hash tables are created in\n    randomized mode by default: <a href=\"Hashtbl.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create</code></a> returns randomized\n    hash tables, unless the <code class=\"code\">~random:<span class=\"keyword\">false</span></code> optional parameter is given.\n    The same effect can be achieved by setting the <code class=\"code\"><span class=\"constructor\">R</span></code> parameter in\n    the <code class=\"code\"><span class=\"constructor\">OCAMLRUNPARAM</span></code> environment variable.</p>\n\n<p>It is recommended that applications or Web frameworks that need to\n    protect themselves against the denial-of-service attack described\n    in <a href=\"Hashtbl.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create</code></a> call <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.randomize()</code> at initialization\n    time.</p>\n\n<p>Note that once <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.randomize()</code> was called, there is no way\n    to revert to the non-randomized default behavior of <a href=\"Hashtbl.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create</code></a>.\n    This is intentional.  Non-randomized hash tables can still be\n    created using <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create&nbsp;~random:<span class=\"keyword\">false</span></code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "is_randomized",
              "unit -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>return if the tables are currently created in randomized mode by default</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Typevariant",
            [
              "statistics",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstatistics.num_bindings\">num_bindings</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of bindings present in the table.\n        Same value as returned by <a href=\"Hashtbl.html#VALlength\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.length</code></a>.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstatistics.num_buckets\">num_buckets</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of buckets in the table.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstatistics.max_bucket_length\">max_bucket_length</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Maximal number of bindings per bucket.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstatistics.bucket_histogram\">bucket_histogram</span>&nbsp;: <code class=\"type\">int array</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Histogram of bucket sizes.  This array <code class=\"code\">histo</code> has\n        length <code class=\"code\">max_bucket_length&nbsp;+&nbsp;1</code>.  The value of\n        <code class=\"code\">histo.(i)</code> is the number of buckets whose size is <code class=\"code\">i</code>.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>"
              ],
              [
                "Some",
                "<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "stats",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.stats&nbsp;tbl</code> returns statistics about the table <code class=\"code\">tbl</code>:\n   number of buckets, size of the biggest bucket, distribution of\n   buckets by size.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "to_seq",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the whole table, in unspecified order.</p>\n\n<p>The behavior is not defined if the hash table is modified\n    during the iteration.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_seq_keys",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on 'as, in ascending order</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_seq_values",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on values, in ascending order of their corresponding 'a</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add_seq",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Add the given bindings to the table, using <a href=\"Hashtbl.html#VALadd\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.add</code></a></p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "replace_seq",
              "('a, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Add the given bindings to the table, using <a href=\"Hashtbl.html#VALreplace\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.replace</code></a></p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_seq",
              "('a * 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Build a table from the given bindings. The bindings are added\n    in the same order they appear in the sequence, using <a href=\"Hashtbl.html#VALreplace_seq\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.replace_seq</code></a>,\n    which means that if two pairs have the same key, only the latest one\n    will appear in the table.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Functorial interface" ],
        "section_info": [
          "Some",
          "<p>The functorial interface allows the use of specific comparison\n    and hash functions, either for performance/security concerns,\n    or because keys are not hashable/comparable with the polymorphic builtins.</p><p>For instance, one might want to specialize a table for integer keys:</p>"
        ],
        "elements": [
          [
            "Module",
            [
              "IntHash",
              [
                "Some",
                "<p>This creates a new module <code class=\"code\"><span class=\"constructor\">IntHashtbl</span></code>, with a new type <code class=\"code\"><span class=\"keywordsign\">'</span>a<br>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"constructor\">IntHashtbl</span>.t</code> of tables from <code class=\"code\">int</code> to <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>. In this example, <code class=\"code\">h</code>\n    contains <code class=\"code\">string</code> values so its type is <code class=\"code\">string&nbsp;<span class=\"constructor\">IntHashtbl</span>.t</code>.</p><p>Note that the new type <code class=\"code\"><span class=\"keywordsign\">'</span>a&nbsp;<span class=\"constructor\">IntHashtbl</span>.t</code> is not compatible with\n    the type <code class=\"code\">(<span class=\"keywordsign\">'</span>a,<span class=\"keywordsign\">'</span>b)&nbsp;<span class=\"constructor\">Hashtbl</span>.t</code> of the generic interface. For\n    example, <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.length&nbsp;h</code> would not type-check, you must use\n    <code class=\"code\"><span class=\"constructor\">IntHashtbl</span>.length</code>.</p>"
              ]
            ]
          ],
          [
            "Moduletype",
            [
              "HashedType",
              [
                "Some",
                "<p>The input signature of the functor <a href=\"Hashtbl.Make.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">Make</span></code></a>.</p>"
              ]
            ]
          ],
          [
            "Moduletype",
            [
              "S",
              [
                "Some",
                "<p>The output signature of the functor <a href=\"Hashtbl.Make.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">Make</span></code></a>.</p>"
              ]
            ]
          ],
          [
            "Module",
            [
              "Make",
              [
                "Some",
                "<p>Functor building an implementation of the hashtable structure.</p>"
              ]
            ]
          ],
          [
            "Moduletype",
            [
              "SeededHashedType",
              [
                "Some",
                "<p>The input signature of the functor <a href=\"Hashtbl.MakeSeeded.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">MakeSeeded</span></code></a>.</p>"
              ]
            ]
          ],
          [
            "Moduletype",
            [
              "SeededS",
              [
                "Some",
                "<p>The output signature of the functor <a href=\"Hashtbl.MakeSeeded.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">MakeSeeded</span></code></a>.</p>"
              ]
            ]
          ],
          [
            "Module",
            [
              "MakeSeeded",
              [
                "Some",
                "<p>Functor building an implementation of the hashtable structure.</p>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "The polymorphic hash functions" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "hash",
              "'a -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash&nbsp;x</code> associates a nonnegative integer to any value of\n   any type. It is guaranteed that\n   if <code class=\"code\">x&nbsp;=&nbsp;y</code> or <code class=\"code\"><span class=\"constructor\">Pervasives</span>.compare&nbsp;x&nbsp;y&nbsp;=&nbsp;0</code>, then <code class=\"code\">hash&nbsp;x&nbsp;=&nbsp;hash&nbsp;y</code>.\n   Moreover, <code class=\"code\">hash</code> always terminates, even on cyclic structures.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "seeded_hash",
              "int -> 'a -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>A variant of <a href=\"Hashtbl.html#VALhash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash</code></a> that is further parameterized by\n   an integer seed.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "hash_param",
              "int -> int -> 'a -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash_param&nbsp;meaningful&nbsp;total&nbsp;x</code> computes a hash value for <code class=\"code\">x</code>,\n   with the same properties as for <code class=\"code\">hash</code>. The two extra integer\n   parameters <code class=\"code\">meaningful</code> and <code class=\"code\">total</code> give more precise control over\n   hashing. Hashing performs a breadth-first, left-to-right traversal\n   of the structure <code class=\"code\">x</code>, stopping after <code class=\"code\">meaningful</code> meaningful nodes\n   were encountered, or <code class=\"code\">total</code> nodes (meaningful or not) were\n   encountered.  If <code class=\"code\">total</code> as specified by the user exceeds a certain\n   value, currently 256, then it is capped to that value.\n   Meaningful nodes are: integers; floating-point\n   numbers; strings; characters; booleans; and constant\n   constructors. Larger values of <code class=\"code\">meaningful</code> and <code class=\"code\">total</code> means that\n   more nodes are taken into account to compute the final hash value,\n   and therefore collisions are less likely to happen.  However,\n   hashing takes longer. The parameters <code class=\"code\">meaningful</code> and <code class=\"code\">total</code>\n   govern the tradeoff between accuracy and speed.  As default\n   choices, <a href=\"Hashtbl.html#VALhash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash</code></a> and <a href=\"Hashtbl.html#VALseeded_hash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.seeded_hash</code></a> take\n   <code class=\"code\">meaningful&nbsp;=&nbsp;10</code> and <code class=\"code\">total&nbsp;=&nbsp;100</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "seeded_hash_param",
              "int -> int -> int -> 'a -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>A variant of <a href=\"Hashtbl.html#VALhash_param\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash_param</code></a> that is further parameterized by\n   an integer seed.  Usage:\n   <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.seeded_hash_param&nbsp;meaningful&nbsp;total&nbsp;seed&nbsp;x</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Int32",
    "module_info":
      "<p>32-bit integers.</p><p>This module provides operations on the type <code class=\"code\">int32</code>\n   of signed 32-bit integers.  Unlike the built-in <code class=\"code\">int</code> type,\n   the type <code class=\"code\">int32</code> is guaranteed to be exactly 32-bit wide on all\n   platforms.  All arithmetic operations over <code class=\"code\">int32</code> are taken\n   modulo 2<sup class=\"superscript\">32</sup>.</p><p>Performance notice: values of type <code class=\"code\">int32</code> occupy more memory\n   space than values of type <code class=\"code\">int</code>, and arithmetic operations on\n   <code class=\"code\">int32</code> are generally slower than those on <code class=\"code\">int</code>.  Use <code class=\"code\">int32</code>\n   only when the application requires exact 32-bit arithmetic.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "zero",
              "int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The 32-bit integer 0.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "one",
              "int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The 32-bit integer 1.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "minus_one",
              "int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The 32-bit integer -1.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "neg",
              "int32 -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Unary negation.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add",
              "int32 -> int32 -> int32",
              [
                "Some", "<div class=\"info-desc\">\n<p>Addition.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sub",
              "int32 -> int32 -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Subtraction.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mul",
              "int32 -> int32 -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Multiplication.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "div",
              "int32 -> int32 -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Integer division.  Raise <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code> if the second\n   argument is zero.  This division rounds the real quotient of\n   its arguments towards zero, as specified for <a href=\"Pervasives.html#VAL(/)\"><code class=\"code\">(/)</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rem",
              "int32 -> int32 -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Integer remainder.  If <code class=\"code\">y</code> is not zero, the result\n   of <code class=\"code\"><span class=\"constructor\">Int32</span>.rem&nbsp;x&nbsp;y</code> satisfies the following property:\n   <code class=\"code\">x&nbsp;=&nbsp;<span class=\"constructor\">Int32</span>.add&nbsp;(<span class=\"constructor\">Int32</span>.mul&nbsp;(<span class=\"constructor\">Int32</span>.div&nbsp;x&nbsp;y)&nbsp;y)&nbsp;(<span class=\"constructor\">Int32</span>.rem&nbsp;x&nbsp;y)</code>.\n   If <code class=\"code\">y&nbsp;=&nbsp;0</code>, <code class=\"code\"><span class=\"constructor\">Int32</span>.rem&nbsp;x&nbsp;y</code> raises <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "succ",
              "int32 -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Successor.  <code class=\"code\"><span class=\"constructor\">Int32</span>.succ&nbsp;x</code> is <code class=\"code\"><span class=\"constructor\">Int32</span>.add&nbsp;x&nbsp;<span class=\"constructor\">Int32</span>.one</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "pred",
              "int32 -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Predecessor.  <code class=\"code\"><span class=\"constructor\">Int32</span>.pred&nbsp;x</code> is <code class=\"code\"><span class=\"constructor\">Int32</span>.sub&nbsp;x&nbsp;<span class=\"constructor\">Int32</span>.one</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "abs",
              "int32 -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the absolute value of its argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "max_int",
              "int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The greatest representable 32-bit integer, 2<sup class=\"superscript\">31</sup> - 1.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "min_int",
              "int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The smallest representable 32-bit integer, -2<sup class=\"superscript\">31</sup>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "logand",
              "int32 -> int32 -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Bitwise logical and.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "logor",
              "int32 -> int32 -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Bitwise logical or.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "logxor",
              "int32 -> int32 -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Bitwise logical exclusive or.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lognot",
              "int32 -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Bitwise logical negation.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "shift_left",
              "int32 -> int -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Int32</span>.shift_left&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;32</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "shift_right",
              "int32 -> int -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Int32</span>.shift_right&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.\n   This is an arithmetic shift: the sign bit of <code class=\"code\">x</code> is replicated\n   and inserted in the vacated bits.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;32</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "shift_right_logical",
              "int32 -> int -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Int32</span>.shift_right_logical&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.\n   This is a logical shift: zeroes are inserted in the vacated bits\n   regardless of the sign of <code class=\"code\">x</code>.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;32</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_int",
              "int -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given integer (type <code class=\"code\">int</code>) to a 32-bit integer\n    (type <code class=\"code\">int32</code>).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_int",
              "int32 -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given 32-bit integer (type <code class=\"code\">int32</code>) to an\n   integer (type <code class=\"code\">int</code>).  On 32-bit platforms, the 32-bit integer\n   is taken modulo 2<sup class=\"superscript\">31</sup>, i.e. the high-order bit is lost\n   during the conversion.  On 64-bit platforms, the conversion\n   is exact.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_float",
              "float -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given floating-point number to a 32-bit integer,\n   discarding the fractional part (truncate towards 0).\n   The result of the conversion is undefined if, after truncation,\n   the number is outside the range [<a href=\"Int32.html#VALmin_int\"><code class=\"code\"><span class=\"constructor\">Int32</span>.min_int</code></a>, <a href=\"Int32.html#VALmax_int\"><code class=\"code\"><span class=\"constructor\">Int32</span>.max_int</code></a>].</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_float",
              "int32 -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given 32-bit integer to a floating-point number.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_string",
              "string -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given string to a 32-bit integer.\n   The string is read in decimal (by default, or if the string \n   begins with <code class=\"code\">0u</code>) or in hexadecimal, octal or binary if the\n   string begins with <code class=\"code\">0x</code>, <code class=\"code\">0o</code> or <code class=\"code\">0b</code> respectively.</p>\n\n<p>The <code class=\"code\">0u</code> prefix reads the input as an unsigned integer in the range\n   <code class=\"code\">[0,&nbsp;2*<span class=\"constructor\">Int32</span>.max_int+1]</code>.  If the input exceeds <a href=\"Int32.html#VALmax_int\"><code class=\"code\"><span class=\"constructor\">Int32</span>.max_int</code></a>\n   it is converted to the signed integer\n   <code class=\"code\"><span class=\"constructor\">Int32</span>.min_int&nbsp;+&nbsp;input&nbsp;-&nbsp;<span class=\"constructor\">Int32</span>.max_int&nbsp;-&nbsp;1</code>.</p>\n\n<p>The <code class=\"code\">_</code> (underscore) character can appear anywhere in the string\n   and is ignored.\n   Raise <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"Int32.of_string\"</span></code> if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type <code class=\"code\">int32</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_string_opt",
              "string -> int32 option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">of_string</code>, but return <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_string",
              "int32 -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the string representation of its argument, in signed decimal.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "bits_of_float",
              "float -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the internal representation of the given float according\n   to the IEEE 754 floating-point 'single format' bit layout.\n   Bit 31 of the result represents the sign of the float;\n   bits 30 to 23 represent the (biased) exponent; bits 22 to 0\n   represent the mantissa.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "float_of_bits",
              "int32 -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the floating-point number whose internal representation,\n   according to the IEEE 754 floating-point 'single format' bit layout,\n   is the given <code class=\"code\">int32</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Type",
            [
              "t",
              "int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>An alias for the type of 32-bit integers.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "compare",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The comparison function for 32-bit integers, with the same specification as\n    <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>, this function <code class=\"code\">compare</code>\n    allows the module <code class=\"code\"><span class=\"constructor\">Int32</span></code> to be passed as argument to the functors\n    <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "equal",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The equal function for int32s.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Int64",
    "module_info":
      "<p>64-bit integers.</p><p>This module provides operations on the type <code class=\"code\">int64</code> of\n   signed 64-bit integers.  Unlike the built-in <code class=\"code\">int</code> type,\n   the type <code class=\"code\">int64</code> is guaranteed to be exactly 64-bit wide on all\n   platforms.  All arithmetic operations over <code class=\"code\">int64</code> are taken\n   modulo 2<sup class=\"superscript\">64</sup></p><p>Performance notice: values of type <code class=\"code\">int64</code> occupy more memory\n   space than values of type <code class=\"code\">int</code>, and arithmetic operations on\n   <code class=\"code\">int64</code> are generally slower than those on <code class=\"code\">int</code>.  Use <code class=\"code\">int64</code>\n   only when the application requires exact 64-bit arithmetic.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "zero",
              "int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The 64-bit integer 0.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "one",
              "int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The 64-bit integer 1.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "minus_one",
              "int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The 64-bit integer -1.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "neg",
              "int64 -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Unary negation.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add",
              "int64 -> int64 -> int64",
              [
                "Some", "<div class=\"info-desc\">\n<p>Addition.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sub",
              "int64 -> int64 -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Subtraction.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mul",
              "int64 -> int64 -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Multiplication.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "div",
              "int64 -> int64 -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Integer division.  Raise <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code> if the second\n   argument is zero.  This division rounds the real quotient of\n   its arguments towards zero, as specified for <a href=\"Pervasives.html#VAL(/)\"><code class=\"code\">(/)</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rem",
              "int64 -> int64 -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Integer remainder.  If <code class=\"code\">y</code> is not zero, the result\n   of <code class=\"code\"><span class=\"constructor\">Int64</span>.rem&nbsp;x&nbsp;y</code> satisfies the following property:\n   <code class=\"code\">x&nbsp;=&nbsp;<span class=\"constructor\">Int64</span>.add&nbsp;(<span class=\"constructor\">Int64</span>.mul&nbsp;(<span class=\"constructor\">Int64</span>.div&nbsp;x&nbsp;y)&nbsp;y)&nbsp;(<span class=\"constructor\">Int64</span>.rem&nbsp;x&nbsp;y)</code>.\n   If <code class=\"code\">y&nbsp;=&nbsp;0</code>, <code class=\"code\"><span class=\"constructor\">Int64</span>.rem&nbsp;x&nbsp;y</code> raises <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "succ",
              "int64 -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Successor.  <code class=\"code\"><span class=\"constructor\">Int64</span>.succ&nbsp;x</code> is <code class=\"code\"><span class=\"constructor\">Int64</span>.add&nbsp;x&nbsp;<span class=\"constructor\">Int64</span>.one</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "pred",
              "int64 -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Predecessor.  <code class=\"code\"><span class=\"constructor\">Int64</span>.pred&nbsp;x</code> is <code class=\"code\"><span class=\"constructor\">Int64</span>.sub&nbsp;x&nbsp;<span class=\"constructor\">Int64</span>.one</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "abs",
              "int64 -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the absolute value of its argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "max_int",
              "int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The greatest representable 64-bit integer, 2<sup class=\"superscript\">63</sup> - 1.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "min_int",
              "int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The smallest representable 64-bit integer, -2<sup class=\"superscript\">63</sup>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "logand",
              "int64 -> int64 -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Bitwise logical and.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "logor",
              "int64 -> int64 -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Bitwise logical or.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "logxor",
              "int64 -> int64 -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Bitwise logical exclusive or.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lognot",
              "int64 -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Bitwise logical negation.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "shift_left",
              "int64 -> int -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Int64</span>.shift_left&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;64</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "shift_right",
              "int64 -> int -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Int64</span>.shift_right&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.\n   This is an arithmetic shift: the sign bit of <code class=\"code\">x</code> is replicated\n   and inserted in the vacated bits.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;64</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "shift_right_logical",
              "int64 -> int -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Int64</span>.shift_right_logical&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.\n   This is a logical shift: zeroes are inserted in the vacated bits\n   regardless of the sign of <code class=\"code\">x</code>.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;64</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_int",
              "int -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given integer (type <code class=\"code\">int</code>) to a 64-bit integer\n    (type <code class=\"code\">int64</code>).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_int",
              "int64 -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given 64-bit integer (type <code class=\"code\">int64</code>) to an\n   integer (type <code class=\"code\">int</code>).  On 64-bit platforms, the 64-bit integer\n   is taken modulo 2<sup class=\"superscript\">63</sup>, i.e. the high-order bit is lost\n   during the conversion.  On 32-bit platforms, the 64-bit integer\n   is taken modulo 2<sup class=\"superscript\">31</sup>, i.e. the top 33 bits are lost\n   during the conversion.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_float",
              "float -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given floating-point number to a 64-bit integer,\n   discarding the fractional part (truncate towards 0).\n   The result of the conversion is undefined if, after truncation,\n   the number is outside the range [<a href=\"Int64.html#VALmin_int\"><code class=\"code\"><span class=\"constructor\">Int64</span>.min_int</code></a>, <a href=\"Int64.html#VALmax_int\"><code class=\"code\"><span class=\"constructor\">Int64</span>.max_int</code></a>].</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_float",
              "int64 -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given 64-bit integer to a floating-point number.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_int32",
              "int32 -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given 32-bit integer (type <code class=\"code\">int32</code>)\n   to a 64-bit integer (type <code class=\"code\">int64</code>).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_int32",
              "int64 -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given 64-bit integer (type <code class=\"code\">int64</code>) to a\n   32-bit integer (type <code class=\"code\">int32</code>). The 64-bit integer\n   is taken modulo 2<sup class=\"superscript\">32</sup>, i.e. the top 32 bits are lost\n   during the conversion.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_nativeint",
              "nativeint -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given native integer (type <code class=\"code\">nativeint</code>)\n   to a 64-bit integer (type <code class=\"code\">int64</code>).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_nativeint",
              "int64 -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given 64-bit integer (type <code class=\"code\">int64</code>) to a\n   native integer.  On 32-bit platforms, the 64-bit integer\n   is taken modulo 2<sup class=\"superscript\">32</sup>.  On 64-bit platforms,\n   the conversion is exact.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_string",
              "string -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given string to a 64-bit integer.\n   The string is read in decimal (by default, or if the string \n   begins with <code class=\"code\">0u</code>) or in hexadecimal, octal or binary if the\n   string begins with <code class=\"code\">0x</code>, <code class=\"code\">0o</code> or <code class=\"code\">0b</code> respectively.</p>\n\n<p>The <code class=\"code\">0u</code> prefix reads the input as an unsigned integer in the range\n   <code class=\"code\">[0,&nbsp;2*<span class=\"constructor\">Int64</span>.max_int+1]</code>.  If the input exceeds <a href=\"Int64.html#VALmax_int\"><code class=\"code\"><span class=\"constructor\">Int64</span>.max_int</code></a>\n   it is converted to the signed integer\n   <code class=\"code\"><span class=\"constructor\">Int64</span>.min_int&nbsp;+&nbsp;input&nbsp;-&nbsp;<span class=\"constructor\">Int64</span>.max_int&nbsp;-&nbsp;1</code>.</p>\n\n<p>The <code class=\"code\">_</code> (underscore) character can appear anywhere in the string\n   and is ignored.\n   Raise <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"Int64.of_string\"</span></code> if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type <code class=\"code\">int64</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_string_opt",
              "string -> int64 option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">of_string</code>, but return <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_string",
              "int64 -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the string representation of its argument, in decimal.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "bits_of_float",
              "float -> int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the internal representation of the given float according\n   to the IEEE 754 floating-point 'double format' bit layout.\n   Bit 63 of the result represents the sign of the float;\n   bits 62 to 52 represent the (biased) exponent; bits 51 to 0\n   represent the mantissa.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "float_of_bits",
              "int64 -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the floating-point number whose internal representation,\n   according to the IEEE 754 floating-point 'double format' bit layout,\n   is the given <code class=\"code\">int64</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Type",
            [
              "t",
              "int64",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>An alias for the type of 64-bit integers.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "compare",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The comparison function for 64-bit integers, with the same specification as\n    <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>, this function <code class=\"code\">compare</code>\n    allows the module <code class=\"code\"><span class=\"constructor\">Int64</span></code> to be passed as argument to the functors\n    <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "equal",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The equal function for int64s.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Lazy",
    "module_info": "<p>Deferred computations.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Type",
            [
              "'a",
              "=",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>A value of type <code class=\"code\"><span class=\"keywordsign\">'</span>a&nbsp;<span class=\"constructor\">Lazy</span>.t</code> is a deferred computation, called\n   a suspension, that has a result of type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.  The special\n   expression syntax <code class=\"code\"><span class=\"keyword\">lazy</span>&nbsp;(expr)</code> makes a suspension of the\n   computation of <code class=\"code\">expr</code>, without computing <code class=\"code\">expr</code> itself yet.\n   \"Forcing\" the suspension will then compute <code class=\"code\">expr</code> and return its\n   result.</p>\n\n<p>Note: <code class=\"code\">lazy_t</code> is the built-in type constructor used by the compiler\n   for the <code class=\"code\"><span class=\"keyword\">lazy</span></code> keyword.  You should not use it directly.  Always use\n   <code class=\"code\"><span class=\"constructor\">Lazy</span>.t</code> instead.</p>\n\n<p>Note: <code class=\"code\"><span class=\"constructor\">Lazy</span>.force</code> is not thread-safe.  If you use this module in\n   a multi-threaded program, you will need to add some locks.</p>\n\n<p>Note: if the program is compiled with the <code class=\"code\">-rectypes</code> option,\n   ill-founded recursive definitions of the form <code class=\"code\"><span class=\"keyword\">let</span>&nbsp;<span class=\"keyword\">rec</span>&nbsp;x&nbsp;=&nbsp;<span class=\"keyword\">lazy</span>&nbsp;x</code>\n   or <code class=\"code\"><span class=\"keyword\">let</span>&nbsp;<span class=\"keyword\">rec</span>&nbsp;x&nbsp;=&nbsp;<span class=\"keyword\">lazy</span>(<span class=\"keyword\">lazy</span>(...(<span class=\"keyword\">lazy</span>&nbsp;x)))</code> are accepted by the type-checker\n   and lead, when forced, to ill-formed values that trigger infinite\n   loops in the garbage collector and other parts of the run-time system.\n   Without the <code class=\"code\">-rectypes</code> option, such ill-founded recursive definitions\n   are rejected by the type-checker.</p>\n</div>"
              ]
            ]
          ],
          [ "Exception", [ "Undefined", "None", "None" ] ],
          [
            "Function",
            [
              "force",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">force&nbsp;x</code> forces the suspension <code class=\"code\">x</code> and returns its result.\n   If <code class=\"code\">x</code> has already been forced, <code class=\"code\"><span class=\"constructor\">Lazy</span>.force&nbsp;x</code> returns the\n   same value again without recomputing it.  If it raised an exception,\n   the same exception is raised again.\n   Raise <a href=\"Lazy.html#EXCEPTIONUndefined\"><code class=\"code\"><span class=\"constructor\">Lazy</span>.<span class=\"constructor\">Undefined</span></code></a> if the forcing of <code class=\"code\">x</code> tries to force <code class=\"code\">x</code> itself\n   recursively.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "force_val",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">force_val&nbsp;x</code> forces the suspension <code class=\"code\">x</code> and returns its\n    result.  If <code class=\"code\">x</code> has already been forced, <code class=\"code\">force_val&nbsp;x</code>\n    returns the same value again without recomputing it.\n    Raise <a href=\"Lazy.html#EXCEPTIONUndefined\"><code class=\"code\"><span class=\"constructor\">Lazy</span>.<span class=\"constructor\">Undefined</span></code></a> if the forcing of <code class=\"code\">x</code> tries to force <code class=\"code\">x</code> itself\n    recursively.\n    If the computation of <code class=\"code\">x</code> raises an exception, it is unspecified\n    whether <code class=\"code\">force_val&nbsp;x</code> raises the same exception or <a href=\"Lazy.html#EXCEPTIONUndefined\"><code class=\"code\"><span class=\"constructor\">Lazy</span>.<span class=\"constructor\">Undefined</span></code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "from_fun",
              "(unit -> 'a) -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">from_fun&nbsp;f</code> is the same as <code class=\"code\"><span class=\"keyword\">lazy</span>&nbsp;(f&nbsp;())</code> but slightly more efficient.</p>\n\n<p><code class=\"code\">from_fun</code> should only be used if the function <code class=\"code\">f</code> is already defined.\n    In particular it is always less efficient to write\n    <code class=\"code\">from_fun&nbsp;(<span class=\"keyword\">fun</span>&nbsp;()&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;expr)</code> than <code class=\"code\"><span class=\"keyword\">lazy</span>&nbsp;expr</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "from_val",
              "'a -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">from_val&nbsp;v</code> returns an already-forced suspension of <code class=\"code\">v</code>.\n    This is for special purposes only and should not be confused with\n    <code class=\"code\"><span class=\"keyword\">lazy</span>&nbsp;(v)</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "is_val",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">is_val&nbsp;x</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">x</code> has already been forced and\n    did not raise an exception.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lazy_from_fun",
              "(unit -> 'a) -> 'a",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>synonym for <code class=\"code\">from_fun</code>.</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lazy_from_val",
              "'a -> 'a",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>synonym for <code class=\"code\">from_val</code>.</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lazy_is_val",
              "'a",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>synonym for <code class=\"code\">is_val</code>.</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Lexing",
    "module_info":
      "<p>The run-time library for lexers generated by <code class=\"code\">ocamllex</code>.</p>",
    "sections": [
      {
        "section_name": [ "Some", "Positions" ],
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "position",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTposition.pos_fname\">pos_fname</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTposition.pos_lnum\">pos_lnum</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTposition.pos_bol\">pos_bol</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTposition.pos_cnum\">pos_cnum</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr></tbody>"
              ],
              [
                "Some",
                "<div class=\"info-desc\">\n<p>A value of type <code class=\"code\">position</code> describes a point in a source file.\n   <code class=\"code\">pos_fname</code> is the file name; <code class=\"code\">pos_lnum</code> is the line number;\n   <code class=\"code\">pos_bol</code> is the offset of the beginning of the line (number\n   of characters between the beginning of the lexbuf and the beginning\n   of the line); <code class=\"code\">pos_cnum</code> is the offset of the position (number of\n   characters between the beginning of the lexbuf and the position).\n   The difference between <code class=\"code\">pos_cnum</code> and <code class=\"code\">pos_bol</code> is the character\n   offset within the line (i.e. the column number, assuming each\n   character is one column wide).</p>\n\n<p>See the documentation of type <code class=\"code\">lexbuf</code> for information about\n   how the lexing engine will manage positions.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "dummy_pos",
              "position",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>A value of type <code class=\"code\">position</code>, guaranteed to be different from any\n   valid position.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Lexer buffers" ],
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "lexbuf",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlexbuf.refill_buff\">refill_buff</span>&nbsp;: <code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">lexbuf</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_buffer\">lex_buffer</span>&nbsp;: <code class=\"type\">bytes</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_buffer_len\">lex_buffer_len</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_abs_pos\">lex_abs_pos</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_start_pos\">lex_start_pos</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_curr_pos\">lex_curr_pos</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_last_pos\">lex_last_pos</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_last_action\">lex_last_action</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_eof_reached\">lex_eof_reached</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_mem\">lex_mem</span>&nbsp;: <code class=\"type\">int array</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_start_p\">lex_start_p</span>&nbsp;: <code class=\"type\"><a href=\"Lexing.html#TYPEposition\">position</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_curr_p\">lex_curr_p</span>&nbsp;: <code class=\"type\"><a href=\"Lexing.html#TYPEposition\">position</a></code>;</code></td>\n\n</tr></tbody>"
              ],
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The type of lexer buffers. A lexer buffer is the argument passed\n   to the scanning functions defined by the generated scanners.\n   The lexer buffer holds the current state of the scanner, plus\n   a function to refill the buffer from the input.</p>\n\n<p>At each token, the lexing engine will copy <code class=\"code\">lex_curr_p</code> to\n   <code class=\"code\">lex_start_p</code>, then change the <code class=\"code\">pos_cnum</code> field\n   of <code class=\"code\">lex_curr_p</code> by updating it with the number of characters read\n   since the start of the <code class=\"code\">lexbuf</code>.  The other fields are left\n   unchanged by the lexing engine.  In order to keep them\n   accurate, they must be initialised before the first use of the\n   lexbuf, and updated by the relevant lexer actions (i.e. at each\n   end of line -- see also <code class=\"code\">new_line</code>).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "from_channel",
              "in_channel",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Create a lexer buffer on the given input channel.\n   <code class=\"code\"><span class=\"constructor\">Lexing</span>.from_channel&nbsp;inchan</code> returns a lexer buffer which reads\n   from the input channel <code class=\"code\">inchan</code>, at the current reading position.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "from_string",
              "string ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Create a lexer buffer which reads from\n   the given string. Reading starts from the first character in\n   the string. An end-of-input condition is generated when the\n   end of the string is reached.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "from_function",
              "(bytes -> int -> int) ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Create a lexer buffer with the given function as its reading method.\n   When the scanner needs more characters, it will call the given\n   function, giving it a byte sequence <code class=\"code\">s</code> and a byte\n   count <code class=\"code\">n</code>. The function should put <code class=\"code\">n</code> bytes or fewer in <code class=\"code\">s</code>,\n   starting at index 0, and return the number of bytes\n   provided. A return value of 0 means end of input.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Functions for lexer semantic actions" ],
        "section_info": [
          "Some",
          "<p>The following functions can be called from the semantic actions\n   of lexer definitions (the ML code enclosed in braces that\n   computes the value returned by lexing functions). They give\n   access to the character string matched by the regular expression\n   associated with the semantic action. These functions must be\n   applied to the argument <code class=\"code\">lexbuf</code>, which, in the code generated by\n   <code class=\"code\">ocamllex</code>, is bound to the lexer buffer passed to the parsing\n   function.</p>"
        ],
        "elements": [
          [
            "Function",
            [
              "lexeme",
              "lexbuf",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme&nbsp;lexbuf</code> returns the string matched by\n           the regular expression.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lexeme_char",
              "lexbuf",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme_char&nbsp;lexbuf&nbsp;i</code> returns character number <code class=\"code\">i</code> in\n   the matched string.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lexeme_start",
              "lexbuf",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme_start&nbsp;lexbuf</code> returns the offset in the\n   input stream of the first character of the matched string.\n   The first character of the stream has offset 0.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lexeme_end",
              "lexbuf",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme_end&nbsp;lexbuf</code> returns the offset in the input stream\n   of the character following the last character of the matched\n   string. The first character of the stream has offset 0.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lexeme_start_p",
              "lexbuf",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Like <code class=\"code\">lexeme_start</code>, but return a complete <code class=\"code\">position</code> instead\n    of an offset.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lexeme_end_p",
              "lexbuf",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Like <code class=\"code\">lexeme_end</code>, but return a complete <code class=\"code\">position</code> instead\n    of an offset.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "new_line",
              "lexbuf",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Update the <code class=\"code\">lex_curr_p</code> field of the lexbuf to reflect the start\n    of a new line.  You can call this function in the semantic action\n    of the rule that matches the end-of-line character.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Miscellaneous functions" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "flush_input",
              "lexbuf",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Discard the contents of the buffer and reset the current\n    position to 0.  The next use of the lexbuf will trigger a\n    refill.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "List",
    "module_info":
      "<p>List operations.</p><p>Some functions are flagged as not tail-recursive.  A tail-recursive\n   function uses constant stack space, while a non-tail-recursive function\n   uses stack space proportional to the length of its list argument, which\n   can be a problem with very long lists.  When the function takes several\n   list arguments, an approximate formula giving stack usage (in some\n   unspecified constant unit) is shown in parentheses.</p><p>The above considerations can usually be ignored if your lists are not\n   longer than about 10000 elements.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "length",
              "'a list -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the length (number of elements) of the given list.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "compare_lengths",
              "'a list -> 'b list -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Compare the lengths of two lists. <code class=\"code\">compare_lengths&nbsp;l1&nbsp;l2</code> is\n   equivalent to <code class=\"code\">compare&nbsp;(length&nbsp;l1)&nbsp;(length&nbsp;l2)</code>, except that\n   the computation stops after itering on the shortest list.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "compare_length_with",
              "'a list -> int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Compare the length of a list to an integer. <code class=\"code\">compare_length_with&nbsp;l&nbsp;n</code> is\n   equivalent to <code class=\"code\">compare&nbsp;(length&nbsp;l)&nbsp;n</code>, except that\n   the computation stops after at most <code class=\"code\">n</code> iterations on the list.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "cons",
              "'a -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">cons&nbsp;x&nbsp;xs</code> is <code class=\"code\">x&nbsp;::&nbsp;xs</code></p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "hd",
              "'a list -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the first element of the given list. Raise\n   <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"hd\"</span></code> if the list is empty.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "tl",
              "'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the given list without its first element. Raise\n    <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"tl\"</span></code> if the list is empty.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "nth",
              "'a list -> int -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the <code class=\"code\">n</code>-th element of the given list.\n   The first element (head of the list) is at position 0.\n   Raise <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"nth\"</span></code> if the list is too short.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"List.nth\"</span></code> if <code class=\"code\">n</code> is negative.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "nth_opt",
              "'a list -> int -> 'a option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the <code class=\"code\">n</code>-th element of the given list.\n    The first element (head of the list) is at position 0.\n    Return <code class=\"code\"><span class=\"constructor\">None</span></code> if the list is too short.\n    Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"List.nth\"</span></code> if <code class=\"code\">n</code> is negative.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rev",
              "'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>List reversal.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "init",
              "int -> (int -> 'a) -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.init&nbsp;len&nbsp;f</code> is <code class=\"code\">f&nbsp;0;&nbsp;f&nbsp;1;&nbsp;...;&nbsp;f&nbsp;(len-1)</code>, evaluated left to right.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n<li><b>Raises</b> <code>Invalid_argument</code> if len &lt; 0.</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "append",
              "'a list -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Concatenate two lists.  Same as the infix operator <code class=\"code\">@</code>.\n   Not tail-recursive (length of the first argument).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rev_append",
              "'a list -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_append&nbsp;l1&nbsp;l2</code> reverses <code class=\"code\">l1</code> and concatenates it to <code class=\"code\">l2</code>.\n   This is equivalent to <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;l1&nbsp;@&nbsp;l2</code>, but <code class=\"code\">rev_append</code> is\n   tail-recursive and more efficient.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "concat",
              "'a list list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Concatenate a list of lists.  The elements of the argument are all\n   concatenated together (in the same order) to give the result.\n   Not tail-recursive\n   (length of the argument + length of the longest sub-list).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "flatten",
              "'a list list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>An alias for <code class=\"code\">concat</code>.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "iter",
              "('a -> unit) -> 'a list -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.iter&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> in turn to\n   <code class=\"code\">a1;&nbsp;...;&nbsp;an</code>. It is equivalent to\n   <code class=\"code\"><span class=\"keyword\">begin</span>&nbsp;f&nbsp;a1;&nbsp;f&nbsp;a2;&nbsp;...;&nbsp;f&nbsp;an;&nbsp;()&nbsp;<span class=\"keyword\">end</span></code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "iteri",
              "(int -> 'a -> unit) -> 'a list -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALiter\"><code class=\"code\"><span class=\"constructor\">List</span>.iter</code></a>, but the function is applied to the index of\n   the element as first argument (counting from 0), and the element\n   itself as second argument.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "map",
              "('a -> 'b) -> 'a list -> 'b list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.map&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> to <code class=\"code\">a1,&nbsp;...,&nbsp;an</code>,\n   and builds the list <code class=\"code\">[f&nbsp;a1;&nbsp;...;&nbsp;f&nbsp;an]</code>\n   with the results returned by <code class=\"code\">f</code>.  Not tail-recursive.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mapi",
              "(int -> 'a -> 'b) -> 'a list -> 'b list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a>, but the function is applied to the index of\n   the element as first argument (counting from 0), and the element\n   itself as second argument.  Not tail-recursive.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rev_map",
              "('a -> 'b) -> 'a list -> 'b list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map&nbsp;f&nbsp;l</code> gives the same result as\n   <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a><code class=\"code\">&nbsp;f&nbsp;l)</code>, but is tail-recursive and\n   more efficient.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fold_left",
              "('a -> 'b -> 'a) -> 'a -> 'b list -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1)&nbsp;b2)&nbsp;...)&nbsp;bn</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fold_right",
              "('a -> 'b -> 'b) -> 'a list -> 'b -> 'b",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;b</code> is\n   <code class=\"code\">f&nbsp;a1&nbsp;(f&nbsp;a2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;b)&nbsp;...))</code>.  Not tail-recursive.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators on two lists" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "iter2",
              "('a -> 'b -> unit) -> 'a list -> 'b list -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.iter2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> calls in turn\n   <code class=\"code\">f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "map2",
              "('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.map2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">[f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn]</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.  Not tail-recursive.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rev_map2",
              "('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map2&nbsp;f&nbsp;l1&nbsp;l2</code> gives the same result as\n   <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap2\"><code class=\"code\"><span class=\"constructor\">List</span>.map2</code></a><code class=\"code\">&nbsp;f&nbsp;l1&nbsp;l2)</code>, but is tail-recursive and\n   more efficient.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fold_left2",
              "('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left2&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;[c1;&nbsp;...;&nbsp;cn]</code> is\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1&nbsp;c1)&nbsp;b2&nbsp;c2)&nbsp;...)&nbsp;bn&nbsp;cn</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fold_right2",
              "('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;c</code> is\n   <code class=\"code\">f&nbsp;a1&nbsp;b1&nbsp;(f&nbsp;a2&nbsp;b2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;bn&nbsp;c)&nbsp;...))</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.  Not tail-recursive.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "List scanning" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "for_all",
              "('a -> bool) -> 'a list -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if all elements of the list\n   satisfy the predicate <code class=\"code\">p</code>. That is, it returns\n   <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;...&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "exists",
              "('a -> bool) -> 'a list -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if at least one element of\n   the list satisfies the predicate <code class=\"code\">p</code>. That is, it returns\n   <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;...&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "for_all2",
              "('a -> 'b -> bool) -> 'a list -> 'b list -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALfor_all\"><code class=\"code\"><span class=\"constructor\">List</span>.for_all</code></a>, but for a two-argument predicate.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "exists2",
              "('a -> 'b -> bool) -> 'a list -> 'b list -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALexists\"><code class=\"code\"><span class=\"constructor\">List</span>.exists</code></a>, but for a two-argument predicate.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mem",
              "'a -> 'a list -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;a&nbsp;l</code> is true if and only if <code class=\"code\">a</code> is equal\n   to an element of <code class=\"code\">l</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "memq",
              "'a -> 'a list -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALmem\"><code class=\"code\"><span class=\"constructor\">List</span>.mem</code></a>, but uses physical equality instead of structural\n   equality to compare list elements.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "List searching" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "find",
              "('a -> bool) -> 'a list -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code>\n   that satisfies the predicate <code class=\"code\">p</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if there is no value that satisfies <code class=\"code\">p</code> in the\n   list <code class=\"code\">l</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "find_opt",
              "('a -> bool) -> 'a list -> 'a option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">find_opt&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code> that\n    satisfies the predicate <code class=\"code\">p</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no value that\n    satisfies <code class=\"code\">p</code> in the list <code class=\"code\">l</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "filter",
              "('a -> bool) -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">filter&nbsp;p&nbsp;l</code> returns all the elements of the list <code class=\"code\">l</code>\n   that satisfy the predicate <code class=\"code\">p</code>.  The order of the elements\n   in the input list is preserved.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "find_all",
              "('a -> bool) -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">find_all</code> is another name for <a href=\"List.html#VALfilter\"><code class=\"code\"><span class=\"constructor\">List</span>.filter</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "partition",
              "('a -> bool) -> 'a list -> 'a list * 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">partition&nbsp;p&nbsp;l</code> returns a pair of lists <code class=\"code\">(l1,&nbsp;l2)</code>, where\n   <code class=\"code\">l1</code> is the list of all the elements of <code class=\"code\">l</code> that\n   satisfy the predicate <code class=\"code\">p</code>, and <code class=\"code\">l2</code> is the list of all the\n   elements of <code class=\"code\">l</code> that do not satisfy <code class=\"code\">p</code>.\n   The order of the elements in the input list is preserved.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Association lists" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "assoc",
              "'a -> ('a * 'b) list -> 'b",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">assoc&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of\n   pairs <code class=\"code\">l</code>. That is,\n   <code class=\"code\">assoc&nbsp;a&nbsp;[&nbsp;...;&nbsp;(a,b);&nbsp;...]&nbsp;=&nbsp;b</code>\n   if <code class=\"code\">(a,b)</code> is the leftmost binding of <code class=\"code\">a</code> in list <code class=\"code\">l</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if there is no value associated with <code class=\"code\">a</code> in the\n   list <code class=\"code\">l</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "assoc_opt",
              "'a -> ('a * 'b) list -> 'b option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">assoc_opt&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of\n   pairs <code class=\"code\">l</code>. That is,\n   <code class=\"code\">assoc_opt&nbsp;a&nbsp;[&nbsp;...;&nbsp;(a,b);&nbsp;...]&nbsp;=&nbsp;b</code>\n   if <code class=\"code\">(a,b)</code> is the leftmost binding of <code class=\"code\">a</code> in list <code class=\"code\">l</code>.\n   Returns <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no value associated with <code class=\"code\">a</code> in the\n   list <code class=\"code\">l</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "assq",
              "'a -> ('a * 'b) list -> 'b",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but uses physical equality instead of structural\n   equality to compare keys.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "assq_opt",
              "'a -> ('a * 'b) list -> 'b option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALassoc_opt\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc_opt</code></a>, but uses physical equality instead of structural\n    equality to compare keys.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mem_assoc",
              "'a -> ('a * 'b) list -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but simply return true if a binding exists,\n   and false if no bindings exist for the given key.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mem_assq",
              "'a -> ('a * 'b) list -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALmem_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.mem_assoc</code></a>, but uses physical equality instead of\n   structural equality to compare keys.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "remove_assoc",
              "'a -> ('a * 'b) list -> ('a * 'b) list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">remove_assoc&nbsp;a&nbsp;l</code> returns the list of\n   pairs <code class=\"code\">l</code> without the first pair with key <code class=\"code\">a</code>, if any.\n   Not tail-recursive.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "remove_assq",
              "'a -> ('a * 'b) list -> ('a * 'b) list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALremove_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.remove_assoc</code></a>, but uses physical equality instead\n   of structural equality to compare keys.  Not tail-recursive.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Lists of pairs" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "split",
              "('a * 'b) list -> 'a list * 'b list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Transform a list of pairs into a pair of lists:\n   <code class=\"code\">split&nbsp;[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code> is <code class=\"code\">([a1;&nbsp;...;&nbsp;an],&nbsp;[b1;&nbsp;...;&nbsp;bn])</code>.\n   Not tail-recursive.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "combine",
              "'a list -> 'b list -> ('a * 'b) list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Transform a pair of lists into a list of pairs:\n   <code class=\"code\">combine&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists\n   have different lengths.  Not tail-recursive.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Sorting" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "sort",
              "('a -> 'a -> int) -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Sort a list in increasing order according to a comparison\n   function.  The comparison function must return 0 if its arguments\n   compare as equal, a positive integer if the first is greater,\n   and a negative integer if the first is smaller (see Array.sort for\n   a complete specification).  For example,\n   <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a> is a suitable comparison function.\n   The resulting list is sorted in increasing order.\n   <code class=\"code\"><span class=\"constructor\">List</span>.sort</code> is guaranteed to run in constant heap space\n   (in addition to the size of the result list) and logarithmic\n   stack space.</p>\n\n<p>The current implementation uses Merge Sort. It runs in constant\n   heap space and logarithmic stack space.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "stable_sort",
              "('a -> 'a -> int) -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but the sorting algorithm is guaranteed to\n   be stable (i.e. elements that compare equal are kept in their\n   original order) .</p>\n\n<p>The current implementation uses Merge Sort. It runs in constant\n   heap space and logarithmic stack space.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fast_sort",
              "('a -> 'a -> int) -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a> or <a href=\"List.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">List</span>.stable_sort</code></a>, whichever is faster\n    on typical input.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sort_uniq",
              "('a -> 'a -> int) -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but also remove duplicates.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "merge",
              "('a -> 'a -> int) -> 'a list -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Merge two lists:\n    Assuming that <code class=\"code\">l1</code> and <code class=\"code\">l2</code> are sorted according to the\n    comparison function <code class=\"code\">cmp</code>, <code class=\"code\">merge&nbsp;cmp&nbsp;l1&nbsp;l2</code> will return a\n    sorted list containing all the elements of <code class=\"code\">l1</code> and <code class=\"code\">l2</code>.\n    If several elements compare equal, the elements of <code class=\"code\">l1</code> will be\n    before the elements of <code class=\"code\">l2</code>.\n    Not tail-recursive (sum of the lengths of the arguments).</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "to_seq",
              "'a list -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the list</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_seq",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Create a list from the iterator</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "ListLabels",
    "module_info":
      "<p>List operations.</p><p>Some functions are flagged as not tail-recursive.  A tail-recursive\n   function uses constant stack space, while a non-tail-recursive function\n   uses stack space proportional to the length of its list argument, which\n   can be a problem with very long lists.  When the function takes several\n   list arguments, an approximate formula giving stack usage (in some\n   unspecified constant unit) is shown in parentheses.</p><p>The above considerations can usually be ignored if your lists are not\n   longer than about 10000 elements.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "length",
              "'a list -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the length (number of elements) of the given list.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "hd",
              "'a list -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the first element of the given list. Raise\n   <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"hd\"</span></code> if the list is empty.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "compare_lengths",
              "'a list -> 'b list -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Compare the lengths of two lists. <code class=\"code\">compare_lengths&nbsp;l1&nbsp;l2</code> is\n   equivalent to <code class=\"code\">compare&nbsp;(length&nbsp;l1)&nbsp;(length&nbsp;l2)</code>, except that\n   the computation stops after itering on the shortest list.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "compare_length_with",
              "'a list -> len:int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Compare the length of a list to an integer. <code class=\"code\">compare_length_with&nbsp;l&nbsp;n</code> is\n   equivalent to <code class=\"code\">compare&nbsp;(length&nbsp;l)&nbsp;n</code>, except that\n   the computation stops after at most <code class=\"code\">n</code> iterations on the list.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "cons",
              "'a -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">cons&nbsp;x&nbsp;xs</code> is <code class=\"code\">x&nbsp;::&nbsp;xs</code></p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "tl",
              "'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the given list without its first element. Raise\n   <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"tl\"</span></code> if the list is empty.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "nth",
              "'a list -> int -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the <code class=\"code\">n</code>-th element of the given list.\n   The first element (head of the list) is at position 0.\n   Raise <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"nth\"</span></code> if the list is too short.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"List.nth\"</span></code> if <code class=\"code\">n</code> is negative.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "nth_opt",
              "'a list -> int -> 'a option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the <code class=\"code\">n</code>-th element of the given list.\n    The first element (head of the list) is at position 0.\n    Return <code class=\"code\"><span class=\"constructor\">None</span></code> if the list is too short.\n    Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"List.nth\"</span></code> if <code class=\"code\">n</code> is negative.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rev",
              "'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>List reversal.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "init",
              "len:int -> f:(int -> 'a) -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.init&nbsp;len&nbsp;f</code> is <code class=\"code\">f&nbsp;0;&nbsp;f&nbsp;1;&nbsp;...;&nbsp;f&nbsp;(len-1)</code>, evaluated left to right.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n<li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">len&nbsp;&lt;&nbsp;0</code>.</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "append",
              "'a list -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Catenate two lists.  Same function as the infix operator <code class=\"code\">@</code>.\n   Not tail-recursive (length of the first argument).  The <code class=\"code\">@</code>\n   operator is not tail-recursive either.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rev_append",
              "'a list -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_append&nbsp;l1&nbsp;l2</code> reverses <code class=\"code\">l1</code> and concatenates it with <code class=\"code\">l2</code>.\n   This is equivalent to <code class=\"code\">(</code><a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;l1)&nbsp;@&nbsp;l2</code>, but <code class=\"code\">rev_append</code> is\n   tail-recursive and more efficient.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "concat",
              "'a list list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Concatenate a list of lists.  The elements of the argument are all\n   concatenated together (in the same order) to give the result.\n   Not tail-recursive\n   (length of the argument + length of the longest sub-list).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "flatten",
              "'a list list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">concat</code>.  Not tail-recursive\n   (length of the argument + length of the longest sub-list).</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "iter",
              "f:('a -> unit) -> 'a list -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.iter&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> in turn to\n   <code class=\"code\">a1;&nbsp;...;&nbsp;an</code>. It is equivalent to\n   <code class=\"code\"><span class=\"keyword\">begin</span>&nbsp;f&nbsp;a1;&nbsp;f&nbsp;a2;&nbsp;...;&nbsp;f&nbsp;an;&nbsp;()&nbsp;<span class=\"keyword\">end</span></code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "iteri",
              "f:(int -> 'a -> unit) -> 'a list -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALiter\"><code class=\"code\"><span class=\"constructor\">List</span>.iter</code></a>, but the function is applied to the index of\n   the element as first argument (counting from 0), and the element\n   itself as second argument.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "map",
              "f:('a -> 'b) -> 'a list -> 'b list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.map&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> to <code class=\"code\">a1,&nbsp;...,&nbsp;an</code>,\n   and builds the list <code class=\"code\">[f&nbsp;a1;&nbsp;...;&nbsp;f&nbsp;an]</code>\n   with the results returned by <code class=\"code\">f</code>.  Not tail-recursive.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mapi",
              "f:(int -> 'a -> 'b) -> 'a list -> 'b list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a>, but the function is applied to the index of\n   the element as first argument (counting from 0), and the element\n   itself as second argument.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rev_map",
              "f:('a -> 'b) -> 'a list -> 'b list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map&nbsp;f&nbsp;l</code> gives the same result as\n   <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a><code class=\"code\">&nbsp;f&nbsp;l)</code>, but is tail-recursive and\n   more efficient.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fold_left",
              "f:('a -> 'b -> 'a) -> init:'a -> 'b list -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1)&nbsp;b2)&nbsp;...)&nbsp;bn</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fold_right",
              "f:('a -> 'b -> 'b) -> 'a list -> init:'b -> 'b",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;b</code> is\n   <code class=\"code\">f&nbsp;a1&nbsp;(f&nbsp;a2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;b)&nbsp;...))</code>.  Not tail-recursive.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators on two lists" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "iter2",
              "f:('a -> 'b -> unit) -> 'a list -> 'b list -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.iter2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> calls in turn\n   <code class=\"code\">f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "map2",
              "f:('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.map2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">[f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn]</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.  Not tail-recursive.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rev_map2",
              "f:('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map2&nbsp;f&nbsp;l1&nbsp;l2</code> gives the same result as\n   <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap2\"><code class=\"code\"><span class=\"constructor\">List</span>.map2</code></a><code class=\"code\">&nbsp;f&nbsp;l1&nbsp;l2)</code>, but is tail-recursive and\n   more efficient.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fold_left2",
              "f:('a -> 'b -> 'c -> 'a) -> init:'a -> 'b list -> 'c list -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left2&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;[c1;&nbsp;...;&nbsp;cn]</code> is\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1&nbsp;c1)&nbsp;b2&nbsp;c2)&nbsp;...)&nbsp;bn&nbsp;cn</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fold_right2",
              "f:('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> init:'c -> 'c",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;c</code> is\n   <code class=\"code\">f&nbsp;a1&nbsp;b1&nbsp;(f&nbsp;a2&nbsp;b2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;bn&nbsp;c)&nbsp;...))</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.  Not tail-recursive.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "List scanning" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "for_all",
              "f:('a -> bool) -> 'a list -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if all elements of the list\n   satisfy the predicate <code class=\"code\">p</code>. That is, it returns\n   <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;...&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "exists",
              "f:('a -> bool) -> 'a list -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if at least one element of\n   the list satisfies the predicate <code class=\"code\">p</code>. That is, it returns\n   <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;...&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "for_all2",
              "f:('a -> 'b -> bool) -> 'a list -> 'b list -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALfor_all\"><code class=\"code\"><span class=\"constructor\">List</span>.for_all</code></a>, but for a two-argument predicate.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "exists2",
              "f:('a -> 'b -> bool) -> 'a list -> 'b list -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALexists\"><code class=\"code\"><span class=\"constructor\">List</span>.exists</code></a>, but for a two-argument predicate.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mem",
              "'a -> set:'a list -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;a&nbsp;l</code> is true if and only if <code class=\"code\">a</code> is equal\n   to an element of <code class=\"code\">l</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "memq",
              "'a -> set:'a list -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALmem\"><code class=\"code\"><span class=\"constructor\">List</span>.mem</code></a>, but uses physical equality instead of structural\n   equality to compare list elements.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "List searching" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "find",
              "f:('a -> bool) -> 'a list -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code>\n   that satisfies the predicate <code class=\"code\">p</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if there is no value that satisfies <code class=\"code\">p</code> in the\n   list <code class=\"code\">l</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "find_opt",
              "f:('a -> bool) -> 'a list -> 'a option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code>\n   that satisfies the predicate <code class=\"code\">p</code>.\n   Returns <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no value that satisfies <code class=\"code\">p</code> in the\n   list <code class=\"code\">l</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "filter",
              "f:('a -> bool) -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">filter&nbsp;p&nbsp;l</code> returns all the elements of the list <code class=\"code\">l</code>\n   that satisfy the predicate <code class=\"code\">p</code>.  The order of the elements\n   in the input list is preserved.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "find_all",
              "f:('a -> bool) -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">find_all</code> is another name for <a href=\"List.html#VALfilter\"><code class=\"code\"><span class=\"constructor\">List</span>.filter</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "partition",
              "f:('a -> bool) -> 'a list -> 'a list * 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">partition&nbsp;p&nbsp;l</code> returns a pair of lists <code class=\"code\">(l1,&nbsp;l2)</code>, where\n   <code class=\"code\">l1</code> is the list of all the elements of <code class=\"code\">l</code> that\n   satisfy the predicate <code class=\"code\">p</code>, and <code class=\"code\">l2</code> is the list of all the\n   elements of <code class=\"code\">l</code> that do not satisfy <code class=\"code\">p</code>.\n   The order of the elements in the input list is preserved.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Association lists" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "assoc",
              "'a -> ('a * 'b) list -> 'b",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">assoc&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of\n   pairs <code class=\"code\">l</code>. That is,\n   <code class=\"code\">assoc&nbsp;a&nbsp;[&nbsp;...;&nbsp;(a,b);&nbsp;...]&nbsp;=&nbsp;b</code>\n   if <code class=\"code\">(a,b)</code> is the leftmost binding of <code class=\"code\">a</code> in list <code class=\"code\">l</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if there is no value associated with <code class=\"code\">a</code> in the\n   list <code class=\"code\">l</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "assoc_opt",
              "'a -> ('a * 'b) list -> 'b option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">assoc_opt&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of\n    pairs <code class=\"code\">l</code>. That is,\n    <code class=\"code\">assoc&nbsp;a&nbsp;[&nbsp;...;&nbsp;(a,b);&nbsp;...]&nbsp;=&nbsp;b</code>\n    if <code class=\"code\">(a,b)</code> is the leftmost binding of <code class=\"code\">a</code> in list <code class=\"code\">l</code>.\n    Returns <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no value associated with <code class=\"code\">a</code> in the\n    list <code class=\"code\">l</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "assq",
              "'a -> ('a * 'b) list -> 'b",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but uses physical equality instead of\n   structural equality to compare keys.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "assq_opt",
              "'a -> ('a * 'b) list -> 'b option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALassoc_opt\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc_opt</code></a>, but uses physical equality instead of\n   structural equality to compare keys.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mem_assoc",
              "'a -> map:('a * 'b) list -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but simply return true if a binding exists,\n   and false if no bindings exist for the given key.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mem_assq",
              "'a -> map:('a * 'b) list -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALmem_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.mem_assoc</code></a>, but uses physical equality instead of\n   structural equality to compare keys.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "remove_assoc",
              "'a -> ('a * 'b) list -> ('a * 'b) list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">remove_assoc&nbsp;a&nbsp;l</code> returns the list of\n   pairs <code class=\"code\">l</code> without the first pair with key <code class=\"code\">a</code>, if any.\n   Not tail-recursive.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "remove_assq",
              "'a -> ('a * 'b) list -> ('a * 'b) list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALremove_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.remove_assoc</code></a>, but uses physical equality instead\n   of structural equality to compare keys.  Not tail-recursive.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Lists of pairs" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "split",
              "('a * 'b) list -> 'a list * 'b list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Transform a list of pairs into a pair of lists:\n   <code class=\"code\">split&nbsp;[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code> is <code class=\"code\">([a1;&nbsp;...;&nbsp;an],&nbsp;[b1;&nbsp;...;&nbsp;bn])</code>.\n   Not tail-recursive.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "combine",
              "'a list -> 'b list -> ('a * 'b) list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Transform a pair of lists into a list of pairs:\n   <code class=\"code\">combine&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists\n   have different lengths.  Not tail-recursive.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Sorting" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "sort",
              "cmp:('a -> 'a -> int) -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Sort a list in increasing order according to a comparison\n   function.  The comparison function must return 0 if its arguments\n   compare as equal, a positive integer if the first is greater,\n   and a negative integer if the first is smaller (see Array.sort for\n   a complete specification).  For example,\n   <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a> is a suitable comparison function.\n   The resulting list is sorted in increasing order.\n   <code class=\"code\"><span class=\"constructor\">List</span>.sort</code> is guaranteed to run in constant heap space\n   (in addition to the size of the result list) and logarithmic\n   stack space.</p>\n\n<p>The current implementation uses Merge Sort. It runs in constant\n   heap space and logarithmic stack space.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "stable_sort",
              "cmp:('a -> 'a -> int) -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but the sorting algorithm is guaranteed to\n   be stable (i.e. elements that compare equal are kept in their\n   original order) .</p>\n\n<p>The current implementation uses Merge Sort. It runs in constant\n   heap space and logarithmic stack space.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fast_sort",
              "cmp:('a -> 'a -> int) -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a> or <a href=\"List.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">List</span>.stable_sort</code></a>, whichever is\n    faster on typical input.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sort_uniq",
              "cmp:('a -> 'a -> int) -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but also remove duplicates.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "merge",
              "cmp:('a -> 'a -> int) -> 'a list -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Merge two lists:\n    Assuming that <code class=\"code\">l1</code> and <code class=\"code\">l2</code> are sorted according to the\n    comparison function <code class=\"code\">cmp</code>, <code class=\"code\">merge&nbsp;cmp&nbsp;l1&nbsp;l2</code> will return a\n    sorted list containing all the elements of <code class=\"code\">l1</code> and <code class=\"code\">l2</code>.\n    If several elements compare equal, the elements of <code class=\"code\">l1</code> will be\n    before the elements of <code class=\"code\">l2</code>.\n    Not tail-recursive (sum of the lengths of the arguments).</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "to_seq",
              "'a list -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the list</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_seq",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Create a list from the iterator</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Map",
    "module_info":
      "<p>Association tables over ordered types.</p><p>This module implements applicative association tables, also known as\n   finite maps or dictionaries, given a total ordering function\n   over the keys.\n   All operations over maps are purely applicative (no side-effects).\n   The implementation uses balanced binary trees, and therefore searching\n   and insertion take time logarithmic in the size of the map.</p><p>For instance:</p><pre class=\"codepre\"><code class=\"code\">     <span class=\"keyword\">module</span> <span class=\"constructor\">IntPairs</span> =\n       <span class=\"keyword\">struct</span>\n         <span class=\"keyword\">type</span> t = int * int\n         <span class=\"keyword\">let</span> compare (x0,y0) (x1,y1) =\n           <span class=\"keyword\">match</span> <span class=\"constructor\">Pervasives</span>.compare x0 x1 <span class=\"keyword\">with</span>\n               0 <span class=\"keywordsign\">-&gt;</span> <span class=\"constructor\">Pervasives</span>.compare y0 y1\n             <span class=\"keywordsign\">|</span> c <span class=\"keywordsign\">-&gt;</span> c\n       <span class=\"keyword\">end</span>\n\n     <span class=\"keyword\">module</span> <span class=\"constructor\">PairsMap</span> = <span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span>(<span class=\"constructor\">IntPairs</span>)\n\n     <span class=\"keyword\">let</span> m = <span class=\"constructor\">PairsMap</span>.(empty |&gt; add (0,1) <span class=\"string\">\"hello\"</span> |&gt; add (1,0) <span class=\"string\">\"world\"</span>)\n   </code></pre><p>This creates a new module <code class=\"code\"><span class=\"constructor\">PairsMap</span></code>, with a new type <code class=\"code\"><span class=\"keywordsign\">'</span>a&nbsp;<span class=\"constructor\">PairsMap</span>.t</code>\n   of maps from <code class=\"code\">int&nbsp;*&nbsp;int</code> to <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>. In this example, <code class=\"code\">m</code> contains <code class=\"code\">string</code>\n   values so its type is <code class=\"code\">string&nbsp;<span class=\"constructor\">PairsMap</span>.t</code>.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Moduletype",
            [
              "OrderedType",
              [
                "Some",
                "<p>Input signature of the functor <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>"
              ]
            ]
          ],
          [
            "Moduletype",
            [
              "S",
              [
                "Some",
                "<p>Output signature of the functor <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>"
              ]
            ]
          ],
          [
            "Module",
            [
              "Make",
              [
                "Some",
                "<p>Functor building an implementation of the map structure\n   given a totally ordered type.</p>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Marshal",
    "module_info":
      "<p>Marshaling of data structures.</p><p>This module provides functions to encode arbitrary data structures\n   as sequences of bytes, which can then be written on a file or\n   sent over a pipe or network connection.  The bytes can then\n   be read back later, possibly in another process, and decoded back\n   into a data structure. The format for the byte sequences\n   is compatible across all machines for a given version of OCaml.</p><p>Warning: marshaling is currently not type-safe. The type\n   of marshaled data is not transmitted along the value of the data,\n   making it impossible to check that the data read back possesses the\n   type expected by the context. In particular, the result type of\n   the <code class=\"code\"><span class=\"constructor\">Marshal</span>.from_*</code> functions is given as <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>, but this is\n   misleading: the returned OCaml value does not possess type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>\n   for all <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>; it has one, unique type which cannot be determined\n   at compile-time.  The programmer should explicitly give the expected\n   type of the returned value, using the following syntax:</p><ul>\n<li><code class=\"code\">(<span class=\"constructor\">Marshal</span>.from_channel&nbsp;chan&nbsp;:&nbsp;<span class=\"keyword\">type</span>)</code>.\n   Anything can happen at run-time if the object in the file does not\n   belong to the given type.</li>\n</ul><p>Values of extensible variant types, for example exceptions (of\n   extensible type <code class=\"code\">exn</code>), returned by the unmarshaller should not be\n   pattern-matched over through <code class=\"code\"><span class=\"keyword\">match</span>&nbsp;...&nbsp;<span class=\"keyword\">with</span></code> or <code class=\"code\"><span class=\"keyword\">try</span>&nbsp;...&nbsp;<span class=\"keyword\">with</span></code>,\n   because unmarshalling does not preserve the information required for\n   matching their constructors. Structural equalities with other\n   extensible variant values does not work either.  Most other uses such\n   as Printexc.to_string, will still work as expected.</p><p>The representation of marshaled values is not human-readable,\n   and uses bytes that are not printable characters. Therefore,\n   input and output channels used in conjunction with <code class=\"code\"><span class=\"constructor\">Marshal</span>.to_channel</code>\n   and <code class=\"code\"><span class=\"constructor\">Marshal</span>.from_channel</code> must be opened in binary mode, using e.g.\n   <code class=\"code\">open_out_bin</code> or <code class=\"code\">open_in_bin</code>; channels opened in text mode will\n   cause unmarshaling errors on platforms where text channels behave\n   differently than binary channels, e.g. Windows.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "extern_flags",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTextern_flags.No_sharing\"><span class=\"constructor\">No_sharing</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Don't preserve sharing</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTextern_flags.Closures\"><span class=\"constructor\">Closures</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Send function closures</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTextern_flags.Compat_32\"><span class=\"constructor\">Compat_32</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Ensure 32-bit compatibility</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>"
              ],
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The flags to the <code class=\"code\"><span class=\"constructor\">Marshal</span>.to_*</code> functions below.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_channel",
              "out_channel",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Marshal</span>.to_channel&nbsp;chan&nbsp;v&nbsp;flags</code> writes the representation\n   of <code class=\"code\">v</code> on channel <code class=\"code\">chan</code>. The <code class=\"code\">flags</code> argument is a\n   possibly empty list of flags that governs the marshaling\n   behavior with respect to sharing, functional values, and compatibility\n   between 32- and 64-bit platforms.</p>\n\n<p>If <code class=\"code\">flags</code> does not contain <code class=\"code\"><span class=\"constructor\">Marshal</span>.<span class=\"constructor\">No_sharing</span></code>, circularities\n   and sharing inside the value <code class=\"code\">v</code> are detected and preserved\n   in the sequence of bytes produced. In particular, this\n   guarantees that marshaling always terminates. Sharing\n   between values marshaled by successive calls to\n   <code class=\"code\"><span class=\"constructor\">Marshal</span>.to_channel</code> is neither detected nor preserved, though.\n   If <code class=\"code\">flags</code> contains <code class=\"code\"><span class=\"constructor\">Marshal</span>.<span class=\"constructor\">No_sharing</span></code>, sharing is ignored.\n   This results in faster marshaling if <code class=\"code\">v</code> contains no shared\n   substructures, but may cause slower marshaling and larger\n   byte representations if <code class=\"code\">v</code> actually contains sharing,\n   or even non-termination if <code class=\"code\">v</code> contains cycles.</p>\n\n<p>If <code class=\"code\">flags</code> does not contain <code class=\"code\"><span class=\"constructor\">Marshal</span>.<span class=\"constructor\">Closures</span></code>, marshaling fails\n   when it encounters a functional value inside <code class=\"code\">v</code>: only 'pure' data\n   structures, containing neither functions nor objects, can safely be\n   transmitted between different programs. If <code class=\"code\">flags</code> contains\n   <code class=\"code\"><span class=\"constructor\">Marshal</span>.<span class=\"constructor\">Closures</span></code>, functional values will be marshaled as a the\n   position in the code of the program together with the values\n   corresponding to the free variables captured in the closure.  In\n   this case, the output of marshaling can only be read back in\n   processes that run exactly the same program, with exactly the same\n   compiled code. (This is checked at un-marshaling time, using an MD5\n   digest of the code transmitted along with the code position.)</p>\n\n<p>The exact definition of which free variables are captured in a\n   closure is not specified and can vary between bytecode and native\n   code (and according to optimization flags).  In particular, a\n   function value accessing a global reference may or may not include\n   the reference in its closure.  If it does, unmarshaling the\n   corresponding closure will create a new reference, different from\n   the global one.</p>\n\n<p>If <code class=\"code\">flags</code> contains <code class=\"code\"><span class=\"constructor\">Marshal</span>.<span class=\"constructor\">Compat_32</span></code>, marshaling fails when\n   it encounters an integer value outside the range <code class=\"code\">[-2{^30},&nbsp;2{^30}-1]</code>\n   of integers that are representable on a 32-bit platform.  This\n   ensures that marshaled data generated on a 64-bit platform can be\n   safely read back on a 32-bit platform.  If <code class=\"code\">flags</code> does not\n   contain <code class=\"code\"><span class=\"constructor\">Marshal</span>.<span class=\"constructor\">Compat_32</span></code>, integer values outside the\n   range <code class=\"code\">[-2{^30},&nbsp;2{^30}-1]</code> are marshaled, and can be read back on\n   a 64-bit platform, but will cause an error at un-marshaling time\n   when read back on a 32-bit platform.  The <code class=\"code\"><span class=\"constructor\">Mashal</span>.<span class=\"constructor\">Compat_32</span></code> flag\n   only matters when marshaling is performed on a 64-bit platform;\n   it has no effect if marshaling is performed on a 32-bit platform.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_bytes",
              "'a ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Marshal</span>.to_bytes&nbsp;v&nbsp;flags</code> returns a byte sequence containing\n   the representation of <code class=\"code\">v</code>.\n   The <code class=\"code\">flags</code> argument has the same meaning as for\n   <a href=\"Marshal.html#VALto_channel\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.to_channel</code></a>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_string",
              "'a ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">to_bytes</code> but return the result as a string instead of\n    a byte sequence.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_buffer",
              "bytes -> int -> int -> 'a ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Marshal</span>.to_buffer&nbsp;buff&nbsp;ofs&nbsp;len&nbsp;v&nbsp;flags</code> marshals the value <code class=\"code\">v</code>,\n   storing its byte representation in the sequence <code class=\"code\">buff</code>,\n   starting at index <code class=\"code\">ofs</code>, and writing at most\n   <code class=\"code\">len</code> bytes.  It returns the number of bytes\n   actually written to the sequence. If the byte representation\n   of <code class=\"code\">v</code> does not fit in <code class=\"code\">len</code> characters, the exception <code class=\"code\"><span class=\"constructor\">Failure</span></code>\n   is raised.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "from_channel",
              "in_channel",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Marshal</span>.from_channel&nbsp;chan</code> reads from channel <code class=\"code\">chan</code> the\n   byte representation of a structured value, as produced by\n   one of the <code class=\"code\"><span class=\"constructor\">Marshal</span>.to_*</code> functions, and reconstructs and\n   returns the corresponding value.</p>\n\n<p>It raises <code class=\"code\"><span class=\"constructor\">End_of_file</span></code> if the function has already reached the\n   end of file when starting to read from the channel, and raises\n   <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"input_value:&nbsp;truncated&nbsp;object\"</span></code> if it reaches the end\n   of file later during the unmarshalling.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "from_bytes",
              "bytes -> int -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Marshal</span>.from_bytes&nbsp;buff&nbsp;ofs</code> unmarshals a structured value\n   like <a href=\"Marshal.html#VALfrom_channel\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.from_channel</code></a> does, except that the byte\n   representation is not read from a channel, but taken from\n   the byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code>.\n   The byte sequence is not mutated.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "from_string",
              "string -> int -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">from_bytes</code> but take a string as argument instead of a\n    byte sequence.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "header_size",
              "int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The bytes representing a marshaled value are composed of\n   a fixed-size header and a variable-sized data part,\n   whose size can be determined from the header.\n   <a href=\"Marshal.html#VALheader_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.header_size</code></a> is the size, in bytes, of the header.\n   <a href=\"Marshal.html#VALdata_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.data_size</code></a><code class=\"code\">&nbsp;buff&nbsp;ofs</code> is the size, in bytes,\n   of the data part, assuming a valid header is stored in\n   <code class=\"code\">buff</code> starting at position <code class=\"code\">ofs</code>.\n   Finally, <a href=\"Marshal.html#VALtotal_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.total_size</code></a> <code class=\"code\">buff&nbsp;ofs</code> is the total size,\n   in bytes, of the marshaled value.\n   Both <a href=\"Marshal.html#VALdata_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.data_size</code></a> and <a href=\"Marshal.html#VALtotal_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.total_size</code></a> raise <code class=\"code\"><span class=\"constructor\">Failure</span></code>\n   if <code class=\"code\">buff</code>, <code class=\"code\">ofs</code> does not contain a valid header.</p>\n\n<p>To read the byte representation of a marshaled value into\n   a byte sequence, the program needs to read first\n   <a href=\"Marshal.html#VALheader_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.header_size</code></a> bytes into the sequence,\n   then determine the length of the remainder of the\n   representation using <a href=\"Marshal.html#VALdata_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.data_size</code></a>,\n   make sure the sequence is large enough to hold the remaining\n   data, then read it, and finally call <a href=\"Marshal.html#VALfrom_bytes\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.from_bytes</code></a>\n   to unmarshal the value.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "data_size",
              "bytes -> int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Marshal.html#VALheader_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.header_size</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "total_size",
              "bytes -> int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Marshal.html#VALheader_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.header_size</code></a>.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "MoreLabels",
    "module_info":
      "<p>Extra labeled libraries.</p><p>This meta-module provides labelized version of the <a href=\"Hashtbl.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span></code></a>,\n   <a href=\"Map.html\"><code class=\"code\"><span class=\"constructor\">Map</span></code></a> and <a href=\"Set.html\"><code class=\"code\"><span class=\"constructor\">Set</span></code></a> modules.</p><p>They only differ by their labels. They are provided to help\n   porting from previous versions of OCaml.\n   The contents of this module are subject to change.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [ "Module", [ "Hashtbl", "None" ] ],
          [ "Module", [ "Map", "None" ] ],
          [ "Module", [ "Set", "None" ] ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Nativeint",
    "module_info":
      "<p>Processor-native integers.</p><p>This module provides operations on the type <code class=\"code\">nativeint</code> of\n   signed 32-bit integers (on 32-bit platforms) or\n   signed 64-bit integers (on 64-bit platforms).\n   This integer type has exactly the same width as that of a\n   pointer type in the C compiler.  All arithmetic operations over\n   <code class=\"code\">nativeint</code> are taken modulo 2<sup class=\"superscript\">32</sup> or 2<sup class=\"superscript\">64</sup> depending\n   on the word size of the architecture.</p><p>Performance notice: values of type <code class=\"code\">nativeint</code> occupy more memory\n   space than values of type <code class=\"code\">int</code>, and arithmetic operations on\n   <code class=\"code\">nativeint</code> are generally slower than those on <code class=\"code\">int</code>.  Use <code class=\"code\">nativeint</code>\n   only when the application requires the extra bit of precision\n   over the <code class=\"code\">int</code> type.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "zero",
              "nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The native integer 0.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "one",
              "nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The native integer 1.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "minus_one",
              "nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The native integer -1.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "neg",
              "nativeint -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Unary negation.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add",
              "nativeint -> nativeint -> nativeint",
              [
                "Some", "<div class=\"info-desc\">\n<p>Addition.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sub",
              "nativeint -> nativeint -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Subtraction.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mul",
              "nativeint -> nativeint -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Multiplication.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "div",
              "nativeint -> nativeint -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Integer division.  Raise <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code> if the second\n   argument is zero.  This division rounds the real quotient of\n   its arguments towards zero, as specified for <a href=\"Pervasives.html#VAL(/)\"><code class=\"code\">(/)</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rem",
              "nativeint -> nativeint -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Integer remainder.  If <code class=\"code\">y</code> is not zero, the result\n   of <code class=\"code\"><span class=\"constructor\">Nativeint</span>.rem&nbsp;x&nbsp;y</code> satisfies the following properties:\n   <code class=\"code\"><span class=\"constructor\">Nativeint</span>.zero&nbsp;&lt;=&nbsp;<span class=\"constructor\">Nativeint</span>.rem&nbsp;x&nbsp;y&nbsp;&lt;&nbsp;<span class=\"constructor\">Nativeint</span>.abs&nbsp;y</code> and\n   <code class=\"code\">x&nbsp;=&nbsp;<span class=\"constructor\">Nativeint</span>.add&nbsp;(<span class=\"constructor\">Nativeint</span>.mul&nbsp;(<span class=\"constructor\">Nativeint</span>.div&nbsp;x&nbsp;y)&nbsp;y)<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span class=\"constructor\">Nativeint</span>.rem&nbsp;x&nbsp;y)</code>.\n   If <code class=\"code\">y&nbsp;=&nbsp;0</code>, <code class=\"code\"><span class=\"constructor\">Nativeint</span>.rem&nbsp;x&nbsp;y</code> raises <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "succ",
              "nativeint -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Successor.\n   <code class=\"code\"><span class=\"constructor\">Nativeint</span>.succ&nbsp;x</code> is <code class=\"code\"><span class=\"constructor\">Nativeint</span>.add&nbsp;x&nbsp;<span class=\"constructor\">Nativeint</span>.one</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "pred",
              "nativeint -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Predecessor.\n   <code class=\"code\"><span class=\"constructor\">Nativeint</span>.pred&nbsp;x</code> is <code class=\"code\"><span class=\"constructor\">Nativeint</span>.sub&nbsp;x&nbsp;<span class=\"constructor\">Nativeint</span>.one</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "abs",
              "nativeint -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the absolute value of its argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "size",
              "int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The size in bits of a native integer.  This is equal to <code class=\"code\">32</code>\n   on a 32-bit platform and to <code class=\"code\">64</code> on a 64-bit platform.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "max_int",
              "nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The greatest representable native integer,\n   either 2<sup class=\"superscript\">31</sup> - 1 on a 32-bit platform,\n   or 2<sup class=\"superscript\">63</sup> - 1 on a 64-bit platform.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "min_int",
              "nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The smallest representable native integer,\n   either -2<sup class=\"superscript\">31</sup> on a 32-bit platform,\n   or -2<sup class=\"superscript\">63</sup> on a 64-bit platform.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "logand",
              "nativeint -> nativeint -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Bitwise logical and.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "logor",
              "nativeint -> nativeint -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Bitwise logical or.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "logxor",
              "nativeint -> nativeint -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Bitwise logical exclusive or.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lognot",
              "nativeint -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Bitwise logical negation.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "shift_left",
              "nativeint -> int -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Nativeint</span>.shift_left&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;bitsize</code>,\n   where <code class=\"code\">bitsize</code> is <code class=\"code\">32</code> on a 32-bit platform and\n   <code class=\"code\">64</code> on a 64-bit platform.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "shift_right",
              "nativeint -> int -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Nativeint</span>.shift_right&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.\n   This is an arithmetic shift: the sign bit of <code class=\"code\">x</code> is replicated\n   and inserted in the vacated bits.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;bitsize</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "shift_right_logical",
              "nativeint -> int -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Nativeint</span>.shift_right_logical&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right\n   by <code class=\"code\">y</code> bits.\n   This is a logical shift: zeroes are inserted in the vacated bits\n   regardless of the sign of <code class=\"code\">x</code>.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;bitsize</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_int",
              "int -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given integer (type <code class=\"code\">int</code>) to a native integer\n   (type <code class=\"code\">nativeint</code>).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_int",
              "nativeint -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given native integer (type <code class=\"code\">nativeint</code>) to an\n   integer (type <code class=\"code\">int</code>).  The high-order bit is lost during\n   the conversion.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_float",
              "float -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given floating-point number to a native integer,\n   discarding the fractional part (truncate towards 0).\n   The result of the conversion is undefined if, after truncation,\n   the number is outside the range\n   [<a href=\"Nativeint.html#VALmin_int\"><code class=\"code\"><span class=\"constructor\">Nativeint</span>.min_int</code></a>, <a href=\"Nativeint.html#VALmax_int\"><code class=\"code\"><span class=\"constructor\">Nativeint</span>.max_int</code></a>].</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_float",
              "nativeint -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given native integer to a floating-point number.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_int32",
              "int32 -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given 32-bit integer (type <code class=\"code\">int32</code>)\n   to a native integer.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_int32",
              "nativeint -> int32",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given native integer to a\n   32-bit integer (type <code class=\"code\">int32</code>).  On 64-bit platforms,\n   the 64-bit native integer is taken modulo 2<sup class=\"superscript\">32</sup>,\n   i.e. the top 32 bits are lost.  On 32-bit platforms,\n   the conversion is exact.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_string",
              "string -> nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Convert the given string to a native integer.\n   The string is read in decimal (by default, or if the string \n   begins with <code class=\"code\">0u</code>) or in hexadecimal, octal or binary if the\n   string begins with <code class=\"code\">0x</code>, <code class=\"code\">0o</code> or <code class=\"code\">0b</code> respectively.</p>\n\n<p>The <code class=\"code\">0u</code> prefix reads the input as an unsigned integer in the range\n   <code class=\"code\">[0,&nbsp;2*<span class=\"constructor\">Nativeint</span>.max_int+1]</code>.  If the input exceeds <a href=\"Nativeint.html#VALmax_int\"><code class=\"code\"><span class=\"constructor\">Nativeint</span>.max_int</code></a>\n   it is converted to the signed integer\n   <code class=\"code\"><span class=\"constructor\">Int64</span>.min_int&nbsp;+&nbsp;input&nbsp;-&nbsp;<span class=\"constructor\">Nativeint</span>.max_int&nbsp;-&nbsp;1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"Nativeint.of_string\"</span></code> if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type <code class=\"code\">nativeint</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_string_opt",
              "string -> nativeint option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">of_string</code>, but return <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_string",
              "nativeint -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the string representation of its argument, in decimal.</p>\n</div>"
              ]
            ]
          ],
          [
            "Type",
            [
              "t",
              "nativeint",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>An alias for the type of native integers.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "compare",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The comparison function for native integers, with the same specification as\n    <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>, this function <code class=\"code\">compare</code>\n    allows the module <code class=\"code\"><span class=\"constructor\">Nativeint</span></code> to be passed as argument to the functors\n    <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "equal",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The equal function for native ints.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Oo",
    "module_info": "<p>Operations on objects</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "copy",
              "(< .. > as 'a) -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Oo</span>.copy&nbsp;o</code> returns a copy of object <code class=\"code\">o</code>, that is a fresh\n   object with the same methods and instance variables as <code class=\"code\">o</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "id",
              "< .. > -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return an integer identifying this object, unique for\n    the current execution of the program. The generic comparison\n    and hashing functions are based on this integer. When an object\n    is obtained by unmarshaling, the id is refreshed, and thus\n    different from the original object. As a consequence, the internal\n    invariants of data structures such as hash table or sets containing\n    objects are broken after unmarshaling the data structures.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Parsing",
    "module_info":
      "<p>The run-time library for parsers generated by <code class=\"code\">ocamlyacc</code>.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "symbol_start",
              "unit -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">symbol_start</code> and <a href=\"Parsing.html#VALsymbol_end\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_end</code></a> are to be called in the\n   action part of a grammar rule only. They return the offset of the\n   string that matches the left-hand side of the rule: <code class=\"code\">symbol_start()</code>\n   returns the offset of the first character; <code class=\"code\">symbol_end()</code> returns the\n   offset after the last character. The first character in a file is at\n   offset 0.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "symbol_end",
              "unit -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Parsing.html#VALsymbol_start\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_start</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rhs_start",
              "int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Parsing.html#VALsymbol_start\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_start</code></a> and <a href=\"Parsing.html#VALsymbol_end\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_end</code></a>, but\n   return the offset of the string matching the <code class=\"code\">n</code>th item on the\n   right-hand side of the rule, where <code class=\"code\">n</code> is the integer parameter\n   to <code class=\"code\">rhs_start</code> and <code class=\"code\">rhs_end</code>. <code class=\"code\">n</code> is 1 for the leftmost item.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rhs_end",
              "int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Parsing.html#VALrhs_start\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.rhs_start</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "symbol_start_pos",
              "unit ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">symbol_start</code>, but return a <code class=\"code\">position</code> instead of an offset.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "symbol_end_pos",
              "unit ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">symbol_end</code>, but return a <code class=\"code\">position</code> instead of an offset.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rhs_start_pos",
              "int ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">rhs_start</code>, but return a <code class=\"code\">position</code> instead of an offset.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rhs_end_pos",
              "int ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">rhs_end</code>, but return a <code class=\"code\">position</code> instead of an offset.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "clear_parser",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Empty the parser stack. Call it just after a parsing function\n   has returned, to remove all pointers from the parser stack\n   to structures that were built by semantic actions during parsing.\n   This is optional, but lowers the memory requirements of the\n   programs.</p>\n</div>"
              ]
            ]
          ],
          [
            "Exception",
            [
              "Parse_error",
              "None",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Raised when a parser encounters a syntax error.\n   Can also be raised from the action part of a grammar rule,\n   to initiate error recovery.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "set_trace",
              "bool -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Control debugging support for <code class=\"code\">ocamlyacc</code>-generated parsers.\n    After <code class=\"code\"><span class=\"constructor\">Parsing</span>.set_trace&nbsp;<span class=\"keyword\">true</span></code>, the pushdown automaton that\n    executes the parsers prints a trace of its actions (reading a token,\n    shifting a state, reducing by a rule) on standard output.\n    <code class=\"code\"><span class=\"constructor\">Parsing</span>.set_trace&nbsp;<span class=\"keyword\">false</span></code> turns this debugging trace off.\n    The boolean returned is the previous state of the trace flag.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Pervasives",
    "module_info":
      "<p>Pervasive operations.</p><p>This module provides the basic operations over the built-in types\n    (numbers, booleans, byte sequences, strings, exceptions, references,\n    lists, arrays, input-output channels, ...).</p><p>This module is included in the toplevel <code class=\"code\"><span class=\"constructor\">Stdlib</span></code> module.</p>",
    "sections": [
      {
        "section_name": [ "Some", "Exceptions" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "raise",
              "exn -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Raise the given exception value</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "raise_notrace",
              "exn -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>A faster version <code class=\"code\">raise</code> which does not record the backtrace.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "invalid_arg",
              "string -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Raise exception <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> with the given string.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "failwith",
              "string -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Raise exception <code class=\"code\"><span class=\"constructor\">Failure</span></code> with the given string.</p>\n</div>"
              ]
            ]
          ],
          [
            "Exception",
            [
              "Exit",
              "None",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The <code class=\"code\"><span class=\"constructor\">Exit</span></code> exception is not raised by any library function.  It is\n    provided for use in your programs.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Comparisons" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "(=)",
              "'a -> 'a -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">e1&nbsp;=&nbsp;e2</code> tests for structural equality of <code class=\"code\">e1</code> and <code class=\"code\">e2</code>.\n   Mutable structures (e.g. references and arrays) are equal\n   if and only if their current contents are structurally equal,\n   even if the two mutable objects are not the same physical object.\n   Equality between functional values raises <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code>.\n   Equality between cyclic data structures may not terminate.\n   Left-associative operator at precedence level 4/11.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "(<>)",
              "'a -> 'a -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Negation of <a href=\"Pervasives.html#VAL(=)\"><code class=\"code\">(=)</code></a>.\n    Left-associative operator at precedence level 4/11.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "(<)",
              "'a -> 'a -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Pervasives.html#VAL(>=)\"><code class=\"code\">(&gt;=)</code></a>.\n    Left-associative operator at precedence level 4/11.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "(>)",
              "'a -> 'a -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Pervasives.html#VAL(>=)\"><code class=\"code\">(&gt;=)</code></a>.\n    Left-associative operator at precedence level 4/11.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "(<=)",
              "'a -> 'a -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>See <a href=\"Pervasives.html#VAL(>=)\"><code class=\"code\">(&gt;=)</code></a>.\n    Left-associative operator at precedence level 4/11.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "(>=)",
              "'a -> 'a -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Structural ordering functions. These functions coincide with\n   the usual orderings over integers, characters, strings, byte sequences\n   and floating-point numbers, and extend them to a\n   total ordering over all types.\n   The ordering is compatible with <code class=\"code\">(&nbsp;=&nbsp;)</code>. As in the case\n   of <code class=\"code\">(&nbsp;=&nbsp;)</code>, mutable structures are compared by contents.\n   Comparison between functional values raises <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code>.\n   Comparison between cyclic structures may not terminate.\n   Left-associative operator at precedence level 4/11.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "compare",
              "'a -> 'a -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">compare&nbsp;x&nbsp;y</code> returns <code class=\"code\">0</code> if <code class=\"code\">x</code> is equal to <code class=\"code\">y</code>,\n   a negative integer if <code class=\"code\">x</code> is less than <code class=\"code\">y</code>, and a positive integer\n   if <code class=\"code\">x</code> is greater than <code class=\"code\">y</code>.  The ordering implemented by <code class=\"code\">compare</code>\n   is compatible with the comparison predicates <code class=\"code\">=</code>, <code class=\"code\">&lt;</code> and <code class=\"code\">&gt;</code>\n   defined above,  with one difference on the treatment of the float value\n   <a href=\"Pervasives.html#VALnan\"><code class=\"code\">nan</code></a>.  Namely, the comparison predicates treat <code class=\"code\">nan</code>\n   as different from any other float value, including itself;\n   while <code class=\"code\">compare</code> treats <code class=\"code\">nan</code> as equal to itself and less than any\n   other float value.  This treatment of <code class=\"code\">nan</code> ensures that <code class=\"code\">compare</code>\n   defines a total ordering relation.</p>\n\n<p><code class=\"code\">compare</code> applied to functional values may raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code>.\n   <code class=\"code\">compare</code> applied to cyclic structures may not terminate.</p>\n\n<p>The <code class=\"code\">compare</code> function can be used as the comparison function\n   required by the <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a> functors, as well as\n   the <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a> and <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a> functions.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "min",
              "'a -> 'a -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the smaller of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value <code class=\"code\">nan</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "max",
              "'a -> 'a -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the greater of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value <code class=\"code\">nan</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "(==)",
              "'a -> 'a -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">e1&nbsp;==&nbsp;e2</code> tests for physical equality of <code class=\"code\">e1</code> and <code class=\"code\">e2</code>.\n   On mutable types such as references, arrays, byte sequences, records with\n   mutable fields and objects with mutable instance variables,\n   <code class=\"code\">e1&nbsp;==&nbsp;e2</code> is true if and only if physical modification of <code class=\"code\">e1</code>\n   also affects <code class=\"code\">e2</code>.\n   On non-mutable types, the behavior of <code class=\"code\">(&nbsp;==&nbsp;)</code> is\n   implementation-dependent; however, it is guaranteed that\n   <code class=\"code\">e1&nbsp;==&nbsp;e2</code> implies <code class=\"code\">compare&nbsp;e1&nbsp;e2&nbsp;=&nbsp;0</code>.\n   Left-associative operator at precedence level 4/11.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "(!=)",
              "'a -> 'a -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Negation of <a href=\"Pervasives.html#VAL(==)\"><code class=\"code\">(==)</code></a>.\n    Left-associative operator at precedence level 4/11.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Boolean operations" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "not",
              "bool -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The boolean negation.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "(&&)",
              "bool -> bool -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The boolean 'and'. Evaluation is sequential, left-to-right:\n   in <code class=\"code\">e1&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;e2</code>, <code class=\"code\">e1</code> is evaluated first, and if it returns <code class=\"code\"><span class=\"keyword\">false</span></code>,\n   <code class=\"code\">e2</code> is not evaluated at all.\n   Right-associative operator at precedence level 3/11.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "(&)",
              "bool -> bool -> bool",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><a href=\"Pervasives.html#VAL(&amp;&amp;)\"><code class=\"code\">(<span class=\"keywordsign\">&amp;&amp;</span>)</code></a> should be used instead.\n    Right-associative operator at precedence level 3/11.</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "(||)",
              "bool -> bool -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The boolean 'or'. Evaluation is sequential, left-to-right:\n   in <code class=\"code\">e1&nbsp;<span class=\"keywordsign\">||</span>&nbsp;e2</code>, <code class=\"code\">e1</code> is evaluated first, and if it returns <code class=\"code\"><span class=\"keyword\">true</span></code>,\n   <code class=\"code\">e2</code> is not evaluated at all.\n   Right-associative operator at precedence level 2/11.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "(or)",
              "bool -> bool -> bool",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><a href=\"Pervasives.html#VAL(||)\"><code class=\"code\">(<span class=\"keywordsign\">||</span>)</code></a> should be used instead.\n    Right-associative operator at precedence level 2/11.</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Debugging" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "__LOC__",
              "string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">__LOC__</code> returns the location at which this expression appears in\n    the file currently being parsed by the compiler, with the standard\n    error format of OCaml: \"File %S, line %d, characters %d-%d\".</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "__FILE__",
              "string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">__FILE__</code> returns the name of the file currently being\n    parsed by the compiler.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "__LINE__",
              "int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">__LINE__</code> returns the line number at which this expression\n    appears in the file currently being parsed by the compiler.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "__MODULE__",
              "string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">__MODULE__</code> returns the module name of the file being\n    parsed by the compiler.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "__POS__",
              "string * int * int * int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">__POS__</code> returns a tuple <code class=\"code\">(file,lnum,cnum,enum)</code>, corresponding\n    to the location at which this expression appears in the file\n    currently being parsed by the compiler. <code class=\"code\">file</code> is the current\n    filename, <code class=\"code\">lnum</code> the line number, <code class=\"code\">cnum</code> the character position in\n    the line and <code class=\"code\">enum</code> the last character position in the line.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "__LOC_OF__",
              "'a -> string * 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">__LOC_OF__&nbsp;expr</code> returns a pair <code class=\"code\">(loc,&nbsp;expr)</code> where <code class=\"code\">loc</code> is the\n    location of <code class=\"code\">expr</code> in the file currently being parsed by the\n    compiler, with the standard error format of OCaml: \"File %S, line\n    %d, characters %d-%d\".</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "__LINE_OF__",
              "'a -> int * 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">__LINE_OF__&nbsp;expr</code> returns a pair <code class=\"code\">(line,&nbsp;expr)</code>, where <code class=\"code\">line</code> is the\n    line number at which the expression <code class=\"code\">expr</code> appears in the file\n    currently being parsed by the compiler.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "__POS_OF__",
              "'a -> (string * int * int * int) * 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">__POS_OF__&nbsp;expr</code> returns a pair <code class=\"code\">(loc,expr)</code>, where <code class=\"code\">loc</code> is a\n    tuple <code class=\"code\">(file,lnum,cnum,enum)</code> corresponding to the location at\n    which the expression <code class=\"code\">expr</code> appears in the file currently being\n    parsed by the compiler. <code class=\"code\">file</code> is the current filename, <code class=\"code\">lnum</code> the\n    line number, <code class=\"code\">cnum</code> the character position in the line and <code class=\"code\">enum</code>\n    the last character position in the line.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Composition operators" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "(|>)",
              "'a -> ('a -> 'b) -> 'b",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Reverse-application operator: <code class=\"code\">x&nbsp;|&gt;&nbsp;f&nbsp;|&gt;&nbsp;g</code> is exactly equivalent\n to <code class=\"code\">g&nbsp;(f&nbsp;(x))</code>.\n Left-associative operator at precedence level 4/11.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.01</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "(@@)",
              "('a -> 'b) -> 'a -> 'b",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Application operator: <code class=\"code\">g&nbsp;@@&nbsp;f&nbsp;@@&nbsp;x</code> is exactly equivalent to\n <code class=\"code\">g&nbsp;(f&nbsp;(x))</code>.\n Right-associative operator at precedence level 5/11.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.01</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Integer arithmetic" ],
        "section_info": [
          "Some",
          "<p>Integers are <code class=\"code\"><span class=\"constructor\">Sys</span>.int_size</code> bits wide.\n    All operations are taken modulo 2<sup class=\"superscript\"><code class=\"code\"><span class=\"constructor\">Sys</span>.int_size</code></sup>.\n    They do not fail on overflow.</p>"
        ],
        "elements": [
          [
            "Function",
            [
              "(~-)",
              "int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Unary negation. You can also write <code class=\"code\">-&nbsp;e</code> instead of <code class=\"code\"><span class=\"keywordsign\">~-</span>&nbsp;e</code>.\n    Unary operator at precedence level 9/11 for <code class=\"code\">-&nbsp;e</code>\n    and 11/11 for <code class=\"code\"><span class=\"keywordsign\">~-</span>&nbsp;e</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "(~+)",
              "int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Unary addition. You can also write <code class=\"code\">+&nbsp;e</code> instead of <code class=\"code\"><span class=\"keywordsign\">~+</span>&nbsp;e</code>.\n    Unary operator at precedence level 9/11 for <code class=\"code\">+&nbsp;e</code>\n    and 11/11 for <code class=\"code\"><span class=\"keywordsign\">~+</span>&nbsp;e</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "succ",
              "int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">succ&nbsp;x</code> is <code class=\"code\">x&nbsp;+&nbsp;1</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "pred",
              "int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pred&nbsp;x</code> is <code class=\"code\">x&nbsp;-&nbsp;1</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "(+)",
              "int -> int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Integer addition.\n    Left-associative operator at precedence level 6/11.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "(-)",
              "int -> int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Integer subtraction.\n    Left-associative operator at precedence level 6/11.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "( * )",
              "int -> int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Integer multiplication.\n    Left-associative operator at precedence level 7/11.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "(/)",
              "int -> int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Integer division.\n   Raise <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code> if the second argument is 0.\n   Integer division rounds the real quotient of its arguments towards zero.\n   More precisely, if <code class=\"code\">x&nbsp;&gt;=&nbsp;0</code> and <code class=\"code\">y&nbsp;&gt;&nbsp;0</code>, <code class=\"code\">x&nbsp;/&nbsp;y</code> is the greatest integer\n   less than or equal to the real quotient of <code class=\"code\">x</code> by <code class=\"code\">y</code>.  Moreover,\n   <code class=\"code\">(-&nbsp;x)&nbsp;/&nbsp;y&nbsp;=&nbsp;x&nbsp;/&nbsp;(-&nbsp;y)&nbsp;=&nbsp;-&nbsp;(x&nbsp;/&nbsp;y)</code>.\n   Left-associative operator at precedence level 7/11.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "(mod)",
              "int -> int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Integer remainder.  If <code class=\"code\">y</code> is not zero, the result\n   of <code class=\"code\">x&nbsp;<span class=\"keyword\">mod</span>&nbsp;y</code> satisfies the following properties:\n   <code class=\"code\">x&nbsp;=&nbsp;(x&nbsp;/&nbsp;y)&nbsp;*&nbsp;y&nbsp;+&nbsp;x&nbsp;<span class=\"keyword\">mod</span>&nbsp;y</code> and\n   <code class=\"code\">abs(x&nbsp;<span class=\"keyword\">mod</span>&nbsp;y)&nbsp;&lt;=&nbsp;abs(y)&nbsp;-&nbsp;1</code>.\n   If <code class=\"code\">y&nbsp;=&nbsp;0</code>, <code class=\"code\">x&nbsp;<span class=\"keyword\">mod</span>&nbsp;y</code> raises <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code>.\n   Note that <code class=\"code\">x&nbsp;<span class=\"keyword\">mod</span>&nbsp;y</code> is negative only if <code class=\"code\">x&nbsp;&lt;&nbsp;0</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code> if <code class=\"code\">y</code> is zero.\n   Left-associative operator at precedence level 7/11.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "abs",
              "int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the absolute value of the argument.  Note that this may be\n  negative if the argument is <code class=\"code\">min_int</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "max_int",
              "int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The greatest representable integer.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "min_int",
              "int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The smallest representable integer.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Printexc",
    "module_info":
      "<p>Facilities for printing exceptions and inspecting current call stack.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "to_string",
              "exn -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.to_string&nbsp;e</code> returns a string representation of\n   the exception <code class=\"code\">e</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "print",
              "('a -> 'b) -> 'a -> 'b",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.print&nbsp;fn&nbsp;x</code> applies <code class=\"code\">fn</code> to <code class=\"code\">x</code> and returns the result.\n   If the evaluation of <code class=\"code\">fn&nbsp;x</code> raises any exception, the\n   name of the exception is printed on standard error output,\n   and the exception is raised again.\n   The typical use is to catch and report exceptions that\n   escape a function application.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "catch",
              "('a -> 'b) -> 'a -> 'b",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.catch&nbsp;fn&nbsp;x</code> is similar to <a href=\"Printexc.html#VALprint\"><code class=\"code\"><span class=\"constructor\">Printexc</span>.print</code></a>, but\n   aborts the program with exit code 2 after printing the\n   uncaught exception.  This function is deprecated: the runtime\n   system is now able to print uncaught exceptions as precisely\n   as <code class=\"code\"><span class=\"constructor\">Printexc</span>.catch</code> does.  Moreover, calling <code class=\"code\"><span class=\"constructor\">Printexc</span>.catch</code>\n   makes it harder to track the location of the exception\n   using the debugger or the stack backtrace facility.\n   So, do not use <code class=\"code\"><span class=\"constructor\">Printexc</span>.catch</code> in new code.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "print_backtrace",
              "out_channel",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace&nbsp;oc</code> prints an exception backtrace\n    on the output channel <code class=\"code\">oc</code>.  The backtrace lists the program\n    locations where the most-recently raised exception was raised\n    and where it was propagated through function calls.</p>\n\n<p>If the call is not inside an exception handler, the returned\n    backtrace is unspecified. If the call is after some\n    exception-catching code (before in the handler, or in a when-guard\n    during the matching of the exception handler), the backtrace may\n    correspond to a later exception than the handled one.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "get_backtrace",
              "unit -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.get_backtrace&nbsp;()</code> returns a string containing the\n    same exception backtrace that <code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code> would\n    print. Same restriction usage than <a href=\"Printexc.html#VALprint_backtrace\"><code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code></a>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "record_backtrace",
              "bool -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.record_backtrace&nbsp;b</code> turns recording of exception backtraces\n    on (if <code class=\"code\">b&nbsp;=&nbsp;<span class=\"keyword\">true</span></code>) or off (if <code class=\"code\">b&nbsp;=&nbsp;<span class=\"keyword\">false</span></code>).  Initially, backtraces\n    are not recorded, unless the <code class=\"code\">b</code> flag is given to the program\n    through the <code class=\"code\"><span class=\"constructor\">OCAMLRUNPARAM</span></code> variable.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "backtrace_status",
              "unit -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.backtrace_status()</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if exception\n    backtraces are currently recorded, <code class=\"code\"><span class=\"keyword\">false</span></code> if not.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "register_printer",
              "(exn -> string option) -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.register_printer&nbsp;fn</code> registers <code class=\"code\">fn</code> as an exception\n    printer.  The printer should return <code class=\"code\"><span class=\"constructor\">None</span></code> or raise an exception\n    if it does not know how to convert the passed exception, and <code class=\"code\"><span class=\"constructor\">Some</span><br>\n&nbsp;&nbsp;&nbsp;&nbsp;s</code> with <code class=\"code\">s</code> the resulting string if it can convert the passed\n    exception. Exceptions raised by the printer are ignored.</p>\n\n<p>When converting an exception into a string, the printers will be invoked\n    in the reverse order of their registrations, until a printer returns\n    a <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;s</code> value (if no such printer exists, the runtime will use a\n    generic printer).</p>\n\n<p>When using this mechanism, one should be aware that an exception backtrace\n    is attached to the thread that saw it raised, rather than to the exception\n    itself. Practically, it means that the code related to <code class=\"code\">fn</code> should not use\n    the backtrace if it has itself raised an exception before.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.2</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Raw backtraces" ],
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "raw_backtrace",
              "None",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The abstract type <code class=\"code\">raw_backtrace</code> stores a backtrace in\n    a low-level format, instead of directly exposing them as string as\n    the <code class=\"code\">get_backtrace()</code> function does.</p>\n\n<p>This allows delaying the formatting of backtraces to when they are\n    actually printed, which may be useful if you record more\n    backtraces than you print.</p>\n\n<p>Raw backtraces cannot be marshalled. If you need marshalling, you\n    should use the array returned by the <code class=\"code\">backtrace_slots</code> function of\n    the next section.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "get_raw_backtrace",
              "unit ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.get_raw_backtrace&nbsp;()</code> returns the same exception\n    backtrace that <code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code> would print, but in\n    a raw format. Same restriction usage than <a href=\"Printexc.html#VALprint_backtrace\"><code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code></a>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "print_raw_backtrace",
              "out_channel",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Print a raw backtrace in the same format\n    <code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code> uses.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "raw_backtrace_to_string",
              "raw_backtrace",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a string from a raw backtrace, in the same format\n    <code class=\"code\"><span class=\"constructor\">Printexc</span>.get_backtrace</code> uses.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "raise_with_backtrace",
              "exn ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Reraise the exception using the given raw_backtrace for the\n    origin of the exception</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Current call stack" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "get_callstack",
              "int ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.get_callstack&nbsp;n</code> returns a description of the top of the\n    call stack on the current program point (for the current thread),\n    with at most <code class=\"code\">n</code> entries.  (Note: this function is not related to\n    exceptions at all, despite being part of the <code class=\"code\"><span class=\"constructor\">Printexc</span></code> module.)</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Uncaught exceptions" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "set_uncaught_exception_handler",
              "(exn ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.set_uncaught_exception_handler&nbsp;fn</code> registers <code class=\"code\">fn</code> as the handler\n    for uncaught exceptions. The default handler prints the exception and\n    backtrace on standard error output.</p>\n\n<p>Note that when <code class=\"code\">fn</code> is called all the functions registered with\n    <a href=\"Pervasives.html#VALat_exit\"><code class=\"code\">at_exit</code></a> have already been called. Because of this you must\n    make sure any output channel <code class=\"code\">fn</code> writes on is flushed.</p>\n\n<p>Also note that exceptions raised by user code in the interactive toplevel\n    are not passed to this function as they are caught by the toplevel itself.</p>\n\n<p>If <code class=\"code\">fn</code> raises an exception, both the exceptions passed to <code class=\"code\">fn</code> and raised\n    by <code class=\"code\">fn</code> will be printed with their respective backtrace.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Manipulation of backtrace information" ],
        "section_info": [
          "Some",
          "<p>These functions are used to traverse the slots of a raw backtrace\n    and extract information from them in a programmer-friendly format.</p>"
        ],
        "elements": [
          [
            "Typevariant",
            [
              "backtrace_slot",
              "None",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The abstract type <code class=\"code\">backtrace_slot</code> represents a single slot of\n    a backtrace.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "backtrace_slots",
              "raw_backtrace",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Returns the slots of a raw backtrace, or <code class=\"code\"><span class=\"constructor\">None</span></code> if none of them\n    contain useful information.</p>\n\n<p>In the return array, the slot at index <code class=\"code\">0</code> corresponds to the most\n    recent function call, raise, or primitive <code class=\"code\">get_backtrace</code> call in\n    the trace.</p>\n\n<p>Some possible reasons for returning <code class=\"code\"><span class=\"constructor\">None</span></code> are as follow:</p>\n<ul>\n<li>none of the slots in the trace come from modules compiled with\n    debug information (<code class=\"code\">-g</code>)</li>\n<li>the program is a bytecode program that has not been linked with\n    debug information enabled (<code class=\"code\">ocamlc&nbsp;-g</code>)</li>\n</ul>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Typevariant",
            [
              "location",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlocation.filename\">filename</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlocation.line_number\">line_number</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlocation.start_char\">start_char</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlocation.end_char\">end_char</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr></tbody>"
              ],
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The type of location information found in backtraces. <code class=\"code\">start_char</code>\n    and <code class=\"code\">end_char</code> are positions relative to the beginning of the\n    line.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>"
              ]
            ]
          ],
          [ "Module", [ "Slot", [ "Some", "" ] ] ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Raw backtrace slots" ],
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "raw_backtrace_slot",
              "None",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>This type allows direct access to raw backtrace slots, without any\n    conversion in an OCaml-usable data-structure. Being\n    process-specific, they must absolutely not be marshalled, and are\n    unsafe to use for this reason (marshalling them may not fail, but\n    un-marshalling and using the result will result in\n    undefined behavior).</p>\n\n<p>Elements of this type can still be compared and hashed: when two\n    elements are equal, then they represent the same source location\n    (the converse is not necessarily true in presence of inlining,\n    for example).</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "raw_backtrace_length",
              "raw_backtrace",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">raw_backtrace_length&nbsp;bckt</code> returns the number of slots in the\n    backtrace <code class=\"code\">bckt</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "get_raw_backtrace_slot",
              "raw_backtrace",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">get_raw_backtrace_slot&nbsp;bckt&nbsp;pos</code> returns the slot in position <code class=\"code\">pos</code> in the\n    backtrace <code class=\"code\">bckt</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "convert_raw_backtrace_slot",
              "raw_backtrace_slot",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Extracts the user-friendly <code class=\"code\">backtrace_slot</code> from a low-level\n    <code class=\"code\">raw_backtrace_slot</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "get_raw_backtrace_next_slot",
              "raw_backtrace_slot",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">get_raw_backtrace_next_slot&nbsp;slot</code> returns the next slot inlined, if any.</p>\n\n<p>Sample code to iterate over all frames (inlined and non-inlined):</p>\n<pre class=\"codepre\"><code class=\"code\">      <span class=\"comment\">(* Iterate over inlined frames *)</span>\n      <span class=\"keyword\">let</span> <span class=\"keyword\">rec</span> iter_raw_backtrace_slot f slot =\n        f slot;\n        <span class=\"keyword\">match</span> get_raw_backtrace_next_slot slot <span class=\"keyword\">with</span>\n        <span class=\"keywordsign\">|</span> <span class=\"constructor\">None</span> <span class=\"keywordsign\">-&gt;</span> ()\n        <span class=\"keywordsign\">|</span> <span class=\"constructor\">Some</span> slot' <span class=\"keywordsign\">-&gt;</span> iter_raw_backtrace_slot f slot'\n\n      <span class=\"comment\">(* Iterate over stack frames *)</span>\n      <span class=\"keyword\">let</span> iter_raw_backtrace f bt =\n        <span class=\"keyword\">for</span> i = 0 <span class=\"keyword\">to</span> raw_backtrace_length bt - 1 <span class=\"keyword\">do</span>\n          iter_raw_backtrace_slot f (get_raw_backtrace_slot bt i)\n        <span class=\"keyword\">done</span>\n    </code></pre></div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.04.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Exception slots" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "exn_slot_id",
              "exn -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.exn_slot_id</code> returns an integer which uniquely identifies\n    the constructor used to create the exception value <code class=\"code\">exn</code>\n    (in the current runtime).</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "exn_slot_name",
              "exn -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.exn_slot_name&nbsp;exn</code> returns the internal name of the constructor\n    used to create the exception value <code class=\"code\">exn</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Printf",
    "module_info": "<p>Formatted output functions.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "fprintf",
              "out_channel",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">fprintf&nbsp;outchan&nbsp;format&nbsp;arg1&nbsp;...&nbsp;argN</code> formats the arguments\n   <code class=\"code\">arg1</code> to <code class=\"code\">argN</code> according to the format string <code class=\"code\">format</code>, and\n   outputs the resulting string on the channel <code class=\"code\">outchan</code>.</p>\n\n<p>The format string is a character string which contains two types of\n   objects: plain characters, which are simply copied to the output\n   channel, and conversion specifications, each of which causes\n   conversion and printing of arguments.</p>\n\n<p>Conversion specifications have the following form:</p>\n\n<p><code class=\"code\">%&nbsp;[flags]&nbsp;[width]&nbsp;[.precision]&nbsp;<span class=\"keyword\">type</span></code></p>\n\n<p>In short, a conversion specification consists in the <code class=\"code\">%</code> character,\n   followed by optional modifiers and a type which is made of one or\n   two characters.</p>\n\n<p>The types and their meanings are:</p>\n\n<ul>\n<li><code class=\"code\">d</code>, <code class=\"code\">i</code>: convert an integer argument to signed decimal.</li>\n<li><code class=\"code\">u</code>, <code class=\"code\">n</code>, <code class=\"code\">l</code>, <code class=\"code\"><span class=\"constructor\">L</span></code>, or <code class=\"code\"><span class=\"constructor\">N</span></code>: convert an integer argument to\n     unsigned decimal.  Warning: <code class=\"code\">n</code>, <code class=\"code\">l</code>, <code class=\"code\"><span class=\"constructor\">L</span></code>, and <code class=\"code\"><span class=\"constructor\">N</span></code> are\n     used for <code class=\"code\">scanf</code>, and should not be used for <code class=\"code\">printf</code>.</li>\n<li><code class=\"code\">x</code>: convert an integer argument to unsigned hexadecimal,\n     using lowercase letters.</li>\n<li><code class=\"code\"><span class=\"constructor\">X</span></code>: convert an integer argument to unsigned hexadecimal,\n     using uppercase letters.</li>\n<li><code class=\"code\">o</code>: convert an integer argument to unsigned octal.</li>\n<li><code class=\"code\">s</code>: insert a string argument.</li>\n<li><code class=\"code\"><span class=\"constructor\">S</span></code>: convert a string argument to OCaml syntax (double quotes, escapes).</li>\n<li><code class=\"code\">c</code>: insert a character argument.</li>\n<li><code class=\"code\"><span class=\"constructor\">C</span></code>: convert a character argument to OCaml syntax\n     (single quotes, escapes).</li>\n<li><code class=\"code\">f</code>: convert a floating-point argument to decimal notation,\n     in the style <code class=\"code\">dddd.ddd</code>.</li>\n<li><code class=\"code\"><span class=\"constructor\">F</span></code>: convert a floating-point argument to OCaml syntax (<code class=\"code\">dddd.</code>\n     or <code class=\"code\">dddd.ddd</code> or <code class=\"code\">d.ddd&nbsp;e+-dd</code>).</li>\n<li><code class=\"code\">e</code> or <code class=\"code\"><span class=\"constructor\">E</span></code>: convert a floating-point argument to decimal notation,\n     in the style <code class=\"code\">d.ddd&nbsp;e+-dd</code> (mantissa and exponent).</li>\n<li><code class=\"code\">g</code> or <code class=\"code\"><span class=\"constructor\">G</span></code>: convert a floating-point argument to decimal notation,\n     in style <code class=\"code\">f</code> or <code class=\"code\">e</code>, <code class=\"code\"><span class=\"constructor\">E</span></code> (whichever is more compact). Moreover,\n     any trailing zeros are removed from the fractional part of the result\n     and the decimal-point character is removed if there is no fractional\n     part remaining.</li>\n<li><code class=\"code\">h</code> or <code class=\"code\"><span class=\"constructor\">H</span></code>: convert a floating-point argument to hexadecimal notation,\n     in the style <code class=\"code\">0xh.hhhh&nbsp;e+-dd</code> (hexadecimal mantissa, exponent in\n     decimal and denotes a power of 2).</li>\n<li><code class=\"code\"><span class=\"constructor\">B</span></code>: convert a boolean argument to the string <code class=\"code\"><span class=\"keyword\">true</span></code> or <code class=\"code\"><span class=\"keyword\">false</span></code></li>\n<li><code class=\"code\">b</code>: convert a boolean argument (deprecated; do not use in new\n     programs).</li>\n<li><code class=\"code\">ld</code>, <code class=\"code\">li</code>, <code class=\"code\">lu</code>, <code class=\"code\">lx</code>, <code class=\"code\">lX</code>, <code class=\"code\">lo</code>: convert an <code class=\"code\">int32</code> argument to\n     the format specified by the second letter (decimal, hexadecimal, etc).</li>\n<li><code class=\"code\">nd</code>, <code class=\"code\">ni</code>, <code class=\"code\">nu</code>, <code class=\"code\">nx</code>, <code class=\"code\">nX</code>, <code class=\"code\">no</code>: convert a <code class=\"code\">nativeint</code> argument to\n     the format specified by the second letter.</li>\n<li><code class=\"code\"><span class=\"constructor\">Ld</span></code>, <code class=\"code\"><span class=\"constructor\">Li</span></code>, <code class=\"code\"><span class=\"constructor\">Lu</span></code>, <code class=\"code\"><span class=\"constructor\">Lx</span></code>, <code class=\"code\"><span class=\"constructor\">LX</span></code>, <code class=\"code\"><span class=\"constructor\">Lo</span></code>: convert an <code class=\"code\">int64</code> argument to\n     the format specified by the second letter.</li>\n<li><code class=\"code\">a</code>: user-defined printer. Take two arguments and apply the\n     first one to <code class=\"code\">outchan</code> (the current output channel) and to the\n     second argument. The first argument must therefore have type\n     <code class=\"code\">out_channel&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;<span class=\"keywordsign\">'</span>b&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;unit</code> and the second <code class=\"code\"><span class=\"keywordsign\">'</span>b</code>.\n     The output produced by the function is inserted in the output of\n     <code class=\"code\">fprintf</code> at the current point.</li>\n<li><code class=\"code\">t</code>: same as <code class=\"code\">%a</code>, but take only one argument (with type\n     <code class=\"code\">out_channel&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;unit</code>) and apply it to <code class=\"code\">outchan</code>.</li>\n<li><code class=\"code\">{&nbsp;fmt&nbsp;%}</code>: convert a format string argument to its type digest.\n     The argument must have the same type as the internal format string\n     <code class=\"code\">fmt</code>.</li>\n<li><code class=\"code\">(&nbsp;fmt&nbsp;%)</code>: format string substitution. Take a format string\n     argument and substitute it to the internal format string <code class=\"code\">fmt</code>\n     to print following arguments. The argument must have the same\n     type as the internal format string <code class=\"code\">fmt</code>.</li>\n<li><code class=\"code\">!</code>: take no argument and flush the output.</li>\n<li><code class=\"code\">%</code>: take no argument and output one <code class=\"code\">%</code> character.</li>\n<li><code class=\"code\">@</code>: take no argument and output one <code class=\"code\">@</code> character.</li>\n<li><code class=\"code\">,</code>: take no argument and output nothing: a no-op delimiter for\n     conversion specifications.</li>\n</ul>\n<p>The optional <code class=\"code\">flags</code> are:</p>\n<ul>\n<li><code class=\"code\">-</code>: left-justify the output (default is right justification).</li>\n<li><code class=\"code\">0</code>: for numerical conversions, pad with zeroes instead of spaces.</li>\n<li><code class=\"code\">+</code>: for signed numerical conversions, prefix number with a <code class=\"code\">+</code>\n     sign if positive.</li>\n<li>space: for signed numerical conversions, prefix number with a\n     space if positive.</li>\n<li><code class=\"code\"><span class=\"keywordsign\">#</span></code>: request an alternate formatting style for the hexadecimal\n     and octal integer types (<code class=\"code\">x</code>, <code class=\"code\"><span class=\"constructor\">X</span></code>, <code class=\"code\">o</code>, <code class=\"code\">lx</code>, <code class=\"code\">lX</code>, <code class=\"code\">lo</code>, <code class=\"code\"><span class=\"constructor\">Lx</span></code>,\n     <code class=\"code\"><span class=\"constructor\">LX</span></code>, <code class=\"code\"><span class=\"constructor\">Lo</span></code>).</li>\n</ul>\n<p>The optional <code class=\"code\">width</code> is an integer indicating the minimal\n   width of the result. For instance, <code class=\"code\">%6d</code> prints an integer,\n   prefixing it with spaces to fill at least 6 characters.</p>\n\n<p>The optional <code class=\"code\">precision</code> is a dot <code class=\"code\">.</code> followed by an integer\n   indicating how many digits follow the decimal point in the <code class=\"code\">%f</code>,\n   <code class=\"code\">%e</code>, and <code class=\"code\">%<span class=\"constructor\">E</span></code> conversions. For instance, <code class=\"code\">%.4f</code> prints a <code class=\"code\">float</code> with\n   4 fractional digits.</p>\n\n<p>The integer in a <code class=\"code\">width</code> or <code class=\"code\">precision</code> can also be specified as\n   <code class=\"code\">*</code>, in which case an extra integer argument is taken to specify\n   the corresponding <code class=\"code\">width</code> or <code class=\"code\">precision</code>. This integer argument\n   precedes immediately the argument to print.\n   For instance, <code class=\"code\">%.*f</code> prints a <code class=\"code\">float</code> with as many fractional\n   digits as the value of the argument given before the float.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "printf",
              "('a,",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but output on <code class=\"code\">stdout</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "eprintf",
              "('a,",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but output on <code class=\"code\">stderr</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sprintf",
              "('a, unit, string)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but instead of printing on an output channel,\n   return a string containing the result of formatting the arguments.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "bprintf",
              "Buffer.t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but instead of printing on an output channel,\n   append the formatted arguments to the given extensible buffer\n   (see module <a href=\"Buffer.html\"><code class=\"code\"><span class=\"constructor\">Buffer</span></code></a>).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "ifprintf",
              "'b -> ('a, 'b, 'c, unit)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but does not print anything.\n    Useful to ignore some material when conditionally printing.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 3.10.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "None",
        "section_info": [
          "Some", "<p>Formatted output functions with continuations.</p>"
        ],
        "elements": [
          [
            "Function",
            [
              "kfprintf",
              "(",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">fprintf</code>, but instead of returning immediately,\n   passes the out channel to its first argument at the end of printing.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 3.09.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "ikfprintf",
              "('b -> 'd) -> 'b -> ('a, 'b, 'c, 'd)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">kfprintf</code> above, but does not print anything.\n   Useful to ignore some material when conditionally printing.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "ksprintf",
              "(string -> 'd) -> ('a, unit, string, 'd)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">sprintf</code> above, but instead of returning the string,\n   passes it to the first argument.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 3.09.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "kbprintf",
              "(",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <code class=\"code\">bprintf</code>, but instead of returning immediately,\n   passes the buffer to its first argument at the end of printing.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 3.10.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "None",
        "section_info": [ "Some", "<p>Deprecated</p>" ],
        "elements": [
          [
            "Function",
            [
              "kprintf",
              "(string -> 'b) -> ('a, unit, string, 'b)",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>A deprecated synonym for <code class=\"code\">ksprintf</code>.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Queue",
    "module_info":
      "<p>First-in first-out queues.</p><p>This module implements queues (FIFOs), with in-place modification.</p><p><b>Warning</b> This module is not thread-safe: each <a href=\"Queue.html#TYPEt\"><code class=\"code\"><span class=\"constructor\">Queue</span>.t</code></a> value\n   must be protected from concurrent access (e.g. with a <code class=\"code\"><span class=\"constructor\">Mutex</span>.t</code>).\n   Failure to do so can lead to a crash.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "'a",
              "None",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The type of queues containing elements of type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Exception",
            [
              "Empty",
              "None",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Raised when <a href=\"Queue.html#VALtake\"><code class=\"code\"><span class=\"constructor\">Queue</span>.take</code></a> or <a href=\"Queue.html#VALpeek\"><code class=\"code\"><span class=\"constructor\">Queue</span>.peek</code></a> is applied to an empty queue.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "create",
              "unit -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a new queue, initially empty.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add",
              "'a -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">add&nbsp;x&nbsp;q</code> adds the element <code class=\"code\">x</code> at the end of the queue <code class=\"code\">q</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "push",
              "'a -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">push</code> is a synonym for <code class=\"code\">add</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "take",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">take&nbsp;q</code> removes and returns the first element in queue <code class=\"code\">q</code>,\n   or raises <a href=\"Queue.html#EXCEPTIONEmpty\"><code class=\"code\"><span class=\"constructor\">Queue</span>.<span class=\"constructor\">Empty</span></code></a> if the queue is empty.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "pop",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pop</code> is a synonym for <code class=\"code\">take</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "peek",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">peek&nbsp;q</code> returns the first element in queue <code class=\"code\">q</code>, without removing\n   it from the queue, or raises <a href=\"Queue.html#EXCEPTIONEmpty\"><code class=\"code\"><span class=\"constructor\">Queue</span>.<span class=\"constructor\">Empty</span></code></a> if the queue is empty.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "top",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">top</code> is a synonym for <code class=\"code\">peek</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "clear",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Discard all elements from a queue.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "copy",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the given queue.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "is_empty",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given queue is empty, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "length",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the number of elements in a queue.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "iter",
              "('a -> unit) -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;q</code> applies <code class=\"code\">f</code> in turn to all elements of <code class=\"code\">q</code>,\n   from the least recently entered to the most recently entered.\n   The queue itself is unchanged.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fold",
              "('b -> 'a -> 'b) -> 'b -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;accu&nbsp;q</code> is equivalent to <code class=\"code\"><span class=\"constructor\">List</span>.fold_left&nbsp;f&nbsp;accu&nbsp;l</code>,\n   where <code class=\"code\">l</code> is the list of <code class=\"code\">q</code>'s elements. The queue remains\n   unchanged.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "transfer",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">transfer&nbsp;q1&nbsp;q2</code> adds all of <code class=\"code\">q1</code>'s elements at the end of\n   the queue <code class=\"code\">q2</code>, then clears <code class=\"code\">q1</code>. It is equivalent to the\n   sequence <code class=\"code\">iter&nbsp;(<span class=\"keyword\">fun</span>&nbsp;x&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;add&nbsp;x&nbsp;q2)&nbsp;q1;&nbsp;clear&nbsp;q1</code>, but runs\n   in constant time.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "to_seq",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the queue, in front-to-back order.\n    The behavior is not defined if the queue is modified\n    during the iteration.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add_seq",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Add the elements from the generator to the end of the queue</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_seq",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Create an array from the generator</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Random",
    "module_info": "<p>Pseudo-random number generators (PRNG).</p>",
    "sections": [
      {
        "section_name": [ "Some", "Basic functions" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "init",
              "int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Initialize the generator, using the argument as a seed.\n     The same seed will always yield the same sequence of numbers.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "full_init",
              "int array -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Random.html#VALinit\"><code class=\"code\"><span class=\"constructor\">Random</span>.init</code></a> but takes more data as seed.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "self_init",
              "unit -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Initialize the generator with a random seed chosen\n   in a system-dependent way.  If <code class=\"code\">/dev/urandom</code> is available on\n   the host machine, it is used to provide a highly random initial\n   seed.  Otherwise, a less random seed is computed from system\n   parameters (current time, process IDs).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "bits",
              "unit -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return 30 random bits in a nonnegative integer.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Before 3.12.0 </b> used a different algorithm (affects all the following\n                   functions)</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "int",
              "int -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.int&nbsp;bound</code> returns a random integer between 0 (inclusive)\n     and <code class=\"code\">bound</code> (exclusive).  <code class=\"code\">bound</code> must be greater than 0 and less\n     than 2<sup class=\"superscript\">30</sup>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "int32",
              "Int32.t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.int32&nbsp;bound</code> returns a random integer between 0 (inclusive)\n     and <code class=\"code\">bound</code> (exclusive).  <code class=\"code\">bound</code> must be greater than 0.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "nativeint",
              "Nativeint.t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.nativeint&nbsp;bound</code> returns a random integer between 0 (inclusive)\n     and <code class=\"code\">bound</code> (exclusive).  <code class=\"code\">bound</code> must be greater than 0.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "int64",
              "Int64.t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.int64&nbsp;bound</code> returns a random integer between 0 (inclusive)\n     and <code class=\"code\">bound</code> (exclusive).  <code class=\"code\">bound</code> must be greater than 0.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "float",
              "float -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.float&nbsp;bound</code> returns a random floating-point number\n   between 0 and <code class=\"code\">bound</code> (inclusive).  If <code class=\"code\">bound</code> is\n   negative, the result is negative or zero.  If <code class=\"code\">bound</code> is 0,\n   the result is 0.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "bool",
              "unit -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.bool&nbsp;()</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> or <code class=\"code\"><span class=\"keyword\">false</span></code> with probability 0.5 each.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Advanced functions" ],
        "section_info": [
          "Some",
          "<p>The functions from module <a href=\"Random.State.html\"><code class=\"code\"><span class=\"constructor\">Random</span>.<span class=\"constructor\">State</span></code></a> manipulate the current state\n    of the random generator explicitly.\n    This allows using one or several deterministic PRNGs,\n    even in a multi-threaded program, without interference from\n    other parts of the program.</p>"
        ],
        "elements": [
          [ "Module", [ "State", "None" ] ],
          [
            "Function",
            [
              "get_state",
              "unit ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the current state of the generator used by the basic functions.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "set_state",
              "State.t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Set the state of the generator used by the basic functions.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Scanf",
    "module_info": "<p>Formatted input functions.</p>",
    "sections": [
      {
        "section_name": [ "Some", "Introduction" ],
        "section_info": "None",
        "elements": [],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Seq",
    "module_info":
      "<h2 id=\"1_FunctionalIterators\">Functional Iterators</h2>",
    "sections": [
      {
        "section_name": "None",
        "section_info": [
          "Some",
          "<p>The type <code class=\"code\"><span class=\"keywordsign\">'</span>a&nbsp;t</code> is a <b>delayed list</b>, i.e. a list where some evaluation\n    is needed to access the next element. This makes it possible to build\n    infinite sequences, to build sequences as we traverse them, and to transform\n    them in a lazy fashion rather than upfront.</p>"
        ],
        "elements": [
          [
            "Type",
            [
              "'a",
              "=",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The type of delayed lists containing elements of type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.\n    Note that the concrete list node <code class=\"code\"><span class=\"keywordsign\">'</span>a&nbsp;node</code> is delayed under a closure,\n    not a <code class=\"code\"><span class=\"keyword\">lazy</span></code> block, which means it might be recomputed every time\n    we access it.</p>\n</div>"
              ]
            ]
          ],
          [ "Type", [ "'a", "=", "None" ] ],
          [
            "Function",
            [
              "empty",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The empty sequence, containing no elements.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "return",
              "'a -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The singleton sequence containing only the given element.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "map",
              "('a -> 'b) -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">map&nbsp;f&nbsp;seq</code> returns a new sequence whose elements are the elements of\n    <code class=\"code\">seq</code>, transformed by <code class=\"code\">f</code>.\n    This transformation is lazy, it only applies when the result is traversed.</p>\n\n<p>If <code class=\"code\">seq&nbsp;=&nbsp;[1;2;3]</code>, then <code class=\"code\">map&nbsp;f&nbsp;seq&nbsp;=&nbsp;[f&nbsp;1;&nbsp;f&nbsp;2;&nbsp;f&nbsp;3]</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "filter",
              "('a -> bool) -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Remove from the sequence the elements that do not satisfy the\n    given predicate.\n    This transformation is lazy, it only applies when the result is traversed.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "filter_map",
              "('a -> 'b option) -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Apply the function to every element; if <code class=\"code\">f&nbsp;x&nbsp;=&nbsp;<span class=\"constructor\">None</span></code> then <code class=\"code\">x</code> is dropped;\n    if <code class=\"code\">f&nbsp;x&nbsp;=&nbsp;<span class=\"constructor\">Some</span>&nbsp;y</code> then <code class=\"code\">y</code> is returned.\n    This transformation is lazy, it only applies when the result is traversed.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "flat_map",
              "('a -> 'b",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Map each element to a subsequence, then return each element of this\n    sub-sequence in turn.\n    This transformation is lazy, it only applies when the result is traversed.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fold_left",
              "('a -> 'b -> 'a) -> 'a -> 'b",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Traverse the sequence from left to right, combining each element with the\n    accumulator using the given function.\n    The traversal happens immediately and will not terminate on infinite sequences.</p>\n\n<p>Also see <a href=\"List.html#VALfold_left\"><code class=\"code\"><span class=\"constructor\">List</span>.fold_left</code></a></p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "iter",
              "('a -> unit) -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the sequence, calling the (imperative) function on every element.\n    The traversal happens immediately and will not terminate on infinite sequences.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Set",
    "module_info":
      "<p>Sets over ordered types.</p><p>This module implements the set data structure, given a total ordering\n   function over the set elements. All operations over sets\n   are purely applicative (no side-effects).\n   The implementation uses balanced binary trees, and is therefore\n   reasonably efficient: insertion and membership take time\n   logarithmic in the size of the set, for instance.</p><p>The <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> functor constructs implementations for any type, given a\n   <code class=\"code\">compare</code> function.\n   For instance:</p><pre class=\"codepre\"><code class=\"code\">     <span class=\"keyword\">module</span> <span class=\"constructor\">IntPairs</span> =\n       <span class=\"keyword\">struct</span>\n         <span class=\"keyword\">type</span> t = int * int\n         <span class=\"keyword\">let</span> compare (x0,y0) (x1,y1) =\n           <span class=\"keyword\">match</span> <span class=\"constructor\">Pervasives</span>.compare x0 x1 <span class=\"keyword\">with</span>\n               0 <span class=\"keywordsign\">-&gt;</span> <span class=\"constructor\">Pervasives</span>.compare y0 y1\n             <span class=\"keywordsign\">|</span> c <span class=\"keywordsign\">-&gt;</span> c\n       <span class=\"keyword\">end</span>\n\n     <span class=\"keyword\">module</span> <span class=\"constructor\">PairsSet</span> = <span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span>(<span class=\"constructor\">IntPairs</span>)\n\n     <span class=\"keyword\">let</span> m = <span class=\"constructor\">PairsSet</span>.(empty |&gt; add (2,3) |&gt; add (5,7) |&gt; add (11,13))\n   </code></pre><p>This creates a new module <code class=\"code\"><span class=\"constructor\">PairsSet</span></code>, with a new type <code class=\"code\"><span class=\"constructor\">PairsSet</span>.t</code>\n   of sets of <code class=\"code\">int&nbsp;*&nbsp;int</code>.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Moduletype",
            [
              "OrderedType",
              [
                "Some",
                "<p>Input signature of the functor <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a>.</p>"
              ]
            ]
          ],
          [
            "Moduletype",
            [
              "S",
              [
                "Some",
                "<p>Output signature of the functor <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a>.</p>"
              ]
            ]
          ],
          [
            "Module",
            [
              "Make",
              [
                "Some",
                "<p>Functor building an implementation of the set structure\n   given a totally ordered type.</p>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Sort",
    "module_info": "<p>Sorting and merging lists.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "list",
              "('a -> 'a -> bool) -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Sort a list in increasing order according to an ordering predicate.\n   The predicate should return <code class=\"code\"><span class=\"keyword\">true</span></code> if its first argument is\n   less than or equal to its second argument.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "array",
              "('a -> 'a -> bool) -> 'a array -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Sort an array in increasing order according to an\n   ordering predicate.\n   The predicate should return <code class=\"code\"><span class=\"keyword\">true</span></code> if its first argument is\n   less than or equal to its second argument.\n   The array is sorted in place.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "merge",
              "('a -> 'a -> bool) -> 'a list -> 'a list -> 'a list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Merge two lists according to the given predicate.\n   Assuming the two argument lists are sorted according to the\n   predicate, <code class=\"code\">merge</code> returns a sorted list containing the elements\n   from the two lists. The behavior is undefined if the two\n   argument lists were not sorted.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Spacetime",
    "module_info":
      "<p>Profiling of a program's space behaviour over time.\n    Currently only supported on x86-64 platforms running 64-bit code.</p><p>To use the functions in this module you must:</p><ul>\n<li>configure the compiler with \"-spacetime\";</li>\n<li>compile to native code.\n    Without these conditions being satisfied the functions in this module\n    will have no effect.</li>\n</ul><p>Instead of manually taking profiling heap snapshots with this module it is\n    possible to use an automatic snapshot facility that writes profiling\n    information at fixed intervals to a file. To enable this, all that needs to\n    be done is to build the relevant program using a compiler configured with\n    -spacetime; and set the environment variable OCAML_SPACETIME_INTERVAL to an\n    integer number of milliseconds giving the interval between profiling heap\n    snapshots. This interval should not be made excessively small relative to\n    the running time of the program. A typical interval to start with might be\n    1/100 of the running time of the program.  The program must exit \"normally\"\n    (i.e. by calling <code class=\"code\">exit</code>, with whatever exit code, rather than being\n    abnormally terminated by a signal) so that the snapshot file is\n    correctly completed.</p><p>When using the automatic snapshot mode the profiling output is written\n    to a file called \"spacetime-&lt;pid&gt;\" where &lt;pid&gt; is the process ID of the\n    program.  (If the program forks and continues executing then multiple\n    files may be produced with different pid numbers.)  The profiling output\n    is by default written to the current working directory when the program\n    starts.  This may be customised by setting the OCAML_SPACETIME_SNAPSHOT_DIR\n    environment variable to the name of the desired directory.</p><p>If using automatic snapshots the presence of the\n    <code class=\"code\">save_event_for_automatic_snapshots</code> function, below, should be noted.</p><p>The functions in this module are thread safe.</p><p>For functions to decode the information recorded by the profiler,\n    see the Spacetime offline library in otherlibs/.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "enabled",
              "bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">enabled</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> if the compiler is configured with spacetime and <code class=\"code\"><span class=\"keyword\">false</span></code>\n    otherwise</p>\n</div>"
              ]
            ]
          ],
          [ "Module", [ "Series", "None" ] ],
          [ "Module", [ "Snapshot", "None" ] ],
          [
            "Function",
            [
              "save_event_for_automatic_snapshots",
              "event_name:string -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Like <a href=\"Spacetime.Series.html#VALsave_event\"><code class=\"code\"><span class=\"constructor\">Spacetime</span>.<span class=\"constructor\">Series</span>.save_event</code></a>, but writes to the automatic snapshot file.\n    This function is a no-op if OCAML_SPACETIME_INTERVAL was not set.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Stack",
    "module_info":
      "<p>Last-in first-out stacks.</p><p>This module implements stacks (LIFOs), with in-place modification.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "'a",
              "None",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The type of stacks containing elements of type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Exception",
            [
              "Empty",
              "None",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Raised when <a href=\"Stack.html#VALpop\"><code class=\"code\"><span class=\"constructor\">Stack</span>.pop</code></a> or <a href=\"Stack.html#VALtop\"><code class=\"code\"><span class=\"constructor\">Stack</span>.top</code></a> is applied to an empty stack.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "create",
              "unit -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a new stack, initially empty.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "push",
              "'a -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">push&nbsp;x&nbsp;s</code> adds the element <code class=\"code\">x</code> at the top of stack <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "pop",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pop&nbsp;s</code> removes and returns the topmost element in stack <code class=\"code\">s</code>,\n   or raises <a href=\"Stack.html#EXCEPTIONEmpty\"><code class=\"code\"><span class=\"constructor\">Stack</span>.<span class=\"constructor\">Empty</span></code></a> if the stack is empty.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "top",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">top&nbsp;s</code> returns the topmost element in stack <code class=\"code\">s</code>,\n   or raises <a href=\"Stack.html#EXCEPTIONEmpty\"><code class=\"code\"><span class=\"constructor\">Stack</span>.<span class=\"constructor\">Empty</span></code></a> if the stack is empty.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "clear",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Discard all elements from a stack.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "copy",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the given stack.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "is_empty",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given stack is empty, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "length",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the number of elements in a stack. Time complexity O(1)</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "iter",
              "('a -> unit) -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies <code class=\"code\">f</code> in turn to all elements of <code class=\"code\">s</code>,\n   from the element at the top of the stack to the element at the\n   bottom of the stack. The stack itself is unchanged.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fold",
              "('b -> 'a -> 'b) -> 'b -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;accu&nbsp;s</code> is <code class=\"code\">(f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;accu&nbsp;x1)&nbsp;x2)&nbsp;...)&nbsp;xn)</code>\n    where <code class=\"code\">x1</code> is the top of the stack, <code class=\"code\">x2</code> the second element,\n    and <code class=\"code\">xn</code> the bottom element. The stack is unchanged.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "to_seq",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the stack, top to bottom.\n    It is safe to modify the stack during iteration.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "add_seq",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Add the elements from the iterator on the top of the stack.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_seq",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Create a stack from the iterator</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "StdLabels",
    "module_info":
      "<p>Standard labeled libraries.</p><p>This meta-module provides labelized version of the <a href=\"Array.html\"><code class=\"code\"><span class=\"constructor\">Array</span></code></a>,\n   <a href=\"Bytes.html\"><code class=\"code\"><span class=\"constructor\">Bytes</span></code></a>, <a href=\"List.html\"><code class=\"code\"><span class=\"constructor\">List</span></code></a> and <a href=\"String.html\"><code class=\"code\"><span class=\"constructor\">String</span></code></a> modules.</p><p>They only differ by their labels. Detailed interfaces can be found\n   in <code class=\"code\">arrayLabels.mli</code>, <code class=\"code\">bytesLabels.mli</code>, <code class=\"code\">listLabels.mli</code>\n   and <code class=\"code\">stringLabels.mli</code>.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [ "Module", [ "Array", "None" ] ],
          [ "Module", [ "Bytes", "None" ] ],
          [ "Module", [ "List", "None" ] ],
          [ "Module", [ "String", "None" ] ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Stream",
    "module_info": "<p>Streams and parsers.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "'a",
              "None",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The type of streams holding values of type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Exception",
            [
              "Failure",
              "None",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Raised by parsers when none of the first components of the stream\n   patterns is accepted.</p>\n</div>"
              ]
            ]
          ],
          [
            "Exception",
            [
              "Error",
              [ "Some", "string" ],
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Raised by parsers when the first component of a stream pattern is\n   accepted, but one of the following components is rejected.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Stream builders" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "from",
              "(int -> 'a option) -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Stream</span>.from&nbsp;f</code> returns a stream built from the function <code class=\"code\">f</code>.\n   To create a new stream element, the function <code class=\"code\">f</code> is called with\n   the current stream count. The user function <code class=\"code\">f</code> must return either\n   <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;&lt;value&gt;</code> for a value or <code class=\"code\"><span class=\"constructor\">None</span></code> to specify the end of the\n   stream.</p>\n\n<p>Do note that the indices passed to <code class=\"code\">f</code> may not start at <code class=\"code\">0</code> in the\n   general case. For example, <code class=\"code\">[&lt;&nbsp;<span class=\"keywordsign\">'</span>0;&nbsp;<span class=\"keywordsign\">'</span>1;&nbsp;<span class=\"constructor\">Stream</span>.from&nbsp;f&nbsp;&gt;]</code> would call\n   <code class=\"code\">f</code> the first time with count <code class=\"code\">2</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_list",
              "'a list -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the stream holding the elements of the list in the same\n   order.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_string",
              "string -> char",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the stream of the characters of the string parameter.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_bytes",
              "bytes -> char",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the stream of the characters of the bytes parameter.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_channel",
              "in_channel",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the stream of the characters read from the input channel.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Stream iterator" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "iter",
              "('a -> unit) -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Stream</span>.iter&nbsp;f&nbsp;s</code> scans the whole stream s, applying function <code class=\"code\">f</code>\n   in turn to each stream element encountered.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Predefined parsers" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "next",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the first element of the stream and remove it from the\n   stream. Raise <a href=\"Stream.html#EXCEPTIONFailure\"><code class=\"code\"><span class=\"constructor\">Stream</span>.<span class=\"constructor\">Failure</span></code></a> if the stream is empty.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "empty",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return <code class=\"code\">()</code> if the stream is empty, else raise <a href=\"Stream.html#EXCEPTIONFailure\"><code class=\"code\"><span class=\"constructor\">Stream</span>.<span class=\"constructor\">Failure</span></code></a>.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Useful functions" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "peek",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return <code class=\"code\"><span class=\"constructor\">Some</span></code> of \"the first element\" of the stream, or <code class=\"code\"><span class=\"constructor\">None</span></code> if\n   the stream is empty.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "junk",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Remove the first element of the stream, possibly unfreezing\n   it before.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "count",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the current count of the stream elements, i.e. the number\n   of the stream elements discarded.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "npeek",
              "int -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">npeek&nbsp;n</code> returns the list of the <code class=\"code\">n</code> first elements of\n   the stream, or all its remaining elements if less than <code class=\"code\">n</code>\n   elements are available.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "String",
    "module_info":
      "<p>String operations.</p><p>A string is an immutable data structure that contains a\n  fixed-length sequence of (single-byte) characters. Each character\n  can be accessed in constant time through its index.</p><p>Given a string <code class=\"code\">s</code> of length <code class=\"code\">l</code>, we can access each of the <code class=\"code\">l</code>\n  characters of <code class=\"code\">s</code> via its index in the sequence. Indexes start at\n  <code class=\"code\">0</code>, and we will call an index valid in <code class=\"code\">s</code> if it falls within the\n  range <code class=\"code\">[0...l-1]</code> (inclusive). A position is the point between two\n  characters or at the beginning or end of the string.  We call a\n  position valid in <code class=\"code\">s</code> if it falls within the range <code class=\"code\">[0...l]</code>\n  (inclusive). Note that the character at index <code class=\"code\">n</code> is between\n  positions <code class=\"code\">n</code> and <code class=\"code\">n+1</code>.</p><p>Two parameters <code class=\"code\">start</code> and <code class=\"code\">len</code> are said to designate a valid\n  substring of <code class=\"code\">s</code> if <code class=\"code\">len&nbsp;&gt;=&nbsp;0</code> and <code class=\"code\">start</code> and <code class=\"code\">start+len</code> are\n  valid positions in <code class=\"code\">s</code>.</p><p>OCaml strings used to be modifiable in place, for instance via the\n  <a href=\"String.html#VALset\"><code class=\"code\"><span class=\"constructor\">String</span>.set</code></a> and <a href=\"String.html#VALblit\"><code class=\"code\"><span class=\"constructor\">String</span>.blit</code></a> functions described below. This\n  usage is deprecated and only possible when the compiler is put in\n  \"unsafe-string\" mode by giving the <code class=\"code\">-unsafe-string</code> command-line\n  option (which is currently the default for reasons of backward\n  compatibility). This is done by making the types <code class=\"code\">string</code> and\n  <code class=\"code\">bytes</code> (see module <a href=\"Bytes.html\"><code class=\"code\"><span class=\"constructor\">Bytes</span></code></a>) interchangeable so that functions\n  expecting byte sequences can also accept strings as arguments and\n  modify them.</p><p>All new code should avoid this feature and be compiled with the\n  <code class=\"code\">-safe-string</code> command-line option to enforce the separation between\n  the types <code class=\"code\">string</code> and <code class=\"code\">bytes</code>.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "length",
              "string -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the length (number of characters) of the given string.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "get",
              "string -> int -> char",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.get&nbsp;s&nbsp;n</code> returns the character at index <code class=\"code\">n</code> in string <code class=\"code\">s</code>.\n   You can also write <code class=\"code\">s.[n]</code> instead of <code class=\"code\"><span class=\"constructor\">String</span>.get&nbsp;s&nbsp;n</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> not a valid index in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "set",
              "bytes -> int -> char -> unit",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"Bytes.html#VALset\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.set</code></a>.<code class=\"code\">&nbsp;</code></div><div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.set&nbsp;s&nbsp;n&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place,\n   replacing the byte at index <code class=\"code\">n</code> with <code class=\"code\">c</code>.\n   You can also write <code class=\"code\">s.[n]&nbsp;&lt;-&nbsp;c</code> instead of <code class=\"code\"><span class=\"constructor\">String</span>.set&nbsp;s&nbsp;n&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is not a valid index in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "create",
              "int -> bytes",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"Bytes.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.create</code></a>.<code class=\"code\">&nbsp;</code></div><div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.create&nbsp;n</code> returns a fresh byte sequence of length <code class=\"code\">n</code>.\n   The sequence is uninitialized and contains arbitrary bytes.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "make",
              "int -> char -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.make&nbsp;n&nbsp;c</code> returns a fresh string of length <code class=\"code\">n</code>,\n   filled with the character <code class=\"code\">c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "init",
              "int -> (int -> char) -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.init&nbsp;n&nbsp;f</code> returns a string of length <code class=\"code\">n</code>, with character\n    <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code> (called in increasing\n    index order).</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "copy",
              "string -> string",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Because strings are immutable, it doesn't make much\n    sense to make identical copies of them.</div><div class=\"info-desc\">\n<p>Return a copy of the given string.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sub",
              "string -> int -> int -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.sub&nbsp;s&nbsp;start&nbsp;len</code> returns a fresh string of length <code class=\"code\">len</code>,\n   containing the substring of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> and\n   has length <code class=\"code\">len</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not\n   designate a valid substring of <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fill",
              "bytes -> int -> int -> char -> unit",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"Bytes.html#VALfill\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.fill</code></a>.<code class=\"code\">&nbsp;</code></div><div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place,\n   replacing <code class=\"code\">len</code> bytes with <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not\n   designate a valid range of <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "blit",
              "string -> int -> bytes -> int -> int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Bytes.html#VALblit_string\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.blit_string</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "concat",
              "string -> string list -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.concat&nbsp;sep&nbsp;sl</code> concatenates the list of strings <code class=\"code\">sl</code>,\n    inserting the separator string <code class=\"code\">sep</code> between each.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result is longer than\n    <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "iter",
              "(char -> unit) -> string -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all\n   the characters of <code class=\"code\">s</code>.  It is equivalent to\n   <code class=\"code\">f&nbsp;s.[0];&nbsp;f&nbsp;s.[1];&nbsp;...;&nbsp;f&nbsp;s.[<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1];&nbsp;()</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "iteri",
              "(int -> char -> unit) -> string -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"String.html#VALiter\"><code class=\"code\"><span class=\"constructor\">String</span>.iter</code></a>, but the\n   function is applied to the index of the element as first argument\n   (counting from 0), and the character itself as second argument.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "map",
              "(char -> char) -> string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the\n    characters of <code class=\"code\">s</code> (in increasing index order) and stores the\n    results in a new string that is returned.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mapi",
              "(int -> char -> char) -> string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its\n    index (in increasing index order) and stores the results in a new\n    string that is returned.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "trim",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, without leading and trailing\n   whitespace.  The characters regarded as whitespace are: <code class=\"code\"><span class=\"string\">'&nbsp;'</span></code>,\n   <code class=\"code\"><span class=\"string\">'\\012'</span></code>, <code class=\"code\"><span class=\"string\">'\\n'</span></code>, <code class=\"code\"><span class=\"string\">'\\r'</span></code>, and <code class=\"code\"><span class=\"string\">'\\t'</span></code>.  If there is neither leading nor\n   trailing whitespace character in the argument, return the original\n   string itself, not a copy.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "escaped",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with special characters\n    represented by escape sequences, following the lexical\n    conventions of OCaml.\n    All characters outside the ASCII printable range (32..126) are\n    escaped, as well as backslash and double-quote.</p>\n\n<p>If there is no special character in the argument that needs\n    escaping, return the original string itself, not a copy.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result is longer than\n    <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n\n<p>The function <a href=\"Scanf.html#VALunescaped\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.unescaped</code></a> is a left inverse of <code class=\"code\">escaped</code>,\n    i.e. <code class=\"code\"><span class=\"constructor\">Scanf</span>.unescaped&nbsp;(escaped&nbsp;s)&nbsp;=&nbsp;s</code> for any string <code class=\"code\">s</code> (unless\n    <code class=\"code\">escape&nbsp;s</code> fails).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "index",
              "string -> char -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index&nbsp;s&nbsp;c</code> returns the index of the first\n   occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "index_opt",
              "string -> char -> int option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_opt&nbsp;s&nbsp;c</code> returns the index of the first\n    occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or\n    <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rindex",
              "string -> char -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex&nbsp;s&nbsp;c</code> returns the index of the last\n   occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rindex_opt",
              "string -> char -> int option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence\n    of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in\n    <code class=\"code\">s</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "index_from",
              "string -> int -> char -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>.\n   <code class=\"code\"><span class=\"constructor\">String</span>.index&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">String</span>.index_from&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "index_from_opt",
              "string -> int -> char -> int option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n    first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>\n    or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_opt&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">String</span>.index_from_opt&nbsp;s&nbsp;0&nbsp;c</code>.\n    Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rindex_from",
              "string -> int -> char -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.\n   <code class=\"code\"><span class=\"constructor\">String</span>.rindex&nbsp;s&nbsp;c</code> is equivalent to\n   <code class=\"code\"><span class=\"constructor\">String</span>.rindex_from&nbsp;s&nbsp;(<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rindex_from_opt",
              "string -> int -> char -> int option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>\n   or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_opt&nbsp;s&nbsp;c</code> is equivalent to\n   <code class=\"code\"><span class=\"constructor\">String</span>.rindex_from_opt&nbsp;s&nbsp;(<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "contains",
              "string -> char -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.contains&nbsp;s&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in the string <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "contains_from",
              "string -> int -> char -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in <code class=\"code\">s</code> after position <code class=\"code\">start</code>.\n   <code class=\"code\"><span class=\"constructor\">String</span>.contains&nbsp;s&nbsp;c</code> is equivalent to\n   <code class=\"code\"><span class=\"constructor\">String</span>.contains_from&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rcontains_from",
              "string -> int -> char -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in <code class=\"code\">s</code> before position <code class=\"code\">stop+1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">stop&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">stop+1</code> is not a valid\n   position in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uppercase",
              "string -> string",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lowercase",
              "string -> string",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "capitalize",
              "string -> string",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uncapitalize",
              "string -> string",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uppercase_ascii",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lowercase_ascii",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "capitalize_ascii",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uncapitalize_ascii",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Type",
            [
              "t",
              "string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>An alias for the type of strings.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "compare",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The comparison function for strings, with the same specification as\n    <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>, this function <code class=\"code\">compare</code>\n    allows the module <code class=\"code\"><span class=\"constructor\">String</span></code> to be passed as argument to the functors\n    <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "equal",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The equal function for strings.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "split_on_char",
              "char -> string -> string list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.split_on_char&nbsp;sep&nbsp;s</code> returns the list of all (possibly empty)\n    substrings of <code class=\"code\">s</code> that are delimited by the <code class=\"code\">sep</code> character.</p>\n\n<p>The function's output is specified by the following invariants:</p>\n\n<ul>\n<li>The list is not empty.</li>\n<li>Concatenating its elements using <code class=\"code\">sep</code> as a separator returns a\n      string equal to the input (<code class=\"code\"><span class=\"constructor\">String</span>.concat&nbsp;(<span class=\"constructor\">String</span>.make&nbsp;1&nbsp;sep)<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span class=\"constructor\">String</span>.split_on_char&nbsp;sep&nbsp;s)&nbsp;=&nbsp;s</code>).</li>\n<li>No string in the result contains the <code class=\"code\">sep</code> character.</li>\n</ul>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.04.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "to_seq",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the string, in increasing index order. Modifications of the\n    string during iteration will be reflected in the iterator.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_seqi",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the string, in increasing order, yielding indices along chars</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_seq",
              "char",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Create a string from the generator</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "StringLabels",
    "module_info": "<p>String operations.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "length",
              "string -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the length (number of characters) of the given string.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "get",
              "string -> int -> char",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.get&nbsp;s&nbsp;n</code> returns the character at index <code class=\"code\">n</code> in string <code class=\"code\">s</code>.\n   You can also write <code class=\"code\">s.[n]</code> instead of <code class=\"code\"><span class=\"constructor\">String</span>.get&nbsp;s&nbsp;n</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> not a valid index in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "set",
              "bytes -> int -> char -> unit",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"BytesLabels.html#VALset\"><code class=\"code\"><span class=\"constructor\">BytesLabels</span>.set</code></a>.</div><div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.set&nbsp;s&nbsp;n&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place,\n   replacing the byte at index <code class=\"code\">n</code> with <code class=\"code\">c</code>.\n   You can also write <code class=\"code\">s.[n]&nbsp;&lt;-&nbsp;c</code> instead of <code class=\"code\"><span class=\"constructor\">String</span>.set&nbsp;s&nbsp;n&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is not a valid index in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "create",
              "int -> bytes",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"BytesLabels.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">BytesLabels</span>.create</code></a>.</div><div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.create&nbsp;n</code> returns a fresh byte sequence of length <code class=\"code\">n</code>.\n   The sequence is uninitialized and contains arbitrary bytes.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "make",
              "int -> char -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.make&nbsp;n&nbsp;c</code> returns a fresh string of length <code class=\"code\">n</code>,\n   filled with the character <code class=\"code\">c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "init",
              "int -> f:(int -> char) -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">init&nbsp;n&nbsp;f</code> returns a string of length <code class=\"code\">n</code>,\n    with character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "copy",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the given string.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "sub",
              "string -> pos:int -> len:int -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.sub&nbsp;s&nbsp;start&nbsp;len</code> returns a fresh string of length <code class=\"code\">len</code>,\n   containing the substring of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> and\n   has length <code class=\"code\">len</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not\n   designate a valid substring of <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fill",
              "bytes -> pos:int -> len:int -> char -> unit",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"BytesLabels.html#VALfill\"><code class=\"code\"><span class=\"constructor\">BytesLabels</span>.fill</code></a>.</div><div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place,\n   replacing <code class=\"code\">len</code> bytes by <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not\n   designate a valid substring of <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "blit",
              "src:string -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes\n   from the string <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>,\n   to byte sequence <code class=\"code\">dst</code>, starting at character number <code class=\"code\">dstoff</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">srcoff</code> and <code class=\"code\">len</code> do not\n   designate a valid range of <code class=\"code\">src</code>, or if <code class=\"code\">dstoff</code> and <code class=\"code\">len</code>\n   do not designate a valid range of <code class=\"code\">dst</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "concat",
              "sep:string -> string list -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.concat&nbsp;sep&nbsp;sl</code> concatenates the list of strings <code class=\"code\">sl</code>,\n   inserting the separator string <code class=\"code\">sep</code> between each.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "iter",
              "f:(char -> unit) -> string -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all\n   the characters of <code class=\"code\">s</code>.  It is equivalent to\n   <code class=\"code\">f&nbsp;s.[0];&nbsp;f&nbsp;s.[1];&nbsp;...;&nbsp;f&nbsp;s.[<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1];&nbsp;()</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "iteri",
              "f:(int -> char -> unit) -> string -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"String.html#VALiter\"><code class=\"code\"><span class=\"constructor\">String</span>.iter</code></a>, but the\n   function is applied to the index of the element as first argument\n   (counting from 0), and the character itself as second argument.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "map",
              "f:(char -> char) -> string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all\n   the characters of <code class=\"code\">s</code> and stores the results in a new string that\n   is returned.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "mapi",
              "f:(int -> char -> char) -> string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its\n    index (in increasing index order) and stores the results in a new\n    string that is returned.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "trim",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, without leading and trailing\n   whitespace.  The characters regarded as whitespace are: <code class=\"code\"><span class=\"string\">'&nbsp;'</span></code>,\n   <code class=\"code\"><span class=\"string\">'\\012'</span></code>, <code class=\"code\"><span class=\"string\">'\\n'</span></code>, <code class=\"code\"><span class=\"string\">'\\r'</span></code>, and <code class=\"code\"><span class=\"string\">'\\t'</span></code>.  If there is no leading nor\n   trailing whitespace character in the argument, return the original\n   string itself, not a copy.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "escaped",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with special characters\n   represented by escape sequences, following the lexical\n   conventions of OCaml.  If there is no special\n   character in the argument, return the original string itself,\n   not a copy. Its inverse function is Scanf.unescaped.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "index",
              "string -> char -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index&nbsp;s&nbsp;c</code> returns the index of the first\n   occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "index_opt",
              "string -> char -> int option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_opt&nbsp;s&nbsp;c</code> returns the index of the first\n    occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or\n    <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rindex",
              "string -> char -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex&nbsp;s&nbsp;c</code> returns the index of the last\n   occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rindex_opt",
              "string -> char -> int option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence\n    of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in\n    <code class=\"code\">s</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "index_from",
              "string -> int -> char -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>.\n   <code class=\"code\"><span class=\"constructor\">String</span>.index&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">String</span>.index_from&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "index_from_opt",
              "string -> int -> char -> int option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n    first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>\n    or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_opt&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">String</span>.index_from_opt&nbsp;s&nbsp;0&nbsp;c</code>.\n    Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rindex_from",
              "string -> int -> char -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.\n   <code class=\"code\"><span class=\"constructor\">String</span>.rindex&nbsp;s&nbsp;c</code> is equivalent to\n   <code class=\"code\"><span class=\"constructor\">String</span>.rindex_from&nbsp;s&nbsp;(<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rindex_from_opt",
              "string -> int -> char -> int option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>\n   or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_opt&nbsp;s&nbsp;c</code> is equivalent to\n   <code class=\"code\"><span class=\"constructor\">String</span>.rindex_from_opt&nbsp;s&nbsp;(<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "contains",
              "string -> char -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.contains&nbsp;s&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in the string <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "contains_from",
              "string -> int -> char -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in <code class=\"code\">s</code> after position <code class=\"code\">start</code>.\n   <code class=\"code\"><span class=\"constructor\">String</span>.contains&nbsp;s&nbsp;c</code> is equivalent to\n   <code class=\"code\"><span class=\"constructor\">String</span>.contains_from&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rcontains_from",
              "string -> int -> char -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in <code class=\"code\">s</code> before position <code class=\"code\">stop+1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">stop&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">stop+1</code> is not a valid\n   position in <code class=\"code\">s</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uppercase",
              "string -> string",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lowercase",
              "string -> string",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "capitalize",
              "string -> string",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uncapitalize",
              "string -> string",
              [
                "Some",
                "<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div><div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uppercase_ascii",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "lowercase_ascii",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "capitalize_ascii",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "uncapitalize_ascii",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the US-ASCII character set.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Type",
            [
              "t",
              "string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>An alias for the type of strings.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "compare",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The comparison function for strings, with the same specification as\n    <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>, this function <code class=\"code\">compare</code>\n    allows the module <code class=\"code\"><span class=\"constructor\">String</span></code> to be passed as argument to the functors\n    <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "equal",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The equal function for strings.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "split_on_char",
              "sep:char -> string -> string list",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.split_on_char&nbsp;sep&nbsp;s</code> returns the list of all (possibly empty)\n    substrings of <code class=\"code\">s</code> that are delimited by the <code class=\"code\">sep</code> character.</p>\n\n<p>The function's output is specified by the following invariants:</p>\n\n<ul>\n<li>The list is not empty.</li>\n<li>Concatenating its elements using <code class=\"code\">sep</code> as a separator returns a\n      string equal to the input (<code class=\"code\"><span class=\"constructor\">String</span>.concat&nbsp;(<span class=\"constructor\">String</span>.make&nbsp;1&nbsp;sep)<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span class=\"constructor\">String</span>.split_on_char&nbsp;sep&nbsp;s)&nbsp;=&nbsp;s</code>).</li>\n<li>No string in the result contains the <code class=\"code\">sep</code> character.</li>\n</ul>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Iterators" ],
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "to_seq",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the string, in increasing index order. Modifications of the\n    string during iteration will be reflected in the iterator.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_seqi",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Iterate on the string, in increasing order, yielding indices along chars</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_seq",
              "char",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Create a string from the generator</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Sys",
    "module_info":
      "<p>System interface.</p><p>Every function in this module raises <code class=\"code\"><span class=\"constructor\">Sys_error</span></code> with an\n  informative message when the underlying system call signal\n  an error.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Function",
            [
              "argv",
              "string array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The command line arguments given to the process.\n   The first element is the command name used to invoke the program.\n   The following elements are the command-line arguments\n   given to the program.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "executable_name",
              "string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The name of the file containing the executable currently running.\n    This name may be absolute or relative to the current directory, depending\n    on the platform and whether the program was compiled to bytecode or a native\n    executable.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "file_exists",
              "string -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Test if a file with the given name exists.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "is_directory",
              "string -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the given name refers to a directory,\n    <code class=\"code\"><span class=\"keyword\">false</span></code> if it refers to another kind of file.\n    Raise <code class=\"code\"><span class=\"constructor\">Sys_error</span></code> if no file exists with the given name.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 3.10.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "remove",
              "string -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Remove the given file name from the file system.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rename",
              "string -> string -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Rename a file.  <code class=\"code\">rename&nbsp;oldpath&nbsp;newpath</code> renames the file\n    called <code class=\"code\">oldpath</code>, giving it <code class=\"code\">newpath</code> as its new name,\n    moving it between directories if needed.  If <code class=\"code\">newpath</code> already\n    exists, its contents will be replaced with those of <code class=\"code\">oldpath</code>.\n    Depending on the operating system, the metadata (permissions,\n    owner, etc) of <code class=\"code\">newpath</code> can either be preserved or be replaced by\n    those of <code class=\"code\">oldpath</code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.06 concerning the \"replace existing file\" behavior</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "getenv",
              "string -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the value associated to a variable in the process\n   environment. Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the variable is unbound.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "getenv_opt",
              "string -> string option",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the value associated to a variable in the process\n    environment or <code class=\"code\"><span class=\"constructor\">None</span></code> if the variable is unbound.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "command",
              "string -> int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Execute the given shell command and return its exit code.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "time",
              "unit -> float",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the processor time, in seconds, used by the program\n   since the beginning of execution.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "chdir",
              "string -> unit",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Change the current working directory of the process.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "getcwd",
              "unit -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the current working directory of the process.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "readdir",
              "string -> string array",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the names of all files present in the given directory.\n   Names denoting the current directory and the parent directory\n   (<code class=\"code\"><span class=\"string\">\".\"</span></code> and <code class=\"code\"><span class=\"string\">\"..\"</span></code> in Unix) are not returned.  Each string in the\n   result is a file name rather than a complete path.  There is no\n   guarantee that the name strings in the resulting array will appear\n   in any specific order; they are not, in particular, guaranteed to\n   appear in alphabetical order.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "interactive",
              "bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>This reference is initially set to <code class=\"code\"><span class=\"keyword\">false</span></code> in standalone\n   programs and to <code class=\"code\"><span class=\"keyword\">true</span></code> if the code is being executed under\n   the interactive toplevel system <code class=\"code\">ocaml</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "os_type",
              "string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Operating system currently executing the OCaml program. One of</p>\n<ul>\n<li> <code class=\"code\"><span class=\"string\">\"Unix\"</span></code> (for all Unix versions, including Linux and Mac OS X),</li>\n<li> <code class=\"code\"><span class=\"string\">\"Win32\"</span></code> (for MS-Windows, OCaml compiled with MSVC++ or Mingw),</li>\n<li> <code class=\"code\"><span class=\"string\">\"Cygwin\"</span></code> (for MS-Windows, OCaml compiled with Cygwin).</li>\n</ul>\n</div>"
              ]
            ]
          ],
          [
            "Typevariant",
            [
              "backend_type",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTbackend_type.Native\"><span class=\"constructor\">Native</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTbackend_type.Bytecode\"><span class=\"constructor\">Bytecode</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTbackend_type.Other\"><span class=\"constructor\">Other</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr></tbody>"
              ],
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Currently, the official distribution only supports <code class=\"code\"><span class=\"constructor\">Native</span></code> and\n    <code class=\"code\"><span class=\"constructor\">Bytecode</span></code>, but it can be other backends with alternative\n    compilers, for example, javascript.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.04.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "backend_type",
              "backend_type",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Backend type  currently executing the OCaml program.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.04.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "unix",
              "bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>True if <code class=\"code\"><span class=\"constructor\">Sys</span>.os_type&nbsp;=&nbsp;<span class=\"string\">\"Unix\"</span></code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "win32",
              "bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>True if <code class=\"code\"><span class=\"constructor\">Sys</span>.os_type&nbsp;=&nbsp;<span class=\"string\">\"Win32\"</span></code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "cygwin",
              "bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>True if <code class=\"code\"><span class=\"constructor\">Sys</span>.os_type&nbsp;=&nbsp;<span class=\"string\">\"Cygwin\"</span></code>.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "word_size",
              "int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Size of one word on the machine currently executing the OCaml\n    program, in bits: 32 or 64.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "int_size",
              "int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Size of <code class=\"code\">int</code>, in bits. It is 31 (resp. 63) when using OCaml on a\n    32-bit (resp. 64-bit) platform. It may differ for other implementations,\n    e.g. it can be 32 bits when compiling to JavaScript.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "big_endian",
              "bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Whether the machine currently executing the Caml program is big-endian.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "max_string_length",
              "int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Maximum length of strings and byte sequences.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "max_array_length",
              "int",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Maximum length of a normal array.  The maximum length of a float\n    array is <code class=\"code\">max_array_length/2</code> on 32-bit machines and\n    <code class=\"code\">max_array_length</code> on 64-bit machines.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "runtime_variant",
              "unit -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the name of the runtime variant the program is running on.\n    This is normally the argument given to <code class=\"code\">-runtime-variant</code> at compile\n    time, but for byte-code it can be changed after compilation.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "runtime_parameters",
              "unit -> string",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Return the value of the runtime parameters, in the same format\n    as the contents of the <code class=\"code\"><span class=\"constructor\">OCAMLRUNPARAM</span></code> environment variable.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Signal handling" ],
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "signal_behavior",
              [
                "Some",
                "<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignal_behavior.Signal_default\"><span class=\"constructor\">Signal_default</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignal_behavior.Signal_ignore\"><span class=\"constructor\">Signal_ignore</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignal_behavior.Signal_handle\"><span class=\"constructor\">Signal_handle</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(int -&gt; unit)</code></code></td>\n\n</tr></tbody>"
              ],
              [
                "Some",
                "<div class=\"info-desc\">\n<p>What to do when receiving a signal:</p>\n<ul>\n<li><code class=\"code\"><span class=\"constructor\">Signal_default</span></code>: take the default behavior\n     (usually: abort the program)</li>\n<li><code class=\"code\"><span class=\"constructor\">Signal_ignore</span></code>: ignore the signal</li>\n<li><code class=\"code\"><span class=\"constructor\">Signal_handle</span>&nbsp;f</code>: call function <code class=\"code\">f</code>, giving it the signal\n   number as argument.</li>\n</ul>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "signal",
              "int ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Set the behavior of the system on receipt of a given signal.  The\n   first argument is the signal number.  Return the behavior\n   previously associated with the signal. If the signal number is\n   invalid (or not available on your system), an <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code>\n   exception is raised.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "set_signal",
              "int ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>Same as <a href=\"Sys.html#VALsignal\"><code class=\"code\"><span class=\"constructor\">Sys</span>.signal</code></a> but return value is ignored.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Uchar",
    "module_info": "<p>Unicode characters.</p>",
    "sections": [
      {
        "section_name": "None",
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "t",
              "None",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The type for Unicode characters.</p>\n\n<p>A value of this type represents a Unicode\n    <a href=\"http://unicode.org/glossary/#unicode_scalar_value\">scalar\n    value</a> which is an integer in the ranges <code class=\"code\">0x0000</code>...<code class=\"code\">0xD7FF</code> or\n    <code class=\"code\">0xE000</code>...<code class=\"code\">0x10FFFF</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "min",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">min</code> is U+0000.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "max",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">max</code> is U+10FFFF.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "bom",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">bom</code> is U+FEFF, the\n    <a href=\"http://unicode.org/glossary/#byte_order_mark\">byte order mark</a> (BOM)\n    character.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "rep",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">rep</code> is U+FFFD, the\n    <a href=\"http://unicode.org/glossary/#replacement_character\">replacement</a>\n    character.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "succ",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">succ&nbsp;u</code> is the scalar value after <code class=\"code\">u</code> in the set of Unicode scalar\n    values.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">u</code> is <a href=\"Uchar.html#VALmax\"><code class=\"code\"><span class=\"constructor\">Uchar</span>.max</code></a>.</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "pred",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">pred&nbsp;u</code> is the scalar value before <code class=\"code\">u</code> in the set of Unicode scalar\n    values.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">u</code> is <a href=\"Uchar.html#VALmin\"><code class=\"code\"><span class=\"constructor\">Uchar</span>.min</code></a>.</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "is_valid",
              "int -> bool",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">is_valid&nbsp;n</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">n</code> is a Unicode scalar value\n    (i.e. in the ranges <code class=\"code\">0x0000</code>...<code class=\"code\">0xD7FF</code> or <code class=\"code\">0xE000</code>...<code class=\"code\">0x10FFFF</code>).</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_int",
              "int ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">of_int&nbsp;i</code> is <code class=\"code\">i</code> as a Unicode character.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">i</code> does not satisfy <a href=\"Uchar.html#VALis_valid\"><code class=\"code\"><span class=\"constructor\">Uchar</span>.is_valid</code></a>.</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_int",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">to_int&nbsp;u</code> is <code class=\"code\">u</code> as an integer.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "is_char",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">is_char&nbsp;u</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">u</code> is a latin1 OCaml character.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "of_char",
              "char ->",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">of_char&nbsp;c</code> is <code class=\"code\">c</code> as a Unicode character.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "to_char",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">to_char&nbsp;u</code> is <code class=\"code\">u</code> as an OCaml latin1 character.</p>\n</div><ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">u</code> does not satisfy <a href=\"Uchar.html#VALis_char\"><code class=\"code\"><span class=\"constructor\">Uchar</span>.is_char</code></a>.</li>\n</ul>"
              ]
            ]
          ],
          [
            "Function",
            [
              "equal",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">equal&nbsp;u&nbsp;u'</code> is <code class=\"code\">u&nbsp;=&nbsp;u'</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "compare",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">compare&nbsp;u&nbsp;u'</code> is <code class=\"code\"><span class=\"constructor\">Pervasives</span>.compare&nbsp;u&nbsp;u'</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "hash",
              "t",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\">hash&nbsp;u</code> associates a non-negative integer to <code class=\"code\">u</code>.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  },
  {
    "module_name": "Weak",
    "module_info":
      "<p>Arrays of weak pointers and hash sets of weak pointers.</p>",
    "sections": [
      {
        "section_name": [ "Some", "Low-level functions" ],
        "section_info": "None",
        "elements": [
          [
            "Typevariant",
            [
              "'a",
              "None",
              [
                "Some",
                "<div class=\"info-desc\">\n<p>The type of arrays of weak pointers (weak arrays).  A weak\n   pointer is a value that the garbage collector may erase whenever\n   the value is not used any more (through normal pointers) by the\n   program.  Note that finalisation functions are run after the\n   weak pointers are erased.</p>\n\n<p>A weak pointer is said to be full if it points to a value,\n   empty if the value was erased by the GC.</p>\n\n<p>Notes:</p>\n<ul>\n<li>Integers are not allocated and cannot be stored in weak arrays.</li>\n<li>Weak arrays cannot be marshaled using <a href=\"Pervasives.html#VALoutput_value\"><code class=\"code\">output_value</code></a>\n     nor the functions of the <a href=\"Marshal.html\"><code class=\"code\"><span class=\"constructor\">Marshal</span></code></a> module.</li>\n</ul>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "create",
              "int -> 'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.create&nbsp;n</code> returns a new weak array of length <code class=\"code\">n</code>.\n   All the pointers are initially empty.  Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code>\n   if <code class=\"code\">n</code> is negative or greater than <a href=\"Sys.html#VALmax_array_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length</code></a><code class=\"code\">-1</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "length",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.length&nbsp;ar</code> returns the length (number of elements) of\n   <code class=\"code\">ar</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "set",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.set&nbsp;ar&nbsp;n&nbsp;(<span class=\"constructor\">Some</span>&nbsp;el)</code> sets the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> to be a\n   (full) pointer to <code class=\"code\">el</code>; <code class=\"code\"><span class=\"constructor\">Weak</span>.set&nbsp;ar&nbsp;n&nbsp;<span class=\"constructor\">None</span></code> sets the <code class=\"code\">n</code>th\n   cell of <code class=\"code\">ar</code> to empty.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Weak.set\"</span></code> if <code class=\"code\">n</code> is not in the range\n   0 to <a href=\"Weak.html#VALlength\"><code class=\"code\"><span class=\"constructor\">Weak</span>.length</code></a><code class=\"code\">&nbsp;a&nbsp;-&nbsp;1</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "get",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.get&nbsp;ar&nbsp;n</code> returns None if the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> is\n   empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is the value) if it is full.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Weak.get\"</span></code> if <code class=\"code\">n</code> is not in the range\n   0 to <a href=\"Weak.html#VALlength\"><code class=\"code\"><span class=\"constructor\">Weak</span>.length</code></a><code class=\"code\">&nbsp;a&nbsp;-&nbsp;1</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "get_copy",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.get_copy&nbsp;ar&nbsp;n</code> returns None if the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> is\n   empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is a (shallow) copy of the value) if\n   it is full.\n   In addition to pitfalls with mutable values, the interesting\n   difference with <code class=\"code\">get</code> is that <code class=\"code\">get_copy</code> does not prevent\n   the incremental GC from erasing the value in its current cycle\n   (<code class=\"code\">get</code> may delay the erasure to the next GC cycle).\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Weak.get\"</span></code> if <code class=\"code\">n</code> is not in the range\n   0 to <a href=\"Weak.html#VALlength\"><code class=\"code\"><span class=\"constructor\">Weak</span>.length</code></a><code class=\"code\">&nbsp;a&nbsp;-&nbsp;1</code>.</p>\n\n<p>If the element is a custom block it is not copied.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "check",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.check&nbsp;ar&nbsp;n</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> is\n   full, <code class=\"code\"><span class=\"keyword\">false</span></code> if it is empty.  Note that even if <code class=\"code\"><span class=\"constructor\">Weak</span>.check&nbsp;ar&nbsp;n</code>\n   returns <code class=\"code\"><span class=\"keyword\">true</span></code>, a subsequent <a href=\"Weak.html#VALget\"><code class=\"code\"><span class=\"constructor\">Weak</span>.get</code></a><code class=\"code\">&nbsp;ar&nbsp;n</code> can return <code class=\"code\"><span class=\"constructor\">None</span></code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "fill",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.fill&nbsp;ar&nbsp;ofs&nbsp;len&nbsp;el</code> sets to <code class=\"code\">el</code> all pointers of <code class=\"code\">ar</code> from\n   <code class=\"code\">ofs</code> to <code class=\"code\">ofs&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>.  Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Weak.fill\"</span></code>\n   if <code class=\"code\">ofs</code> and <code class=\"code\">len</code> do not designate a valid subarray of <code class=\"code\">a</code>.</p>\n</div>"
              ]
            ]
          ],
          [
            "Function",
            [
              "blit",
              "'a",
              [
                "Some",
                "<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.blit&nbsp;ar1&nbsp;off1&nbsp;ar2&nbsp;off2&nbsp;len</code> copies <code class=\"code\">len</code> weak pointers\n   from <code class=\"code\">ar1</code> (starting at <code class=\"code\">off1</code>) to <code class=\"code\">ar2</code> (starting at <code class=\"code\">off2</code>).\n   It works correctly even if <code class=\"code\">ar1</code> and <code class=\"code\">ar2</code> are the same.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Weak.blit\"</span></code> if <code class=\"code\">off1</code> and <code class=\"code\">len</code> do\n   not designate a valid subarray of <code class=\"code\">ar1</code>, or if <code class=\"code\">off2</code> and <code class=\"code\">len</code>\n   do not designate a valid subarray of <code class=\"code\">ar2</code>.</p>\n</div>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": [ "Some", "Weak hash sets" ],
        "section_info": [
          "Some",
          "<p>A weak hash set is a hashed set of values.  Each value may\n    magically disappear from the set when it is not used by the\n    rest of the program any more.  This is normally used to share\n    data structures without inducing memory leaks.\n    Weak hash sets are defined on values from a <a href=\"Hashtbl.HashedType.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">HashedType</span></code></a>\n    module; the <code class=\"code\">equal</code> relation and <code class=\"code\">hash</code> function are taken from that\n    module.  We will say that <code class=\"code\">v</code> is an instance of <code class=\"code\">x</code> if <code class=\"code\">equal&nbsp;x&nbsp;v</code>\n    is <code class=\"code\"><span class=\"keyword\">true</span></code>.</p><p>The <code class=\"code\">equal</code> relation must be able to work on a shallow copy of\n    the values and give the same result as with the values themselves.</p>"
        ],
        "elements": [
          [
            "Moduletype",
            [
              "S",
              [
                "Some",
                "<p>The output signature of the functor <a href=\"Weak.Make.html\"><code class=\"code\"><span class=\"constructor\">Weak</span>.<span class=\"constructor\">Make</span></code></a>.</p>"
              ]
            ]
          ],
          [
            "Module",
            [
              "Make",
              [
                "Some",
                "<p>Functor building an implementation of the weak hash set structure.</p>"
              ]
            ]
          ]
        ],
        "sub_sections": []
      }
    ]
  }
]