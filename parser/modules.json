[
  {
    "module_name": "Arg",
    "module_info":
      "\n<p>Parsing of command line arguments.</p>\n\n<p>This module provides a general mechanism for extracting options and\n   arguments from the command line to the program.</p>\n\n<p>Syntax of command lines:\n    A keyword is a character string starting with a <code class=\"code\">-</code>.\n    An option is a keyword alone or followed by an argument.\n    The types of keywords are: <code class=\"code\"><span class=\"constructor\">Unit</span></code>, <code class=\"code\"><span class=\"constructor\">Bool</span></code>, <code class=\"code\"><span class=\"constructor\">Set</span></code>, <code class=\"code\"><span class=\"constructor\">Clear</span></code>,\n    <code class=\"code\"><span class=\"constructor\">String</span></code>, <code class=\"code\"><span class=\"constructor\">Set_string</span></code>, <code class=\"code\"><span class=\"constructor\">Int</span></code>, <code class=\"code\"><span class=\"constructor\">Set_int</span></code>, <code class=\"code\"><span class=\"constructor\">Float</span></code>, <code class=\"code\"><span class=\"constructor\">Set_float</span></code>,\n    <code class=\"code\"><span class=\"constructor\">Tuple</span></code>, <code class=\"code\"><span class=\"constructor\">Symbol</span></code>, and <code class=\"code\"><span class=\"constructor\">Rest</span></code>.\n    <code class=\"code\"><span class=\"constructor\">Unit</span></code>, <code class=\"code\"><span class=\"constructor\">Set</span></code> and <code class=\"code\"><span class=\"constructor\">Clear</span></code> keywords take no argument. A <code class=\"code\"><span class=\"constructor\">Rest</span></code>\n    keyword takes the remaining of the command line as arguments.\n    Every other keyword takes the following word on the command line\n    as argument.  For compatibility with GNU getopt_long, <code class=\"code\">keyword=arg</code>\n    is also allowed.\n    Arguments not preceded by a keyword are called anonymous arguments.</p>\n\n<p>Examples (<code class=\"code\">cmd</code> is assumed to be the command name):</p>\n<ul>\n<li>  <code class=\"code\">cmd&nbsp;-flag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>(a unit option)</li>\n<li>  <code class=\"code\">cmd&nbsp;-int&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>(an int option with argument <code class=\"code\">1</code>)</li>\n<li>  <code class=\"code\">cmd&nbsp;-string&nbsp;foobar&nbsp;&nbsp;</code>(a string option with argument <code class=\"code\"><span class=\"string\">\"foobar\"</span></code>)</li>\n<li>  <code class=\"code\">cmd&nbsp;-float&nbsp;12.34&nbsp;&nbsp;&nbsp;&nbsp;</code>(a float option with argument <code class=\"code\">12.34</code>)</li>\n<li>  <code class=\"code\">cmd&nbsp;a&nbsp;b&nbsp;c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>(three anonymous arguments: <code class=\"code\"><span class=\"string\">\"a\"</span></code>, <code class=\"code\"><span class=\"string\">\"b\"</span></code>, and <code class=\"code\"><span class=\"string\">\"c\"</span></code>)</li>\n<li>  <code class=\"code\">cmd&nbsp;a&nbsp;b&nbsp;--&nbsp;c&nbsp;d&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>(two anonymous arguments and a rest option with\n                           two arguments)</li>\n</ul>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "spec", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Unit\"><span class=\"constructor\">Unit</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(unit -&gt; unit)</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Call the function with unit argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Bool\"><span class=\"constructor\">Bool</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(bool -&gt; unit)</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Call the function with a bool argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Set\"><span class=\"constructor\">Set</span></span> <span class=\"keyword\">of</span> <code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Set the reference to true</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Clear\"><span class=\"constructor\">Clear</span></span> <span class=\"keyword\">of</span> <code class=\"type\">bool <a href=\"Pervasives.html#TYPEref\">ref</a></code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Set the reference to false</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.String\"><span class=\"constructor\">String</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(string -&gt; unit)</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Call the function with a string argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Set_string\"><span class=\"constructor\">Set_string</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string <a href=\"Pervasives.html#TYPEref\">ref</a></code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Set the reference to the string argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Int\"><span class=\"constructor\">Int</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(int -&gt; unit)</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Call the function with an int argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Set_int\"><span class=\"constructor\">Set_int</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int <a href=\"Pervasives.html#TYPEref\">ref</a></code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Set the reference to the int argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Float\"><span class=\"constructor\">Float</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(float -&gt; unit)</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Call the function with a float argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Set_float\"><span class=\"constructor\">Set_float</span></span> <span class=\"keyword\">of</span> <code class=\"type\">float <a href=\"Pervasives.html#TYPEref\">ref</a></code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Set the reference to the float argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Tuple\"><span class=\"constructor\">Tuple</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Arg.html#TYPEspec\">spec</a> list</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Take several arguments according to the\n                                   spec list</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Symbol\"><span class=\"constructor\">Symbol</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string list * (string -&gt; unit)</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Take one of the symbols as argument and\n                                   call the function with the symbol</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Rest\"><span class=\"constructor\">Rest</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(string -&gt; unit)</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Stop interpreting keywords and call the\n                                   function with each remaining argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTspec.Expand\"><span class=\"constructor\">Expand</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(string -&gt; string array)</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>If the remaining arguments to process\n                                           are of the form\n                                           <code class=\"code\">[<span class=\"string\">\"-foo\"</span>;&nbsp;<span class=\"string\">\"arg\"</span>]&nbsp;@&nbsp;rest</code> where \"foo\" is\n                                           registered as <code class=\"code\"><span class=\"constructor\">Expand</span>&nbsp;f</code>, then the\n                                           arguments <code class=\"code\">f&nbsp;<span class=\"string\">\"arg\"</span>&nbsp;@&nbsp;rest</code> are\n                                           processed. Only allowed in\n                                           <code class=\"code\">parse_and_expand_argv_dynamic</code>.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The concrete type describing the behavior associated\n   with a keyword.</p>\n</div>\n"
            ]
          ],
          [ "Typevariant", [ "key", "= string", null, null ] ],
          [ "Typevariant", [ "doc", "= string", null, null ] ],
          [ "Typevariant", [ "usage_msg", "= string", null, null ] ],
          [ "Typevariant", [ "anon_fun", "= string -> unit", null, null ] ],
          [
            "Function",
            [
              "parse",
              "( key * spec * doc ) list -> anon_fun -> usage_msg -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Arg</span>.parse&nbsp;speclist&nbsp;anon_fun&nbsp;usage_msg</code> parses the command line.\n    <code class=\"code\">speclist</code> is a list of triples <code class=\"code\">(key,&nbsp;spec,&nbsp;doc)</code>.\n    <code class=\"code\">key</code> is the option keyword, it must start with a <code class=\"code\"><span class=\"string\">'-'</span></code> character.\n    <code class=\"code\">spec</code> gives the option type and the function to call when this option\n    is found on the command line.\n    <code class=\"code\">doc</code> is a one-line description of this option.\n    <code class=\"code\">anon_fun</code> is called on anonymous arguments.\n    The functions in <code class=\"code\">spec</code> and <code class=\"code\">anon_fun</code> are called in the same order\n    as their arguments appear on the command line.</p>\n\n<p>If an error occurs, <code class=\"code\"><span class=\"constructor\">Arg</span>.parse</code> exits the program, after printing\n    to standard error an error message as follows:</p>\n<ul>\n<li>  The reason for the error: unknown option, invalid or missing argument, etc.</li>\n<li>  <code class=\"code\">usage_msg</code></li>\n<li>  The list of options, each followed by the corresponding <code class=\"code\">doc</code> string.\n    Beware: options that have an empty <code class=\"code\">doc</code> string will not be included in the\n    list.</li>\n</ul>\n<p>For the user to be able to specify anonymous arguments starting with a\n    <code class=\"code\">-</code>, include for example <code class=\"code\">(<span class=\"string\">\"-\"</span>,&nbsp;<span class=\"constructor\">String</span>&nbsp;anon_fun,&nbsp;doc)</code> in <code class=\"code\">speclist</code>.</p>\n\n<p>By default, <code class=\"code\">parse</code> recognizes two unit options, <code class=\"code\">-help</code> and <code class=\"code\">--help</code>,\n    which will print to standard output <code class=\"code\">usage_msg</code> and the list of\n    options, and exit the program.  You can override this behaviour\n    by specifying your own <code class=\"code\">-help</code> and <code class=\"code\">--help</code> options in <code class=\"code\">speclist</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "parse_dynamic",
              "( key * spec * doc ) list ref -> anon_fun -> usage_msg -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Arg.html#VALparse\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse</code></a>, except that the <code class=\"code\">speclist</code> argument is a reference\n    and may be updated during the parsing. A typical use for this feature\n    is to parse command lines of the form:</p>\n<ul>\n<li>    command subcommand <code class=\"code\">options</code>\n    where the list of options depends on the value of the subcommand argument.</li>\n</ul>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "parse_argv",
              "?current:int ref -> string array -> ( key * spec * doc ) list -> anon_fun -> usage_msg -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv&nbsp;~current&nbsp;args&nbsp;speclist&nbsp;anon_fun&nbsp;usage_msg</code> parses\n  the array <code class=\"code\">args</code> as if it were the command line.  It uses and updates\n  the value of <code class=\"code\">~current</code> (if given), or <a href=\"Arg.html#VALcurrent\"><code class=\"code\"><span class=\"constructor\">Arg</span>.current</code></a>.  You must set\n  it before calling <code class=\"code\">parse_argv</code>.  The initial value of <code class=\"code\">current</code>\n  is the index of the program name (argument 0) in the array.\n  If an error occurs, <code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv</code> raises <a href=\"Arg.html#EXCEPTIONBad\"><code class=\"code\"><span class=\"constructor\">Arg</span>.<span class=\"constructor\">Bad</span></code></a> with\n  the error message as argument.  If option <code class=\"code\">-help</code> or <code class=\"code\">--help</code> is\n  given, <code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv</code> raises <a href=\"Arg.html#EXCEPTIONHelp\"><code class=\"code\"><span class=\"constructor\">Arg</span>.<span class=\"constructor\">Help</span></code></a> with the help message\n  as argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "parse_argv_dynamic",
              "?current:int ref -> string array -> ( key * spec * doc ) list ref -> anon_fun -> string -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Arg.html#VALparse_argv\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv</code></a>, except that the <code class=\"code\">speclist</code> argument is a\n    reference and may be updated during the parsing.\n    See <a href=\"Arg.html#VALparse_dynamic\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_dynamic</code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "parse_and_expand_argv_dynamic",
              "int ref -> string array ref -> ( key * spec * doc ) list ref -> anon_fun -> string -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Arg.html#VALparse_argv_dynamic\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv_dynamic</code></a>, except that the <code class=\"code\">argv</code> argument is a\n    reference and may be updated during the parsing of <code class=\"code\"><span class=\"constructor\">Expand</span></code> arguments.\n    See <a href=\"Arg.html#VALparse_argv_dynamic\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv_dynamic</code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "parse_expand",
              "( key * spec * doc ) list -> anon_fun -> usage_msg -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Arg.html#VALparse\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse</code></a>, except that the <code class=\"code\"><span class=\"constructor\">Expand</span></code> arguments are allowed and\n    the <a href=\"Arg.html#VALcurrent\"><code class=\"code\"><span class=\"constructor\">Arg</span>.current</code></a> reference is not updated.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Exception",
            [
              "Help", "string",
              "\n<div class=\"info-desc\">\n<p>Raised by <code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv</code> when the user asks for help.</p>\n</div>\n"
            ]
          ],
          [
            "Exception",
            [
              "Bad", "string",
              "\n<div class=\"info-desc\">\n<p>Functions in <code class=\"code\">spec</code> or <code class=\"code\">anon_fun</code> can raise <code class=\"code\"><span class=\"constructor\">Arg</span>.<span class=\"constructor\">Bad</span></code> with an error\n    message to reject invalid arguments.\n    <code class=\"code\"><span class=\"constructor\">Arg</span>.<span class=\"constructor\">Bad</span></code> is also raised by <a href=\"Arg.html#VALparse_argv\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv</code></a> in case of an error.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "usage", "( key * spec * doc ) list -> usage_msg -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Arg</span>.usage&nbsp;speclist&nbsp;usage_msg</code> prints to standard error\n    an error message that includes the list of valid options.  This is\n    the same message that <a href=\"Arg.html#VALparse\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse</code></a> prints in case of error.\n    <code class=\"code\">speclist</code> and <code class=\"code\">usage_msg</code> are the same as for <a href=\"Arg.html#VALparse\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "usage_string",
              "( key * spec * doc ) list -> usage_msg -> string",
              "\n<div class=\"info-desc\">\n<p>Returns the message that would have been printed by <a href=\"Arg.html#VALusage\"><code class=\"code\"><span class=\"constructor\">Arg</span>.usage</code></a>,\n    if provided with the same parameters.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "align",
              "?limit:int -> ( key * spec * doc ) list -> ( key * spec * doc ) list",
              "\n<div class=\"info-desc\">\n<p>Align the documentation strings by inserting spaces at the first alignment\n    separator (tab or, if tab is not found, space), according to the length of\n    the keyword.  Use a alignment separator as the first character in a doc\n    string if you want to align the whole string.  The doc strings corresponding\n    to <code class=\"code\"><span class=\"constructor\">Symbol</span></code> arguments are aligned on the next line.</p>\n</div>\n<div class=\"param_info\"><code class=\"code\">limit</code> : options with keyword and message longer than <code class=\"code\">limit</code> will not\n    be used to compute the alignment.</div>"
            ]
          ],
          [
            "Function",
            [
              "current", "int ref",
              "\n<div class=\"info-desc\">\n<p>Position (in <a href=\"Sys.html#VALargv\"><code class=\"code\"><span class=\"constructor\">Sys</span>.argv</code></a>) of the argument being processed.  You can\n    change this value, e.g. to force <a href=\"Arg.html#VALparse\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse</code></a> to skip some arguments.\n    <a href=\"Arg.html#VALparse\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse</code></a> uses the initial value of <a href=\"Arg.html#VALcurrent\"><code class=\"code\"><span class=\"constructor\">Arg</span>.current</code></a> as the index of\n    argument 0 (the program name) and starts parsing arguments\n    at the next element.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "read_arg", "string -> string array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Arg</span>.read_arg&nbsp;file</code> reads newline-terminated command line arguments from\n    file <code class=\"code\">file</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "read_arg0", "string -> string array",
              "\n<div class=\"info-desc\">\n<p>Identical to <a href=\"Arg.html#VALread_arg\"><code class=\"code\"><span class=\"constructor\">Arg</span>.read_arg</code></a> but assumes null character terminated command line\n    arguments.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "write_arg", "string -> string array -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Arg</span>.write_arg&nbsp;file&nbsp;args</code> writes the arguments <code class=\"code\">args</code> newline-terminated\n    into the file <code class=\"code\">file</code>. If the any of the arguments in <code class=\"code\">args</code> contains a\n    newline, use <a href=\"Arg.html#VALwrite_arg0\"><code class=\"code\"><span class=\"constructor\">Arg</span>.write_arg0</code></a> instead.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "write_arg0", "string -> string array -> unit",
              "\n<div class=\"info-desc\">\n<p>Identical to <a href=\"Arg.html#VALwrite_arg\"><code class=\"code\"><span class=\"constructor\">Arg</span>.write_arg</code></a> but uses the null character for terminator\n    instead of newline.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Arg_helper",
    "module_info":
      "\n<p>Decipher command line arguments of the form\n        &lt;value&gt; | &lt;key&gt;=&lt;value&gt;<code class=\"code\">,...</code>\n    (as used for example for the specification of inlining parameters\n    varying by simplification round).</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [ [ "Module", [ "Make", null ] ] ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Arg_helper.Make",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "parsed", null, null, null ] ],
          [ "Function", [ "default", "S.Value.t -> parsed", null ] ],
          [
            "Function",
            [ "set_base_default", "S.Value.t -> parsed -> parsed", null ]
          ],
          [
            "Function",
            [
              "add_base_override",
              "S.Key.t -> S.Value.t -> parsed -> parsed", null
            ]
          ],
          [
            "Function",
            [ "reset_base_overrides", "parsed -> parsed", null ]
          ],
          [
            "Function",
            [ "set_user_default", "S.Value.t -> parsed -> parsed", null ]
          ],
          [
            "Function",
            [
              "add_user_override",
              "S.Key.t -> S.Value.t -> parsed -> parsed", null
            ]
          ],
          [
            "Function",
            [ "parse", "string -> string -> parsed ref -> unit", null ]
          ],
          [
            "Typevariant",
            [
              "parse_result", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTparse_result.Ok\"><span class=\"constructor\">Ok</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTparse_result.Parse_failed\"><span class=\"constructor\">Parse_failed</span></span> <span class=\"keyword\">of</span> <code class=\"type\">exn</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "parse_no_error", "string -> parsed ref -> parse_result", null
            ]
          ],
          [
            "Function",
            [ "get", "key:S.Key.t -> parsed -> S.Value.t", null ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMake\"><span class=\"keyword\">module</span> Make</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">S</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"code\"><span class=\"keyword\">sig</span></code></div>",
      "functor_elements": [
        [ "Module", [ "Key", null ] ],
        [ "Module", [ "Value", null ] ]
      ],
      "end_sig":
        "<code class=\"code\"><span class=\"keyword\">end</span></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"code\"><span class=\"keyword\">sig</span></code> <a href=\"Arg_helper.Make.html\">..</a> <code class=\"code\"><span class=\"keyword\">end</span></code>",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>S</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\">sig\n  module Key : sig\n    type t\n\n    (** The textual representation of a key must not contain '=' or ','. *)\n    val of_string : string -&gt; t\n\n    module <a href=\"Map.html\">Map</a> : <a href=\"Map.S.html\">Map.S</a> with type key = t\n  end\n\n  module Value : sig\n    type t\n\n    (** The textual representation of a value must not contain ','. *)\n    val of_string : string -&gt; t\n  end\nend</code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "Array",
    "module_info": "\n<p>Array operations.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "length", "'a array -> int",
              "\n<div class=\"info-desc\">\n<p>Return the length (number of elements) of the given array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get", "'a array -> int -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.get&nbsp;a&nbsp;n</code> returns the element number <code class=\"code\">n</code> of array <code class=\"code\">a</code>.\n   The first element has number 0.\n   The last element has number <code class=\"code\"><span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1</code>.\n   You can also write <code class=\"code\">a.(n)</code> instead of <code class=\"code\"><span class=\"constructor\">Array</span>.get&nbsp;a&nbsp;n</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"index&nbsp;out&nbsp;of&nbsp;bounds\"</span></code>\n   if <code class=\"code\">n</code> is outside the range 0 to <code class=\"code\">(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set", "'a array -> int -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.set&nbsp;a&nbsp;n&nbsp;x</code> modifies array <code class=\"code\">a</code> in place, replacing\n   element number <code class=\"code\">n</code> with <code class=\"code\">x</code>.\n   You can also write <code class=\"code\">a.(n)&nbsp;&lt;-&nbsp;x</code> instead of <code class=\"code\"><span class=\"constructor\">Array</span>.set&nbsp;a&nbsp;n&nbsp;x</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"index&nbsp;out&nbsp;of&nbsp;bounds\"</span></code>\n   if <code class=\"code\">n</code> is outside the range 0 to <code class=\"code\"><span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "make", "int -> 'a -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.make&nbsp;n&nbsp;x</code> returns a fresh array of length <code class=\"code\">n</code>,\n   initialized with <code class=\"code\">x</code>.\n   All the elements of this new array are initially\n   physically equal to <code class=\"code\">x</code> (in the sense of the <code class=\"code\">==</code> predicate).\n   Consequently, if <code class=\"code\">x</code> is mutable, it is shared among all elements\n   of the array, and modifying <code class=\"code\">x</code> through one of the array entries\n   will modify all other entries at the same time.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;<span class=\"constructor\">Sys</span>.max_array_length</code>.\n   If the value of <code class=\"code\">x</code> is a floating-point number, then the maximum\n   size is only <code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length&nbsp;/&nbsp;2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "int -> 'a -> 'a array",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><code class=\"code\"><span class=\"constructor\">Array</span>.create</code> is an alias for <a href=\"Array.html#VALmake\"><code class=\"code\"><span class=\"constructor\">Array</span>.make</code></a>.</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create_float", "int -> float array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.create_float&nbsp;n</code> returns a fresh float array of length <code class=\"code\">n</code>,\n    with uninitialized data.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "make_float", "int -> float array",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><code class=\"code\"><span class=\"constructor\">Array</span>.make_float</code> is an alias for <a href=\"Array.html#VALcreate_float\"><code class=\"code\"><span class=\"constructor\">Array</span>.create_float</code></a>.</div>\n"
            ]
          ],
          [
            "Function",
            [
              "init", "int -> (int -> 'a) -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.init&nbsp;n&nbsp;f</code> returns a fresh array of length <code class=\"code\">n</code>,\n   with element number <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.\n   In other terms, <code class=\"code\"><span class=\"constructor\">Array</span>.init&nbsp;n&nbsp;f</code> tabulates the results of <code class=\"code\">f</code>\n   applied to the integers <code class=\"code\">0</code> to <code class=\"code\">n-1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;<span class=\"constructor\">Sys</span>.max_array_length</code>.\n   If the return type of <code class=\"code\">f</code> is <code class=\"code\">float</code>, then the maximum\n   size is only <code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length&nbsp;/&nbsp;2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "make_matrix", "int -> int -> 'a -> 'a array array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.make_matrix&nbsp;dimx&nbsp;dimy&nbsp;e</code> returns a two-dimensional array\n   (an array of arrays) with first dimension <code class=\"code\">dimx</code> and\n   second dimension <code class=\"code\">dimy</code>. All the elements of this new matrix\n   are initially physically equal to <code class=\"code\">e</code>.\n   The element (<code class=\"code\">x,y</code>) of a matrix <code class=\"code\">m</code> is accessed\n   with the notation <code class=\"code\">m.(x).(y)</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">dimx</code> or <code class=\"code\">dimy</code> is negative or\n   greater than <a href=\"Sys.html#VALmax_array_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length</code></a>.\n   If the value of <code class=\"code\">e</code> is a floating-point number, then the maximum\n   size is only <code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length&nbsp;/&nbsp;2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create_matrix", "int -> int -> 'a -> 'a array array",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><code class=\"code\"><span class=\"constructor\">Array</span>.create_matrix</code> is an alias for <a href=\"Array.html#VALmake_matrix\"><code class=\"code\"><span class=\"constructor\">Array</span>.make_matrix</code></a>.</div>\n"
            ]
          ],
          [
            "Function",
            [
              "append", "'a array -> 'a array -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.append&nbsp;v1&nbsp;v2</code> returns a fresh array containing the\n   concatenation of the arrays <code class=\"code\">v1</code> and <code class=\"code\">v2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "concat", "'a array list -> 'a array",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALappend\"><code class=\"code\"><span class=\"constructor\">Array</span>.append</code></a>, but concatenates a list of arrays.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub", "'a array -> int -> int -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.sub&nbsp;a&nbsp;start&nbsp;len</code> returns a fresh array of length <code class=\"code\">len</code>,\n   containing the elements number <code class=\"code\">start</code> to <code class=\"code\">start&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>\n   of array <code class=\"code\">a</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Array.sub\"</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">a</code>; that is, if\n   <code class=\"code\">start&nbsp;&lt;&nbsp;0</code>, or <code class=\"code\">len&nbsp;&lt;&nbsp;0</code>, or <code class=\"code\">start&nbsp;+&nbsp;len&nbsp;&gt;&nbsp;<span class=\"constructor\">Array</span>.length&nbsp;a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "copy", "'a array -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.copy&nbsp;a</code> returns a copy of <code class=\"code\">a</code>, that is, a fresh array\n   containing the same elements as <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fill", "'a array -> int -> int -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fill&nbsp;a&nbsp;ofs&nbsp;len&nbsp;x</code> modifies the array <code class=\"code\">a</code> in place,\n   storing <code class=\"code\">x</code> in elements number <code class=\"code\">ofs</code> to <code class=\"code\">ofs&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Array.fill\"</span></code> if <code class=\"code\">ofs</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit", "'a array -> int -> 'a array -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.blit&nbsp;v1&nbsp;o1&nbsp;v2&nbsp;o2&nbsp;len</code> copies <code class=\"code\">len</code> elements\n   from array <code class=\"code\">v1</code>, starting at element number <code class=\"code\">o1</code>, to array <code class=\"code\">v2</code>,\n   starting at element number <code class=\"code\">o2</code>. It works correctly even if\n   <code class=\"code\">v1</code> and <code class=\"code\">v2</code> are the same array, and the source and\n   destination chunks overlap.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Array.blit\"</span></code> if <code class=\"code\">o1</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">v1</code>, or if <code class=\"code\">o2</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">v2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_list", "'a array -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.to_list&nbsp;a</code> returns the list of all the elements of <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_list", "'a list -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.of_list&nbsp;l</code> returns a fresh array containing the elements\n   of <code class=\"code\">l</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "iter", "('a -> unit) -> 'a array -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.iter&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> in turn to all\n   the elements of <code class=\"code\">a</code>.  It is equivalent to\n   <code class=\"code\">f&nbsp;a.(0);&nbsp;f&nbsp;a.(1);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1);&nbsp;()</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iteri", "(int -> 'a -> unit) -> 'a array -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Array</span>.iter</code></a>, but the\n   function is applied with the index of the element as first argument,\n   and the element itself as second argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "('a -> 'b) -> 'a array -> 'b array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.map&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>,\n   and builds an array with the results returned by <code class=\"code\">f</code>:\n   <code class=\"code\">[|&nbsp;f&nbsp;a.(0);&nbsp;f&nbsp;a.(1);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;|]</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mapi", "(int -> 'a -> 'b) -> 'a array -> 'b array",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Array</span>.map</code></a>, but the\n   function is applied to the index of the element as first argument,\n   and the element itself as second argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_left", "('a -> 'b -> 'a) -> 'a -> 'b array -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_left&nbsp;f&nbsp;x&nbsp;a</code> computes\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;x&nbsp;a.(0))&nbsp;a.(1))&nbsp;...)&nbsp;a.(n-1)</code>,\n   where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_right", "('b -> 'a -> 'a) -> 'b array -> 'a -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_right&nbsp;f&nbsp;a&nbsp;x</code> computes\n   <code class=\"code\">f&nbsp;a.(0)&nbsp;(f&nbsp;a.(1)&nbsp;(&nbsp;...&nbsp;(f&nbsp;a.(n-1)&nbsp;x)&nbsp;...))</code>,\n   where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators on two arrays",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "iter2", "('a -> 'b -> unit) -> 'a array -> 'b array -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.iter2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>\n   and <code class=\"code\">b</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the arrays are not the same size.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "map2", "('a -> 'b -> 'c) -> 'a array -> 'b array -> 'c array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.map2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>\n   and <code class=\"code\">b</code>, and builds an array with the results returned by <code class=\"code\">f</code>:\n   <code class=\"code\">[|&nbsp;f&nbsp;a.(0)&nbsp;b.(0);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;b.(<span class=\"constructor\">Array</span>.length&nbsp;b&nbsp;-&nbsp;1)|]</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the arrays are not the same size.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Array scanning",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "for_all", "('a -> bool) -> 'a array -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.for_all&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if all elements of the array\n   satisfy the predicate <code class=\"code\">p</code>. That is, it returns\n   <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;...&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "exists", "('a -> bool) -> 'a array -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.exists&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if at least one element of\n    the array satisfies the predicate <code class=\"code\">p</code>. That is, it returns\n    <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;...&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "mem", "'a -> 'a array -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;a&nbsp;l</code> is true if and only if <code class=\"code\">a</code> is equal\n   to an element of <code class=\"code\">l</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "memq", "'a -> 'a array -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALmem\"><code class=\"code\"><span class=\"constructor\">Array</span>.mem</code></a>, but uses physical equality instead of structural\n   equality to compare array elements.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Sorting",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "sort", "('a -> 'a -> int) -> 'a array -> unit",
              "\n<div class=\"info-desc\">\n<p>Sort an array in increasing order according to a comparison\n   function.  The comparison function must return 0 if its arguments\n   compare as equal, a positive integer if the first is greater,\n   and a negative integer if the first is smaller (see below for a\n   complete specification).  For example, <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a> is\n   a suitable comparison function, provided there are no floating-point\n   NaN values in the data.  After calling <code class=\"code\"><span class=\"constructor\">Array</span>.sort</code>, the\n   array is sorted in place in increasing order.\n   <code class=\"code\"><span class=\"constructor\">Array</span>.sort</code> is guaranteed to run in constant heap space\n   and (at most) logarithmic stack space.</p>\n\n<p>The current implementation uses Heap Sort.  It runs in constant\n   stack space.</p>\n\n<p>Specification of the comparison function:\n   Let <code class=\"code\">a</code> be the array and <code class=\"code\">cmp</code> the comparison function.  The following\n   must be true for all x, y, z in a :</p>\n<ul>\n<li>  <code class=\"code\">cmp&nbsp;x&nbsp;y</code> &gt; 0 if and only if <code class=\"code\">cmp&nbsp;y&nbsp;x</code> &lt; 0</li>\n<li>  if <code class=\"code\">cmp&nbsp;x&nbsp;y</code> &gt;= 0 and <code class=\"code\">cmp&nbsp;y&nbsp;z</code> &gt;= 0 then <code class=\"code\">cmp&nbsp;x&nbsp;z</code> &gt;= 0</li>\n</ul>\n<p>When <code class=\"code\"><span class=\"constructor\">Array</span>.sort</code> returns, <code class=\"code\">a</code> contains the same elements as before,\n   reordered in such a way that for all i and j valid indices of <code class=\"code\">a</code> :</p>\n<ul>\n<li>  <code class=\"code\">cmp&nbsp;a.(i)&nbsp;a.(j)</code> &gt;= 0 if and only if i &gt;= j</li>\n</ul>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stable_sort", "('a -> 'a -> int) -> 'a array -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a>, but the sorting algorithm is stable (i.e.\n   elements that compare equal are kept in their original order) and\n   not guaranteed to run in constant heap space.</p>\n\n<p>The current implementation uses Merge Sort. It uses <code class=\"code\">n/2</code>\n   words of heap space, where <code class=\"code\">n</code> is the length of the array.\n   It is usually faster than the current implementation of <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fast_sort", "('a -> 'a -> int) -> 'a array -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a> or <a href=\"Array.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">Array</span>.stable_sort</code></a>, whichever is faster\n    on typical input.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "'a array -> 'a Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the array, in increasing order. Modifications of the\n    array during iteration will be reflected in the iterator.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seqi", "'a array -> (int * 'a) Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the array, in increasing order, yielding indices along elements.\n    Modifications of the array during iteration will be reflected in the\n    iterator.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "'a Seq.t -> 'a array",
              "\n<div class=\"info-desc\">\n<p>Create an array from the generator</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "ArrayLabels",
    "module_info": "\n<p>Array operations.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "length", "'a array -> int",
              "\n<div class=\"info-desc\">\n<p>Return the length (number of elements) of the given array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get", "'a array -> int -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.get&nbsp;a&nbsp;n</code> returns the element number <code class=\"code\">n</code> of array <code class=\"code\">a</code>.\n   The first element has number 0.\n   The last element has number <code class=\"code\"><span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1</code>.\n   You can also write <code class=\"code\">a.(n)</code> instead of <code class=\"code\"><span class=\"constructor\">Array</span>.get&nbsp;a&nbsp;n</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"index&nbsp;out&nbsp;of&nbsp;bounds\"</span></code>\n   if <code class=\"code\">n</code> is outside the range 0 to <code class=\"code\">(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set", "'a array -> int -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.set&nbsp;a&nbsp;n&nbsp;x</code> modifies array <code class=\"code\">a</code> in place, replacing\n   element number <code class=\"code\">n</code> with <code class=\"code\">x</code>.\n   You can also write <code class=\"code\">a.(n)&nbsp;&lt;-&nbsp;x</code> instead of <code class=\"code\"><span class=\"constructor\">Array</span>.set&nbsp;a&nbsp;n&nbsp;x</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"index&nbsp;out&nbsp;of&nbsp;bounds\"</span></code>\n   if <code class=\"code\">n</code> is outside the range 0 to <code class=\"code\"><span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "make", "int -> 'a -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.make&nbsp;n&nbsp;x</code> returns a fresh array of length <code class=\"code\">n</code>,\n   initialized with <code class=\"code\">x</code>.\n   All the elements of this new array are initially\n   physically equal to <code class=\"code\">x</code> (in the sense of the <code class=\"code\">==</code> predicate).\n   Consequently, if <code class=\"code\">x</code> is mutable, it is shared among all elements\n   of the array, and modifying <code class=\"code\">x</code> through one of the array entries\n   will modify all other entries at the same time.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;<span class=\"constructor\">Sys</span>.max_array_length</code>.\n   If the value of <code class=\"code\">x</code> is a floating-point number, then the maximum\n   size is only <code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length&nbsp;/&nbsp;2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "int -> 'a -> 'a array",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><code class=\"code\"><span class=\"constructor\">Array</span>.create</code> is an alias for <a href=\"Array.html#VALmake\"><code class=\"code\"><span class=\"constructor\">Array</span>.make</code></a>.</div>\n"
            ]
          ],
          [
            "Function",
            [
              "init", "int -> f:(int -> 'a) -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.init&nbsp;n&nbsp;f</code> returns a fresh array of length <code class=\"code\">n</code>,\n   with element number <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.\n   In other terms, <code class=\"code\"><span class=\"constructor\">Array</span>.init&nbsp;n&nbsp;f</code> tabulates the results of <code class=\"code\">f</code>\n   applied to the integers <code class=\"code\">0</code> to <code class=\"code\">n-1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;<span class=\"constructor\">Sys</span>.max_array_length</code>.\n   If the return type of <code class=\"code\">f</code> is <code class=\"code\">float</code>, then the maximum\n   size is only <code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length&nbsp;/&nbsp;2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "make_matrix", "dimx:int -> dimy:int -> 'a -> 'a array array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.make_matrix&nbsp;dimx&nbsp;dimy&nbsp;e</code> returns a two-dimensional array\n   (an array of arrays) with first dimension <code class=\"code\">dimx</code> and\n   second dimension <code class=\"code\">dimy</code>. All the elements of this new matrix\n   are initially physically equal to <code class=\"code\">e</code>.\n   The element (<code class=\"code\">x,y</code>) of a matrix <code class=\"code\">m</code> is accessed\n   with the notation <code class=\"code\">m.(x).(y)</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">dimx</code> or <code class=\"code\">dimy</code> is negative or\n   greater than <a href=\"Sys.html#VALmax_array_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length</code></a>.\n   If the value of <code class=\"code\">e</code> is a floating-point number, then the maximum\n   size is only <code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length&nbsp;/&nbsp;2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create_matrix",
              "dimx:int -> dimy:int -> 'a -> 'a array array",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><code class=\"code\"><span class=\"constructor\">Array</span>.create_matrix</code> is an alias for\n   <a href=\"Array.html#VALmake_matrix\"><code class=\"code\"><span class=\"constructor\">Array</span>.make_matrix</code></a>.</div>\n"
            ]
          ],
          [
            "Function",
            [
              "append", "'a array -> 'a array -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.append&nbsp;v1&nbsp;v2</code> returns a fresh array containing the\n   concatenation of the arrays <code class=\"code\">v1</code> and <code class=\"code\">v2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "concat", "'a array list -> 'a array",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALappend\"><code class=\"code\"><span class=\"constructor\">Array</span>.append</code></a>, but concatenates a list of arrays.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub", "'a array -> pos:int -> len:int -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.sub&nbsp;a&nbsp;start&nbsp;len</code> returns a fresh array of length <code class=\"code\">len</code>,\n   containing the elements number <code class=\"code\">start</code> to <code class=\"code\">start&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>\n   of array <code class=\"code\">a</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Array.sub\"</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">a</code>; that is, if\n   <code class=\"code\">start&nbsp;&lt;&nbsp;0</code>, or <code class=\"code\">len&nbsp;&lt;&nbsp;0</code>, or <code class=\"code\">start&nbsp;+&nbsp;len&nbsp;&gt;&nbsp;<span class=\"constructor\">Array</span>.length&nbsp;a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "copy", "'a array -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.copy&nbsp;a</code> returns a copy of <code class=\"code\">a</code>, that is, a fresh array\n   containing the same elements as <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fill", "'a array -> pos:int -> len:int -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fill&nbsp;a&nbsp;ofs&nbsp;len&nbsp;x</code> modifies the array <code class=\"code\">a</code> in place,\n   storing <code class=\"code\">x</code> in elements number <code class=\"code\">ofs</code> to <code class=\"code\">ofs&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Array.fill\"</span></code> if <code class=\"code\">ofs</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit",
              "src:'a array -> src_pos:int -> dst:'a array -> dst_pos:int -> len:int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.blit&nbsp;v1&nbsp;o1&nbsp;v2&nbsp;o2&nbsp;len</code> copies <code class=\"code\">len</code> elements\n   from array <code class=\"code\">v1</code>, starting at element number <code class=\"code\">o1</code>, to array <code class=\"code\">v2</code>,\n   starting at element number <code class=\"code\">o2</code>. It works correctly even if\n   <code class=\"code\">v1</code> and <code class=\"code\">v2</code> are the same array, and the source and\n   destination chunks overlap.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Array.blit\"</span></code> if <code class=\"code\">o1</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">v1</code>, or if <code class=\"code\">o2</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">v2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_list", "'a array -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.to_list&nbsp;a</code> returns the list of all the elements of <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_list", "'a list -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.of_list&nbsp;l</code> returns a fresh array containing the elements\n   of <code class=\"code\">l</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "f:('a -> unit) -> 'a array -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.iter&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> in turn to all\n   the elements of <code class=\"code\">a</code>.  It is equivalent to\n   <code class=\"code\">f&nbsp;a.(0);&nbsp;f&nbsp;a.(1);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1);&nbsp;()</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "f:('a -> 'b) -> 'a array -> 'b array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.map&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>,\n   and builds an array with the results returned by <code class=\"code\">f</code>:\n   <code class=\"code\">[|&nbsp;f&nbsp;a.(0);&nbsp;f&nbsp;a.(1);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;|]</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iteri", "f:(int -> 'a -> unit) -> 'a array -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Array</span>.iter</code></a>, but the\n   function is applied to the index of the element as first argument,\n   and the element itself as second argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mapi", "f:(int -> 'a -> 'b) -> 'a array -> 'b array",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Array</span>.map</code></a>, but the\n   function is applied to the index of the element as first argument,\n   and the element itself as second argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_left", "f:('a -> 'b -> 'a) -> init:'a -> 'b array -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_left&nbsp;f&nbsp;x&nbsp;a</code> computes\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;x&nbsp;a.(0))&nbsp;a.(1))&nbsp;...)&nbsp;a.(n-1)</code>,\n   where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_right",
              "f:('b -> 'a -> 'a) -> 'b array -> init:'a -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_right&nbsp;f&nbsp;a&nbsp;x</code> computes\n   <code class=\"code\">f&nbsp;a.(0)&nbsp;(f&nbsp;a.(1)&nbsp;(&nbsp;...&nbsp;(f&nbsp;a.(n-1)&nbsp;x)&nbsp;...))</code>,\n   where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators on two arrays",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "iter2",
              "f:('a -> 'b -> unit) -> 'a array -> 'b array -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.iter2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>\n   and <code class=\"code\">b</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the arrays are not the same size.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "map2",
              "f:('a -> 'b -> 'c) -> 'a array -> 'b array -> 'c array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.map2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>\n   and <code class=\"code\">b</code>, and builds an array with the results returned by <code class=\"code\">f</code>:\n   <code class=\"code\">[|&nbsp;f&nbsp;a.(0)&nbsp;b.(0);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;b.(<span class=\"constructor\">Array</span>.length&nbsp;b&nbsp;-&nbsp;1)|]</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the arrays are not the same size.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Array scanning",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "exists", "f:('a -> bool) -> 'a array -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.exists&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if at least one element of\n    the array satisfies the predicate <code class=\"code\">p</code>. That is, it returns\n    <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;...&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "for_all", "f:('a -> bool) -> 'a array -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.for_all&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if all elements of the array\n   satisfy the predicate <code class=\"code\">p</code>. That is, it returns\n   <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;...&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "mem", "'a -> set:'a array -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;x&nbsp;a</code> is true if and only if <code class=\"code\">x</code> is equal\n   to an element of <code class=\"code\">a</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "memq", "'a -> set:'a array -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALmem\"><code class=\"code\"><span class=\"constructor\">Array</span>.mem</code></a>, but uses physical equality instead of structural\n   equality to compare list elements.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "create_float", "int -> float array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.create_float&nbsp;n</code> returns a fresh float array of length <code class=\"code\">n</code>,\n    with uninitialized data.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "make_float", "int -> float array",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><code class=\"code\"><span class=\"constructor\">Array</span>.make_float</code> is an alias for\n    <a href=\"Array.html#VALcreate_float\"><code class=\"code\"><span class=\"constructor\">Array</span>.create_float</code></a>.</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Sorting",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "sort", "cmp:('a -> 'a -> int) -> 'a array -> unit",
              "\n<div class=\"info-desc\">\n<p>Sort an array in increasing order according to a comparison\n   function.  The comparison function must return 0 if its arguments\n   compare as equal, a positive integer if the first is greater,\n   and a negative integer if the first is smaller (see below for a\n   complete specification).  For example, <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a> is\n   a suitable comparison function, provided there are no floating-point\n   NaN values in the data.  After calling <code class=\"code\"><span class=\"constructor\">Array</span>.sort</code>, the\n   array is sorted in place in increasing order.\n   <code class=\"code\"><span class=\"constructor\">Array</span>.sort</code> is guaranteed to run in constant heap space\n   and (at most) logarithmic stack space.</p>\n\n<p>The current implementation uses Heap Sort.  It runs in constant\n   stack space.</p>\n\n<p>Specification of the comparison function:\n   Let <code class=\"code\">a</code> be the array and <code class=\"code\">cmp</code> the comparison function.  The following\n   must be true for all x, y, z in a :</p>\n<ul>\n<li>  <code class=\"code\">cmp&nbsp;x&nbsp;y</code> &gt; 0 if and only if <code class=\"code\">cmp&nbsp;y&nbsp;x</code> &lt; 0</li>\n<li>  if <code class=\"code\">cmp&nbsp;x&nbsp;y</code> &gt;= 0 and <code class=\"code\">cmp&nbsp;y&nbsp;z</code> &gt;= 0 then <code class=\"code\">cmp&nbsp;x&nbsp;z</code> &gt;= 0</li>\n</ul>\n<p>When <code class=\"code\"><span class=\"constructor\">Array</span>.sort</code> returns, <code class=\"code\">a</code> contains the same elements as before,\n   reordered in such a way that for all i and j valid indices of <code class=\"code\">a</code> :</p>\n<ul>\n<li>  <code class=\"code\">cmp&nbsp;a.(i)&nbsp;a.(j)</code> &gt;= 0 if and only if i &gt;= j</li>\n</ul>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stable_sort", "cmp:('a -> 'a -> int) -> 'a array -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a>, but the sorting algorithm is stable (i.e.\n   elements that compare equal are kept in their original order) and\n   not guaranteed to run in constant heap space.</p>\n\n<p>The current implementation uses Merge Sort. It uses <code class=\"code\">n/2</code>\n   words of heap space, where <code class=\"code\">n</code> is the length of the array.\n   It is usually faster than the current implementation of <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fast_sort", "cmp:('a -> 'a -> int) -> 'a array -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a> or <a href=\"Array.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">Array</span>.stable_sort</code></a>, whichever is\n    faster on typical input.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "'a array -> 'a Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the array, in increasing order</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seqi", "'a array -> (int * 'a) Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the array, in increasing order, yielding indices along elements</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "'a Seq.t -> 'a array",
              "\n<div class=\"info-desc\">\n<p>Create an array from the generator</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Asttypes",
    "module_info":
      "\n<p>Auxiliary AST types used by parsetree and typedtree.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "constant", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstant.Const_int\"><span class=\"constructor\">Const_int</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstant.Const_char\"><span class=\"constructor\">Const_char</span></span> <span class=\"keyword\">of</span> <code class=\"type\">char</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstant.Const_string\"><span class=\"constructor\">Const_string</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * string option</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstant.Const_float\"><span class=\"constructor\">Const_float</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstant.Const_int32\"><span class=\"constructor\">Const_int32</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int32</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstant.Const_int64\"><span class=\"constructor\">Const_int64</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int64</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstant.Const_nativeint\"><span class=\"constructor\">Const_nativeint</span></span> <span class=\"keyword\">of</span> <code class=\"type\">nativeint</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "rec_flag", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTrec_flag.Nonrecursive\"><span class=\"constructor\">Nonrecursive</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTrec_flag.Recursive\"><span class=\"constructor\">Recursive</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "direction_flag", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTdirection_flag.Upto\"><span class=\"constructor\">Upto</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTdirection_flag.Downto\"><span class=\"constructor\">Downto</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "private_flag", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprivate_flag.Private\"><span class=\"constructor\">Private</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprivate_flag.Public\"><span class=\"constructor\">Public</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "mutable_flag", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmutable_flag.Immutable\"><span class=\"constructor\">Immutable</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmutable_flag.Mutable\"><span class=\"constructor\">Mutable</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "virtual_flag", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTvirtual_flag.Virtual\"><span class=\"constructor\">Virtual</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTvirtual_flag.Concrete\"><span class=\"constructor\">Concrete</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "override_flag", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELToverride_flag.Override\"><span class=\"constructor\">Override</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELToverride_flag.Fresh\"><span class=\"constructor\">Fresh</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "closed_flag", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclosed_flag.Closed\"><span class=\"constructor\">Closed</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclosed_flag.Open\"><span class=\"constructor\">Open</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Typevariant", [ "label", "= string", null, null ] ],
          [
            "Typevariant",
            [
              "arg_label", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTarg_label.Nolabel\"><span class=\"constructor\">Nolabel</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTarg_label.Labelled\"><span class=\"constructor\">Labelled</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTarg_label.Optional\"><span class=\"constructor\">Optional</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "'a", "loc = 'a Location.loc = {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTloc.txt\">txt</span>&nbsp;: <code class=\"type\">'a</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTloc.loc\">loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "variance", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTvariance.Covariant\"><span class=\"constructor\">Covariant</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTvariance.Contravariant\"><span class=\"constructor\">Contravariant</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTvariance.Invariant\"><span class=\"constructor\">Invariant</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Cf",
    "module_info": "\n<p>Class fields</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ?docs: Docstrings.docs -> Parsetree.class_field_desc -> Parsetree.class_field",
              null
            ]
          ],
          [
            "Function",
            [
              "attr",
              "Parsetree.class_field -> Parsetree.attribute -> Parsetree.class_field",
              null
            ]
          ],
          [
            "Function",
            [
              "inherit_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Asttypes.override_flag -> Parsetree.class_expr -> Ast_helper.str option -> Parsetree.class_field",
              null
            ]
          ],
          [
            "Function",
            [
              "val_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.str -> Asttypes.mutable_flag -> Parsetree.class_field_kind -> Parsetree.class_field",
              null
            ]
          ],
          [
            "Function",
            [
              "method_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.str -> Asttypes.private_flag -> Parsetree.class_field_kind -> Parsetree.class_field",
              null
            ]
          ],
          [
            "Function",
            [
              "constraint_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.core_type -> Parsetree.core_type -> Parsetree.class_field",
              null
            ]
          ],
          [
            "Function",
            [
              "initializer_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression -> Parsetree.class_field",
              null
            ]
          ],
          [
            "Function",
            [
              "extension",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.extension -> Parsetree.class_field",
              null
            ]
          ],
          [
            "Function",
            [
              "attribute",
              "?loc: Ast_helper.loc -> Parsetree.attribute -> Parsetree.class_field",
              null
            ]
          ],
          [
            "Function",
            [ "text", "Docstrings.text -> Parsetree.class_field list", null ]
          ],
          [
            "Function",
            [
              "virtual_",
              "Parsetree.core_type -> Parsetree.class_field_kind", null
            ]
          ],
          [
            "Function",
            [
              "concrete",
              "Asttypes.override_flag -> Parsetree.expression -> Parsetree.class_field_kind",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Ci",
    "module_info": "\n<p>Classes</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ?docs: Docstrings.docs -> ?text: Docstrings.text -> ?virt: Asttypes.virtual_flag -> ?params:( Parsetree.core_type * Asttypes.variance ) list -> Ast_helper.str -> 'a -> 'a Parsetree.class_infos",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Cl",
    "module_info": "\n<p>Class expressions</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.class_expr_desc -> Parsetree.class_expr",
              null
            ]
          ],
          [
            "Function",
            [
              "attr",
              "Parsetree.class_expr -> Parsetree.attribute -> Parsetree.class_expr",
              null
            ]
          ],
          [
            "Function",
            [
              "constr",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.lid -> Parsetree.core_type list -> Parsetree.class_expr",
              null
            ]
          ],
          [
            "Function",
            [
              "structure",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.class_structure -> Parsetree.class_expr",
              null
            ]
          ],
          [
            "Function",
            [
              "fun_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Asttypes.arg_label -> Parsetree.expression option -> Parsetree.pattern -> Parsetree.class_expr -> Parsetree.class_expr",
              null
            ]
          ],
          [
            "Function",
            [
              "apply",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.class_expr -> ( Asttypes.arg_label * Parsetree.expression ) list -> Parsetree.class_expr",
              null
            ]
          ],
          [
            "Function",
            [
              "let_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Asttypes.rec_flag -> Parsetree.value_binding list -> Parsetree.class_expr -> Parsetree.class_expr",
              null
            ]
          ],
          [
            "Function",
            [
              "constraint_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.class_expr -> Parsetree.class_type -> Parsetree.class_expr",
              null
            ]
          ],
          [
            "Function",
            [
              "extension",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.extension -> Parsetree.class_expr",
              null
            ]
          ],
          [
            "Function",
            [
              "open_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Asttypes.override_flag -> Ast_helper.lid -> Parsetree.class_expr -> Parsetree.class_expr",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Const",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Function", [ "char", "char -> Parsetree.constant", null ] ],
          [
            "Function",
            [
              "string",
              "?quotation_delimiter:string -> string -> Parsetree.constant",
              null
            ]
          ],
          [
            "Function",
            [
              "integer", "?suffix:char -> string -> Parsetree.constant", null
            ]
          ],
          [
            "Function",
            [ "int", "?suffix:char -> int -> Parsetree.constant", null ]
          ],
          [
            "Function",
            [ "int32", "?suffix:char -> int32 -> Parsetree.constant", null ]
          ],
          [
            "Function",
            [ "int64", "?suffix:char -> int64 -> Parsetree.constant", null ]
          ],
          [
            "Function",
            [
              "nativeint", "?suffix:char -> nativeint -> Parsetree.constant",
              null
            ]
          ],
          [
            "Function",
            [ "float", "?suffix:char -> string -> Parsetree.constant", null ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Csig",
    "module_info": "\n<p>Class signatures</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "Parsetree.core_type -> Parsetree.class_type_field list -> Parsetree.class_signature",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Cstr",
    "module_info": "\n<p>Class structures</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "Parsetree.pattern -> Parsetree.class_field list -> Parsetree.class_structure",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Ctf",
    "module_info": "\n<p>Class type fields</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ?docs: Docstrings.docs -> Parsetree.class_type_field_desc -> Parsetree.class_type_field",
              null
            ]
          ],
          [
            "Function",
            [
              "attr",
              "Parsetree.class_type_field -> Parsetree.attribute -> Parsetree.class_type_field",
              null
            ]
          ],
          [
            "Function",
            [
              "inherit_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.class_type -> Parsetree.class_type_field",
              null
            ]
          ],
          [
            "Function",
            [
              "val_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.str -> Asttypes.mutable_flag -> Asttypes.virtual_flag -> Parsetree.core_type -> Parsetree.class_type_field",
              null
            ]
          ],
          [
            "Function",
            [
              "method_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.str -> Asttypes.private_flag -> Asttypes.virtual_flag -> Parsetree.core_type -> Parsetree.class_type_field",
              null
            ]
          ],
          [
            "Function",
            [
              "constraint_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.core_type -> Parsetree.core_type -> Parsetree.class_type_field",
              null
            ]
          ],
          [
            "Function",
            [
              "extension",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.extension -> Parsetree.class_type_field",
              null
            ]
          ],
          [
            "Function",
            [
              "attribute",
              "?loc: Ast_helper.loc -> Parsetree.attribute -> Parsetree.class_type_field",
              null
            ]
          ],
          [
            "Function",
            [
              "text", "Docstrings.text -> Parsetree.class_type_field list",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Cty",
    "module_info": "\n<p>Class type expressions</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.class_type_desc -> Parsetree.class_type",
              null
            ]
          ],
          [
            "Function",
            [
              "attr",
              "Parsetree.class_type -> Parsetree.attribute -> Parsetree.class_type",
              null
            ]
          ],
          [
            "Function",
            [
              "constr",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.lid -> Parsetree.core_type list -> Parsetree.class_type",
              null
            ]
          ],
          [
            "Function",
            [
              "signature",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.class_signature -> Parsetree.class_type",
              null
            ]
          ],
          [
            "Function",
            [
              "arrow",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Asttypes.arg_label -> Parsetree.core_type -> Parsetree.class_type -> Parsetree.class_type",
              null
            ]
          ],
          [
            "Function",
            [
              "extension",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.extension -> Parsetree.class_type",
              null
            ]
          ],
          [
            "Function",
            [
              "open_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Asttypes.override_flag -> Ast_helper.lid -> Parsetree.class_type -> Parsetree.class_type",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Exp",
    "module_info": "\n<p>Expressions</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression_desc -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "attr",
              "Parsetree.expression -> Parsetree.attribute -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "ident",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.lid -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "constant",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.constant -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "let_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Asttypes.rec_flag -> Parsetree.value_binding list -> Parsetree.expression -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "fun_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Asttypes.arg_label -> Parsetree.expression option -> Parsetree.pattern -> Parsetree.expression -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "function_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.case list -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "apply",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression -> ( Asttypes.arg_label * Parsetree.expression ) list -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "match_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression -> Parsetree.case list -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "try_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression -> Parsetree.case list -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "tuple",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression list -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "construct",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.lid -> Parsetree.expression option -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "variant",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Asttypes.label -> Parsetree.expression option -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "record",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ( Ast_helper.lid * Parsetree.expression ) list -> Parsetree.expression option -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "field",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression -> Ast_helper.lid -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "setfield",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression -> Ast_helper.lid -> Parsetree.expression -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "array",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression list -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "ifthenelse",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression -> Parsetree.expression -> Parsetree.expression option -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "sequence",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression -> Parsetree.expression -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "while_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression -> Parsetree.expression -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "for_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.pattern -> Parsetree.expression -> Parsetree.expression -> Asttypes.direction_flag -> Parsetree.expression -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "coerce",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression -> Parsetree.core_type option -> Parsetree.core_type -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "constraint_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression -> Parsetree.core_type -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "send",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression -> Ast_helper.str -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "new_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.lid -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "setinstvar",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.str -> Parsetree.expression -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "override",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ( Ast_helper.str * Parsetree.expression ) list -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "letmodule",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.str -> Parsetree.module_expr -> Parsetree.expression -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "letexception",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.extension_constructor -> Parsetree.expression -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "assert_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "lazy_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "poly",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression -> Parsetree.core_type option -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "object_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.class_structure -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "newtype",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.str -> Parsetree.expression -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "pack",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.module_expr -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "open_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Asttypes.override_flag -> Ast_helper.lid -> Parsetree.expression -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "extension",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.extension -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "unreachable",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> unit -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "case",
              "Parsetree.pattern -> ?guard: Parsetree.expression -> Parsetree.expression -> Parsetree.case",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper",
    "module_info": "\n<p>Helpers to produce Parsetree fragments</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [ "lid", "= Longident.t Asttypes.loc", null, null ]
          ],
          [ "Typevariant", [ "str", "= string Asttypes.loc", null, null ] ],
          [ "Typevariant", [ "loc", "= Location.t", null, null ] ],
          [
            "Typevariant",
            [ "attrs", "= Parsetree.attribute list", null, null ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Default locations",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "default_loc", "loc ref",
              "\n<div class=\"info-desc\">\n<p>Default value for all optional location arguments.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "with_default_loc", "loc -> (unit -> 'a) -> 'a",
              "\n<div class=\"info-desc\">\n<p>Set the <code class=\"code\">default_loc</code> within the scope of the execution\n        of the provided function.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Constants",
        "section_info": null,
        "elements": [ [ "Module", [ "Const", null ] ] ],
        "sub_sections": []
      },
      {
        "section_name": "Core language",
        "section_info": null,
        "elements": [
          [ "Module", [ "Typ", "\n<p>Type expressions</p>\n\n" ] ],
          [ "Module", [ "Pat", "\n<p>Patterns</p>\n\n" ] ],
          [ "Module", [ "Exp", "\n<p>Expressions</p>\n\n" ] ],
          [ "Module", [ "Val", "\n<p>Value declarations</p>\n\n" ] ],
          [ "Module", [ "Type", "\n<p>Type declarations</p>\n\n" ] ],
          [ "Module", [ "Te", "\n<p>Type extensions</p>\n\n" ] ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Module language",
        "section_info": null,
        "elements": [
          [ "Module", [ "Mty", "\n<p>Module type expressions</p>\n\n" ] ],
          [ "Module", [ "Mod", "\n<p>Module expressions</p>\n\n" ] ],
          [ "Module", [ "Sig", "\n<p>Signature items</p>\n\n" ] ],
          [ "Module", [ "Str", "\n<p>Structure items</p>\n\n" ] ],
          [ "Module", [ "Md", "\n<p>Module declarations</p>\n\n" ] ],
          [ "Module", [ "Mtd", "\n<p>Module type declarations</p>\n\n" ] ],
          [ "Module", [ "Mb", "\n<p>Module bindings</p>\n\n" ] ],
          [ "Module", [ "Opn", "\n<p>Opens</p>\n\n" ] ],
          [ "Module", [ "Incl", "\n<p>Includes</p>\n\n" ] ],
          [ "Module", [ "Vb", "\n<p>Value bindings</p>\n\n" ] ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Class language",
        "section_info": null,
        "elements": [
          [ "Module", [ "Cty", "\n<p>Class type expressions</p>\n\n" ] ],
          [ "Module", [ "Ctf", "\n<p>Class type fields</p>\n\n" ] ],
          [ "Module", [ "Cl", "\n<p>Class expressions</p>\n\n" ] ],
          [ "Module", [ "Cf", "\n<p>Class fields</p>\n\n" ] ],
          [ "Module", [ "Ci", "\n<p>Classes</p>\n\n" ] ],
          [ "Module", [ "Csig", "\n<p>Class signatures</p>\n\n" ] ],
          [ "Module", [ "Cstr", "\n<p>Class structures</p>\n\n" ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Incl",
    "module_info": "\n<p>Includes</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ?docs: Docstrings.docs -> 'a -> 'a Parsetree.include_infos",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Mb",
    "module_info": "\n<p>Module bindings</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ?docs: Docstrings.docs -> ?text: Docstrings.text -> Ast_helper.str -> Parsetree.module_expr -> Parsetree.module_binding",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Md",
    "module_info": "\n<p>Module declarations</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ?docs: Docstrings.docs -> ?text: Docstrings.text -> Ast_helper.str -> Parsetree.module_type -> Parsetree.module_declaration",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Mod",
    "module_info": "\n<p>Module expressions</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.module_expr_desc -> Parsetree.module_expr",
              null
            ]
          ],
          [
            "Function",
            [
              "attr",
              "Parsetree.module_expr -> Parsetree.attribute -> Parsetree.module_expr",
              null
            ]
          ],
          [
            "Function",
            [
              "ident",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.lid -> Parsetree.module_expr",
              null
            ]
          ],
          [
            "Function",
            [
              "structure",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.structure -> Parsetree.module_expr",
              null
            ]
          ],
          [
            "Function",
            [
              "functor_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.str -> Parsetree.module_type option -> Parsetree.module_expr -> Parsetree.module_expr",
              null
            ]
          ],
          [
            "Function",
            [
              "apply",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.module_expr -> Parsetree.module_expr -> Parsetree.module_expr",
              null
            ]
          ],
          [
            "Function",
            [
              "constraint_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.module_expr -> Parsetree.module_type -> Parsetree.module_expr",
              null
            ]
          ],
          [
            "Function",
            [
              "unpack",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.expression -> Parsetree.module_expr",
              null
            ]
          ],
          [
            "Function",
            [
              "extension",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.extension -> Parsetree.module_expr",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Mtd",
    "module_info": "\n<p>Module type declarations</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ?docs: Docstrings.docs -> ?text: Docstrings.text -> ?typ: Parsetree.module_type -> Ast_helper.str -> Parsetree.module_type_declaration",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Mty",
    "module_info": "\n<p>Module type expressions</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.module_type_desc -> Parsetree.module_type",
              null
            ]
          ],
          [
            "Function",
            [
              "attr",
              "Parsetree.module_type -> Parsetree.attribute -> Parsetree.module_type",
              null
            ]
          ],
          [
            "Function",
            [
              "ident",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.lid -> Parsetree.module_type",
              null
            ]
          ],
          [
            "Function",
            [
              "alias",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.lid -> Parsetree.module_type",
              null
            ]
          ],
          [
            "Function",
            [
              "signature",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.signature -> Parsetree.module_type",
              null
            ]
          ],
          [
            "Function",
            [
              "functor_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.str -> Parsetree.module_type option -> Parsetree.module_type -> Parsetree.module_type",
              null
            ]
          ],
          [
            "Function",
            [
              "with_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.module_type -> Parsetree.with_constraint list -> Parsetree.module_type",
              null
            ]
          ],
          [
            "Function",
            [
              "typeof_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.module_expr -> Parsetree.module_type",
              null
            ]
          ],
          [
            "Function",
            [
              "extension",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.extension -> Parsetree.module_type",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Opn",
    "module_info": "\n<p>Opens</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ?docs: Docstrings.docs -> ?override: Asttypes.override_flag -> Ast_helper.lid -> Parsetree.open_description",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Pat",
    "module_info": "\n<p>Patterns</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.pattern_desc -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "attr",
              "Parsetree.pattern -> Parsetree.attribute -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "any",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> unit -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "var",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.str -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "alias",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.pattern -> Ast_helper.str -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "constant",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.constant -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "interval",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.constant -> Parsetree.constant -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "tuple",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.pattern list -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "construct",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.lid -> Parsetree.pattern option -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "variant",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Asttypes.label -> Parsetree.pattern option -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "record",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ( Ast_helper.lid * Parsetree.pattern ) list -> Asttypes.closed_flag -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "array",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.pattern list -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "or_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.pattern -> Parsetree.pattern -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "constraint_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.pattern -> Parsetree.core_type -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "type_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.lid -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "lazy_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.pattern -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "unpack",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.str -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "open_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.lid -> Parsetree.pattern -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "exception_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.pattern -> Parsetree.pattern",
              null
            ]
          ],
          [
            "Function",
            [
              "extension",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.extension -> Parsetree.pattern",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Sig",
    "module_info": "\n<p>Signature items</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> Parsetree.signature_item_desc -> Parsetree.signature_item",
              null
            ]
          ],
          [
            "Function",
            [
              "value",
              "?loc: Ast_helper.loc -> Parsetree.value_description -> Parsetree.signature_item",
              null
            ]
          ],
          [
            "Function",
            [
              "type_",
              "?loc: Ast_helper.loc -> Asttypes.rec_flag -> Parsetree.type_declaration list -> Parsetree.signature_item",
              null
            ]
          ],
          [
            "Function",
            [
              "type_extension",
              "?loc: Ast_helper.loc -> Parsetree.type_extension -> Parsetree.signature_item",
              null
            ]
          ],
          [
            "Function",
            [
              "exception_",
              "?loc: Ast_helper.loc -> Parsetree.extension_constructor -> Parsetree.signature_item",
              null
            ]
          ],
          [
            "Function",
            [
              "module_",
              "?loc: Ast_helper.loc -> Parsetree.module_declaration -> Parsetree.signature_item",
              null
            ]
          ],
          [
            "Function",
            [
              "rec_module",
              "?loc: Ast_helper.loc -> Parsetree.module_declaration list -> Parsetree.signature_item",
              null
            ]
          ],
          [
            "Function",
            [
              "modtype",
              "?loc: Ast_helper.loc -> Parsetree.module_type_declaration -> Parsetree.signature_item",
              null
            ]
          ],
          [
            "Function",
            [
              "open_",
              "?loc: Ast_helper.loc -> Parsetree.open_description -> Parsetree.signature_item",
              null
            ]
          ],
          [
            "Function",
            [
              "include_",
              "?loc: Ast_helper.loc -> Parsetree.include_description -> Parsetree.signature_item",
              null
            ]
          ],
          [
            "Function",
            [
              "class_",
              "?loc: Ast_helper.loc -> Parsetree.class_description list -> Parsetree.signature_item",
              null
            ]
          ],
          [
            "Function",
            [
              "class_type",
              "?loc: Ast_helper.loc -> Parsetree.class_type_declaration list -> Parsetree.signature_item",
              null
            ]
          ],
          [
            "Function",
            [
              "extension",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.extension -> Parsetree.signature_item",
              null
            ]
          ],
          [
            "Function",
            [
              "attribute",
              "?loc: Ast_helper.loc -> Parsetree.attribute -> Parsetree.signature_item",
              null
            ]
          ],
          [
            "Function",
            [
              "text", "Docstrings.text -> Parsetree.signature_item list",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Str",
    "module_info": "\n<p>Structure items</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> Parsetree.structure_item_desc -> Parsetree.structure_item",
              null
            ]
          ],
          [
            "Function",
            [
              "eval",
              "?loc: Ast_helper.loc -> ?attrs: Parsetree.attributes -> Parsetree.expression -> Parsetree.structure_item",
              null
            ]
          ],
          [
            "Function",
            [
              "value",
              "?loc: Ast_helper.loc -> Asttypes.rec_flag -> Parsetree.value_binding list -> Parsetree.structure_item",
              null
            ]
          ],
          [
            "Function",
            [
              "primitive",
              "?loc: Ast_helper.loc -> Parsetree.value_description -> Parsetree.structure_item",
              null
            ]
          ],
          [
            "Function",
            [
              "type_",
              "?loc: Ast_helper.loc -> Asttypes.rec_flag -> Parsetree.type_declaration list -> Parsetree.structure_item",
              null
            ]
          ],
          [
            "Function",
            [
              "type_extension",
              "?loc: Ast_helper.loc -> Parsetree.type_extension -> Parsetree.structure_item",
              null
            ]
          ],
          [
            "Function",
            [
              "exception_",
              "?loc: Ast_helper.loc -> Parsetree.extension_constructor -> Parsetree.structure_item",
              null
            ]
          ],
          [
            "Function",
            [
              "module_",
              "?loc: Ast_helper.loc -> Parsetree.module_binding -> Parsetree.structure_item",
              null
            ]
          ],
          [
            "Function",
            [
              "rec_module",
              "?loc: Ast_helper.loc -> Parsetree.module_binding list -> Parsetree.structure_item",
              null
            ]
          ],
          [
            "Function",
            [
              "modtype",
              "?loc: Ast_helper.loc -> Parsetree.module_type_declaration -> Parsetree.structure_item",
              null
            ]
          ],
          [
            "Function",
            [
              "open_",
              "?loc: Ast_helper.loc -> Parsetree.open_description -> Parsetree.structure_item",
              null
            ]
          ],
          [
            "Function",
            [
              "class_",
              "?loc: Ast_helper.loc -> Parsetree.class_declaration list -> Parsetree.structure_item",
              null
            ]
          ],
          [
            "Function",
            [
              "class_type",
              "?loc: Ast_helper.loc -> Parsetree.class_type_declaration list -> Parsetree.structure_item",
              null
            ]
          ],
          [
            "Function",
            [
              "include_",
              "?loc: Ast_helper.loc -> Parsetree.include_declaration -> Parsetree.structure_item",
              null
            ]
          ],
          [
            "Function",
            [
              "extension",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.extension -> Parsetree.structure_item",
              null
            ]
          ],
          [
            "Function",
            [
              "attribute",
              "?loc: Ast_helper.loc -> Parsetree.attribute -> Parsetree.structure_item",
              null
            ]
          ],
          [
            "Function",
            [
              "text", "Docstrings.text -> Parsetree.structure_item list",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Te",
    "module_info": "\n<p>Type extensions</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?attrs: Ast_helper.attrs -> ?docs: Docstrings.docs -> ?params:( Parsetree.core_type * Asttypes.variance ) list -> ?priv: Asttypes.private_flag -> Ast_helper.lid -> Parsetree.extension_constructor list -> Parsetree.type_extension",
              null
            ]
          ],
          [
            "Function",
            [
              "constructor",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ?docs: Docstrings.docs -> ?info: Docstrings.info -> Ast_helper.str -> Parsetree.extension_constructor_kind -> Parsetree.extension_constructor",
              null
            ]
          ],
          [
            "Function",
            [
              "decl",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ?docs: Docstrings.docs -> ?info: Docstrings.info -> ?args: Parsetree.constructor_arguments -> ?res: Parsetree.core_type -> Ast_helper.str -> Parsetree.extension_constructor",
              null
            ]
          ],
          [
            "Function",
            [
              "rebind",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ?docs: Docstrings.docs -> ?info: Docstrings.info -> Ast_helper.str -> Ast_helper.lid -> Parsetree.extension_constructor",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Typ",
    "module_info": "\n<p>Type expressions</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.core_type_desc -> Parsetree.core_type",
              null
            ]
          ],
          [
            "Function",
            [
              "attr",
              "Parsetree.core_type -> Parsetree.attribute -> Parsetree.core_type",
              null
            ]
          ],
          [
            "Function",
            [
              "any",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> unit -> Parsetree.core_type",
              null
            ]
          ],
          [
            "Function",
            [
              "var",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> string -> Parsetree.core_type",
              null
            ]
          ],
          [
            "Function",
            [
              "arrow",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Asttypes.arg_label -> Parsetree.core_type -> Parsetree.core_type -> Parsetree.core_type",
              null
            ]
          ],
          [
            "Function",
            [
              "tuple",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.core_type list -> Parsetree.core_type",
              null
            ]
          ],
          [
            "Function",
            [
              "constr",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.lid -> Parsetree.core_type list -> Parsetree.core_type",
              null
            ]
          ],
          [
            "Function",
            [
              "object_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.object_field list -> Asttypes.closed_flag -> Parsetree.core_type",
              null
            ]
          ],
          [
            "Function",
            [
              "class_",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.lid -> Parsetree.core_type list -> Parsetree.core_type",
              null
            ]
          ],
          [
            "Function",
            [
              "alias",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.core_type -> string -> Parsetree.core_type",
              null
            ]
          ],
          [
            "Function",
            [
              "variant",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.row_field list -> Asttypes.closed_flag -> Asttypes.label list option -> Parsetree.core_type",
              null
            ]
          ],
          [
            "Function",
            [
              "poly",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.str list -> Parsetree.core_type -> Parsetree.core_type",
              null
            ]
          ],
          [
            "Function",
            [
              "package",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Ast_helper.lid -> ( Ast_helper.lid * Parsetree.core_type ) list -> Parsetree.core_type",
              null
            ]
          ],
          [
            "Function",
            [
              "extension",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> Parsetree.extension -> Parsetree.core_type",
              null
            ]
          ],
          [
            "Function",
            [
              "force_poly", "Parsetree.core_type -> Parsetree.core_type",
              null
            ]
          ],
          [
            "Function",
            [
              "varify_constructors",
              "Ast_helper.str list -> Parsetree.core_type -> Parsetree.core_type",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">varify_constructors&nbsp;newtypes&nbsp;te</code> is type expression <code class=\"code\">te</code>, of which\n        any of nullary type constructor <code class=\"code\">tc</code> is replaced by type variable of\n        the same name, if <code class=\"code\">tc</code>'s name appears in <code class=\"code\">newtypes</code>.\n        Raise <code class=\"code\"><span class=\"constructor\">Syntaxerr</span>.<span class=\"constructor\">Variable_in_scope</span></code> if any type variable inside <code class=\"code\">te</code>\n        appears in <code class=\"code\">newtypes</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Type",
    "module_info": "\n<p>Type declarations</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ?docs: Docstrings.docs -> ?text: Docstrings.text -> ?params:( Parsetree.core_type * Asttypes.variance ) list -> ?cstrs:( Parsetree.core_type * Parsetree.core_type * Ast_helper.loc ) list -> ?kind: Parsetree.type_kind -> ?priv: Asttypes.private_flag -> ?manifest: Parsetree.core_type -> Ast_helper.str -> Parsetree.type_declaration",
              null
            ]
          ],
          [
            "Function",
            [
              "constructor",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ?info: Docstrings.info -> ?args: Parsetree.constructor_arguments -> ?res: Parsetree.core_type -> Ast_helper.str -> Parsetree.constructor_declaration",
              null
            ]
          ],
          [
            "Function",
            [
              "field",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ?info: Docstrings.info -> ?mut: Asttypes.mutable_flag -> Ast_helper.str -> Parsetree.core_type -> Parsetree.label_declaration",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Val",
    "module_info": "\n<p>Value declarations</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ?docs: Docstrings.docs -> ?prim:string list -> Ast_helper.str -> Parsetree.core_type -> Parsetree.value_description",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_helper.Vb",
    "module_info": "\n<p>Value bindings</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mk",
              "?loc: Ast_helper.loc -> ?attrs: Ast_helper.attrs -> ?docs: Docstrings.docs -> ?text: Docstrings.text -> Parsetree.pattern -> Parsetree.expression -> Parsetree.value_binding",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_invariants",
    "module_info": "\n<p>Check AST invariants</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [ "structure", "Parsetree.structure -> unit", null ]
          ],
          [
            "Function",
            [ "signature", "Parsetree.signature -> unit", null ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_iterator",
    "module_info":
      "\n<p><a href=\"Ast_iterator.html#TYPEiterator\"><code class=\"code\"><span class=\"constructor\">Ast_iterator</span>.iterator</code></a> allows to implement AST inspection using open recursion.  A\n    typical mapper would be based on <a href=\"Ast_iterator.html#VALdefault_iterator\"><code class=\"code\"><span class=\"constructor\">Ast_iterator</span>.default_iterator</code></a>, a trivial iterator,\n    and will fall back on it for handling the syntax it does not modify.</p>\n",
    "sections": [
      {
        "section_name": "A generic Parsetree iterator",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "iterator", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.attribute\">attribute</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.attributes\">attributes</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> list -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.case\">case</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEcase\">Parsetree.case</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.cases\">cases</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEcase\">Parsetree.case</a> list -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.class_declaration\">class_declaration</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEclass_declaration\">Parsetree.class_declaration</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.class_description\">class_description</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEclass_description\">Parsetree.class_description</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.class_expr\">class_expr</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.class_field\">class_field</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.class_signature\">class_signature</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEclass_signature\">Parsetree.class_signature</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.class_structure\">class_structure</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEclass_structure\">Parsetree.class_structure</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.class_type\">class_type</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.class_type_declaration\">class_type_declaration</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_declaration\">Parsetree.class_type_declaration</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.class_type_field\">class_type_field</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.constructor_declaration\">constructor_declaration</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEconstructor_declaration\">Parsetree.constructor_declaration</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.expr\">expr</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.extension\">extension</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.extension_constructor\">extension_constructor</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEextension_constructor\">Parsetree.extension_constructor</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.include_declaration\">include_declaration</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEinclude_declaration\">Parsetree.include_declaration</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.include_description\">include_description</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEinclude_description\">Parsetree.include_description</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.label_declaration\">label_declaration</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPElabel_declaration\">Parsetree.label_declaration</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.location\">location</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Location.html#TYPEt\">Location.t</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.module_binding\">module_binding</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_binding\">Parsetree.module_binding</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.module_declaration\">module_declaration</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_declaration\">Parsetree.module_declaration</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.module_expr\">module_expr</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.module_type\">module_type</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.module_type_declaration\">module_type_declaration</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type_declaration\">Parsetree.module_type_declaration</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.open_description\">open_description</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEopen_description\">Parsetree.open_description</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.pat\">pat</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.payload\">payload</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEpayload\">Parsetree.payload</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.signature\">signature</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.signature_item\">signature_item</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.structure\">structure</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.structure_item\">structure_item</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.typ\">typ</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.type_declaration\">type_declaration</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEtype_declaration\">Parsetree.type_declaration</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.type_extension\">type_extension</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEtype_extension\">Parsetree.type_extension</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.type_kind\">type_kind</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEtype_kind\">Parsetree.type_kind</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.value_binding\">value_binding</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEvalue_binding\">Parsetree.value_binding</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.value_description\">value_description</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEvalue_description\">Parsetree.value_description</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTiterator.with_constraint\">with_constraint</span>&nbsp;: <code class=\"type\"><a href=\"Ast_iterator.html#TYPEiterator\">iterator</a> -&gt; <a href=\"Parsetree.html#TYPEwith_constraint\">Parsetree.with_constraint</a> -&gt; unit</code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>A <code class=\"code\">iterator</code> record implements one \"method\" per syntactic category,\n    using an open recursion style: each method takes as its first\n    argument the iterator to be applied to children in the syntax\n    tree.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "default_iterator", "iterator",
              "\n<div class=\"info-desc\">\n<p>A default iterator, which implements a \"do not do anything\" mapping.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ast_mapper",
    "module_info":
      "\n<p>The interface of a -ppx rewriter</p>\n\n<p>A -ppx rewriter is a program that accepts a serialized abstract syntax\n  tree and outputs another, possibly modified, abstract syntax tree.\n  This module encapsulates the interface between the compiler and\n  the -ppx rewriters, handling such details as the serialization format,\n  forwarding of command-line flags, and storing state.</p>\n\n<p><a href=\"Ast_mapper.html#TYPEmapper\"><code class=\"code\"><span class=\"constructor\">Ast_mapper</span>.mapper</code></a> allows to implement AST rewriting using open recursion.\n  A typical mapper would be based on <a href=\"Ast_mapper.html#VALdefault_mapper\"><code class=\"code\"><span class=\"constructor\">Ast_mapper</span>.default_mapper</code></a>, a deep\n  identity mapper, and will fall back on it for handling the syntax it\n  does not modify. For example:</p>\n\n<pre class=\"codepre\"><code class=\"code\"><span class=\"keyword\">open</span> <span class=\"constructor\">Asttypes</span>\n<span class=\"keyword\">open</span> <span class=\"constructor\">Parsetree</span>\n<span class=\"keyword\">open</span> <span class=\"constructor\">Ast_mapper</span>\n\n<span class=\"keyword\">let</span> test_mapper argv =\n  { default_mapper <span class=\"keyword\">with</span>\n    expr = <span class=\"keyword\">fun</span> mapper expr <span class=\"keywordsign\">-&gt;</span>\n      <span class=\"keyword\">match</span> expr <span class=\"keyword\">with</span>\n      <span class=\"keywordsign\">|</span> { pexp_desc = <span class=\"constructor\">Pexp_extension</span> ({ txt = <span class=\"string\">\"test\"</span> }, <span class=\"constructor\">PStr</span> [])} <span class=\"keywordsign\">-&gt;</span>\n        <span class=\"constructor\">Ast_helper</span>.<span class=\"constructor\">Exp</span>.constant (<span class=\"constructor\">Const_int</span> 42)\n      <span class=\"keywordsign\">|</span> other <span class=\"keywordsign\">-&gt;</span> default_mapper.expr mapper other; }\n\n<span class=\"keyword\">let</span> () =\n  register <span class=\"string\">\"ppx_test\"</span> test_mapper</code></pre>\n<p>This -ppx rewriter, which replaces <code class=\"code\">[%test]</code> in expressions with\n  the constant <code class=\"code\">42</code>, can be compiled using\n  <code class=\"code\">ocamlc&nbsp;-o&nbsp;ppx_test&nbsp;-<span class=\"constructor\">I</span>&nbsp;+compiler-libs&nbsp;ocamlcommon.cma&nbsp;ppx_test.ml</code>.</p>\n",
    "sections": [
      {
        "section_name": "A generic Parsetree mapper",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "mapper", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.attribute\">attribute</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.attributes\">attributes</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> list -&gt; <a href=\"Parsetree.html#TYPEattribute\">Parsetree.attribute</a> list</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.case\">case</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEcase\">Parsetree.case</a> -&gt; <a href=\"Parsetree.html#TYPEcase\">Parsetree.case</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.cases\">cases</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEcase\">Parsetree.case</a> list -&gt; <a href=\"Parsetree.html#TYPEcase\">Parsetree.case</a> list</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.class_declaration\">class_declaration</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_declaration\">Parsetree.class_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEclass_declaration\">Parsetree.class_declaration</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.class_description\">class_description</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_description\">Parsetree.class_description</a> -&gt; <a href=\"Parsetree.html#TYPEclass_description\">Parsetree.class_description</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.class_expr\">class_expr</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a> -&gt; <a href=\"Parsetree.html#TYPEclass_expr\">Parsetree.class_expr</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.class_field\">class_field</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a> -&gt; <a href=\"Parsetree.html#TYPEclass_field\">Parsetree.class_field</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.class_signature\">class_signature</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEclass_signature\">Parsetree.class_signature</a> -&gt; <a href=\"Parsetree.html#TYPEclass_signature\">Parsetree.class_signature</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.class_structure\">class_structure</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEclass_structure\">Parsetree.class_structure</a> -&gt; <a href=\"Parsetree.html#TYPEclass_structure\">Parsetree.class_structure</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.class_type\">class_type</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type\">Parsetree.class_type</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.class_type_declaration\">class_type_declaration</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEclass_type_declaration\">Parsetree.class_type_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_declaration\">Parsetree.class_type_declaration</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.class_type_field\">class_type_field</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a> -&gt; <a href=\"Parsetree.html#TYPEclass_type_field\">Parsetree.class_type_field</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.constructor_declaration\">constructor_declaration</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEconstructor_declaration\">Parsetree.constructor_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEconstructor_declaration\">Parsetree.constructor_declaration</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.expr\">expr</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a> -&gt; <a href=\"Parsetree.html#TYPEexpression\">Parsetree.expression</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.extension\">extension</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a> -&gt; <a href=\"Parsetree.html#TYPEextension\">Parsetree.extension</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.extension_constructor\">extension_constructor</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEextension_constructor\">Parsetree.extension_constructor</a> -&gt; <a href=\"Parsetree.html#TYPEextension_constructor\">Parsetree.extension_constructor</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.include_declaration\">include_declaration</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEinclude_declaration\">Parsetree.include_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEinclude_declaration\">Parsetree.include_declaration</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.include_description\">include_description</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEinclude_description\">Parsetree.include_description</a> -&gt; <a href=\"Parsetree.html#TYPEinclude_description\">Parsetree.include_description</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.label_declaration\">label_declaration</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt;<br>       <a href=\"Parsetree.html#TYPElabel_declaration\">Parsetree.label_declaration</a> -&gt; <a href=\"Parsetree.html#TYPElabel_declaration\">Parsetree.label_declaration</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.location\">location</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Location.html#TYPEt\">Location.t</a> -&gt; <a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.module_binding\">module_binding</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_binding\">Parsetree.module_binding</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_binding\">Parsetree.module_binding</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.module_declaration\">module_declaration</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_declaration\">Parsetree.module_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_declaration\">Parsetree.module_declaration</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.module_expr\">module_expr</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_expr\">Parsetree.module_expr</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.module_type\">module_type</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type\">Parsetree.module_type</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.module_type_declaration\">module_type_declaration</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEmodule_type_declaration\">Parsetree.module_type_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEmodule_type_declaration\">Parsetree.module_type_declaration</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.open_description\">open_description</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEopen_description\">Parsetree.open_description</a> -&gt; <a href=\"Parsetree.html#TYPEopen_description\">Parsetree.open_description</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.pat\">pat</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a> -&gt; <a href=\"Parsetree.html#TYPEpattern\">Parsetree.pattern</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.payload\">payload</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEpayload\">Parsetree.payload</a> -&gt; <a href=\"Parsetree.html#TYPEpayload\">Parsetree.payload</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.signature\">signature</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> -&gt; <a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.signature_item\">signature_item</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a> -&gt; <a href=\"Parsetree.html#TYPEsignature_item\">Parsetree.signature_item</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.structure\">structure</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> -&gt; <a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.structure_item\">structure_item</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a> -&gt; <a href=\"Parsetree.html#TYPEstructure_item\">Parsetree.structure_item</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.typ\">typ</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a> -&gt; <a href=\"Parsetree.html#TYPEcore_type\">Parsetree.core_type</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.type_declaration\">type_declaration</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEtype_declaration\">Parsetree.type_declaration</a> -&gt; <a href=\"Parsetree.html#TYPEtype_declaration\">Parsetree.type_declaration</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.type_extension\">type_extension</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEtype_extension\">Parsetree.type_extension</a> -&gt; <a href=\"Parsetree.html#TYPEtype_extension\">Parsetree.type_extension</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.type_kind\">type_kind</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEtype_kind\">Parsetree.type_kind</a> -&gt; <a href=\"Parsetree.html#TYPEtype_kind\">Parsetree.type_kind</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.value_binding\">value_binding</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEvalue_binding\">Parsetree.value_binding</a> -&gt; <a href=\"Parsetree.html#TYPEvalue_binding\">Parsetree.value_binding</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.value_description\">value_description</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt;<br>       <a href=\"Parsetree.html#TYPEvalue_description\">Parsetree.value_description</a> -&gt; <a href=\"Parsetree.html#TYPEvalue_description\">Parsetree.value_description</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmapper.with_constraint\">with_constraint</span>&nbsp;: <code class=\"type\"><a href=\"Ast_mapper.html#TYPEmapper\">mapper</a> -&gt; <a href=\"Parsetree.html#TYPEwith_constraint\">Parsetree.with_constraint</a> -&gt; <a href=\"Parsetree.html#TYPEwith_constraint\">Parsetree.with_constraint</a></code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>A mapper record implements one \"method\" per syntactic category,\n    using an open recursion style: each method takes as its first\n    argument the mapper to be applied to children in the syntax\n    tree.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "default_mapper", "mapper",
              "\n<div class=\"info-desc\">\n<p>A default mapper, which implements a \"deep identity\" mapping.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Apply mappers to compilation units",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "tool_name", "unit -> string",
              "\n<div class=\"info-desc\">\n<p>Can be used within a ppx preprocessor to know which tool is\n    calling it <code class=\"code\"><span class=\"string\">\"ocamlc\"</span></code>, <code class=\"code\"><span class=\"string\">\"ocamlopt\"</span></code>, <code class=\"code\"><span class=\"string\">\"ocamldoc\"</span></code>, <code class=\"code\"><span class=\"string\">\"ocamldep\"</span></code>,\n    <code class=\"code\"><span class=\"string\">\"ocaml\"</span></code>, ...  Some global variables that reflect command-line\n    options are automatically synchronized between the calling tool\n    and the ppx preprocessor: <a href=\"Clflags.html#VALinclude_dirs\"><code class=\"code\"><span class=\"constructor\">Clflags</span>.include_dirs</code></a>,\n    <a href=\"Config.html#VALload_path\"><code class=\"code\"><span class=\"constructor\">Config</span>.load_path</code></a>, <a href=\"Clflags.html#VALopen_modules\"><code class=\"code\"><span class=\"constructor\">Clflags</span>.open_modules</code></a>, <a href=\"Clflags.html#VALfor_package\"><code class=\"code\"><span class=\"constructor\">Clflags</span>.for_package</code></a>,\n    <a href=\"Clflags.html#VALdebug\"><code class=\"code\"><span class=\"constructor\">Clflags</span>.debug</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "apply", "source:string -> target:string -> mapper -> unit",
              "\n<div class=\"info-desc\">\n<p>Apply a mapper (parametrized by the unit name) to a dumped\n    parsetree found in the <code class=\"code\">source</code> file and put the result in the\n    <code class=\"code\">target</code> file. The <code class=\"code\">structure</code> or <code class=\"code\">signature</code> field of the mapper\n    is applied to the implementation or interface.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "run_main", "(string list -> mapper ) -> unit",
              "\n<div class=\"info-desc\">\n<p>Entry point to call to implement a standalone -ppx rewriter from a\n    mapper, parametrized by the command line arguments.  The current\n    unit name can be obtained from <a href=\"Location.html#VALinput_name\"><code class=\"code\"><span class=\"constructor\">Location</span>.input_name</code></a>.  This\n    function implements proper error reporting for uncaught\n    exceptions.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Registration API",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "register_function",
              "(string -> (string list -> mapper ) -> unit) ref", null
            ]
          ],
          [
            "Function",
            [
              "register", "string -> (string list -> mapper ) -> unit",
              "\n<div class=\"info-desc\">\n<p>Apply the <code class=\"code\">register_function</code>.  The default behavior is to run the\n    mapper immediately, taking arguments from the process command\n    line.  This is to support a scenario where a mapper is linked as a\n    stand-alone executable.</p>\n\n<p>It is possible to overwrite the <code class=\"code\">register_function</code> to define\n    \"-ppx drivers\", which combine several mappers in a single process.\n    Typically, a driver starts by defining <code class=\"code\">register_function</code> to a\n    custom implementation, then lets ppx rewriters (linked statically\n    or dynamically) register themselves, and then run all or some of\n    them.  It is also possible to have -ppx drivers apply rewriters to\n    only specific parts of an AST.</p>\n\n<p>The first argument to <code class=\"code\">register</code> is a symbolic name to be used by\n    the ppx driver.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Convenience functions to write mappers",
        "section_info": null,
        "elements": [
          [
            "Function",
            [ "map_opt", "('a -> 'b) -> 'a option -> 'b option", null ]
          ],
          [
            "Function",
            [
              "extension_of_error", "Location.error -> Parsetree.extension",
              "\n<div class=\"info-desc\">\n<p>Encode an error into an 'ocaml.error' extension node which can be\n    inserted in a generated Parsetree.  The compiler will be\n    responsible for reporting the error.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "attribute_of_warning",
              "Location.t -> string -> Parsetree.attribute",
              "\n<div class=\"info-desc\">\n<p>Encode a warning message into an 'ocaml.ppwarning' attribute which can be\n    inserted in a generated Parsetree.  The compiler will be\n    responsible for reporting the warning.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Helper functions to call external mappers",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "add_ppx_context_str",
              "tool_name:string -> Parsetree.structure -> Parsetree.structure",
              "\n<div class=\"info-desc\">\n<p>Extract information from the current environment and encode it\n    into an attribute which is prepended to the list of structure\n    items in order to pass the information to an external\n    processor.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add_ppx_context_sig",
              "tool_name:string -> Parsetree.signature -> Parsetree.signature",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">add_ppx_context_str</code>, but for signatures.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "drop_ppx_context_str",
              "restore:bool -> Parsetree.structure -> Parsetree.structure",
              "\n<div class=\"info-desc\">\n<p>Drop the ocaml.ppx.context attribute from a structure.  If\n    <code class=\"code\">restore</code> is true, also restore the associated data in the current\n    process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "drop_ppx_context_sig",
              "restore:bool -> Parsetree.signature -> Parsetree.signature",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">drop_ppx_context_str</code>, but for signatures.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Cookies",
        "section_info":
          "<p>Cookies are used to pass information from a ppx processor to\n    a further invocation of itself, when called from the OCaml\n    toplevel (or other tools that support cookies).</p>",
        "elements": [
          [
            "Function",
            [ "set_cookie", "string -> Parsetree.expression -> unit", null ]
          ],
          [
            "Function",
            [ "get_cookie", "string -> Parsetree.expression option", null ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Attr_helper",
    "module_info": "\n<p>Helpers for attributes</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "error", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Multiple_attributes\"><span class=\"constructor\">Multiple_attributes</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.No_payload_expected\"><span class=\"constructor\">No_payload_expected</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "get_no_payload_attribute",
              "string list -> Parsetree.attributes -> string Asttypes.loc option",
              "\n<div class=\"info-desc\">\n<p>The <code class=\"code\">string&nbsp;list</code> argument of the following functions is a list of\n    alternative names for the attribute we are looking for. For instance:</p>\n\n<pre class=\"codepre\"><code class=\"code\">      [<span class=\"string\">\"foo\"</span>; <span class=\"string\">\"ocaml.foo\"</span>]\n    </code></pre></div>\n"
            ]
          ],
          [
            "Function",
            [
              "has_no_payload_attribute",
              "string list -> Parsetree.attributes -> bool", null
            ]
          ],
          [ "Exception", [ "Error", "Location.t", null ] ],
          [
            "Function",
            [ "report_error", "Format.formatter -> error -> unit", null ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Bigarray.Array0",
    "module_info":
      "\n<p>Zero-dimensional arrays. The <code class=\"code\"><span class=\"constructor\">Array0</span></code> structure provides operations\n   similar to those of <a href=\"Bigarray.Genarray.html\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span></code></a>, but specialized to the case\n   of zero-dimensional arrays that only contain a single scalar value.\n   Statically knowing the number of dimensions of the array allows\n   faster operations, and more precise static type-checking.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "('a, 'b, 'c)", "t", null,
              "\n<div class=\"info-desc\">\n<p>The type of zero-dimensional big arrays whose elements have\n     OCaml type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>, representation kind <code class=\"code\"><span class=\"keywordsign\">'</span>b</code>, and memory layout <code class=\"code\"><span class=\"keywordsign\">'</span>c</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create",
              "('a, 'b) Bigarray.kind -> 'c Bigarray.layout -> ('a, 'b, 'c) t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array0</span>.create&nbsp;kind&nbsp;layout</code> returns a new bigarray of zero dimension.\n     <code class=\"code\">kind</code> and <code class=\"code\">layout</code> determine the array element kind and the array\n     layout as described for <a href=\"Bigarray.Genarray.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.create</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "kind", "('a, 'b, 'c) t -> ('a, 'b) Bigarray.kind",
              "\n<div class=\"info-desc\">\n<p>Return the kind of the given big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "layout", "('a, 'b, 'c) t -> 'c Bigarray.layout",
              "\n<div class=\"info-desc\">\n<p>Return the layout of the given big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "change_layout",
              "('a, 'b, 'c) t -> 'd Bigarray.layout -> ('a, 'b, 'd) t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array0</span>.change_layout&nbsp;a&nbsp;layout</code> returns a big array with the\n      specified <code class=\"code\">layout</code>, sharing the data with <code class=\"code\">a</code>. No copying of elements\n      is involved: the new array and the original array share the same\n      storage space.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "size_in_bytes", "('a, 'b, 'c) t -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">size_in_bytes&nbsp;a</code> is <code class=\"code\">a</code>'s <a href=\"Bigarray.html#VALkind_size_in_bytes\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.kind_size_in_bytes</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get", "('a, 'b, 'c) t -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array0</span>.get&nbsp;a</code> returns the only element in <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set", "('a, 'b, 'c) t -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array0</span>.set&nbsp;a&nbsp;x&nbsp;v</code> stores the value <code class=\"code\">v</code> in <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit", "('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit",
              "\n<div class=\"info-desc\">\n<p>Copy the first big array to the second big array.\n     See <a href=\"Bigarray.Genarray.html#VALblit\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.blit</code></a> for more details.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fill", "('a, 'b, 'c) t -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p>Fill the given big array with the given value.\n     See <a href=\"Bigarray.Genarray.html#VALfill\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.fill</code></a> for more details.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_value",
              "('a, 'b) Bigarray.kind -> 'c Bigarray.layout -> 'a -> ('a, 'b, 'c) t",
              "\n<div class=\"info-desc\">\n<p>Build a zero-dimensional big array initialized from the\n     given value.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Bigarray.Array1",
    "module_info":
      "\n<p>One-dimensional arrays. The <code class=\"code\"><span class=\"constructor\">Array1</span></code> structure provides operations\n   similar to those of\n   <a href=\"Bigarray.Genarray.html\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span></code></a>, but specialized to the case of one-dimensional arrays.\n   (The <a href=\"Bigarray.Array2.html\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array2</span></code></a> and <a href=\"Bigarray.Array3.html\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array3</span></code></a> structures below provide operations\n   specialized for two- and three-dimensional arrays.)\n   Statically knowing the number of dimensions of the array allows\n   faster operations, and more precise static type-checking.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "('a, 'b, 'c)", "t", null,
              "\n<div class=\"info-desc\">\n<p>The type of one-dimensional big arrays whose elements have\n     OCaml type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>, representation kind <code class=\"code\"><span class=\"keywordsign\">'</span>b</code>, and memory layout <code class=\"code\"><span class=\"keywordsign\">'</span>c</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create",
              "('a, 'b) Bigarray.kind -> 'c Bigarray.layout -> int -> ('a, 'b, 'c) t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array1</span>.create&nbsp;kind&nbsp;layout&nbsp;dim</code> returns a new bigarray of\n     one dimension, whose size is <code class=\"code\">dim</code>.  <code class=\"code\">kind</code> and <code class=\"code\">layout</code>\n     determine the array element kind and the array layout\n     as described for <a href=\"Bigarray.Genarray.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.create</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "dim", "('a, 'b, 'c) t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the size (dimension) of the given one-dimensional\n     big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "kind", "('a, 'b, 'c) t -> ('a, 'b) Bigarray.kind",
              "\n<div class=\"info-desc\">\n<p>Return the kind of the given big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "layout", "('a, 'b, 'c) t -> 'c Bigarray.layout",
              "\n<div class=\"info-desc\">\n<p>Return the layout of the given big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "change_layout",
              "('a, 'b, 'c) t -> 'd Bigarray.layout -> ('a, 'b, 'd) t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array1</span>.change_layout&nbsp;a&nbsp;layout</code> returns a bigarray with the\n      specified <code class=\"code\">layout</code>, sharing the data with <code class=\"code\">a</code> (and hence having\n      the same dimension as <code class=\"code\">a</code>). No copying of elements is involved: the\n      new array and the original array share the same storage space.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "size_in_bytes", "('a, 'b, 'c) t -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">size_in_bytes&nbsp;a</code> is the number of elements in <code class=\"code\">a</code>\n    multiplied by <code class=\"code\">a</code>'s <a href=\"Bigarray.html#VALkind_size_in_bytes\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.kind_size_in_bytes</code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "get", "('a, 'b, 'c) t -> int -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array1</span>.get&nbsp;a&nbsp;x</code>, or alternatively <code class=\"code\">a.{x}</code>,\n     returns the element of <code class=\"code\">a</code> at index <code class=\"code\">x</code>.\n     <code class=\"code\">x</code> must be greater or equal than <code class=\"code\">0</code> and strictly less than\n     <code class=\"code\"><span class=\"constructor\">Array1</span>.dim&nbsp;a</code> if <code class=\"code\">a</code> has C layout.  If <code class=\"code\">a</code> has Fortran layout,\n     <code class=\"code\">x</code> must be greater or equal than <code class=\"code\">1</code> and less or equal than\n     <code class=\"code\"><span class=\"constructor\">Array1</span>.dim&nbsp;a</code>.  Otherwise, <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> is raised.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set", "('a, 'b, 'c) t -> int -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array1</span>.set&nbsp;a&nbsp;x&nbsp;v</code>, also written <code class=\"code\">a.{x}&nbsp;&lt;-&nbsp;v</code>,\n     stores the value <code class=\"code\">v</code> at index <code class=\"code\">x</code> in <code class=\"code\">a</code>.\n     <code class=\"code\">x</code> must be inside the bounds of <code class=\"code\">a</code> as described in\n     <a href=\"Bigarray.Array1.html#VALget\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array1</span>.get</code></a>;\n     otherwise, <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> is raised.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub", "('a, 'b, 'c) t -> int -> int -> ('a, 'b, 'c) t",
              "\n<div class=\"info-desc\">\n<p>Extract a sub-array of the given one-dimensional big array.\n     See <a href=\"Bigarray.Genarray.html#VALsub_left\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.sub_left</code></a> for more details.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "slice",
              "('a, 'b, 'c) t -> int -> ('a, 'b, 'c) Bigarray.Array0.t",
              "\n<div class=\"info-desc\">\n<p>Extract a scalar (zero-dimensional slice) of the given one-dimensional\n     big array.  The integer parameter is the index of the scalar to\n     extract.  See <a href=\"Bigarray.Genarray.html#VALslice_left\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.slice_left</code></a> and\n     <a href=\"Bigarray.Genarray.html#VALslice_right\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.slice_right</code></a> for more details.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "blit", "('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit",
              "\n<div class=\"info-desc\">\n<p>Copy the first big array to the second big array.\n     See <a href=\"Bigarray.Genarray.html#VALblit\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.blit</code></a> for more details.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fill", "('a, 'b, 'c) t -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p>Fill the given big array with the given value.\n     See <a href=\"Bigarray.Genarray.html#VALfill\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.fill</code></a> for more details.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_array",
              "('a, 'b) Bigarray.kind -> 'c Bigarray.layout -> 'a array -> ('a, 'b, 'c) t",
              "\n<div class=\"info-desc\">\n<p>Build a one-dimensional big array initialized from the\n     given array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unsafe_get", "('a, 'b, 'c) t -> int -> 'a",
              "\n<div class=\"info-desc\">\n<p>Like <a href=\"Bigarray.Array1.html#VALget\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array1</span>.get</code></a>, but bounds checking is not always performed.\n      Use with caution and only when the program logic guarantees that\n      the access is within bounds.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unsafe_set", "('a, 'b, 'c) t -> int -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p>Like <a href=\"Bigarray.Array1.html#VALset\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array1</span>.set</code></a>, but bounds checking is not always performed.\n      Use with caution and only when the program logic guarantees that\n      the access is within bounds.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Bigarray.Array2",
    "module_info":
      "\n<p>Two-dimensional arrays. The <code class=\"code\"><span class=\"constructor\">Array2</span></code> structure provides operations\n   similar to those of <a href=\"Bigarray.Genarray.html\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span></code></a>, but specialized to the\n   case of two-dimensional arrays.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "('a, 'b, 'c)", "t", null,
              "\n<div class=\"info-desc\">\n<p>The type of two-dimensional big arrays whose elements have\n     OCaml type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>, representation kind <code class=\"code\"><span class=\"keywordsign\">'</span>b</code>, and memory layout <code class=\"code\"><span class=\"keywordsign\">'</span>c</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create",
              "('a, 'b) Bigarray.kind -> 'c Bigarray.layout -> int -> int -> ('a, 'b, 'c) t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array2</span>.create&nbsp;kind&nbsp;layout&nbsp;dim1&nbsp;dim2</code> returns a new bigarray of\n     two dimension, whose size is <code class=\"code\">dim1</code> in the first dimension\n     and <code class=\"code\">dim2</code> in the second dimension.  <code class=\"code\">kind</code> and <code class=\"code\">layout</code>\n     determine the array element kind and the array layout\n     as described for <a href=\"Bigarray.Genarray.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.create</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "dim1", "('a, 'b, 'c) t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the first dimension of the given two-dimensional big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "dim2", "('a, 'b, 'c) t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the second dimension of the given two-dimensional big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "kind", "('a, 'b, 'c) t -> ('a, 'b) Bigarray.kind",
              "\n<div class=\"info-desc\">\n<p>Return the kind of the given big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "layout", "('a, 'b, 'c) t -> 'c Bigarray.layout",
              "\n<div class=\"info-desc\">\n<p>Return the layout of the given big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "change_layout",
              "('a, 'b, 'c) t -> 'd Bigarray.layout -> ('a, 'b, 'd) t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array2</span>.change_layout&nbsp;a&nbsp;layout</code> returns a bigarray with the\n      specified <code class=\"code\">layout</code>, sharing the data with <code class=\"code\">a</code> (and hence having\n      the same dimensions as <code class=\"code\">a</code>). No copying of elements is involved: the\n      new array and the original array share the same storage space.\n      The dimensions are reversed, such that <code class=\"code\">get&nbsp;v&nbsp;[|&nbsp;a;&nbsp;b&nbsp;|]</code> in\n      C layout becomes <code class=\"code\">get&nbsp;v&nbsp;[|&nbsp;b+1;&nbsp;a+1&nbsp;|]</code> in Fortran layout.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "size_in_bytes", "('a, 'b, 'c) t -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">size_in_bytes&nbsp;a</code> is the number of elements in <code class=\"code\">a</code>\n    multiplied by <code class=\"code\">a</code>'s <a href=\"Bigarray.html#VALkind_size_in_bytes\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.kind_size_in_bytes</code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "get", "('a, 'b, 'c) t -> int -> int -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array2</span>.get&nbsp;a&nbsp;x&nbsp;y</code>, also written <code class=\"code\">a.{x,y}</code>,\n     returns the element of <code class=\"code\">a</code> at coordinates (<code class=\"code\">x</code>, <code class=\"code\">y</code>).\n     <code class=\"code\">x</code> and <code class=\"code\">y</code> must be within the bounds\n     of <code class=\"code\">a</code>, as described for <a href=\"Bigarray.Genarray.html#VALget\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.get</code></a>;\n     otherwise, <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> is raised.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set", "('a, 'b, 'c) t -> int -> int -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array2</span>.set&nbsp;a&nbsp;x&nbsp;y&nbsp;v</code>, or alternatively <code class=\"code\">a.{x,y}&nbsp;&lt;-&nbsp;v</code>,\n     stores the value <code class=\"code\">v</code> at coordinates (<code class=\"code\">x</code>, <code class=\"code\">y</code>) in <code class=\"code\">a</code>.\n     <code class=\"code\">x</code> and <code class=\"code\">y</code> must be within the bounds of <code class=\"code\">a</code>,\n     as described for <a href=\"Bigarray.Genarray.html#VALset\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.set</code></a>;\n     otherwise, <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> is raised.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub_left",
              "('a, 'b, Bigarray.c_layout ) t -> int -> int -> ('a, 'b, Bigarray.c_layout ) t",
              "\n<div class=\"info-desc\">\n<p>Extract a two-dimensional sub-array of the given two-dimensional\n     big array by restricting the first dimension.\n     See <a href=\"Bigarray.Genarray.html#VALsub_left\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.sub_left</code></a> for more details.\n     <code class=\"code\"><span class=\"constructor\">Array2</span>.sub_left</code> applies only to arrays with C layout.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub_right",
              "('a, 'b, Bigarray.fortran_layout ) t -> int -> int -> ('a, 'b, Bigarray.fortran_layout ) t",
              "\n<div class=\"info-desc\">\n<p>Extract a two-dimensional sub-array of the given two-dimensional\n     big array by restricting the second dimension.\n     See <a href=\"Bigarray.Genarray.html#VALsub_right\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.sub_right</code></a> for more details.\n     <code class=\"code\"><span class=\"constructor\">Array2</span>.sub_right</code> applies only to arrays with Fortran layout.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "slice_left",
              "('a, 'b, Bigarray.c_layout ) t -> int -> ('a, 'b, Bigarray.c_layout ) Bigarray.Array1.t",
              "\n<div class=\"info-desc\">\n<p>Extract a row (one-dimensional slice) of the given two-dimensional\n     big array.  The integer parameter is the index of the row to\n     extract.  See <a href=\"Bigarray.Genarray.html#VALslice_left\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.slice_left</code></a> for more details.\n     <code class=\"code\"><span class=\"constructor\">Array2</span>.slice_left</code> applies only to arrays with C layout.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "slice_right",
              "('a, 'b, Bigarray.fortran_layout ) t -> int -> ('a, 'b, Bigarray.fortran_layout ) Bigarray.Array1.t",
              "\n<div class=\"info-desc\">\n<p>Extract a column (one-dimensional slice) of the given\n     two-dimensional big array.  The integer parameter is the\n     index of the column to extract.  See <a href=\"Bigarray.Genarray.html#VALslice_right\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.slice_right</code></a>\n     for more details.  <code class=\"code\"><span class=\"constructor\">Array2</span>.slice_right</code> applies only to arrays\n     with Fortran layout.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit", "('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit",
              "\n<div class=\"info-desc\">\n<p>Copy the first big array to the second big array.\n     See <a href=\"Bigarray.Genarray.html#VALblit\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.blit</code></a> for more details.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fill", "('a, 'b, 'c) t -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p>Fill the given big array with the given value.\n     See <a href=\"Bigarray.Genarray.html#VALfill\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.fill</code></a> for more details.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_array",
              "('a, 'b) Bigarray.kind -> 'c Bigarray.layout -> 'a array array -> ('a, 'b, 'c) t",
              "\n<div class=\"info-desc\">\n<p>Build a two-dimensional big array initialized from the\n     given array of arrays.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unsafe_get", "('a, 'b, 'c) t -> int -> int -> 'a",
              "\n<div class=\"info-desc\">\n<p>Like <a href=\"Bigarray.Array2.html#VALget\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array2</span>.get</code></a>, but bounds checking is not always\n      performed.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unsafe_set", "('a, 'b, 'c) t -> int -> int -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p>Like <a href=\"Bigarray.Array2.html#VALset\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array2</span>.set</code></a>, but bounds checking is not always\n      performed.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Bigarray.Array3",
    "module_info":
      "\n<p>Three-dimensional arrays. The <code class=\"code\"><span class=\"constructor\">Array3</span></code> structure provides operations\n   similar to those of <a href=\"Bigarray.Genarray.html\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span></code></a>, but specialized to the case\n   of three-dimensional arrays.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "('a, 'b, 'c)", "t", null,
              "\n<div class=\"info-desc\">\n<p>The type of three-dimensional big arrays whose elements have\n     OCaml type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>, representation kind <code class=\"code\"><span class=\"keywordsign\">'</span>b</code>, and memory layout <code class=\"code\"><span class=\"keywordsign\">'</span>c</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create",
              "('a, 'b) Bigarray.kind -> 'c Bigarray.layout -> int -> int -> int -> ('a, 'b, 'c) t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array3</span>.create&nbsp;kind&nbsp;layout&nbsp;dim1&nbsp;dim2&nbsp;dim3</code> returns a new bigarray of\n     three dimension, whose size is <code class=\"code\">dim1</code> in the first dimension,\n     <code class=\"code\">dim2</code> in the second dimension, and <code class=\"code\">dim3</code> in the third.\n     <code class=\"code\">kind</code> and <code class=\"code\">layout</code> determine the array element kind and\n     the array layout as described for <a href=\"Bigarray.Genarray.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.create</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "dim1", "('a, 'b, 'c) t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the first dimension of the given three-dimensional big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "dim2", "('a, 'b, 'c) t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the second dimension of the given three-dimensional big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "dim3", "('a, 'b, 'c) t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the third dimension of the given three-dimensional big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "kind", "('a, 'b, 'c) t -> ('a, 'b) Bigarray.kind",
              "\n<div class=\"info-desc\">\n<p>Return the kind of the given big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "layout", "('a, 'b, 'c) t -> 'c Bigarray.layout",
              "\n<div class=\"info-desc\">\n<p>Return the layout of the given big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "change_layout",
              "('a, 'b, 'c) t -> 'd Bigarray.layout -> ('a, 'b, 'd) t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array3</span>.change_layout&nbsp;a&nbsp;layout</code> returns a bigarray with the\n      specified <code class=\"code\">layout</code>, sharing the data with <code class=\"code\">a</code> (and hence having\n      the same dimensions as <code class=\"code\">a</code>). No copying of elements is involved: the\n      new array and the original array share the same storage space.\n      The dimensions are reversed, such that <code class=\"code\">get&nbsp;v&nbsp;[|&nbsp;a;&nbsp;b;&nbsp;c&nbsp;|]</code> in\n      C layout becomes <code class=\"code\">get&nbsp;v&nbsp;[|&nbsp;c+1;&nbsp;b+1;&nbsp;a+1&nbsp;|]</code> in Fortran layout.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "size_in_bytes", "('a, 'b, 'c) t -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">size_in_bytes&nbsp;a</code> is the number of elements in <code class=\"code\">a</code>\n    multiplied by <code class=\"code\">a</code>'s <a href=\"Bigarray.html#VALkind_size_in_bytes\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.kind_size_in_bytes</code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "get", "('a, 'b, 'c) t -> int -> int -> int -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array3</span>.get&nbsp;a&nbsp;x&nbsp;y&nbsp;z</code>, also written <code class=\"code\">a.{x,y,z}</code>,\n     returns the element of <code class=\"code\">a</code> at coordinates (<code class=\"code\">x</code>, <code class=\"code\">y</code>, <code class=\"code\">z</code>).\n     <code class=\"code\">x</code>, <code class=\"code\">y</code> and <code class=\"code\">z</code> must be within the bounds of <code class=\"code\">a</code>,\n     as described for <a href=\"Bigarray.Genarray.html#VALget\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.get</code></a>;\n     otherwise, <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> is raised.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set", "('a, 'b, 'c) t -> int -> int -> int -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array3</span>.set&nbsp;a&nbsp;x&nbsp;y&nbsp;v</code>, or alternatively <code class=\"code\">a.{x,y,z}&nbsp;&lt;-&nbsp;v</code>,\n     stores the value <code class=\"code\">v</code> at coordinates (<code class=\"code\">x</code>, <code class=\"code\">y</code>, <code class=\"code\">z</code>) in <code class=\"code\">a</code>.\n     <code class=\"code\">x</code>, <code class=\"code\">y</code> and <code class=\"code\">z</code> must be within the bounds of <code class=\"code\">a</code>,\n     as described for <a href=\"Bigarray.Genarray.html#VALset\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.set</code></a>;\n     otherwise, <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> is raised.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub_left",
              "('a, 'b, Bigarray.c_layout ) t -> int -> int -> ('a, 'b, Bigarray.c_layout ) t",
              "\n<div class=\"info-desc\">\n<p>Extract a three-dimensional sub-array of the given\n     three-dimensional big array by restricting the first dimension.\n     See <a href=\"Bigarray.Genarray.html#VALsub_left\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.sub_left</code></a> for more details.  <code class=\"code\"><span class=\"constructor\">Array3</span>.sub_left</code>\n     applies only to arrays with C layout.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub_right",
              "('a, 'b, Bigarray.fortran_layout ) t -> int -> int -> ('a, 'b, Bigarray.fortran_layout ) t",
              "\n<div class=\"info-desc\">\n<p>Extract a three-dimensional sub-array of the given\n     three-dimensional big array by restricting the second dimension.\n     See <a href=\"Bigarray.Genarray.html#VALsub_right\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.sub_right</code></a> for more details.  <code class=\"code\"><span class=\"constructor\">Array3</span>.sub_right</code>\n     applies only to arrays with Fortran layout.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "slice_left_1",
              "('a, 'b, Bigarray.c_layout ) t -> int -> int -> ('a, 'b, Bigarray.c_layout ) Bigarray.Array1.t",
              "\n<div class=\"info-desc\">\n<p>Extract a one-dimensional slice of the given three-dimensional\n     big array by fixing the first two coordinates.\n     The integer parameters are the coordinates of the slice to\n     extract.  See <a href=\"Bigarray.Genarray.html#VALslice_left\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.slice_left</code></a> for more details.\n     <code class=\"code\"><span class=\"constructor\">Array3</span>.slice_left_1</code> applies only to arrays with C layout.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "slice_right_1",
              "('a, 'b, Bigarray.fortran_layout ) t -> int -> int -> ('a, 'b, Bigarray.fortran_layout ) Bigarray.Array1.t",
              "\n<div class=\"info-desc\">\n<p>Extract a one-dimensional slice of the given three-dimensional\n     big array by fixing the last two coordinates.\n     The integer parameters are the coordinates of the slice to\n     extract.  See <a href=\"Bigarray.Genarray.html#VALslice_right\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.slice_right</code></a> for more details.\n     <code class=\"code\"><span class=\"constructor\">Array3</span>.slice_right_1</code> applies only to arrays with Fortran\n     layout.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "slice_left_2",
              "('a, 'b, Bigarray.c_layout ) t -> int -> ('a, 'b, Bigarray.c_layout ) Bigarray.Array2.t",
              "\n<div class=\"info-desc\">\n<p>Extract a  two-dimensional slice of the given three-dimensional\n     big array by fixing the first coordinate.\n     The integer parameter is the first coordinate of the slice to\n     extract.  See <a href=\"Bigarray.Genarray.html#VALslice_left\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.slice_left</code></a> for more details.\n     <code class=\"code\"><span class=\"constructor\">Array3</span>.slice_left_2</code> applies only to arrays with C layout.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "slice_right_2",
              "('a, 'b, Bigarray.fortran_layout ) t -> int -> ('a, 'b, Bigarray.fortran_layout ) Bigarray.Array2.t",
              "\n<div class=\"info-desc\">\n<p>Extract a two-dimensional slice of the given\n     three-dimensional big array by fixing the last coordinate.\n     The integer parameter is the coordinate of the slice\n     to extract.  See <a href=\"Bigarray.Genarray.html#VALslice_right\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.slice_right</code></a> for more details.\n     <code class=\"code\"><span class=\"constructor\">Array3</span>.slice_right_2</code> applies only to arrays with Fortran\n     layout.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit", "('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit",
              "\n<div class=\"info-desc\">\n<p>Copy the first big array to the second big array.\n     See <a href=\"Bigarray.Genarray.html#VALblit\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.blit</code></a> for more details.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fill", "('a, 'b, 'c) t -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p>Fill the given big array with the given value.\n     See <a href=\"Bigarray.Genarray.html#VALfill\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Genarray</span>.fill</code></a> for more details.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_array",
              "('a, 'b) Bigarray.kind -> 'c Bigarray.layout -> 'a array array array -> ('a, 'b, 'c) t",
              "\n<div class=\"info-desc\">\n<p>Build a three-dimensional big array initialized from the\n     given array of arrays of arrays.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unsafe_get", "('a, 'b, 'c) t -> int -> int -> int -> 'a",
              "\n<div class=\"info-desc\">\n<p>Like <a href=\"Bigarray.Array3.html#VALget\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array3</span>.get</code></a>, but bounds checking is not always\n      performed.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unsafe_set",
              "('a, 'b, 'c) t -> int -> int -> int -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p>Like <a href=\"Bigarray.Array3.html#VALset\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array3</span>.set</code></a>, but bounds checking is not always\n      performed.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Bigarray.Genarray",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "('a, 'b, 'c)", "t", null,
              "\n<div class=\"info-desc\">\n<p>The type <code class=\"code\"><span class=\"constructor\">Genarray</span>.t</code> is the type of big arrays with variable\n     numbers of dimensions.  Any number of dimensions between 0 and 16\n     is supported.</p>\n\n<p>The three type parameters to <code class=\"code\"><span class=\"constructor\">Genarray</span>.t</code> identify the array element\n     kind and layout, as follows:</p>\n<ul>\n<li>the first parameter, <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>, is the OCaml type for accessing array\n       elements (<code class=\"code\">float</code>, <code class=\"code\">int</code>, <code class=\"code\">int32</code>, <code class=\"code\">int64</code>, <code class=\"code\">nativeint</code>);</li>\n<li>the second parameter, <code class=\"code\"><span class=\"keywordsign\">'</span>b</code>, is the actual kind of array elements\n       (<code class=\"code\">float32_elt</code>, <code class=\"code\">float64_elt</code>, <code class=\"code\">int8_signed_elt</code>, <code class=\"code\">int8_unsigned_elt</code>,\n       etc);</li>\n<li>the third parameter, <code class=\"code\"><span class=\"keywordsign\">'</span>c</code>, identifies the array layout\n       (<code class=\"code\">c_layout</code> or <code class=\"code\">fortran_layout</code>).</li>\n</ul>\n<p>For instance, <code class=\"code\">(float,&nbsp;float32_elt,&nbsp;fortran_layout)&nbsp;<span class=\"constructor\">Genarray</span>.t</code>\n     is the type of generic big arrays containing 32-bit floats\n     in Fortran layout; reads and writes in this array use the\n     OCaml type <code class=\"code\">float</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create",
              "('a, 'b) Bigarray.kind -> 'c Bigarray.layout -> int array -> ('a, 'b, 'c) t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Genarray</span>.create&nbsp;kind&nbsp;layout&nbsp;dimensions</code> returns a new big array\n     whose element kind is determined by the parameter <code class=\"code\">kind</code> (one of\n     <code class=\"code\">float32</code>, <code class=\"code\">float64</code>, <code class=\"code\">int8_signed</code>, etc) and whose layout is\n     determined by the parameter <code class=\"code\">layout</code> (one of <code class=\"code\">c_layout</code> or\n     <code class=\"code\">fortran_layout</code>).  The <code class=\"code\">dimensions</code> parameter is an array of\n     integers that indicate the size of the big array in each dimension.\n     The length of <code class=\"code\">dimensions</code> determines the number of dimensions\n     of the bigarray.</p>\n\n<p>For instance, <code class=\"code\"><span class=\"constructor\">Genarray</span>.create&nbsp;int32&nbsp;c_layout&nbsp;[|4;6;8|]</code>\n     returns a fresh big array of 32-bit integers, in C layout,\n     having three dimensions, the three dimensions being 4, 6 and 8\n     respectively.</p>\n\n<p>Big arrays returned by <code class=\"code\"><span class=\"constructor\">Genarray</span>.create</code> are not initialized:\n     the initial values of array elements is unspecified.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">Genarray</span>.create</code> raises <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the number of dimensions\n     is not in the range 0 to 16 inclusive, or if one of the dimensions\n     is negative.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "num_dims", "('a, 'b, 'c) t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the number of dimensions of the given big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "dims", "('a, 'b, 'c) t -> int array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Genarray</span>.dims&nbsp;a</code> returns all dimensions of the big array <code class=\"code\">a</code>,\n     as an array of integers of length <code class=\"code\"><span class=\"constructor\">Genarray</span>.num_dims&nbsp;a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "nth_dim", "('a, 'b, 'c) t -> int -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Genarray</span>.nth_dim&nbsp;a&nbsp;n</code> returns the <code class=\"code\">n</code>-th dimension of the\n     big array <code class=\"code\">a</code>.  The first dimension corresponds to <code class=\"code\">n&nbsp;=&nbsp;0</code>;\n     the second dimension corresponds to <code class=\"code\">n&nbsp;=&nbsp;1</code>; the last dimension,\n     to <code class=\"code\">n&nbsp;=&nbsp;<span class=\"constructor\">Genarray</span>.num_dims&nbsp;a&nbsp;-&nbsp;1</code>.\n     Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is less than 0 or greater or equal than\n     <code class=\"code\"><span class=\"constructor\">Genarray</span>.num_dims&nbsp;a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "kind", "('a, 'b, 'c) t -> ('a, 'b) Bigarray.kind",
              "\n<div class=\"info-desc\">\n<p>Return the kind of the given big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "layout", "('a, 'b, 'c) t -> 'c Bigarray.layout",
              "\n<div class=\"info-desc\">\n<p>Return the layout of the given big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "change_layout",
              "('a, 'b, 'c) t -> 'd Bigarray.layout -> ('a, 'b, 'd) t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Genarray</span>.change_layout&nbsp;a&nbsp;layout</code> returns a bigarray with the\n      specified <code class=\"code\">layout</code>, sharing the data with <code class=\"code\">a</code> (and hence having\n      the same dimensions as <code class=\"code\">a</code>). No copying of elements is involved: the\n      new array and the original array share the same storage space.\n      The dimensions are reversed, such that <code class=\"code\">get&nbsp;v&nbsp;[|&nbsp;a;&nbsp;b&nbsp;|]</code> in\n      C layout becomes <code class=\"code\">get&nbsp;v&nbsp;[|&nbsp;b+1;&nbsp;a+1&nbsp;|]</code> in Fortran layout.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.04.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "size_in_bytes", "('a, 'b, 'c) t -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">size_in_bytes&nbsp;a</code> is the number of elements in <code class=\"code\">a</code> multiplied\n    by <code class=\"code\">a</code>'s <a href=\"Bigarray.html#VALkind_size_in_bytes\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.kind_size_in_bytes</code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "get", "('a, 'b, 'c) t -> int array -> 'a",
              "\n<div class=\"info-desc\">\n<p>Read an element of a generic big array.\n     <code class=\"code\"><span class=\"constructor\">Genarray</span>.get&nbsp;a&nbsp;[|i1;&nbsp;...;&nbsp;iN|]</code> returns the element of <code class=\"code\">a</code>\n     whose coordinates are <code class=\"code\">i1</code> in the first dimension, <code class=\"code\">i2</code> in\n     the second dimension, ..., <code class=\"code\">iN</code> in the <code class=\"code\"><span class=\"constructor\">N</span></code>-th dimension.</p>\n\n<p>If <code class=\"code\">a</code> has C layout, the coordinates must be greater or equal than 0\n     and strictly less than the corresponding dimensions of <code class=\"code\">a</code>.\n     If <code class=\"code\">a</code> has Fortran layout, the coordinates must be greater or equal\n     than 1 and less or equal than the corresponding dimensions of <code class=\"code\">a</code>.\n     Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the array <code class=\"code\">a</code> does not have exactly <code class=\"code\"><span class=\"constructor\">N</span></code>\n     dimensions, or if the coordinates are outside the array bounds.</p>\n\n<p>If <code class=\"code\"><span class=\"constructor\">N</span>&nbsp;&gt;&nbsp;3</code>, alternate syntax is provided: you can write\n     <code class=\"code\">a.{i1,&nbsp;i2,&nbsp;...,&nbsp;iN}</code> instead of <code class=\"code\"><span class=\"constructor\">Genarray</span>.get&nbsp;a&nbsp;[|i1;&nbsp;...;&nbsp;iN|]</code>.\n     (The syntax <code class=\"code\">a.{...}</code> with one, two or three coordinates is\n     reserved for accessing one-, two- and three-dimensional arrays\n     as described below.)</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set", "('a, 'b, 'c) t -> int array -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p>Assign an element of a generic big array.\n     <code class=\"code\"><span class=\"constructor\">Genarray</span>.set&nbsp;a&nbsp;[|i1;&nbsp;...;&nbsp;iN|]&nbsp;v</code> stores the value <code class=\"code\">v</code> in the\n     element of <code class=\"code\">a</code> whose coordinates are <code class=\"code\">i1</code> in the first dimension,\n     <code class=\"code\">i2</code> in the second dimension, ..., <code class=\"code\">iN</code> in the <code class=\"code\"><span class=\"constructor\">N</span></code>-th dimension.</p>\n\n<p>The array <code class=\"code\">a</code> must have exactly <code class=\"code\"><span class=\"constructor\">N</span></code> dimensions, and all coordinates\n     must lie inside the array bounds, as described for <code class=\"code\"><span class=\"constructor\">Genarray</span>.get</code>;\n     otherwise, <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> is raised.</p>\n\n<p>If <code class=\"code\"><span class=\"constructor\">N</span>&nbsp;&gt;&nbsp;3</code>, alternate syntax is provided: you can write\n     <code class=\"code\">a.{i1,&nbsp;i2,&nbsp;...,&nbsp;iN}&nbsp;&lt;-&nbsp;v</code> instead of\n     <code class=\"code\"><span class=\"constructor\">Genarray</span>.set&nbsp;a&nbsp;[|i1;&nbsp;...;&nbsp;iN|]&nbsp;v</code>.\n     (The syntax <code class=\"code\">a.{...}&nbsp;&lt;-&nbsp;v</code> with one, two or three coordinates is\n     reserved for updating one-, two- and three-dimensional arrays\n     as described below.)</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub_left",
              "('a, 'b, Bigarray.c_layout ) t -> int -> int -> ('a, 'b, Bigarray.c_layout ) t",
              "\n<div class=\"info-desc\">\n<p>Extract a sub-array of the given big array by restricting the\n     first (left-most) dimension.  <code class=\"code\"><span class=\"constructor\">Genarray</span>.sub_left&nbsp;a&nbsp;ofs&nbsp;len</code>\n     returns a big array with the same number of dimensions as <code class=\"code\">a</code>,\n     and the same dimensions as <code class=\"code\">a</code>, except the first dimension,\n     which corresponds to the interval <code class=\"code\">[ofs&nbsp;...&nbsp;ofs&nbsp;+&nbsp;len&nbsp;-&nbsp;1]</code>\n     of the first dimension of <code class=\"code\">a</code>.  No copying of elements is\n     involved: the sub-array and the original array share the same\n     storage space.  In other terms, the element at coordinates\n     <code class=\"code\">[|i1;&nbsp;...;&nbsp;iN|]</code> of the sub-array is identical to the\n     element at coordinates <code class=\"code\">[|i1+ofs;&nbsp;...;&nbsp;iN|]</code> of the original\n     array <code class=\"code\">a</code>.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">Genarray</span>.sub_left</code> applies only to big arrays in C layout.\n     Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">ofs</code> and <code class=\"code\">len</code> do not designate\n     a valid sub-array of <code class=\"code\">a</code>, that is, if <code class=\"code\">ofs&nbsp;&lt;&nbsp;0</code>, or <code class=\"code\">len&nbsp;&lt;&nbsp;0</code>,\n     or <code class=\"code\">ofs&nbsp;+&nbsp;len&nbsp;&gt;&nbsp;<span class=\"constructor\">Genarray</span>.nth_dim&nbsp;a&nbsp;0</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub_right",
              "('a, 'b, Bigarray.fortran_layout ) t -> int -> int -> ('a, 'b, Bigarray.fortran_layout ) t",
              "\n<div class=\"info-desc\">\n<p>Extract a sub-array of the given big array by restricting the\n     last (right-most) dimension.  <code class=\"code\"><span class=\"constructor\">Genarray</span>.sub_right&nbsp;a&nbsp;ofs&nbsp;len</code>\n     returns a big array with the same number of dimensions as <code class=\"code\">a</code>,\n     and the same dimensions as <code class=\"code\">a</code>, except the last dimension,\n     which corresponds to the interval <code class=\"code\">[ofs&nbsp;...&nbsp;ofs&nbsp;+&nbsp;len&nbsp;-&nbsp;1]</code>\n     of the last dimension of <code class=\"code\">a</code>.  No copying of elements is\n     involved: the sub-array and the original array share the same\n     storage space.  In other terms, the element at coordinates\n     <code class=\"code\">[|i1;&nbsp;...;&nbsp;iN|]</code> of the sub-array is identical to the\n     element at coordinates <code class=\"code\">[|i1;&nbsp;...;&nbsp;iN+ofs|]</code> of the original\n     array <code class=\"code\">a</code>.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">Genarray</span>.sub_right</code> applies only to big arrays in Fortran layout.\n     Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">ofs</code> and <code class=\"code\">len</code> do not designate\n     a valid sub-array of <code class=\"code\">a</code>, that is, if <code class=\"code\">ofs&nbsp;&lt;&nbsp;1</code>, or <code class=\"code\">len&nbsp;&lt;&nbsp;0</code>,\n     or <code class=\"code\">ofs&nbsp;+&nbsp;len&nbsp;&gt;&nbsp;<span class=\"constructor\">Genarray</span>.nth_dim&nbsp;a&nbsp;(<span class=\"constructor\">Genarray</span>.num_dims&nbsp;a&nbsp;-&nbsp;1)</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "slice_left",
              "('a, 'b, Bigarray.c_layout ) t -> int array -> ('a, 'b, Bigarray.c_layout ) t",
              "\n<div class=\"info-desc\">\n<p>Extract a sub-array of lower dimension from the given big array\n     by fixing one or several of the first (left-most) coordinates.\n     <code class=\"code\"><span class=\"constructor\">Genarray</span>.slice_left&nbsp;a&nbsp;[|i1;&nbsp;...&nbsp;;&nbsp;iM|]</code> returns the 'slice'\n     of <code class=\"code\">a</code> obtained by setting the first <code class=\"code\"><span class=\"constructor\">M</span></code> coordinates to\n     <code class=\"code\">i1</code>, ..., <code class=\"code\">iM</code>.  If <code class=\"code\">a</code> has <code class=\"code\"><span class=\"constructor\">N</span></code> dimensions, the slice has\n     dimension <code class=\"code\"><span class=\"constructor\">N</span>&nbsp;-&nbsp;<span class=\"constructor\">M</span></code>, and the element at coordinates\n     <code class=\"code\">[|j1;&nbsp;...;&nbsp;j(<span class=\"constructor\">N</span>-<span class=\"constructor\">M</span>)|]</code> in the slice is identical to the element\n     at coordinates <code class=\"code\">[|i1;&nbsp;...;&nbsp;iM;&nbsp;j1;&nbsp;...;&nbsp;j(<span class=\"constructor\">N</span>-<span class=\"constructor\">M</span>)|]</code> in the original\n     array <code class=\"code\">a</code>.  No copying of elements is involved: the slice and\n     the original array share the same storage space.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">Genarray</span>.slice_left</code> applies only to big arrays in C layout.\n     Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\"><span class=\"constructor\">M</span>&nbsp;&gt;=&nbsp;<span class=\"constructor\">N</span></code>, or if <code class=\"code\">[|i1;&nbsp;...&nbsp;;&nbsp;iM|]</code>\n     is outside the bounds of <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "slice_right",
              "('a, 'b, Bigarray.fortran_layout ) t -> int array -> ('a, 'b, Bigarray.fortran_layout ) t",
              "\n<div class=\"info-desc\">\n<p>Extract a sub-array of lower dimension from the given big array\n     by fixing one or several of the last (right-most) coordinates.\n     <code class=\"code\"><span class=\"constructor\">Genarray</span>.slice_right&nbsp;a&nbsp;[|i1;&nbsp;...&nbsp;;&nbsp;iM|]</code> returns the 'slice'\n     of <code class=\"code\">a</code> obtained by setting the last <code class=\"code\"><span class=\"constructor\">M</span></code> coordinates to\n     <code class=\"code\">i1</code>, ..., <code class=\"code\">iM</code>.  If <code class=\"code\">a</code> has <code class=\"code\"><span class=\"constructor\">N</span></code> dimensions, the slice has\n     dimension <code class=\"code\"><span class=\"constructor\">N</span>&nbsp;-&nbsp;<span class=\"constructor\">M</span></code>, and the element at coordinates\n     <code class=\"code\">[|j1;&nbsp;...;&nbsp;j(<span class=\"constructor\">N</span>-<span class=\"constructor\">M</span>)|]</code> in the slice is identical to the element\n     at coordinates <code class=\"code\">[|j1;&nbsp;...;&nbsp;j(<span class=\"constructor\">N</span>-<span class=\"constructor\">M</span>);&nbsp;i1;&nbsp;...;&nbsp;iM|]</code> in the original\n     array <code class=\"code\">a</code>.  No copying of elements is involved: the slice and\n     the original array share the same storage space.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">Genarray</span>.slice_right</code> applies only to big arrays in Fortran layout.\n     Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\"><span class=\"constructor\">M</span>&nbsp;&gt;=&nbsp;<span class=\"constructor\">N</span></code>, or if <code class=\"code\">[|i1;&nbsp;...&nbsp;;&nbsp;iM|]</code>\n     is outside the bounds of <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit", "('a, 'b, 'c) t -> ('a, 'b, 'c) t -> unit",
              "\n<div class=\"info-desc\">\n<p>Copy all elements of a big array in another big array.\n     <code class=\"code\"><span class=\"constructor\">Genarray</span>.blit&nbsp;src&nbsp;dst</code> copies all elements of <code class=\"code\">src</code> into\n     <code class=\"code\">dst</code>.  Both arrays <code class=\"code\">src</code> and <code class=\"code\">dst</code> must have the same number of\n     dimensions and equal dimensions.  Copying a sub-array of <code class=\"code\">src</code>\n     to a sub-array of <code class=\"code\">dst</code> can be achieved by applying <code class=\"code\"><span class=\"constructor\">Genarray</span>.blit</code>\n     to sub-array or slices of <code class=\"code\">src</code> and <code class=\"code\">dst</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fill", "('a, 'b, 'c) t -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p>Set all elements of a big array to a given value.\n     <code class=\"code\"><span class=\"constructor\">Genarray</span>.fill&nbsp;a&nbsp;v</code> stores the value <code class=\"code\">v</code> in all elements of\n     the big array <code class=\"code\">a</code>.  Setting only some elements of <code class=\"code\">a</code> to <code class=\"code\">v</code>\n     can be achieved by applying <code class=\"code\"><span class=\"constructor\">Genarray</span>.fill</code> to a sub-array\n     or a slice of <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Bigarray",
    "module_info":
      "\n<p>Large, multi-dimensional, numerical arrays.</p>\n\n<p>This module implements multi-dimensional arrays of integers and\n   floating-point numbers, thereafter referred to as 'big arrays',\n   to distinguish them from the standard OCaml arrays described in\n   <a href=\"Array.html\"><code class=\"code\"><span class=\"constructor\">Array</span></code></a>.</p>\n\n<p>The implementation allows efficient sharing of large numerical\n   arrays between OCaml code and C or Fortran numerical libraries.</p>\n\n<p>The main differences between 'big arrays' and standard OCaml\n   arrays are as follows:</p>\n<ul>\n<li>Big arrays are not limited in size, unlike OCaml arrays.\n     (Normal float arrays are limited to 2,097,151 elements on a 32-bit\n     platform, and normal arrays of other types to 4,194,303 elements.)</li>\n<li>Big arrays are multi-dimensional.  Any number of dimensions\n     between 0 and 16 is supported.  In contrast, OCaml arrays\n     are mono-dimensional and require encoding multi-dimensional\n     arrays as arrays of arrays.</li>\n<li>Big arrays can only contain integers and floating-point numbers,\n     while OCaml arrays can contain arbitrary OCaml data types.</li>\n<li>Big arrays provide more space-efficient storage of\n     integer and floating-point elements than normal OCaml arrays, in\n     particular because they support 'small' types such as\n     single-precision floats and 8 and 16-bit integers, in addition to\n     the standard OCaml types of double-precision floats and 32 and\n     64-bit integers.</li>\n<li>The memory layout of big arrays is entirely compatible with that\n     of arrays in C and Fortran, allowing large arrays to be passed\n     back and forth between OCaml code and C / Fortran code with no\n     data copying at all.</li>\n<li>Big arrays support interesting high-level operations that normal\n     arrays do not provide efficiently, such as extracting sub-arrays\n     and 'slicing' a multi-dimensional array along certain dimensions,\n     all without any copying.</li>\n</ul>\n<p>Users of this module are encouraged to do <code class=\"code\"><span class=\"keyword\">open</span>&nbsp;<span class=\"constructor\">Bigarray</span></code> in their\n   source, then refer to array types and operations via short dot\n   notation, e.g. <code class=\"code\"><span class=\"constructor\">Array1</span>.t</code> or <code class=\"code\"><span class=\"constructor\">Array2</span>.sub</code>.</p>\n\n<p>Big arrays support all the OCaml ad-hoc polymorphic operations:</p>\n<ul>\n<li>comparisons (<code class=\"code\">=</code>, <code class=\"code\">&lt;&gt;</code>, <code class=\"code\">&lt;=</code>, etc, as well as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>);</li>\n<li>hashing (module <code class=\"code\"><span class=\"constructor\">Hash</span></code>);</li>\n<li>and structured input-output (the functions from the\n     <a href=\"Marshal.html\"><code class=\"code\"><span class=\"constructor\">Marshal</span></code></a> module, as well as <a href=\"Pervasives.html#VALoutput_value\"><code class=\"code\">output_value</code></a>\n     and <a href=\"Pervasives.html#VALinput_value\"><code class=\"code\">input_value</code></a>).</li>\n</ul>\n",
    "sections": [
      {
        "section_name": "Element kinds",
        "section_info":
          "<p>Big arrays can contain elements of the following kinds:</p><ul>\n<li>IEEE single precision (32 bits) floating-point numbers\n   (<a href=\"Bigarray.html#TYPEfloat32_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.float32_elt</code></a>),</li>\n<li>IEEE double precision (64 bits) floating-point numbers\n   (<a href=\"Bigarray.html#TYPEfloat64_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.float64_elt</code></a>),</li>\n<li>IEEE single precision (2 * 32 bits) floating-point complex numbers\n   (<a href=\"Bigarray.html#TYPEcomplex32_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.complex32_elt</code></a>),</li>\n<li>IEEE double precision (2 * 64 bits) floating-point complex numbers\n   (<a href=\"Bigarray.html#TYPEcomplex64_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.complex64_elt</code></a>),</li>\n<li>8-bit integers (signed or unsigned)\n   (<a href=\"Bigarray.html#TYPEint8_signed_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.int8_signed_elt</code></a> or <a href=\"Bigarray.html#TYPEint8_unsigned_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.int8_unsigned_elt</code></a>),</li>\n<li>16-bit integers (signed or unsigned)\n   (<a href=\"Bigarray.html#TYPEint16_signed_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.int16_signed_elt</code></a> or <a href=\"Bigarray.html#TYPEint16_unsigned_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.int16_unsigned_elt</code></a>),</li>\n<li>OCaml integers (signed, 31 bits on 32-bit architectures,\n   63 bits on 64-bit architectures) (<a href=\"Bigarray.html#TYPEint_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.int_elt</code></a>),</li>\n<li>32-bit signed integers (<a href=\"Bigarray.html#TYPEint32_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.int32_elt</code></a>),</li>\n<li>64-bit signed integers (<a href=\"Bigarray.html#TYPEint64_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.int64_elt</code></a>),</li>\n<li>platform-native signed integers (32 bits on 32-bit architectures,\n   64 bits on 64-bit architectures) (<a href=\"Bigarray.html#TYPEnativeint_elt\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.nativeint_elt</code></a>).</li>\n</ul><p>Each element kind is represented at the type level by one of the\n   <code class=\"code\">*_elt</code> types defined below (defined with a single constructor instead\n   of abstract types for technical injectivity reasons).</p>",
        "elements": [
          [
            "Typevariant",
            [
              "float32_elt", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat32_elt.Float32_elt\"><span class=\"constructor\">Float32_elt</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "float64_elt", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat64_elt.Float64_elt\"><span class=\"constructor\">Float64_elt</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "int8_signed_elt", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint8_signed_elt.Int8_signed_elt\"><span class=\"constructor\">Int8_signed_elt</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "int8_unsigned_elt", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint8_unsigned_elt.Int8_unsigned_elt\"><span class=\"constructor\">Int8_unsigned_elt</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "int16_signed_elt", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint16_signed_elt.Int16_signed_elt\"><span class=\"constructor\">Int16_signed_elt</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "int16_unsigned_elt", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint16_unsigned_elt.Int16_unsigned_elt\"><span class=\"constructor\">Int16_unsigned_elt</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "int32_elt", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint32_elt.Int32_elt\"><span class=\"constructor\">Int32_elt</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "int64_elt", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint64_elt.Int64_elt\"><span class=\"constructor\">Int64_elt</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "int_elt", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint_elt.Int_elt\"><span class=\"constructor\">Int_elt</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "nativeint_elt", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTnativeint_elt.Nativeint_elt\"><span class=\"constructor\">Nativeint_elt</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "complex32_elt", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcomplex32_elt.Complex32_elt\"><span class=\"constructor\">Complex32_elt</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "complex64_elt", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcomplex64_elt.Complex64_elt\"><span class=\"constructor\">Complex64_elt</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "('a, 'b)", "kind =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTkind.Float32\"><span class=\"constructor\">Float32</span></span> <span class=\"keyword\">:</span> <code class=\"type\">(float, <a href=\"Bigarray.html#TYPEfloat32_elt\">float32_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTkind.Float64\"><span class=\"constructor\">Float64</span></span> <span class=\"keyword\">:</span> <code class=\"type\">(float, <a href=\"Bigarray.html#TYPEfloat64_elt\">float64_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTkind.Int8_signed\"><span class=\"constructor\">Int8_signed</span></span> <span class=\"keyword\">:</span> <code class=\"type\">(int, <a href=\"Bigarray.html#TYPEint8_signed_elt\">int8_signed_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTkind.Int8_unsigned\"><span class=\"constructor\">Int8_unsigned</span></span> <span class=\"keyword\">:</span> <code class=\"type\">(int, <a href=\"Bigarray.html#TYPEint8_unsigned_elt\">int8_unsigned_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTkind.Int16_signed\"><span class=\"constructor\">Int16_signed</span></span> <span class=\"keyword\">:</span> <code class=\"type\">(int, <a href=\"Bigarray.html#TYPEint16_signed_elt\">int16_signed_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTkind.Int16_unsigned\"><span class=\"constructor\">Int16_unsigned</span></span> <span class=\"keyword\">:</span> <code class=\"type\">(int, <a href=\"Bigarray.html#TYPEint16_unsigned_elt\">int16_unsigned_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTkind.Int32\"><span class=\"constructor\">Int32</span></span> <span class=\"keyword\">:</span> <code class=\"type\">(int32, <a href=\"Bigarray.html#TYPEint32_elt\">int32_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTkind.Int64\"><span class=\"constructor\">Int64</span></span> <span class=\"keyword\">:</span> <code class=\"type\">(int64, <a href=\"Bigarray.html#TYPEint64_elt\">int64_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTkind.Int\"><span class=\"constructor\">Int</span></span> <span class=\"keyword\">:</span> <code class=\"type\">(int, <a href=\"Bigarray.html#TYPEint_elt\">int_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTkind.Nativeint\"><span class=\"constructor\">Nativeint</span></span> <span class=\"keyword\">:</span> <code class=\"type\">(nativeint, <a href=\"Bigarray.html#TYPEnativeint_elt\">nativeint_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTkind.Complex32\"><span class=\"constructor\">Complex32</span></span> <span class=\"keyword\">:</span> <code class=\"type\">(<a href=\"Complex.html#TYPEt\">Complex.t</a>, <a href=\"Bigarray.html#TYPEcomplex32_elt\">complex32_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTkind.Complex64\"><span class=\"constructor\">Complex64</span></span> <span class=\"keyword\">:</span> <code class=\"type\">(<a href=\"Complex.html#TYPEt\">Complex.t</a>, <a href=\"Bigarray.html#TYPEcomplex64_elt\">complex64_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTkind.Char\"><span class=\"constructor\">Char</span></span> <span class=\"keyword\">:</span> <code class=\"type\">(char, <a href=\"Bigarray.html#TYPEint8_unsigned_elt\">int8_unsigned_elt</a>) <a href=\"Bigarray.html#TYPEkind\">kind</a></code></code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>To each element kind is associated an OCaml type, which is\n   the type of OCaml values that can be stored in the big array\n   or read back from it.  This type is not necessarily the same\n   as the type of the array elements proper: for instance,\n   a big array whose elements are of kind <code class=\"code\">float32_elt</code> contains\n   32-bit single precision floats, but reading or writing one of\n   its elements from OCaml uses the OCaml type <code class=\"code\">float</code>, which is\n   64-bit double precision floats.</p>\n\n<p>The GADT type <code class=\"code\">(<span class=\"keywordsign\">'</span>a,&nbsp;<span class=\"keywordsign\">'</span>b)&nbsp;kind</code> captures this association\n   of an OCaml type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code> for values read or written in the big array,\n   and of an element kind <code class=\"code\"><span class=\"keywordsign\">'</span>b</code> which represents the actual contents\n   of the big array. Its constructors list all possible associations\n   of OCaml types with element kinds, and are re-exported below for\n   backward-compatibility reasons.</p>\n\n<p>Using a generalized algebraic datatype (GADT) here allows to write\n   well-typed polymorphic functions whose return type depend on the\n   argument type, such as:</p>\n\n<pre class=\"codepre\"><code class=\"code\">  <span class=\"keyword\">let</span> zero : <span class=\"keyword\">type</span> a b. (a, b) kind <span class=\"keywordsign\">-&gt;</span> a = <span class=\"keyword\">function</span>\n    <span class=\"keywordsign\">|</span> <span class=\"constructor\">Float32</span> <span class=\"keywordsign\">-&gt;</span> 0.0 <span class=\"keywordsign\">|</span> <span class=\"constructor\">Complex32</span> <span class=\"keywordsign\">-&gt;</span> <span class=\"constructor\">Complex</span>.zero\n    <span class=\"keywordsign\">|</span> <span class=\"constructor\">Float64</span> <span class=\"keywordsign\">-&gt;</span> 0.0 <span class=\"keywordsign\">|</span> <span class=\"constructor\">Complex64</span> <span class=\"keywordsign\">-&gt;</span> <span class=\"constructor\">Complex</span>.zero\n    <span class=\"keywordsign\">|</span> <span class=\"constructor\">Int8_signed</span> <span class=\"keywordsign\">-&gt;</span> 0 <span class=\"keywordsign\">|</span> <span class=\"constructor\">Int8_unsigned</span> <span class=\"keywordsign\">-&gt;</span> 0\n    <span class=\"keywordsign\">|</span> <span class=\"constructor\">Int16_signed</span> <span class=\"keywordsign\">-&gt;</span> 0 <span class=\"keywordsign\">|</span> <span class=\"constructor\">Int16_unsigned</span> <span class=\"keywordsign\">-&gt;</span> 0\n    <span class=\"keywordsign\">|</span> <span class=\"constructor\">Int32</span> <span class=\"keywordsign\">-&gt;</span> 0l <span class=\"keywordsign\">|</span> <span class=\"constructor\">Int64</span> <span class=\"keywordsign\">-&gt;</span> 0<span class=\"constructor\">L</span>\n    <span class=\"keywordsign\">|</span> <span class=\"constructor\">Int</span> <span class=\"keywordsign\">-&gt;</span> 0 <span class=\"keywordsign\">|</span> <span class=\"constructor\">Nativeint</span> <span class=\"keywordsign\">-&gt;</span> 0n\n    <span class=\"keywordsign\">|</span> <span class=\"constructor\">Char</span> <span class=\"keywordsign\">-&gt;</span> <span class=\"string\">'\\000'</span>\n</code></pre></div>\n"
            ]
          ],
          [
            "Function",
            [
              "float32", "(float, float32_elt ) kind",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "float64", "(float, float64_elt ) kind",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "complex32", "( Complex.t , complex32_elt ) kind",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "complex64", "( Complex.t , complex64_elt ) kind",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "int8_signed", "(int, int8_signed_elt ) kind",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "int8_unsigned", "(int, int8_unsigned_elt ) kind",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "int16_signed", "(int, int16_signed_elt ) kind",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "int16_unsigned", "(int, int16_unsigned_elt ) kind",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "int", "(int, int_elt ) kind",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "int32", "(int32, int32_elt ) kind",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "int64", "(int64, int64_elt ) kind",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "nativeint", "(nativeint, nativeint_elt ) kind",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "char", "(char, int8_unsigned_elt ) kind",
              "\n<div class=\"info-desc\">\n<p>As shown by the types of the values above,\n   big arrays of kind <code class=\"code\">float32_elt</code> and <code class=\"code\">float64_elt</code> are\n   accessed using the OCaml type <code class=\"code\">float</code>.  Big arrays of complex kinds\n   <code class=\"code\">complex32_elt</code>, <code class=\"code\">complex64_elt</code> are accessed with the OCaml type\n   <a href=\"Complex.html#TYPEt\"><code class=\"code\"><span class=\"constructor\">Complex</span>.t</code></a>. Big arrays of\n   integer kinds are accessed using the smallest OCaml integer\n   type large enough to represent the array elements:\n   <code class=\"code\">int</code> for 8- and 16-bit integer bigarrays, as well as OCaml-integer\n   bigarrays; <code class=\"code\">int32</code> for 32-bit integer bigarrays; <code class=\"code\">int64</code>\n   for 64-bit integer bigarrays; and <code class=\"code\">nativeint</code> for\n   platform-native integer bigarrays.  Finally, big arrays of\n   kind <code class=\"code\">int8_unsigned_elt</code> can also be accessed as arrays of\n   characters instead of arrays of small integers, by using\n   the kind value <code class=\"code\">char</code> instead of <code class=\"code\">int8_unsigned</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "kind_size_in_bytes", "('a, 'b) kind -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">kind_size_in_bytes&nbsp;k</code> is the number of bytes used to store\n   an element of type <code class=\"code\">k</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Array layouts",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "c_layout", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTc_layout.C_layout_typ\"><span class=\"constructor\">C_layout_typ</span></span></code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Bigarray.html#VALfortran_layout\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.fortran_layout</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "fortran_layout", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfortran_layout.Fortran_layout_typ\"><span class=\"constructor\">Fortran_layout_typ</span></span></code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>To facilitate interoperability with existing C and Fortran code,\n   this library supports two different memory layouts for big arrays,\n   one compatible with the C conventions,\n   the other compatible with the Fortran conventions.</p>\n\n<p>In the C-style layout, array indices start at 0, and\n   multi-dimensional arrays are laid out in row-major format.\n   That is, for a two-dimensional array, all elements of\n   row 0 are contiguous in memory, followed by all elements of\n   row 1, etc.  In other terms, the array elements at <code class=\"code\">(x,y)</code>\n   and <code class=\"code\">(x,&nbsp;y+1)</code> are adjacent in memory.</p>\n\n<p>In the Fortran-style layout, array indices start at 1, and\n   multi-dimensional arrays are laid out in column-major format.\n   That is, for a two-dimensional array, all elements of\n   column 0 are contiguous in memory, followed by all elements of\n   column 1, etc.  In other terms, the array elements at <code class=\"code\">(x,y)</code>\n   and <code class=\"code\">(x+1,&nbsp;y)</code> are adjacent in memory.</p>\n\n<p>Each layout style is identified at the type level by the\n   phantom types <a href=\"Bigarray.html#VALc_layout\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.c_layout</code></a> and <a href=\"Bigarray.html#VALfortran_layout\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.fortran_layout</code></a>\n   respectively.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": [
          {
            "section_name": "Supported layouts",
            "section_info":
              "<p>The GADT type <code class=\"code\"><span class=\"keywordsign\">'</span>a&nbsp;layout</code> represents one of the two supported\n   memory layouts: C-style or Fortran-style. Its constructors are\n   re-exported as values below for backward-compatibility reasons.</p>",
            "elements": [
              [
                "Typevariant",
                [
                  "'a", "layout =",
                  "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlayout.C_layout\"><span class=\"constructor\">C_layout</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"Bigarray.html#TYPEc_layout\">c_layout</a> <a href=\"Bigarray.html#TYPElayout\">layout</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlayout.Fortran_layout\"><span class=\"constructor\">Fortran_layout</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"Bigarray.html#TYPEfortran_layout\">fortran_layout</a> <a href=\"Bigarray.html#TYPElayout\">layout</a></code></code></td>\n\n</tr></tbody>",
                  null
                ]
              ],
              [ "Function", [ "c_layout", "c_layout layout", null ] ],
              [
                "Function",
                [ "fortran_layout", "fortran_layout layout", null ]
              ]
            ],
            "sub_sections": []
          }
        ]
      },
      {
        "section_name": "Generic arrays (of arbitrarily many dimensions)",
        "section_info": null,
        "elements": [ [ "Module", [ "Genarray", null ] ] ],
        "sub_sections": []
      },
      {
        "section_name": "Zero-dimensional arrays",
        "section_info": null,
        "elements": [
          [ "Module", [ "Array0", "\n<p>Zero-dimensional arrays.</p>\n\n" ] ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "One-dimensional arrays",
        "section_info": null,
        "elements": [
          [ "Module", [ "Array1", "\n<p>One-dimensional arrays.</p>\n\n" ] ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Two-dimensional arrays",
        "section_info": null,
        "elements": [
          [ "Module", [ "Array2", "\n<p>Two-dimensional arrays.</p>\n\n" ] ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Three-dimensional arrays",
        "section_info": null,
        "elements": [
          [
            "Module",
            [ "Array3", "\n<p>Three-dimensional arrays.</p>\n\n" ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name":
          "Coercions between generic big arrays and fixed-dimension big arrays",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "genarray_of_array0",
              "('a, 'b, 'c) Array0.t -> ('a, 'b, 'c) Genarray.t",
              "\n<div class=\"info-desc\">\n<p>Return the generic big array corresponding to the given zero-dimensional\n   big array.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "genarray_of_array1",
              "('a, 'b, 'c) Array1.t -> ('a, 'b, 'c) Genarray.t",
              "\n<div class=\"info-desc\">\n<p>Return the generic big array corresponding to the given one-dimensional\n   big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "genarray_of_array2",
              "('a, 'b, 'c) Array2.t -> ('a, 'b, 'c) Genarray.t",
              "\n<div class=\"info-desc\">\n<p>Return the generic big array corresponding to the given two-dimensional\n   big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "genarray_of_array3",
              "('a, 'b, 'c) Array3.t -> ('a, 'b, 'c) Genarray.t",
              "\n<div class=\"info-desc\">\n<p>Return the generic big array corresponding to the given three-dimensional\n   big array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "array0_of_genarray",
              "('a, 'b, 'c) Genarray.t -> ('a, 'b, 'c) Array0.t",
              "\n<div class=\"info-desc\">\n<p>Return the zero-dimensional big array corresponding to the given\n   generic big array.  Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the generic big array\n   does not have exactly zero dimension.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "array1_of_genarray",
              "('a, 'b, 'c) Genarray.t -> ('a, 'b, 'c) Array1.t",
              "\n<div class=\"info-desc\">\n<p>Return the one-dimensional big array corresponding to the given\n   generic big array.  Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the generic big array\n   does not have exactly one dimension.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "array2_of_genarray",
              "('a, 'b, 'c) Genarray.t -> ('a, 'b, 'c) Array2.t",
              "\n<div class=\"info-desc\">\n<p>Return the two-dimensional big array corresponding to the given\n   generic big array.  Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the generic big array\n   does not have exactly two dimensions.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "array3_of_genarray",
              "('a, 'b, 'c) Genarray.t -> ('a, 'b, 'c) Array3.t",
              "\n<div class=\"info-desc\">\n<p>Return the three-dimensional big array corresponding to the given\n   generic big array.  Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the generic big array\n   does not have exactly three dimensions.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Re-shaping big arrays",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "reshape",
              "('a, 'b, 'c) Genarray.t -> int array -> ('a, 'b, 'c) Genarray.t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">reshape&nbsp;b&nbsp;[|d1;...;dN|]</code> converts the big array <code class=\"code\">b</code> to a\n   <code class=\"code\"><span class=\"constructor\">N</span></code>-dimensional array of dimensions <code class=\"code\">d1</code>...<code class=\"code\">dN</code>.  The returned\n   array and the original array <code class=\"code\">b</code> share their data\n   and have the same layout.  For instance, assuming that <code class=\"code\">b</code>\n   is a one-dimensional array of dimension 12, <code class=\"code\">reshape&nbsp;b&nbsp;[|3;4|]</code>\n   returns a two-dimensional array <code class=\"code\">b'</code> of dimensions 3 and 4.\n   If <code class=\"code\">b</code> has C layout, the element <code class=\"code\">(x,y)</code> of <code class=\"code\">b'</code> corresponds\n   to the element <code class=\"code\">x&nbsp;*&nbsp;3&nbsp;+&nbsp;y</code> of <code class=\"code\">b</code>.  If <code class=\"code\">b</code> has Fortran layout,\n   the element <code class=\"code\">(x,y)</code> of <code class=\"code\">b'</code> corresponds to the element\n   <code class=\"code\">x&nbsp;+&nbsp;(y&nbsp;-&nbsp;1)&nbsp;*&nbsp;4</code> of <code class=\"code\">b</code>.\n   The returned big array must have exactly the same number of\n   elements as the original big array <code class=\"code\">b</code>.  That is, the product\n   of the dimensions of <code class=\"code\">b</code> must be equal to <code class=\"code\">i1&nbsp;*&nbsp;...&nbsp;*&nbsp;iN</code>.\n   Otherwise, <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> is raised.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "reshape_0",
              "('a, 'b, 'c) Genarray.t -> ('a, 'b, 'c) Array0.t",
              "\n<div class=\"info-desc\">\n<p>Specialized version of <a href=\"Bigarray.html#VALreshape\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.reshape</code></a> for reshaping to\n   zero-dimensional arrays.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "reshape_1",
              "('a, 'b, 'c) Genarray.t -> int -> ('a, 'b, 'c) Array1.t",
              "\n<div class=\"info-desc\">\n<p>Specialized version of <a href=\"Bigarray.html#VALreshape\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.reshape</code></a> for reshaping to\n   one-dimensional arrays.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "reshape_2",
              "('a, 'b, 'c) Genarray.t -> int -> int -> ('a, 'b, 'c) Array2.t",
              "\n<div class=\"info-desc\">\n<p>Specialized version of <a href=\"Bigarray.html#VALreshape\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.reshape</code></a> for reshaping to\n   two-dimensional arrays.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "reshape_3",
              "('a, 'b, 'c) Genarray.t -> int -> int -> int -> ('a, 'b, 'c) Array3.t",
              "\n<div class=\"info-desc\">\n<p>Specialized version of <a href=\"Bigarray.html#VALreshape\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.reshape</code></a> for reshaping to\n   three-dimensional arrays.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Buffer",
    "module_info":
      "\n<p>Extensible buffers.</p>\n\n<p>This module implements buffers that automatically expand\n   as necessary.  It provides accumulative concatenation of strings\n   in quasi-linear time (instead of quadratic time when strings are\n   concatenated pairwise).</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The abstract type of buffers.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "int -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">create&nbsp;n</code> returns a fresh buffer, initially empty.\n   The <code class=\"code\">n</code> parameter is the initial size of the internal byte sequence\n   that holds the buffer contents. That byte sequence is automatically\n   reallocated when more than <code class=\"code\">n</code> characters are stored in the buffer,\n   but shrinks back to <code class=\"code\">n</code> characters when <code class=\"code\">reset</code> is called.\n   For best performance, <code class=\"code\">n</code> should be of the same order of magnitude\n   as the number of characters that are expected to be stored in\n   the buffer (for instance, 80 for a buffer that holds one output\n   line).  Nothing bad will happen if the buffer grows beyond that\n   limit, however. In doubt, take <code class=\"code\">n&nbsp;=&nbsp;16</code> for instance.\n   If <code class=\"code\">n</code> is not between 1 and <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>, it will\n   be clipped to that interval.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "contents", "t -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the current contents of the buffer.\n    The buffer itself is unchanged.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_bytes", "t -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the current contents of the buffer.\n    The buffer itself is unchanged.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "sub", "t -> int -> int -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Buffer</span>.sub&nbsp;b&nbsp;off&nbsp;len</code> returns a copy of <code class=\"code\">len</code> bytes from the\n    current contents of the buffer <code class=\"code\">b</code>, starting at offset <code class=\"code\">off</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">srcoff</code> and <code class=\"code\">len</code> do not designate a valid\n    range of <code class=\"code\">b</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit", "t -> int -> bytes -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Buffer</span>.blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> characters from\n   the current contents of the buffer <code class=\"code\">src</code>, starting at offset <code class=\"code\">srcoff</code>\n   to <code class=\"code\">dst</code>, starting at character <code class=\"code\">dstoff</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">srcoff</code> and <code class=\"code\">len</code> do not designate a valid\n   range of <code class=\"code\">src</code>, or if <code class=\"code\">dstoff</code> and <code class=\"code\">len</code> do not designate a valid\n   range of <code class=\"code\">dst</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.2</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "nth", "t -> int -> char",
              "\n<div class=\"info-desc\">\n<p>Get the n-th character of the buffer. Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if\n    index out of bounds</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "length", "t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the number of characters currently contained in the buffer.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "clear", "t -> unit",
              "\n<div class=\"info-desc\">\n<p>Empty the buffer.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "reset", "t -> unit",
              "\n<div class=\"info-desc\">\n<p>Empty the buffer and deallocate the internal byte sequence holding the\n   buffer contents, replacing it with the initial internal byte sequence\n   of length <code class=\"code\">n</code> that was allocated by <a href=\"Buffer.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Buffer</span>.create</code></a> <code class=\"code\">n</code>.\n   For long-lived buffers that may have grown a lot, <code class=\"code\">reset</code> allows\n   faster reclamation of the space used by the buffer.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add_char", "t -> char -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add_char&nbsp;b&nbsp;c</code> appends the character <code class=\"code\">c</code> at the end of buffer <code class=\"code\">b</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add_utf_8_uchar", "t -> Uchar.t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add_utf_8_uchar&nbsp;b&nbsp;u</code> appends the <a href=\"https://tools.ietf.org/html/rfc3629\">\n    UTF-8</a> encoding of <code class=\"code\">u</code> at the end of buffer <code class=\"code\">b</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_utf_16le_uchar", "t -> Uchar.t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add_utf_16le_uchar&nbsp;b&nbsp;u</code> appends the\n    <a href=\"https://tools.ietf.org/html/rfc2781\">UTF-16LE</a> encoding of <code class=\"code\">u</code>\n    at the end of buffer <code class=\"code\">b</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_utf_16be_uchar", "t -> Uchar.t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add_utf_16be_uchar&nbsp;b&nbsp;u</code> appends the\n    <a href=\"https://tools.ietf.org/html/rfc2781\">UTF-16BE</a> encoding of <code class=\"code\">u</code>\n    at the end of buffer <code class=\"code\">b</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_string", "t -> string -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add_string&nbsp;b&nbsp;s</code> appends the string <code class=\"code\">s</code> at the end of buffer <code class=\"code\">b</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add_bytes", "t -> bytes -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add_bytes&nbsp;b&nbsp;s</code> appends the byte sequence <code class=\"code\">s</code> at the end of buffer <code class=\"code\">b</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_substring", "t -> string -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add_substring&nbsp;b&nbsp;s&nbsp;ofs&nbsp;len</code> takes <code class=\"code\">len</code> characters from offset\n   <code class=\"code\">ofs</code> in string <code class=\"code\">s</code> and appends them at the end of buffer <code class=\"code\">b</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add_subbytes", "t -> bytes -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add_subbytes&nbsp;b&nbsp;s&nbsp;ofs&nbsp;len</code> takes <code class=\"code\">len</code> characters from offset\n    <code class=\"code\">ofs</code> in byte sequence <code class=\"code\">s</code> and appends them at the end of buffer <code class=\"code\">b</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_substitute", "t -> (string -> string) -> string -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add_substitute&nbsp;b&nbsp;f&nbsp;s</code> appends the string pattern <code class=\"code\">s</code> at the end\n   of buffer <code class=\"code\">b</code> with substitution.\n   The substitution process looks for variables into\n   the pattern and substitutes each variable name by its value, as\n   obtained by applying the mapping <code class=\"code\">f</code> to the variable name. Inside the\n   string pattern, a variable name immediately follows a non-escaped\n   <code class=\"code\">$</code> character and is one of the following:</p>\n<ul>\n<li>a non empty sequence of alphanumeric or <code class=\"code\">_</code> characters,</li>\n<li>an arbitrary sequence of characters enclosed by a pair of\n   matching parentheses or curly brackets.\n   An escaped <code class=\"code\">$</code> character is a <code class=\"code\">$</code> that immediately follows a backslash\n   character; it then stands for a plain <code class=\"code\">$</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the closing character of a parenthesized variable\n   cannot be found.</li>\n</ul>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add_buffer", "t -> t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add_buffer&nbsp;b1&nbsp;b2</code> appends the current contents of buffer <code class=\"code\">b2</code>\n   at the end of buffer <code class=\"code\">b1</code>.  <code class=\"code\">b2</code> is not modified.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add_channel", "t -> in_channel -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add_channel&nbsp;b&nbsp;ic&nbsp;n</code> reads at most <code class=\"code\">n</code> characters from the\n   input channel <code class=\"code\">ic</code> and stores them at the end of buffer <code class=\"code\">b</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">End_of_file</span></code> if the channel contains fewer than <code class=\"code\">n</code>\n   characters. In this case, the characters are still added to\n   the buffer, so as to avoid loss of data.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "output_buffer", "out_channel -> t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">output_buffer&nbsp;oc&nbsp;b</code> writes the current contents of buffer <code class=\"code\">b</code>\n   on the output channel <code class=\"code\">oc</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "truncate", "t -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">truncate&nbsp;b&nbsp;len</code> truncates the length of <code class=\"code\">b</code> to <code class=\"code\">len</code>\n  Note: the internal byte sequence is not shortened.\n  Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">len&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">len&nbsp;&gt;&nbsp;length&nbsp;b</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "t -> char Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the buffer, in increasing order.\n    Modification of the buffer during iteration is undefined behavior.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seqi", "t -> (int * char) Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the buffer, in increasing order, yielding indices along chars.\n    Modification of the buffer during iteration is undefined behavior.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_seq", "t -> char Seq.t -> unit",
              "\n<div class=\"info-desc\">\n<p>Add chars to the buffer</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "char Seq.t -> t",
              "\n<div class=\"info-desc\">\n<p>Create a buffer from the generator</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Build_path_prefix_map",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "path", "= string", null, null ] ],
          [ "Typevariant", [ "path_prefix", "= string", null, null ] ],
          [ "Typevariant", [ "error_message", "= string", null, null ] ],
          [ "Function", [ "encode_prefix", "path_prefix -> string", null ] ],
          [
            "Function",
            [
              "decode_prefix",
              "string -> ( path_prefix , error_message ) result", null
            ]
          ],
          [
            "Typevariant",
            [
              "pair", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpair.target\">target</span>&nbsp;: <code class=\"type\"><a href=\"Build_path_prefix_map.html#TYPEpath_prefix\">path_prefix</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpair.source\">source</span>&nbsp;: <code class=\"type\"><a href=\"Build_path_prefix_map.html#TYPEpath_prefix\">path_prefix</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Function", [ "encode_pair", "pair -> string", null ] ],
          [
            "Function",
            [
              "decode_pair", "string -> ( pair , error_message ) result",
              null
            ]
          ],
          [ "Typevariant", [ "map", "= pair option list", null, null ] ],
          [ "Function", [ "encode_map", "map -> string", null ] ],
          [
            "Function",
            [
              "decode_map", "string -> ( map , error_message ) result", null
            ]
          ],
          [
            "Function",
            [
              "rewrite_opt", "map -> path -> path option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rewrite_opt&nbsp;map&nbsp;path</code> tries to find a source in <code class=\"code\">map</code>\n    that is a prefix of the input <code class=\"code\">path</code>. If it succeeds,\n    it replaces this prefix with the corresponding target.\n    If it fails, it just returns <code class=\"code\"><span class=\"constructor\">None</span></code>.</p>\n</div>\n"
            ]
          ],
          [ "Function", [ "rewrite", "map -> path -> path", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Builtin_attributes",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "check_deprecated",
              "Location.t -> Parsetree.attributes -> string -> unit", null
            ]
          ],
          [
            "Function",
            [
              "check_deprecated_inclusion",
              "def: Location.t -> use: Location.t -> Location.t -> Parsetree.attributes -> Parsetree.attributes -> string -> unit",
              null
            ]
          ],
          [
            "Function",
            [
              "deprecated_of_attrs", "Parsetree.attributes -> string option",
              null
            ]
          ],
          [
            "Function",
            [
              "deprecated_of_sig", "Parsetree.signature -> string option",
              null
            ]
          ],
          [
            "Function",
            [
              "deprecated_of_str", "Parsetree.structure -> string option",
              null
            ]
          ],
          [
            "Function",
            [
              "check_deprecated_mutable",
              "Location.t -> Parsetree.attributes -> string -> unit", null
            ]
          ],
          [
            "Function",
            [
              "check_deprecated_mutable_inclusion",
              "def: Location.t -> use: Location.t -> Location.t -> Parsetree.attributes -> Parsetree.attributes -> string -> unit",
              null
            ]
          ],
          [
            "Function",
            [
              "error_of_extension", "Parsetree.extension -> Location.error",
              null
            ]
          ],
          [
            "Function",
            [
              "warning_attribute",
              "?ppwarning:bool -> Parsetree.attribute -> unit",
              "\n<div class=\"info-desc\">\n<p>Apply warning settings from the specified attribute.\n      \"ocaml.warning\"/\"ocaml.warnerror\" (and variants without the prefix)\n      are processed and other attributes are ignored.</p>\n\n<p>Also implement ocaml.ppwarning (unless ~ppwarning:false is\n      passed).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "warning_scope",
              "?ppwarning:bool -> Parsetree.attributes -> (unit -> 'a) -> 'a",
              "\n<div class=\"info-desc\">\n<p>Execute a function in a new scope for warning settings.  This\n      means that the effect of any call to <code class=\"code\">warning_attribute</code> during\n      the execution of this function will be discarded after\n      execution.</p>\n\n<p>The function also takes a list of attributes which are processed\n      with <code class=\"code\">warning_attribute</code> in the fresh scope before the function\n      is executed.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "warn_on_literal_pattern", "Parsetree.attributes -> bool", null
            ]
          ],
          [
            "Function",
            [ "explicit_arity", "Parsetree.attributes -> bool", null ]
          ],
          [
            "Function",
            [ "immediate", "Parsetree.attributes -> bool", null ]
          ],
          [
            "Function",
            [ "has_unboxed", "Parsetree.attributes -> bool", null ]
          ],
          [
            "Function",
            [ "has_boxed", "Parsetree.attributes -> bool", null ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Bytes",
    "module_info":
      "\n<p>Byte sequence operations.</p>\n\n<p>A byte sequence is a mutable data structure that contains a\n   fixed-length sequence of bytes. Each byte can be indexed in\n   constant time for reading or writing.</p>\n\n<p>Given a byte sequence <code class=\"code\">s</code> of length <code class=\"code\">l</code>, we can access each of the\n   <code class=\"code\">l</code> bytes of <code class=\"code\">s</code> via its index in the sequence. Indexes start at\n   <code class=\"code\">0</code>, and we will call an index valid in <code class=\"code\">s</code> if it falls within the\n   range <code class=\"code\">[0...l-1]</code> (inclusive). A position is the point between two\n   bytes or at the beginning or end of the sequence.  We call a\n   position valid in <code class=\"code\">s</code> if it falls within the range <code class=\"code\">[0...l]</code>\n   (inclusive). Note that the byte at index <code class=\"code\">n</code> is between positions\n   <code class=\"code\">n</code> and <code class=\"code\">n+1</code>.</p>\n\n<p>Two parameters <code class=\"code\">start</code> and <code class=\"code\">len</code> are said to designate a valid\n   range of <code class=\"code\">s</code> if <code class=\"code\">len&nbsp;&gt;=&nbsp;0</code> and <code class=\"code\">start</code> and <code class=\"code\">start+len</code> are valid\n   positions in <code class=\"code\">s</code>.</p>\n\n<p>Byte sequences can be modified in place, for instance via the <code class=\"code\">set</code>\n   and <code class=\"code\">blit</code> functions described below.  See also strings (module\n   <a href=\"String.html\"><code class=\"code\"><span class=\"constructor\">String</span></code></a>), which are almost the same data structure, but cannot be\n   modified in place.</p>\n\n<p>Bytes are represented by the OCaml type <code class=\"code\">char</code>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "length", "bytes -> int",
              "\n<div class=\"info-desc\">\n<p>Return the length (number of bytes) of the argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get", "bytes -> int -> char",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">get&nbsp;s&nbsp;n</code> returns the byte at index <code class=\"code\">n</code> in argument <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is not a valid index in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set", "bytes -> int -> char -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">set&nbsp;s&nbsp;n&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing the byte at index <code class=\"code\">n</code>\n    with <code class=\"code\">c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is not a valid index in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "int -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">create&nbsp;n</code> returns a new byte sequence of length <code class=\"code\">n</code>. The\n    sequence is uninitialized and contains arbitrary bytes.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "make", "int -> char -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">make&nbsp;n&nbsp;c</code> returns a new byte sequence of length <code class=\"code\">n</code>, filled with\n    the byte <code class=\"code\">c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "init", "int -> (int -> char) -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Bytes</span>.init&nbsp;n&nbsp;f</code> returns a fresh byte sequence of length <code class=\"code\">n</code>, with\n    character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code> (in increasing\n    index order).</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "empty", "bytes",
              "\n<div class=\"info-desc\">\n<p>A byte sequence of size 0.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "copy", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a new byte sequence that contains the same bytes as the\n    argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_string", "string -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a new byte sequence that contains the same bytes as the\n    given string.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_string", "bytes -> string",
              "\n<div class=\"info-desc\">\n<p>Return a new string that contains the same bytes as the given byte\n    sequence.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub", "bytes -> int -> int -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">sub&nbsp;s&nbsp;start&nbsp;len</code> returns a new byte sequence of length <code class=\"code\">len</code>,\n    containing the subsequence of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code>\n    and has length <code class=\"code\">len</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not designate a\n    valid range of <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub_string", "bytes -> int -> int -> string",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">sub</code> but return a string instead of a byte sequence.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "extend", "bytes -> int -> int -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">extend&nbsp;s&nbsp;left&nbsp;right</code> returns a new byte sequence that contains\n    the bytes of <code class=\"code\">s</code>, with <code class=\"code\">left</code> uninitialized bytes prepended and\n    <code class=\"code\">right</code> uninitialized bytes appended to it. If <code class=\"code\">left</code> or <code class=\"code\">right</code>\n    is negative, then bytes are removed (instead of appended) from\n    the corresponding side of <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result length is negative or\n    longer than <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fill", "bytes -> int -> int -> char -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing <code class=\"code\">len</code>\n    characters with <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not designate a\n    valid range of <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit", "bytes -> int -> bytes -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from sequence\n    <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to sequence <code class=\"code\">dst</code>, starting at\n    index <code class=\"code\">dstoff</code>. It works correctly even if <code class=\"code\">src</code> and <code class=\"code\">dst</code> are the\n    same byte sequence, and the source and destination intervals\n    overlap.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">srcoff</code> and <code class=\"code\">len</code> do not\n    designate a valid range of <code class=\"code\">src</code>, or if <code class=\"code\">dstoff</code> and <code class=\"code\">len</code>\n    do not designate a valid range of <code class=\"code\">dst</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit_string", "string -> int -> bytes -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from string\n    <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to byte sequence <code class=\"code\">dst</code>,\n    starting at index <code class=\"code\">dstoff</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">srcoff</code> and <code class=\"code\">len</code> do not\n    designate a valid range of <code class=\"code\">src</code>, or if <code class=\"code\">dstoff</code> and <code class=\"code\">len</code>\n    do not designate a valid range of <code class=\"code\">dst</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "concat", "bytes -> bytes list -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">concat&nbsp;sep&nbsp;sl</code> concatenates the list of byte sequences <code class=\"code\">sl</code>,\n    inserting the separator byte sequence <code class=\"code\">sep</code> between each, and\n    returns the result as a new byte sequence.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result is longer than\n    <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "cat", "bytes -> bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">cat&nbsp;s1&nbsp;s2</code> concatenates <code class=\"code\">s1</code> and <code class=\"code\">s2</code> and returns the result\n     as new byte sequence.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result is longer than\n    <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "(char -> unit) -> bytes -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code>.\n    It is equivalent to <code class=\"code\">f&nbsp;(get&nbsp;s&nbsp;0);&nbsp;f&nbsp;(get&nbsp;s&nbsp;1);&nbsp;...;&nbsp;f&nbsp;(get&nbsp;s<br>\n&nbsp;&nbsp;&nbsp;&nbsp;(length&nbsp;s&nbsp;-&nbsp;1));&nbsp;()</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iteri", "(int -> char -> unit) -> bytes -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Bytes.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.iter</code></a>, but the function is applied to the index of\n    the byte as first argument and the byte itself as second\n    argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "(char -> char) -> bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code>\n    (in increasing index order) and stores the resulting bytes in\n    a new sequence that is returned as the result.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mapi", "(int -> char -> char) -> bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its\n    index (in increasing index order) and stores the resulting bytes\n    in a new sequence that is returned as the result.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "trim", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, without leading and trailing\n    whitespace. The bytes regarded as whitespace are the ASCII\n    characters <code class=\"code\"><span class=\"string\">'&nbsp;'</span></code>, <code class=\"code\"><span class=\"string\">'\\012'</span></code>, <code class=\"code\"><span class=\"string\">'\\n'</span></code>, <code class=\"code\"><span class=\"string\">'\\r'</span></code>, and <code class=\"code\"><span class=\"string\">'\\t'</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "escaped", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with special characters represented\n    by escape sequences, following the lexical conventions of OCaml.\n    All characters outside the ASCII printable range (32..126) are\n    escaped, as well as backslash and double-quote.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result is longer than\n    <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index", "bytes -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">index&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index_opt", "bytes -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">index_opt&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex", "bytes -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rindex&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_opt", "bytes -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "index_from", "bytes -> int -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the first occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.  <code class=\"code\"><span class=\"constructor\">Bytes</span>.index&nbsp;s&nbsp;c</code> is\n    equivalent to <code class=\"code\"><span class=\"constructor\">Bytes</span>.index_from&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.\n    Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index_from_opt", "bytes -> int -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">index_from&nbsp;_opts&nbsp;i&nbsp;c</code> returns the index of the first occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.\n    <code class=\"code\"><span class=\"constructor\">Bytes</span>.index_opt&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">Bytes</span>.index_from_opt&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_from", "bytes -> int -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.  <code class=\"code\">rindex&nbsp;s&nbsp;c</code> is equivalent\n    to <code class=\"code\">rindex_from&nbsp;s&nbsp;(<span class=\"constructor\">Bytes</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.\n    Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_from_opt", "bytes -> int -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence\n    of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not\n    occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.  <code class=\"code\">rindex_opt&nbsp;s&nbsp;c</code> is equivalent to\n    <code class=\"code\">rindex_from&nbsp;s&nbsp;(<span class=\"constructor\">Bytes</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "contains", "bytes -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">contains&nbsp;s&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "contains_from", "bytes -> int -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> after\n    position <code class=\"code\">start</code>.  <code class=\"code\">contains&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\">contains_from<br>\n&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rcontains_from", "bytes -> int -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> before\n    position <code class=\"code\">stop+1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">stop&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">stop+1</code> is not a valid\n    position in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uppercase", "bytes -> bytes",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lowercase", "bytes -> bytes",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "capitalize", "bytes -> bytes",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uncapitalize", "bytes -> bytes",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uppercase_ascii", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "lowercase_ascii", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "capitalize_ascii", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "uncapitalize_ascii", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", "= bytes", null,
              "\n<div class=\"info-desc\">\n<p>An alias for the type of byte sequences.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>The comparison function for byte sequences, with the same\n    specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>,\n    this function <code class=\"code\">compare</code> allows the module <code class=\"code\"><span class=\"constructor\">Bytes</span></code> to be passed as\n    argument to the functors <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p>The equality function for byte sequences.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Unsafe conversions (for advanced users)",
        "section_info":
          "<p>This section describes unsafe, low-level conversion functions\n    between <code class=\"code\">bytes</code> and <code class=\"code\">string</code>. They do not copy the internal data;\n    used improperly, they can break the immutability invariant on\n    strings provided by the <code class=\"code\">-safe-string</code> option. They are available for\n    expert library authors, but for most purposes you should use the\n    always-correct <a href=\"Bytes.html#VALto_string\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.to_string</code></a> and <a href=\"Bytes.html#VALof_string\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.of_string</code></a> instead.</p>",
        "elements": [
          [
            "Function",
            [
              "unsafe_to_string", "bytes -> string",
              "\n<div class=\"info-desc\">\n<p>Unsafely convert a byte sequence into a string.</p>\n\n<p>To reason about the use of <code class=\"code\">unsafe_to_string</code>, it is convenient to\n    consider an \"ownership\" discipline. A piece of code that\n    manipulates some data \"owns\" it; there are several disjoint ownership\n    modes, including:</p>\n<ul>\n<li>Unique ownership: the data may be accessed and mutated</li>\n<li>Shared ownership: the data has several owners, that may only\n      access it, not mutate it.</li>\n</ul>\n<p>Unique ownership is linear: passing the data to another piece of\n    code means giving up ownership (we cannot write the\n    data again). A unique owner may decide to make the data shared\n    (giving up mutation rights on it), but shared data may not become\n    uniquely-owned again.</p>\n\n<p><code class=\"code\">unsafe_to_string&nbsp;s</code> can only be used when the caller owns the byte\n   sequence <code class=\"code\">s</code> -- either uniquely or as shared immutable data. The\n   caller gives up ownership of <code class=\"code\">s</code>, and gains ownership of the\n   returned string.</p>\n\n<p>There are two valid use-cases that respect this ownership\n   discipline:</p>\n\n<p>1. Creating a string by initializing and mutating a byte sequence\n   that is never changed after initialization is performed.</p>\n\n<pre class=\"codepre\"><code class=\"code\"><span class=\"keyword\">let</span> string_init len f : string =\n  <span class=\"keyword\">let</span> s = <span class=\"constructor\">Bytes</span>.create len <span class=\"keyword\">in</span>\n  <span class=\"keyword\">for</span> i = 0 <span class=\"keyword\">to</span> len - 1 <span class=\"keyword\">do</span> <span class=\"constructor\">Bytes</span>.set s i (f i) <span class=\"keyword\">done</span>;\n  <span class=\"constructor\">Bytes</span>.unsafe_to_string s\n   </code></pre>\n<p>This function is safe because the byte sequence <code class=\"code\">s</code> will never be\n   accessed or mutated after <code class=\"code\">unsafe_to_string</code> is called. The\n   <code class=\"code\">string_init</code> code gives up ownership of <code class=\"code\">s</code>, and returns the\n   ownership of the resulting string to its caller.</p>\n\n<p>Note that it would be unsafe if <code class=\"code\">s</code> was passed as an additional\n   parameter to the function <code class=\"code\">f</code> as it could escape this way and be\n   mutated in the future -- <code class=\"code\">string_init</code> would give up ownership of\n   <code class=\"code\">s</code> to pass it to <code class=\"code\">f</code>, and could not call <code class=\"code\">unsafe_to_string</code>\n   safely.</p>\n\n<p>We have provided the <a href=\"String.html#VALinit\"><code class=\"code\"><span class=\"constructor\">String</span>.init</code></a>, <a href=\"String.html#VALmap\"><code class=\"code\"><span class=\"constructor\">String</span>.map</code></a> and\n   <a href=\"String.html#VALmapi\"><code class=\"code\"><span class=\"constructor\">String</span>.mapi</code></a> functions to cover most cases of building\n   new strings. You should prefer those over <code class=\"code\">to_string</code> or\n   <code class=\"code\">unsafe_to_string</code> whenever applicable.</p>\n\n<p>2. Temporarily giving ownership of a byte sequence to a function\n   that expects a uniquely owned string and returns ownership back, so\n   that we can mutate the sequence again after the call ended.</p>\n\n<pre class=\"codepre\"><code class=\"code\"><span class=\"keyword\">let</span> bytes_length (s : bytes) =\n  <span class=\"constructor\">String</span>.length (<span class=\"constructor\">Bytes</span>.unsafe_to_string s)\n   </code></pre>\n<p>In this use-case, we do not promise that <code class=\"code\">s</code> will never be mutated\n   after the call to <code class=\"code\">bytes_length&nbsp;s</code>. The <a href=\"String.html#VALlength\"><code class=\"code\"><span class=\"constructor\">String</span>.length</code></a> function\n   temporarily borrows unique ownership of the byte sequence\n   (and sees it as a <code class=\"code\">string</code>), but returns this ownership back to\n   the caller, which may assume that <code class=\"code\">s</code> is still a valid byte\n   sequence after the call. Note that this is only correct because we\n   know that <a href=\"String.html#VALlength\"><code class=\"code\"><span class=\"constructor\">String</span>.length</code></a> does not capture its argument -- it could\n   escape by a side-channel such as a memoization combinator.</p>\n\n<p>The caller may not mutate <code class=\"code\">s</code> while the string is borrowed (it has\n   temporarily given up ownership). This affects concurrent programs,\n   but also higher-order functions: if <a href=\"String.html#VALlength\"><code class=\"code\"><span class=\"constructor\">String</span>.length</code></a> returned\n   a closure to be called later, <code class=\"code\">s</code> should not be mutated until this\n   closure is fully applied and returns ownership.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unsafe_of_string", "string -> bytes",
              "\n<div class=\"info-desc\">\n<p>Unsafely convert a shared string to a byte sequence that should\n    not be mutated.</p>\n\n<p>The same ownership discipline that makes <code class=\"code\">unsafe_to_string</code>\n    correct applies to <code class=\"code\">unsafe_of_string</code>: you may use it if you were\n    the owner of the <code class=\"code\">string</code> value, and you will own the return\n    <code class=\"code\">bytes</code> in the same mode.</p>\n\n<p>In practice, unique ownership of string values is extremely\n    difficult to reason about correctly. You should always assume\n    strings are shared, never uniquely owned.</p>\n\n<p>For example, string literals are implicitly shared by the\n    compiler, so you never uniquely own them.</p>\n\n<pre class=\"codepre\"><code class=\"code\"><span class=\"keyword\">let</span> incorrect = <span class=\"constructor\">Bytes</span>.unsafe_of_string <span class=\"string\">\"hello\"</span>\n<span class=\"keyword\">let</span> s = <span class=\"constructor\">Bytes</span>.of_string <span class=\"string\">\"hello\"</span>\n    </code></pre>\n<p>The first declaration is incorrect, because the string literal\n    <code class=\"code\"><span class=\"string\">\"hello\"</span></code> could be shared by the compiler with other parts of the\n    program, and mutating <code class=\"code\">incorrect</code> is a bug. You must always use\n    the second version, which performs a copy and is thus correct.</p>\n\n<p>Assuming unique ownership of strings that are not string\n    literals, but are (partly) built from string literals, is also\n    incorrect. For example, mutating <code class=\"code\">unsafe_of_string&nbsp;(<span class=\"string\">\"foo\"</span>&nbsp;^&nbsp;s)</code>\n    could mutate the shared string <code class=\"code\"><span class=\"string\">\"foo\"</span></code> -- assuming a rope-like\n    representation of strings. More generally, functions operating on\n    strings will assume shared ownership, they do not preserve unique\n    ownership. It is thus incorrect to assume unique ownership of the\n    result of <code class=\"code\">unsafe_of_string</code>.</p>\n\n<p>The only case we have reasonable confidence is safe is if the\n    produced <code class=\"code\">bytes</code> is shared -- used as an immutable byte\n    sequence. This is possibly useful for incremental migration of\n    low-level programs that manipulate immutable sequences of bytes\n    (for example <a href=\"Marshal.html#VALfrom_bytes\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.from_bytes</code></a>) and previously used the\n    <code class=\"code\">string</code> type for this purpose.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "t -> char Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the string, in increasing index order. Modifications of the\n    string during iteration will be reflected in the iterator.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seqi", "t -> (int * char) Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the string, in increasing order, yielding indices along chars</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "char Seq.t -> t",
              "\n<div class=\"info-desc\">\n<p>Create a string from the generator</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "BytesLabels",
    "module_info": "\n<p>Byte sequence operations.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "length", "bytes -> int",
              "\n<div class=\"info-desc\">\n<p>Return the length (number of bytes) of the argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get", "bytes -> int -> char",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">get&nbsp;s&nbsp;n</code> returns the byte at index <code class=\"code\">n</code> in argument <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is not a valid index in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set", "bytes -> int -> char -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">set&nbsp;s&nbsp;n&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing the byte at index <code class=\"code\">n</code>\n    with <code class=\"code\">c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is not a valid index in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "int -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">create&nbsp;n</code> returns a new byte sequence of length <code class=\"code\">n</code>. The\n    sequence is uninitialized and contains arbitrary bytes.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "make", "int -> char -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">make&nbsp;n&nbsp;c</code> returns a new byte sequence of length <code class=\"code\">n</code>, filled with\n    the byte <code class=\"code\">c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "init", "int -> f:(int -> char) -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">init&nbsp;n&nbsp;f</code> returns a fresh byte sequence of length <code class=\"code\">n</code>,\n    with character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "empty", "bytes",
              "\n<div class=\"info-desc\">\n<p>A byte sequence of size 0.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "copy", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a new byte sequence that contains the same bytes as the\n    argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_string", "string -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a new byte sequence that contains the same bytes as the\n    given string.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_string", "bytes -> string",
              "\n<div class=\"info-desc\">\n<p>Return a new string that contains the same bytes as the given byte\n    sequence.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub", "bytes -> pos:int -> len:int -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">sub&nbsp;s&nbsp;start&nbsp;len</code> returns a new byte sequence of length <code class=\"code\">len</code>,\n    containing the subsequence of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code>\n    and has length <code class=\"code\">len</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not designate a\n    valid range of <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub_string", "bytes -> pos:int -> len:int -> string",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">sub</code> but return a string instead of a byte sequence.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "extend", "bytes -> left:int -> right:int -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">extend&nbsp;s&nbsp;left&nbsp;right</code> returns a new byte sequence that contains\n    the bytes of <code class=\"code\">s</code>, with <code class=\"code\">left</code> uninitialized bytes prepended and\n    <code class=\"code\">right</code> uninitialized bytes appended to it. If <code class=\"code\">left</code> or <code class=\"code\">right</code>\n    is negative, then bytes are removed (instead of appended) from\n    the corresponding side of <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result length is negative or\n    longer than <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "fill", "bytes -> pos:int -> len:int -> char -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing <code class=\"code\">len</code>\n    characters with <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not designate a\n    valid range of <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit",
              "src:bytes -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from sequence\n    <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to sequence <code class=\"code\">dst</code>, starting at\n    index <code class=\"code\">dstoff</code>. It works correctly even if <code class=\"code\">src</code> and <code class=\"code\">dst</code> are the\n    same byte sequence, and the source and destination intervals\n    overlap.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">srcoff</code> and <code class=\"code\">len</code> do not\n    designate a valid range of <code class=\"code\">src</code>, or if <code class=\"code\">dstoff</code> and <code class=\"code\">len</code>\n    do not designate a valid range of <code class=\"code\">dst</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit_string",
              "src:string -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from string\n    <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to byte sequence <code class=\"code\">dst</code>,\n    starting at index <code class=\"code\">dstoff</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">srcoff</code> and <code class=\"code\">len</code> do not\n    designate a valid range of <code class=\"code\">src</code>, or if <code class=\"code\">dstoff</code> and <code class=\"code\">len</code>\n    do not designate a valid range of <code class=\"code\">dst</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "concat", "sep:bytes -> bytes list -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">concat&nbsp;sep&nbsp;sl</code> concatenates the list of byte sequences <code class=\"code\">sl</code>,\n    inserting the separator byte sequence <code class=\"code\">sep</code> between each, and\n    returns the result as a new byte sequence.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "cat", "bytes -> bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">cat&nbsp;s1&nbsp;s2</code> concatenates <code class=\"code\">s1</code> and <code class=\"code\">s2</code> and returns the result\n     as new byte sequence.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result is longer than\n    <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "f:(char -> unit) -> bytes -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code>.\n    It is equivalent to <code class=\"code\">f&nbsp;(get&nbsp;s&nbsp;0);&nbsp;f&nbsp;(get&nbsp;s&nbsp;1);&nbsp;...;&nbsp;f&nbsp;(get&nbsp;s<br>\n&nbsp;&nbsp;&nbsp;&nbsp;(length&nbsp;s&nbsp;-&nbsp;1));&nbsp;()</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iteri", "f:(int -> char -> unit) -> bytes -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Bytes.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.iter</code></a>, but the function is applied to the index of\n    the byte as first argument and the byte itself as second\n    argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "f:(char -> char) -> bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code> and\n    stores the resulting bytes in a new sequence that is returned as\n    the result.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mapi", "f:(int -> char -> char) -> bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its\n    index (in increasing index order) and stores the resulting bytes\n    in a new sequence that is returned as the result.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "trim", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, without leading and trailing\n    whitespace. The bytes regarded as whitespace are the ASCII\n    characters <code class=\"code\"><span class=\"string\">'&nbsp;'</span></code>, <code class=\"code\"><span class=\"string\">'\\012'</span></code>, <code class=\"code\"><span class=\"string\">'\\n'</span></code>, <code class=\"code\"><span class=\"string\">'\\r'</span></code>, and <code class=\"code\"><span class=\"string\">'\\t'</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "escaped", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with special characters represented\n    by escape sequences, following the lexical conventions of OCaml.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index", "bytes -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">index&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index_opt", "bytes -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">index_opt&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex", "bytes -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rindex&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_opt", "bytes -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "index_from", "bytes -> int -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the first occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.  <code class=\"code\"><span class=\"constructor\">Bytes</span>.index&nbsp;s&nbsp;c</code> is\n    equivalent to <code class=\"code\"><span class=\"constructor\">Bytes</span>.index_from&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.\n    Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index_from_opt", "bytes -> int -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">index_from&nbsp;_opts&nbsp;i&nbsp;c</code> returns the index of the first occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.\n    <code class=\"code\"><span class=\"constructor\">Bytes</span>.index_opt&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">Bytes</span>.index_from_opt&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_from", "bytes -> int -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.  <code class=\"code\">rindex&nbsp;s&nbsp;c</code> is equivalent\n    to <code class=\"code\">rindex_from&nbsp;s&nbsp;(<span class=\"constructor\">Bytes</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.\n    Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_from_opt", "bytes -> int -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence\n    of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not\n    occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.  <code class=\"code\">rindex_opt&nbsp;s&nbsp;c</code> is equivalent to\n    <code class=\"code\">rindex_from&nbsp;s&nbsp;(<span class=\"constructor\">Bytes</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "contains", "bytes -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">contains&nbsp;s&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "contains_from", "bytes -> int -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> after\n    position <code class=\"code\">start</code>.  <code class=\"code\">contains&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\">contains_from<br>\n&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rcontains_from", "bytes -> int -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> before\n    position <code class=\"code\">stop+1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">stop&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">stop+1</code> is not a valid\n    position in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uppercase", "bytes -> bytes",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lowercase", "bytes -> bytes",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "capitalize", "bytes -> bytes",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uncapitalize", "bytes -> bytes",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uppercase_ascii", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "lowercase_ascii", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "capitalize_ascii", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "uncapitalize_ascii", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", "= bytes", null,
              "\n<div class=\"info-desc\">\n<p>An alias for the type of byte sequences.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>The comparison function for byte sequences, with the same\n    specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>,\n    this function <code class=\"code\">compare</code> allows the module <code class=\"code\"><span class=\"constructor\">Bytes</span></code> to be passed as\n    argument to the functors <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p>The equality function for byte sequences.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "t -> char Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the string, in increasing index order. Modifications of the\n    string during iteration will be reflected in the iterator.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seqi", "t -> (int * char) Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the string, in increasing order, yielding indices along chars</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "char Seq.t -> t",
              "\n<div class=\"info-desc\">\n<p>Create a string from the generator</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Callback",
    "module_info":
      "\n<p>Registering OCaml values with the C runtime.</p>\n\n<p>This module allows OCaml values to be registered with the C runtime\n   under a symbolic name, so that C code can later call back registered\n   OCaml functions, or raise registered OCaml exceptions.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "register", "string -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Callback</span>.register&nbsp;n&nbsp;v</code> registers the value <code class=\"code\">v</code> under\n   the name <code class=\"code\">n</code>. C code can later retrieve a handle to <code class=\"code\">v</code>\n   by calling <code class=\"code\">caml_named_value(n)</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "register_exception", "string -> exn -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Callback</span>.register_exception&nbsp;n&nbsp;exn</code> registers the\n   exception contained in the exception value <code class=\"code\">exn</code>\n   under the name <code class=\"code\">n</code>. C code can later retrieve a handle to\n   the exception by calling <code class=\"code\">caml_named_value(n)</code>. The exception\n   value thus obtained is suitable for passing as first argument\n   to <code class=\"code\">raise_constant</code> or <code class=\"code\">raise_with_arg</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "CamlinternalFormat",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "is_in_char_set",
              "CamlinternalFormatBasics.char_set -> char -> bool", null
            ]
          ],
          [
            "Function",
            [
              "rev_char_set",
              "CamlinternalFormatBasics.char_set -> CamlinternalFormatBasics.char_set",
              null
            ]
          ],
          [ "Typevariant", [ "mutable_char_set", "= bytes", null, null ] ],
          [
            "Function",
            [ "create_char_set", "unit -> mutable_char_set", null ]
          ],
          [
            "Function",
            [ "add_in_char_set", "mutable_char_set -> char -> unit", null ]
          ],
          [
            "Function",
            [
              "freeze_char_set",
              "mutable_char_set -> CamlinternalFormatBasics.char_set", null
            ]
          ],
          [
            "Typevariant",
            [
              "('a, 'b, 'c, 'd, 'e, 'f)", "param_format_ebb =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTparam_format_ebb.Param_format_EBB\"><span class=\"constructor\">Param_format_EBB</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('x -&gt; 'a0, 'b0, 'c0, 'd0, 'e0, 'f0) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">CamlinternalFormatBasics.fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a0, 'b0, 'c0, 'd0, 'e0, 'f0) <a href=\"CamlinternalFormat.html#TYPEparam_format_ebb\">param_format_ebb</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "param_format_of_ignored_format",
              "('a, 'b, 'c, 'd, 'y, 'x) CamlinternalFormatBasics.ignored -> ('x, 'b, 'c, 'y, 'e, 'f) CamlinternalFormatBasics.fmt -> ('a, 'b, 'c, 'd, 'e, 'f) param_format_ebb",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "('b, 'c)", "acc_formatting_gen =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTacc_formatting_gen.Acc_open_tag\"><span class=\"constructor\">Acc_open_tag</span></span> <span class=\"keyword\">of</span> <code class=\"type\">('b, 'c) <a href=\"CamlinternalFormat.html#TYPEacc\">acc</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTacc_formatting_gen.Acc_open_box\"><span class=\"constructor\">Acc_open_box</span></span> <span class=\"keyword\">of</span> <code class=\"type\">('b, 'c) <a href=\"CamlinternalFormat.html#TYPEacc\">acc</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "('b, 'c)", "acc =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTacc.Acc_formatting_lit\"><span class=\"constructor\">Acc_formatting_lit</span></span> <span class=\"keyword\">of</span> <code class=\"type\">('b, 'c) <a href=\"CamlinternalFormat.html#TYPEacc\">acc</a> * <a href=\"CamlinternalFormatBasics.html#TYPEformatting_lit\">CamlinternalFormatBasics.formatting_lit</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTacc.Acc_formatting_gen\"><span class=\"constructor\">Acc_formatting_gen</span></span> <span class=\"keyword\">of</span> <code class=\"type\">('b, 'c) <a href=\"CamlinternalFormat.html#TYPEacc\">acc</a><br>        * ('b, 'c) <a href=\"CamlinternalFormat.html#TYPEacc_formatting_gen\">acc_formatting_gen</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTacc.Acc_string_literal\"><span class=\"constructor\">Acc_string_literal</span></span> <span class=\"keyword\">of</span> <code class=\"type\">('b, 'c) <a href=\"CamlinternalFormat.html#TYPEacc\">acc</a> * string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTacc.Acc_char_literal\"><span class=\"constructor\">Acc_char_literal</span></span> <span class=\"keyword\">of</span> <code class=\"type\">('b, 'c) <a href=\"CamlinternalFormat.html#TYPEacc\">acc</a> * char</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTacc.Acc_data_string\"><span class=\"constructor\">Acc_data_string</span></span> <span class=\"keyword\">of</span> <code class=\"type\">('b, 'c) <a href=\"CamlinternalFormat.html#TYPEacc\">acc</a> * string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTacc.Acc_data_char\"><span class=\"constructor\">Acc_data_char</span></span> <span class=\"keyword\">of</span> <code class=\"type\">('b, 'c) <a href=\"CamlinternalFormat.html#TYPEacc\">acc</a> * char</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTacc.Acc_delay\"><span class=\"constructor\">Acc_delay</span></span> <span class=\"keyword\">of</span> <code class=\"type\">('b, 'c) <a href=\"CamlinternalFormat.html#TYPEacc\">acc</a> * ('b -&gt; 'c)</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTacc.Acc_flush\"><span class=\"constructor\">Acc_flush</span></span> <span class=\"keyword\">of</span> <code class=\"type\">('b, 'c) <a href=\"CamlinternalFormat.html#TYPEacc\">acc</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTacc.Acc_invalid_arg\"><span class=\"constructor\">Acc_invalid_arg</span></span> <span class=\"keyword\">of</span> <code class=\"type\">('b, 'c) <a href=\"CamlinternalFormat.html#TYPEacc\">acc</a> * string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTacc.End_of_acc\"><span class=\"constructor\">End_of_acc</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "('a, 'b)", "heter_list =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTheter_list.Cons\"><span class=\"constructor\">Cons</span></span> <span class=\"keyword\">:</span> <code class=\"type\">'c * ('a0, 'b0) <a href=\"CamlinternalFormat.html#TYPEheter_list\">heter_list</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('c -&gt; 'a0, 'b0) <a href=\"CamlinternalFormat.html#TYPEheter_list\">heter_list</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTheter_list.Nil\"><span class=\"constructor\">Nil</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('b1, 'b1) <a href=\"CamlinternalFormat.html#TYPEheter_list\">heter_list</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "('b, 'c, 'e, 'f)", "fmt_ebb =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt_ebb.Fmt_EBB\"><span class=\"constructor\">Fmt_EBB</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a, 'b0, 'c0, 'd, 'e0, 'f0) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">CamlinternalFormatBasics.fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('b0, 'c0, 'e0, 'f0) <a href=\"CamlinternalFormat.html#TYPEfmt_ebb\">fmt_ebb</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "make_printf",
              "('b -> ('b, 'c) acc -> 'd) -> 'b -> ('b, 'c) acc -> ('a, 'b, 'c, 'c, 'c, 'd) CamlinternalFormatBasics.fmt -> 'a",
              null
            ]
          ],
          [
            "Function",
            [
              "make_iprintf",
              "('b -> 'f) -> 'b -> ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmt -> 'a",
              null
            ]
          ],
          [
            "Function",
            [
              "output_acc",
              "out_channel -> ( out_channel , unit) acc -> unit", null
            ]
          ],
          [
            "Function",
            [
              "bufput_acc", "Buffer.t -> ( Buffer.t , unit) acc -> unit",
              null
            ]
          ],
          [
            "Function",
            [ "strput_acc", "Buffer.t -> (unit, string) acc -> unit", null ]
          ],
          [
            "Function",
            [
              "type_format",
              "('x, 'b, 'c, 't, 'u, 'v) CamlinternalFormatBasics.fmt -> ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmtty -> ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmt",
              null
            ]
          ],
          [
            "Function",
            [
              "fmt_ebb_of_string",
              "?legacy_behavior:bool -> string -> ('b, 'c, 'e, 'f) fmt_ebb",
              null
            ]
          ],
          [
            "Function",
            [
              "format_of_string_fmtty",
              "string -> ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmtty -> ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.format6",
              null
            ]
          ],
          [
            "Function",
            [
              "format_of_string_format",
              "string -> ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.format6 -> ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.format6",
              null
            ]
          ],
          [
            "Function",
            [
              "char_of_iconv", "CamlinternalFormatBasics.int_conv -> char",
              null
            ]
          ],
          [
            "Function",
            [
              "string_of_formatting_lit",
              "CamlinternalFormatBasics.formatting_lit -> string", null
            ]
          ],
          [
            "Function",
            [
              "string_of_formatting_gen",
              "('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.formatting_gen -> string",
              null
            ]
          ],
          [
            "Function",
            [
              "string_of_fmtty",
              "('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmtty -> string",
              null
            ]
          ],
          [
            "Function",
            [
              "string_of_fmt",
              "('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmt -> string",
              null
            ]
          ],
          [
            "Function",
            [
              "open_box_of_string",
              "string -> int * CamlinternalFormatBasics.block_type", null
            ]
          ],
          [
            "Function",
            [
              "symm",
              "('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) CamlinternalFormatBasics.fmtty_rel -> ('a2, 'b2, 'c2, 'd2, 'e2, 'f2, 'a1, 'b1, 'c1, 'd1, 'e1, 'f1) CamlinternalFormatBasics.fmtty_rel",
              null
            ]
          ],
          [
            "Function",
            [
              "trans",
              "('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) CamlinternalFormatBasics.fmtty_rel -> ('a2, 'b2, 'c2, 'd2, 'e2, 'f2, 'a3, 'b3, 'c3, 'd3, 'e3, 'f3) CamlinternalFormatBasics.fmtty_rel -> ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a3, 'b3, 'c3, 'd3, 'e3, 'f3) CamlinternalFormatBasics.fmtty_rel",
              null
            ]
          ],
          [
            "Function",
            [
              "recast",
              "('a1, 'b1, 'c1, 'd1, 'e1, 'f1) CamlinternalFormatBasics.fmt -> ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) CamlinternalFormatBasics.fmtty_rel -> ('a2, 'b2, 'c2, 'd2, 'e2, 'f2) CamlinternalFormatBasics.fmt",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "CamlinternalFormatBasics",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "padty", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpadty.Left\"><span class=\"constructor\">Left</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpadty.Right\"><span class=\"constructor\">Right</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpadty.Zeros\"><span class=\"constructor\">Zeros</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "int_conv", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint_conv.Int_d\"><span class=\"constructor\">Int_d</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint_conv.Int_pd\"><span class=\"constructor\">Int_pd</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint_conv.Int_sd\"><span class=\"constructor\">Int_sd</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint_conv.Int_i\"><span class=\"constructor\">Int_i</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint_conv.Int_pi\"><span class=\"constructor\">Int_pi</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint_conv.Int_si\"><span class=\"constructor\">Int_si</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint_conv.Int_x\"><span class=\"constructor\">Int_x</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint_conv.Int_Cx\"><span class=\"constructor\">Int_Cx</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint_conv.Int_X\"><span class=\"constructor\">Int_X</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint_conv.Int_CX\"><span class=\"constructor\">Int_CX</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint_conv.Int_o\"><span class=\"constructor\">Int_o</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint_conv.Int_Co\"><span class=\"constructor\">Int_Co</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTint_conv.Int_u\"><span class=\"constructor\">Int_u</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "float_conv", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_f\"><span class=\"constructor\">Float_f</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_pf\"><span class=\"constructor\">Float_pf</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_sf\"><span class=\"constructor\">Float_sf</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_e\"><span class=\"constructor\">Float_e</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_pe\"><span class=\"constructor\">Float_pe</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_se\"><span class=\"constructor\">Float_se</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_E\"><span class=\"constructor\">Float_E</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_pE\"><span class=\"constructor\">Float_pE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_sE\"><span class=\"constructor\">Float_sE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_g\"><span class=\"constructor\">Float_g</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_pg\"><span class=\"constructor\">Float_pg</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_sg\"><span class=\"constructor\">Float_sg</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_G\"><span class=\"constructor\">Float_G</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_pG\"><span class=\"constructor\">Float_pG</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_sG\"><span class=\"constructor\">Float_sG</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_F\"><span class=\"constructor\">Float_F</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_h\"><span class=\"constructor\">Float_h</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_ph\"><span class=\"constructor\">Float_ph</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_sh\"><span class=\"constructor\">Float_sh</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_H\"><span class=\"constructor\">Float_H</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_pH\"><span class=\"constructor\">Float_pH</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfloat_conv.Float_sH\"><span class=\"constructor\">Float_sH</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Typevariant", [ "char_set", "= string", null, null ] ],
          [
            "Typevariant",
            [
              "counter", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcounter.Line_counter\"><span class=\"constructor\">Line_counter</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcounter.Char_counter\"><span class=\"constructor\">Char_counter</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcounter.Token_counter\"><span class=\"constructor\">Token_counter</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "('a, 'b)", "padding =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpadding.No_padding\"><span class=\"constructor\">No_padding</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a0, 'a0) <a href=\"CamlinternalFormatBasics.html#TYPEpadding\">padding</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpadding.Lit_padding\"><span class=\"constructor\">Lit_padding</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEpadty\">padty</a> * int</code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a1, 'a1) <a href=\"CamlinternalFormatBasics.html#TYPEpadding\">padding</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpadding.Arg_padding\"><span class=\"constructor\">Arg_padding</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEpadty\">padty</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(int -&gt; 'a2, 'a2) <a href=\"CamlinternalFormatBasics.html#TYPEpadding\">padding</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Typevariant", [ "pad_option", "= int option", null, null ] ],
          [
            "Typevariant",
            [
              "('a, 'b)", "precision =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprecision.No_precision\"><span class=\"constructor\">No_precision</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a0, 'a0) <a href=\"CamlinternalFormatBasics.html#TYPEprecision\">precision</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprecision.Lit_precision\"><span class=\"constructor\">Lit_precision</span></span> <span class=\"keyword\">:</span> <code class=\"type\">int</code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a1, 'a1) <a href=\"CamlinternalFormatBasics.html#TYPEprecision\">precision</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprecision.Arg_precision\"><span class=\"constructor\">Arg_precision</span></span> <span class=\"keyword\">:</span> <code class=\"type\">(int -&gt; 'a2, 'a2) <a href=\"CamlinternalFormatBasics.html#TYPEprecision\">precision</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Typevariant", [ "prec_option", "= int option", null, null ] ],
          [
            "Typevariant",
            [
              "('a, 'b, 'c)", "custom_arity =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcustom_arity.Custom_zero\"><span class=\"constructor\">Custom_zero</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a0, string, 'a0) <a href=\"CamlinternalFormatBasics.html#TYPEcustom_arity\">custom_arity</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcustom_arity.Custom_succ\"><span class=\"constructor\">Custom_succ</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a1, 'b0, 'c0) <a href=\"CamlinternalFormatBasics.html#TYPEcustom_arity\">custom_arity</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a1, 'x -&gt; 'b0, 'x -&gt; 'c0) <a href=\"CamlinternalFormatBasics.html#TYPEcustom_arity\">custom_arity</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "block_type", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTblock_type.Pp_hbox\"><span class=\"constructor\">Pp_hbox</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTblock_type.Pp_vbox\"><span class=\"constructor\">Pp_vbox</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTblock_type.Pp_hvbox\"><span class=\"constructor\">Pp_hvbox</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTblock_type.Pp_hovbox\"><span class=\"constructor\">Pp_hovbox</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTblock_type.Pp_box\"><span class=\"constructor\">Pp_box</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTblock_type.Pp_fits\"><span class=\"constructor\">Pp_fits</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "formatting_lit", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatting_lit.Close_box\"><span class=\"constructor\">Close_box</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatting_lit.Close_tag\"><span class=\"constructor\">Close_tag</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatting_lit.Break\"><span class=\"constructor\">Break</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * int * int</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatting_lit.FFlush\"><span class=\"constructor\">FFlush</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatting_lit.Force_newline\"><span class=\"constructor\">Force_newline</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatting_lit.Flush_newline\"><span class=\"constructor\">Flush_newline</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatting_lit.Magic_size\"><span class=\"constructor\">Magic_size</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * int</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatting_lit.Escaped_at\"><span class=\"constructor\">Escaped_at</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatting_lit.Escaped_percent\"><span class=\"constructor\">Escaped_percent</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatting_lit.Scan_indic\"><span class=\"constructor\">Scan_indic</span></span> <span class=\"keyword\">of</span> <code class=\"type\">char</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "('a, 'b, 'c, 'd, 'e, 'f)", "formatting_gen =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatting_gen.Open_tag\"><span class=\"constructor\">Open_tag</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a0, 'b0, 'c0, 'd0, 'e0, 'f0) <a href=\"CamlinternalFormatBasics.html#TYPEformat6\">format6</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a0, 'b0, 'c0, 'd0, 'e0, 'f0) <a href=\"CamlinternalFormatBasics.html#TYPEformatting_gen\">formatting_gen</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatting_gen.Open_box\"><span class=\"constructor\">Open_box</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a1, 'b1, 'c1, 'd1, 'e1, 'f1) <a href=\"CamlinternalFormatBasics.html#TYPEformat6\">format6</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a1, 'b1, 'c1, 'd1, 'e1, 'f1) <a href=\"CamlinternalFormatBasics.html#TYPEformatting_gen\">formatting_gen</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "('a, 'b, 'c, 'd, 'e, 'f)",
              "fmtty = ('a, 'b, 'c, 'd, 'e, 'f, 'a, 'b, 'c, 'd, 'e, 'f) fmtty_rel",
              null, null
            ]
          ],
          [
            "Typevariant",
            [
              "('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)",
              "fmtty_rel =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmtty_rel.Char_ty\"><span class=\"constructor\">Char_ty</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a10, 'b10, 'c10, 'd10, 'e10, 'f10, 'a20, 'b20, 'c20, 'd20, 'e20, 'f20)<br>     <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(char -&gt; 'a10, 'b10, 'c10, 'd10, 'e10, 'f10, char -&gt; 'a20, 'b20, 'c20, 'd20,<br>        'e20, 'f20)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmtty_rel.String_ty\"><span class=\"constructor\">String_ty</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a11, 'b11, 'c11, 'd11, 'e11, 'f11, 'a21, 'b21, 'c21, 'd21, 'e21, 'f21)<br>     <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(string -&gt; 'a11, 'b11, 'c11, 'd11, 'e11, 'f11, string -&gt; 'a21, 'b21, 'c21,<br>        'd21, 'e21, 'f21)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmtty_rel.Int_ty\"><span class=\"constructor\">Int_ty</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a12, 'b12, 'c12, 'd12, 'e12, 'f12, 'a22, 'b22, 'c22, 'd22, 'e22, 'f22)<br>     <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(int -&gt; 'a12, 'b12, 'c12, 'd12, 'e12, 'f12, int -&gt; 'a22, 'b22, 'c22, 'd22,<br>        'e22, 'f22)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmtty_rel.Int32_ty\"><span class=\"constructor\">Int32_ty</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a13, 'b13, 'c13, 'd13, 'e13, 'f13, 'a23, 'b23, 'c23, 'd23, 'e23, 'f23)<br>     <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(int32 -&gt; 'a13, 'b13, 'c13, 'd13, 'e13, 'f13, int32 -&gt; 'a23, 'b23, 'c23,<br>        'd23, 'e23, 'f23)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmtty_rel.Nativeint_ty\"><span class=\"constructor\">Nativeint_ty</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a14, 'b14, 'c14, 'd14, 'e14, 'f14, 'a24, 'b24, 'c24, 'd24, 'e24, 'f24)<br>     <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(nativeint -&gt; 'a14, 'b14, 'c14, 'd14, 'e14, 'f14, nativeint -&gt; 'a24, 'b24,<br>        'c24, 'd24, 'e24, 'f24)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmtty_rel.Int64_ty\"><span class=\"constructor\">Int64_ty</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a15, 'b15, 'c15, 'd15, 'e15, 'f15, 'a25, 'b25, 'c25, 'd25, 'e25, 'f25)<br>     <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(int64 -&gt; 'a15, 'b15, 'c15, 'd15, 'e15, 'f15, int64 -&gt; 'a25, 'b25, 'c25,<br>        'd25, 'e25, 'f25)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmtty_rel.Float_ty\"><span class=\"constructor\">Float_ty</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a16, 'b16, 'c16, 'd16, 'e16, 'f16, 'a26, 'b26, 'c26, 'd26, 'e26, 'f26)<br>     <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(float -&gt; 'a16, 'b16, 'c16, 'd16, 'e16, 'f16, float -&gt; 'a26, 'b26, 'c26,<br>        'd26, 'e26, 'f26)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmtty_rel.Bool_ty\"><span class=\"constructor\">Bool_ty</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a17, 'b17, 'c17, 'd17, 'e17, 'f17, 'a27, 'b27, 'c27, 'd27, 'e27, 'f27)<br>     <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(bool -&gt; 'a17, 'b17, 'c17, 'd17, 'e17, 'f17, bool -&gt; 'a27, 'b27, 'c27, 'd27,<br>        'e27, 'f27)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmtty_rel.Format_arg_ty\"><span class=\"constructor\">Format_arg_ty</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('g, 'h, 'i, 'j, 'k, 'l) <a href=\"CamlinternalFormatBasics.html#TYPEfmtty\">fmtty</a><br>        * ('a18, 'b18, 'c18, 'd18, 'e18, 'f18, 'a28, 'b28, 'c28, 'd28, 'e28, 'f28)<br>          <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(('g, 'h, 'i, 'j, 'k, 'l) <a href=\"CamlinternalFormatBasics.html#TYPEformat6\">format6</a> -&gt; 'a18, 'b18,<br>        'c18, 'd18, 'e18, 'f18,<br>        ('g, 'h, 'i, 'j, 'k, 'l) <a href=\"CamlinternalFormatBasics.html#TYPEformat6\">format6</a> -&gt; 'a28, 'b28,<br>        'c28, 'd28, 'e28, 'f28)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmtty_rel.Format_subst_ty\"><span class=\"constructor\">Format_subst_ty</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('g0, 'h0, 'i0, 'j0, 'k0, 'l0, 'g1, 'b19, 'c19, 'j1, 'd19, 'a19)<br>     <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a><br>        * ('g0, 'h0, 'i0, 'j0, 'k0, 'l0, 'g2, 'b29, 'c29, 'j2, 'd29, 'a29)<br>          <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a><br>        * ('a19, 'b19, 'c19, 'd19, 'e19, 'f19, 'a29, 'b29, 'c29, 'd29, 'e29, 'f29)<br>          <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(('g0, 'h0, 'i0, 'j0, 'k0, 'l0) <a href=\"CamlinternalFormatBasics.html#TYPEformat6\">format6</a> -&gt; 'g1,<br>        'b19, 'c19, 'j1, 'e19, 'f19,<br>        ('g0, 'h0, 'i0, 'j0, 'k0, 'l0) <a href=\"CamlinternalFormatBasics.html#TYPEformat6\">format6</a> -&gt; 'g2,<br>        'b29, 'c29, 'j2, 'e29, 'f29)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmtty_rel.Alpha_ty\"><span class=\"constructor\">Alpha_ty</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a110, 'b110, 'c110, 'd110, 'e110, 'f110, 'a210, 'b210, 'c210, 'd210, 'e210,<br>      'f210)<br>     <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(('b110 -&gt; 'x -&gt; 'c110) -&gt; 'x -&gt; 'a110, 'b110, 'c110, 'd110, 'e110, 'f110,<br>        ('b210 -&gt; 'x -&gt; 'c210) -&gt; 'x -&gt; 'a210, 'b210, 'c210, 'd210, 'e210, 'f210)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmtty_rel.Theta_ty\"><span class=\"constructor\">Theta_ty</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a111, 'b111, 'c111, 'd111, 'e111, 'f111, 'a211, 'b211, 'c211, 'd211, 'e211,<br>      'f211)<br>     <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(('b111 -&gt; 'c111) -&gt; 'a111, 'b111, 'c111, 'd111, 'e111, 'f111,<br>        ('b211 -&gt; 'c211) -&gt; 'a211, 'b211, 'c211, 'd211, 'e211, 'f211)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmtty_rel.Any_ty\"><span class=\"constructor\">Any_ty</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a112, 'b112, 'c112, 'd112, 'e112, 'f112, 'a212, 'b212, 'c212, 'd212, 'e212,<br>      'f212)<br>     <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('x0 -&gt; 'a112, 'b112, 'c112, 'd112, 'e112, 'f112, 'x0 -&gt; 'a212, 'b212, 'c212,<br>        'd212, 'e212, 'f212)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmtty_rel.Reader_ty\"><span class=\"constructor\">Reader_ty</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a113, 'b113, 'c113, 'd113, 'e113, 'f113, 'a213, 'b213, 'c213, 'd213, 'e213,<br>      'f213)<br>     <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('x1 -&gt; 'a113, 'b113, 'c113, ('b113 -&gt; 'x1) -&gt; 'd113, 'e113, 'f113,<br>        'x1 -&gt; 'a213, 'b213, 'c213, ('b213 -&gt; 'x1) -&gt; 'd213, 'e213, 'f213)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmtty_rel.Ignored_reader_ty\"><span class=\"constructor\">Ignored_reader_ty</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a114, 'b114, 'c114, 'd114, 'e114, 'f114, 'a214, 'b214, 'c214, 'd214, 'e214,<br>      'f214)<br>     <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a114, 'b114, 'c114, ('b114 -&gt; 'x2) -&gt; 'd114, 'e114, 'f114, 'a214, 'b214,<br>        'c214, ('b214 -&gt; 'x2) -&gt; 'd214, 'e214, 'f214)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmtty_rel.End_of_fmtty\"><span class=\"constructor\">End_of_fmtty</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('f115, 'b115, 'c115, 'd115, 'd115, 'f115, 'f215, 'b215, 'c215, 'd215, 'd215,<br>        'f215)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "('a, 'b, 'c, 'd, 'e, 'f)", "fmt =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Char\"><span class=\"constructor\">Char</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a0, 'b0, 'c0, 'd0, 'e0, 'f0) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(char -&gt; 'a0, 'b0, 'c0, 'd0, 'e0, 'f0) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Caml_char\"><span class=\"constructor\">Caml_char</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a1, 'b1, 'c1, 'd1, 'e1, 'f1) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(char -&gt; 'a1, 'b1, 'c1, 'd1, 'e1, 'f1) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.String\"><span class=\"constructor\">String</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('x, string -&gt; 'a2) <a href=\"CamlinternalFormatBasics.html#TYPEpadding\">padding</a><br>        * ('a2, 'b2, 'c2, 'd2, 'e2, 'f2) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('x, 'b2, 'c2, 'd2, 'e2, 'f2) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Caml_string\"><span class=\"constructor\">Caml_string</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('x0, string -&gt; 'a3) <a href=\"CamlinternalFormatBasics.html#TYPEpadding\">padding</a><br>        * ('a3, 'b3, 'c3, 'd3, 'e3, 'f3) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('x0, 'b3, 'c3, 'd3, 'e3, 'f3) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Int\"><span class=\"constructor\">Int</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEint_conv\">int_conv</a><br>        * ('x1, 'y) <a href=\"CamlinternalFormatBasics.html#TYPEpadding\">padding</a><br>        * ('y, int -&gt; 'a4) <a href=\"CamlinternalFormatBasics.html#TYPEprecision\">precision</a><br>        * ('a4, 'b4, 'c4, 'd4, 'e4, 'f4) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('x1, 'b4, 'c4, 'd4, 'e4, 'f4) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Int32\"><span class=\"constructor\">Int32</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEint_conv\">int_conv</a><br>        * ('x2, 'y0) <a href=\"CamlinternalFormatBasics.html#TYPEpadding\">padding</a><br>        * ('y0, int32 -&gt; 'a5) <a href=\"CamlinternalFormatBasics.html#TYPEprecision\">precision</a><br>        * ('a5, 'b5, 'c5, 'd5, 'e5, 'f5) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('x2, 'b5, 'c5, 'd5, 'e5, 'f5) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Nativeint\"><span class=\"constructor\">Nativeint</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEint_conv\">int_conv</a><br>        * ('x3, 'y1) <a href=\"CamlinternalFormatBasics.html#TYPEpadding\">padding</a><br>        * ('y1, nativeint -&gt; 'a6) <a href=\"CamlinternalFormatBasics.html#TYPEprecision\">precision</a><br>        * ('a6, 'b6, 'c6, 'd6, 'e6, 'f6) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('x3, 'b6, 'c6, 'd6, 'e6, 'f6) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Int64\"><span class=\"constructor\">Int64</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEint_conv\">int_conv</a><br>        * ('x4, 'y2) <a href=\"CamlinternalFormatBasics.html#TYPEpadding\">padding</a><br>        * ('y2, int64 -&gt; 'a7) <a href=\"CamlinternalFormatBasics.html#TYPEprecision\">precision</a><br>        * ('a7, 'b7, 'c7, 'd7, 'e7, 'f7) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('x4, 'b7, 'c7, 'd7, 'e7, 'f7) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Float\"><span class=\"constructor\">Float</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEfloat_conv\">float_conv</a><br>        * ('x5, 'y3) <a href=\"CamlinternalFormatBasics.html#TYPEpadding\">padding</a><br>        * ('y3, float -&gt; 'a8) <a href=\"CamlinternalFormatBasics.html#TYPEprecision\">precision</a><br>        * ('a8, 'b8, 'c8, 'd8, 'e8, 'f8) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('x5, 'b8, 'c8, 'd8, 'e8, 'f8) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Bool\"><span class=\"constructor\">Bool</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('x6, bool -&gt; 'a9) <a href=\"CamlinternalFormatBasics.html#TYPEpadding\">padding</a><br>        * ('a9, 'b9, 'c9, 'd9, 'e9, 'f9) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('x6, 'b9, 'c9, 'd9, 'e9, 'f9) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Flush\"><span class=\"constructor\">Flush</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a10, 'b10, 'c10, 'd10, 'e10, 'f10) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a10, 'b10, 'c10, 'd10, 'e10, 'f10) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.String_literal\"><span class=\"constructor\">String_literal</span></span> <span class=\"keyword\">:</span> <code class=\"type\">string * ('a11, 'b11, 'c11, 'd11, 'e11, 'f11) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a11, 'b11, 'c11, 'd11, 'e11, 'f11) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Char_literal\"><span class=\"constructor\">Char_literal</span></span> <span class=\"keyword\">:</span> <code class=\"type\">char * ('a12, 'b12, 'c12, 'd12, 'e12, 'f12) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a12, 'b12, 'c12, 'd12, 'e12, 'f12) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Format_arg\"><span class=\"constructor\">Format_arg</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEpad_option\">pad_option</a><br>        * ('g, 'h, 'i, 'j, 'k, 'l) <a href=\"CamlinternalFormatBasics.html#TYPEfmtty\">fmtty</a><br>        * ('a13, 'b13, 'c13, 'd13, 'e13, 'f13) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(('g, 'h, 'i, 'j, 'k, 'l) <a href=\"CamlinternalFormatBasics.html#TYPEformat6\">format6</a> -&gt; 'a13, 'b13,<br>        'c13, 'd13, 'e13, 'f13)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Format_subst\"><span class=\"constructor\">Format_subst</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEpad_option\">pad_option</a><br>        * ('g0, 'h0, 'i0, 'j0, 'k0, 'l0, 'g2, 'b14, 'c14, 'j2, 'd14, 'a14)<br>          <a href=\"CamlinternalFormatBasics.html#TYPEfmtty_rel\">fmtty_rel</a><br>        * ('a14, 'b14, 'c14, 'd14, 'e14, 'f14) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(('g0, 'h0, 'i0, 'j0, 'k0, 'l0) <a href=\"CamlinternalFormatBasics.html#TYPEformat6\">format6</a> -&gt; 'g2,<br>        'b14, 'c14, 'j2, 'e14, 'f14)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Alpha\"><span class=\"constructor\">Alpha</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a15, 'b15, 'c15, 'd15, 'e15, 'f15) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(('b15 -&gt; 'x7 -&gt; 'c15) -&gt; 'x7 -&gt; 'a15, 'b15, 'c15, 'd15, 'e15, 'f15)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Theta\"><span class=\"constructor\">Theta</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a16, 'b16, 'c16, 'd16, 'e16, 'f16) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(('b16 -&gt; 'c16) -&gt; 'a16, 'b16, 'c16, 'd16, 'e16, 'f16)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Formatting_lit\"><span class=\"constructor\">Formatting_lit</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEformatting_lit\">formatting_lit</a><br>        * ('a17, 'b17, 'c17, 'd17, 'e17, 'f17) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a17, 'b17, 'c17, 'd17, 'e17, 'f17) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Formatting_gen\"><span class=\"constructor\">Formatting_gen</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a18, 'b18, 'c18, 'd18, 'e18, 'f18) <a href=\"CamlinternalFormatBasics.html#TYPEformatting_gen\">formatting_gen</a><br>        * ('f18, 'b18, 'c18, 'e18, 'e20, 'f20) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a18, 'b18, 'c18, 'd18, 'e20, 'f20) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Reader\"><span class=\"constructor\">Reader</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a19, 'b19, 'c19, 'd19, 'e19, 'f19) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('x8 -&gt; 'a19, 'b19, 'c19, ('b19 -&gt; 'x8) -&gt; 'd19, 'e19, 'f19)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Scan_char_set\"><span class=\"constructor\">Scan_char_set</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEpad_option\">pad_option</a> * <a href=\"CamlinternalFormatBasics.html#TYPEchar_set\">char_set</a><br>        * ('a20, 'b20, 'c20, 'd20, 'e21, 'f21) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(string -&gt; 'a20, 'b20, 'c20, 'd20, 'e21, 'f21) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Scan_get_counter\"><span class=\"constructor\">Scan_get_counter</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEcounter\">counter</a><br>        * ('a21, 'b21, 'c21, 'd21, 'e22, 'f22) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(int -&gt; 'a21, 'b21, 'c21, 'd21, 'e22, 'f22) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Scan_next_char\"><span class=\"constructor\">Scan_next_char</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a22, 'b22, 'c22, 'd22, 'e23, 'f23) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">(char -&gt; 'a22, 'b22, 'c22, 'd22, 'e23, 'f23) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Ignored_param\"><span class=\"constructor\">Ignored_param</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a23, 'b23, 'c23, 'd23, 'y4, 'x9) <a href=\"CamlinternalFormatBasics.html#TYPEignored\">ignored</a><br>        * ('x9, 'b23, 'c23, 'y4, 'e24, 'f24) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a23, 'b23, 'c23, 'd23, 'e24, 'f24) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.Custom\"><span class=\"constructor\">Custom</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a24, 'x10, 'y5) <a href=\"CamlinternalFormatBasics.html#TYPEcustom_arity\">custom_arity</a> * (unit -&gt; 'x10)<br>        * ('a24, 'b24, 'c24, 'd24, 'e25, 'f25) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('y5, 'b24, 'c24, 'd24, 'e25, 'f25) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfmt.End_of_format\"><span class=\"constructor\">End_of_format</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('f26, 'b25, 'c25, 'e26, 'e26, 'f26) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a></code></code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>List of format elements.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "('a, 'b, 'c, 'd, 'e, 'f)", "ignored =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTignored.Ignored_char\"><span class=\"constructor\">Ignored_char</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a0, 'b0, 'c0, 'd0, 'd0, 'a0) <a href=\"CamlinternalFormatBasics.html#TYPEignored\">ignored</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTignored.Ignored_caml_char\"><span class=\"constructor\">Ignored_caml_char</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a1, 'b1, 'c1, 'd1, 'd1, 'a1) <a href=\"CamlinternalFormatBasics.html#TYPEignored\">ignored</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTignored.Ignored_string\"><span class=\"constructor\">Ignored_string</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEpad_option\">pad_option</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a2, 'b2, 'c2, 'd2, 'd2, 'a2) <a href=\"CamlinternalFormatBasics.html#TYPEignored\">ignored</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTignored.Ignored_caml_string\"><span class=\"constructor\">Ignored_caml_string</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEpad_option\">pad_option</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a3, 'b3, 'c3, 'd3, 'd3, 'a3) <a href=\"CamlinternalFormatBasics.html#TYPEignored\">ignored</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTignored.Ignored_int\"><span class=\"constructor\">Ignored_int</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEint_conv\">int_conv</a> * <a href=\"CamlinternalFormatBasics.html#TYPEpad_option\">pad_option</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a4, 'b4, 'c4, 'd4, 'd4, 'a4) <a href=\"CamlinternalFormatBasics.html#TYPEignored\">ignored</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTignored.Ignored_int32\"><span class=\"constructor\">Ignored_int32</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEint_conv\">int_conv</a> * <a href=\"CamlinternalFormatBasics.html#TYPEpad_option\">pad_option</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a5, 'b5, 'c5, 'd5, 'd5, 'a5) <a href=\"CamlinternalFormatBasics.html#TYPEignored\">ignored</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTignored.Ignored_nativeint\"><span class=\"constructor\">Ignored_nativeint</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEint_conv\">int_conv</a> * <a href=\"CamlinternalFormatBasics.html#TYPEpad_option\">pad_option</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a6, 'b6, 'c6, 'd6, 'd6, 'a6) <a href=\"CamlinternalFormatBasics.html#TYPEignored\">ignored</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTignored.Ignored_int64\"><span class=\"constructor\">Ignored_int64</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEint_conv\">int_conv</a> * <a href=\"CamlinternalFormatBasics.html#TYPEpad_option\">pad_option</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a7, 'b7, 'c7, 'd7, 'd7, 'a7) <a href=\"CamlinternalFormatBasics.html#TYPEignored\">ignored</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTignored.Ignored_float\"><span class=\"constructor\">Ignored_float</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEpad_option\">pad_option</a> * <a href=\"CamlinternalFormatBasics.html#TYPEprec_option\">prec_option</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a8, 'b8, 'c8, 'd8, 'd8, 'a8) <a href=\"CamlinternalFormatBasics.html#TYPEignored\">ignored</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTignored.Ignored_bool\"><span class=\"constructor\">Ignored_bool</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEpad_option\">pad_option</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a9, 'b9, 'c9, 'd9, 'd9, 'a9) <a href=\"CamlinternalFormatBasics.html#TYPEignored\">ignored</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTignored.Ignored_format_arg\"><span class=\"constructor\">Ignored_format_arg</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEpad_option\">pad_option</a><br>        * ('g, 'h, 'i, 'j, 'k, 'l) <a href=\"CamlinternalFormatBasics.html#TYPEfmtty\">fmtty</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a10, 'b10, 'c10, 'd10, 'd10, 'a10) <a href=\"CamlinternalFormatBasics.html#TYPEignored\">ignored</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTignored.Ignored_format_subst\"><span class=\"constructor\">Ignored_format_subst</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEpad_option\">pad_option</a><br>        * ('a11, 'b11, 'c11, 'd11, 'e0, 'f0) <a href=\"CamlinternalFormatBasics.html#TYPEfmtty\">fmtty</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a11, 'b11, 'c11, 'd11, 'e0, 'f0) <a href=\"CamlinternalFormatBasics.html#TYPEignored\">ignored</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTignored.Ignored_reader\"><span class=\"constructor\">Ignored_reader</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a12, 'b12, 'c12, ('b12 -&gt; 'x) -&gt; 'd12, 'd12, 'a12)<br>       <a href=\"CamlinternalFormatBasics.html#TYPEignored\">ignored</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTignored.Ignored_scan_char_set\"><span class=\"constructor\">Ignored_scan_char_set</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEpad_option\">pad_option</a> * <a href=\"CamlinternalFormatBasics.html#TYPEchar_set\">char_set</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a13, 'b13, 'c13, 'd13, 'd13, 'a13) <a href=\"CamlinternalFormatBasics.html#TYPEignored\">ignored</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTignored.Ignored_scan_get_counter\"><span class=\"constructor\">Ignored_scan_get_counter</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"CamlinternalFormatBasics.html#TYPEcounter\">counter</a></code> <span class=\"keyword\">-&gt;</span> <code class=\"type\">('a14, 'b14, 'c14, 'd14, 'd14, 'a14) <a href=\"CamlinternalFormatBasics.html#TYPEignored\">ignored</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTignored.Ignored_scan_next_char\"><span class=\"constructor\">Ignored_scan_next_char</span></span> <span class=\"keyword\">:</span> <code class=\"type\">('a15, 'b15, 'c15, 'd15, 'd15, 'a15) <a href=\"CamlinternalFormatBasics.html#TYPEignored\">ignored</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "('a, 'b, 'c, 'd, 'e, 'f)", "format6 =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformat6.Format\"><span class=\"constructor\">Format</span></span> <span class=\"keyword\">of</span> <code class=\"type\">('a, 'b, 'c, 'd, 'e, 'f) <a href=\"CamlinternalFormatBasics.html#TYPEfmt\">fmt</a> * string</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "concat_fmtty",
              "('g1, 'b1, 'c1, 'j1, 'd1, 'a1, 'g2, 'b2, 'c2, 'j2, 'd2, 'a2) fmtty_rel -> ('a1, 'b1, 'c1, 'd1, 'e1, 'f1, 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel -> ('g1, 'b1, 'c1, 'j1, 'e1, 'f1, 'g2, 'b2, 'c2, 'j2, 'e2, 'f2) fmtty_rel",
              null
            ]
          ],
          [
            "Function",
            [
              "erase_rel",
              "('a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'l) fmtty_rel -> ('a, 'b, 'c, 'd, 'e, 'f) fmtty",
              null
            ]
          ],
          [
            "Function",
            [
              "concat_fmt",
              "('a, 'b, 'c, 'd, 'e, 'f) fmt -> ('f, 'b, 'c, 'e, 'g, 'h) fmt -> ('a, 'b, 'c, 'd, 'g, 'h) fmt",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "CamlinternalLazy",
    "module_info":
      "\n<p>Run-time support for lazy values.\n    All functions in this module are for system use only, not for the\n    casual user.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Exception", [ "Undefined", null, null ] ],
          [ "Function", [ "force_lazy_block", "'a lazy_t -> 'a", null ] ],
          [ "Function", [ "force_val_lazy_block", "'a lazy_t -> 'a", null ] ],
          [ "Function", [ "force", "'a lazy_t -> 'a", null ] ],
          [ "Function", [ "force_val", "'a lazy_t -> 'a", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "CamlinternalMod",
    "module_info":
      "\n<p>Run-time support for recursive modules.\n    All functions in this module are for system use only, not for the\n    casual user.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "shape", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTshape.Function\"><span class=\"constructor\">Function</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTshape.Lazy\"><span class=\"constructor\">Lazy</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTshape.Class\"><span class=\"constructor\">Class</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTshape.Module\"><span class=\"constructor\">Module</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"CamlinternalMod.html#TYPEshape\">shape</a> array</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTshape.Value\"><span class=\"constructor\">Value</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Obj.html#TYPEt\">Obj.t</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [ "init_mod", "string * int * int -> shape -> Obj.t", null ]
          ],
          [
            "Function",
            [ "update_mod", "shape -> Obj.t -> Obj.t -> unit", null ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "CamlinternalOO",
    "module_info":
      "\n<p>Run-time support for objects and classes.\n    All functions in this module are for system use only, not for the\n    casual user.</p>\n",
    "sections": [
      {
        "section_name": "Classes",
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "tag", null, null, null ] ],
          [ "Typevariant", [ "label", null, null, null ] ],
          [ "Typevariant", [ "table", null, null, null ] ],
          [ "Typevariant", [ "meth", null, null, null ] ],
          [ "Typevariant", [ "t", null, null, null ] ],
          [ "Typevariant", [ "obj", null, null, null ] ],
          [ "Typevariant", [ "closure", null, null, null ] ],
          [ "Function", [ "public_method_label", "string -> tag", null ] ],
          [ "Function", [ "new_method", "table -> label", null ] ],
          [ "Function", [ "new_variable", "table -> string -> int", null ] ],
          [
            "Function",
            [
              "new_methods_variables",
              "table -> string array -> string array -> label array", null
            ]
          ],
          [ "Function", [ "get_variable", "table -> string -> int", null ] ],
          [
            "Function",
            [ "get_variables", "table -> string array -> int array", null ]
          ],
          [
            "Function",
            [ "get_method_label", "table -> string -> label", null ]
          ],
          [
            "Function",
            [
              "get_method_labels", "table -> string array -> label array",
              null
            ]
          ],
          [ "Function", [ "get_method", "table -> label -> meth", null ] ],
          [
            "Function",
            [ "set_method", "table -> label -> meth -> unit", null ]
          ],
          [
            "Function",
            [ "set_methods", "table -> label array -> unit", null ]
          ],
          [
            "Function",
            [
              "narrow",
              "table -> string array -> string array -> string array -> unit",
              null
            ]
          ],
          [ "Function", [ "widen", "table -> unit", null ] ],
          [
            "Function",
            [ "add_initializer", "table -> ( obj -> unit) -> unit", null ]
          ],
          [ "Function", [ "dummy_table", "table", null ] ],
          [ "Function", [ "create_table", "string array -> table", null ] ],
          [ "Function", [ "init_class", "table -> unit", null ] ],
          [
            "Function",
            [
              "inherits",
              "table -> string array -> string array -> string array -> t * ( table -> obj -> Obj.t ) * t * obj -> bool -> Obj.t array",
              null
            ]
          ],
          [
            "Function",
            [
              "make_class",
              "string array -> ( table -> Obj.t -> t ) -> t * ( table -> Obj.t -> t ) * ( Obj.t -> t ) * Obj.t",
              null
            ]
          ],
          [ "Typevariant", [ "init_table", null, null, null ] ],
          [
            "Function",
            [
              "make_class_store",
              "string array -> ( table -> t ) -> init_table -> unit", null
            ]
          ],
          [
            "Function",
            [
              "dummy_class",
              "string * int * int -> t * ( table -> Obj.t -> t ) * ( Obj.t -> t ) * Obj.t",
              null
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Objects",
        "section_info": null,
        "elements": [
          [ "Function", [ "copy", "(< .. > as 'a) -> 'a", null ] ],
          [ "Function", [ "create_object", "table -> obj", null ] ],
          [
            "Function",
            [ "create_object_opt", "obj -> table -> obj", null ]
          ],
          [
            "Function",
            [ "run_initializers", "obj -> table -> unit", null ]
          ],
          [
            "Function",
            [ "run_initializers_opt", "obj -> obj -> table -> obj", null ]
          ],
          [
            "Function",
            [
              "create_object_and_run_initializers", "obj -> table -> obj",
              null
            ]
          ],
          [ "Function", [ "send", "obj -> tag -> t", null ] ],
          [
            "Function",
            [ "sendcache", "obj -> tag -> t -> int -> t", null ]
          ],
          [ "Function", [ "sendself", "obj -> label -> t", null ] ],
          [
            "Function",
            [ "get_public_method", "obj -> tag -> closure", null ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Table cache",
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "tables", null, null, null ] ],
          [
            "Function",
            [ "lookup_tables", "tables -> closure array -> tables", null ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Builtins to reduce code size",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "impl", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.GetConst\"><span class=\"constructor\">GetConst</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.GetVar\"><span class=\"constructor\">GetVar</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.GetEnv\"><span class=\"constructor\">GetEnv</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.GetMeth\"><span class=\"constructor\">GetMeth</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.SetVar\"><span class=\"constructor\">SetVar</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.AppConst\"><span class=\"constructor\">AppConst</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.AppVar\"><span class=\"constructor\">AppVar</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.AppEnv\"><span class=\"constructor\">AppEnv</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.AppMeth\"><span class=\"constructor\">AppMeth</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.AppConstConst\"><span class=\"constructor\">AppConstConst</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.AppConstVar\"><span class=\"constructor\">AppConstVar</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.AppConstEnv\"><span class=\"constructor\">AppConstEnv</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.AppConstMeth\"><span class=\"constructor\">AppConstMeth</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.AppVarConst\"><span class=\"constructor\">AppVarConst</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.AppEnvConst\"><span class=\"constructor\">AppEnvConst</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.AppMethConst\"><span class=\"constructor\">AppMethConst</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.MethAppConst\"><span class=\"constructor\">MethAppConst</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.MethAppVar\"><span class=\"constructor\">MethAppVar</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.MethAppEnv\"><span class=\"constructor\">MethAppEnv</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.MethAppMeth\"><span class=\"constructor\">MethAppMeth</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.SendConst\"><span class=\"constructor\">SendConst</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.SendVar\"><span class=\"constructor\">SendVar</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.SendEnv\"><span class=\"constructor\">SendEnv</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.SendMeth\"><span class=\"constructor\">SendMeth</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTimpl.Closure\"><span class=\"constructor\">Closure</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"CamlinternalOO.html#TYPEclosure\">closure</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Parameters",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "params", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTparams.compact_table\">compact_table</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTparams.copy_parent\">copy_parent</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTparams.clean_when_copying\">clean_when_copying</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTparams.retry_count\">retry_count</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTparams.bucket_small_size\">bucket_small_size</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Function", [ "params", "params", null ] ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Statistics",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "stats", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.classes\">classes</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.methods\">methods</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.inst_vars\">inst_vars</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Function", [ "stats", "unit -> stats", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ccomp",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Function", [ "command", "string -> int", null ] ],
          [ "Function", [ "run_command", "string -> unit", null ] ],
          [
            "Function",
            [
              "compile_file",
              "?output:string -> ?opt:string -> string -> int", null
            ]
          ],
          [
            "Function",
            [ "create_archive", "string -> string list -> int", null ]
          ],
          [ "Function", [ "expand_libname", "string -> string", null ] ],
          [ "Function", [ "quote_files", "string list -> string", null ] ],
          [
            "Function",
            [ "quote_optfile", "string option -> string", null ]
          ],
          [
            "Typevariant",
            [
              "link_mode", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlink_mode.Exe\"><span class=\"constructor\">Exe</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlink_mode.Dll\"><span class=\"constructor\">Dll</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlink_mode.MainDll\"><span class=\"constructor\">MainDll</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlink_mode.Partial\"><span class=\"constructor\">Partial</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "call_linker",
              "link_mode -> string -> string list -> string -> bool", null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Char",
    "module_info": "\n<p>Character operations.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "code", "char -> int",
              "\n<div class=\"info-desc\">\n<p>Return the ASCII code of the argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "chr", "int -> char",
              "\n<div class=\"info-desc\">\n<p>Return the character with the given ASCII code.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Char.chr\"</span></code> if the argument is\n   outside the range 0--255.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "escaped", "char -> string",
              "\n<div class=\"info-desc\">\n<p>Return a string representing the given character,\n    with special characters escaped following the lexical conventions\n    of OCaml.\n    All characters outside the ASCII printable range (32..126) are\n    escaped, as well as backslash, double-quote, and single-quote.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lowercase", "char -> char",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Convert the given character to its equivalent lowercase character,\n   using the ISO Latin-1 (8859-1) character set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uppercase", "char -> char",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Convert the given character to its equivalent uppercase character,\n   using the ISO Latin-1 (8859-1) character set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lowercase_ascii", "char -> char",
              "\n<div class=\"info-desc\">\n<p>Convert the given character to its equivalent lowercase character,\n   using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "uppercase_ascii", "char -> char",
              "\n<div class=\"info-desc\">\n<p>Convert the given character to its equivalent uppercase character,\n   using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", "= char", null,
              "\n<div class=\"info-desc\">\n<p>An alias for the type of characters.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>The comparison function for characters, with the same specification as\n    <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>, this function <code class=\"code\">compare</code>\n    allows the module <code class=\"code\"><span class=\"constructor\">Char</span></code> to be passed as argument to the functors\n    <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p>The equal function for chars.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Clflags.Float_arg_helper",
    "module_info":
      "\n<p>Optimization parameters represented as floats indexed by round number.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "parsed", null, null, null ] ],
          [
            "Function",
            [ "parse", "string -> string -> parsed ref -> unit", null ]
          ],
          [
            "Typevariant",
            [
              "parse_result", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTparse_result.Ok\"><span class=\"constructor\">Ok</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTparse_result.Parse_failed\"><span class=\"constructor\">Parse_failed</span></span> <span class=\"keyword\">of</span> <code class=\"type\">exn</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "parse_no_error", "string -> parsed ref -> parse_result", null
            ]
          ],
          [ "Function", [ "get", "key:int -> parsed -> float", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Clflags",
    "module_info": "\n<p>Command line flags</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Module",
            [
              "Int_arg_helper",
              "\n<p>Optimization parameters represented as ints indexed by round number.</p>\n\n"
            ]
          ],
          [
            "Module",
            [
              "Float_arg_helper",
              "\n<p>Optimization parameters represented as floats indexed by round number.</p>\n\n"
            ]
          ],
          [
            "Typevariant",
            [
              "inlining_arguments", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinlining_arguments.inline_call_cost\">inline_call_cost</span>&nbsp;: <code class=\"type\">int option</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinlining_arguments.inline_alloc_cost\">inline_alloc_cost</span>&nbsp;: <code class=\"type\">int option</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinlining_arguments.inline_prim_cost\">inline_prim_cost</span>&nbsp;: <code class=\"type\">int option</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinlining_arguments.inline_branch_cost\">inline_branch_cost</span>&nbsp;: <code class=\"type\">int option</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinlining_arguments.inline_indirect_cost\">inline_indirect_cost</span>&nbsp;: <code class=\"type\">int option</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinlining_arguments.inline_lifting_benefit\">inline_lifting_benefit</span>&nbsp;: <code class=\"type\">int option</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinlining_arguments.inline_branch_factor\">inline_branch_factor</span>&nbsp;: <code class=\"type\">float option</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinlining_arguments.inline_max_depth\">inline_max_depth</span>&nbsp;: <code class=\"type\">int option</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinlining_arguments.inline_max_unroll\">inline_max_unroll</span>&nbsp;: <code class=\"type\">int option</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinlining_arguments.inline_threshold\">inline_threshold</span>&nbsp;: <code class=\"type\">float option</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinlining_arguments.inline_toplevel_threshold\">inline_toplevel_threshold</span>&nbsp;: <code class=\"type\">int option</code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Function", [ "classic_arguments", "inlining_arguments", null ] ],
          [ "Function", [ "o1_arguments", "inlining_arguments", null ] ],
          [ "Function", [ "o2_arguments", "inlining_arguments", null ] ],
          [ "Function", [ "o3_arguments", "inlining_arguments", null ] ],
          [
            "Function",
            [
              "use_inlining_arguments_set",
              "?round:int -> inlining_arguments -> unit",
              "\n<div class=\"info-desc\">\n<p>Set all the inlining arguments for a round.\n    The default is set if no round is provided.</p>\n</div>\n"
            ]
          ],
          [ "Function", [ "objfiles", "string list ref", null ] ],
          [ "Function", [ "ccobjs", "string list ref", null ] ],
          [ "Function", [ "dllibs", "string list ref", null ] ],
          [ "Function", [ "compile_only", "bool ref", null ] ],
          [ "Function", [ "output_name", "string option ref", null ] ],
          [ "Function", [ "include_dirs", "string list ref", null ] ],
          [ "Function", [ "no_std_include", "bool ref", null ] ],
          [ "Function", [ "print_types", "bool ref", null ] ],
          [ "Function", [ "make_archive", "bool ref", null ] ],
          [ "Function", [ "debug", "bool ref", null ] ],
          [ "Function", [ "fast", "bool ref", null ] ],
          [ "Function", [ "use_linscan", "bool ref", null ] ],
          [ "Function", [ "link_everything", "bool ref", null ] ],
          [ "Function", [ "custom_runtime", "bool ref", null ] ],
          [ "Function", [ "no_check_prims", "bool ref", null ] ],
          [ "Function", [ "bytecode_compatible_32", "bool ref", null ] ],
          [ "Function", [ "output_c_object", "bool ref", null ] ],
          [ "Function", [ "output_complete_object", "bool ref", null ] ],
          [ "Function", [ "all_ccopts", "string list ref", null ] ],
          [ "Function", [ "classic", "bool ref", null ] ],
          [ "Function", [ "nopervasives", "bool ref", null ] ],
          [ "Function", [ "open_modules", "string list ref", null ] ],
          [ "Function", [ "preprocessor", "string option ref", null ] ],
          [ "Function", [ "all_ppx", "string list ref", null ] ],
          [ "Function", [ "annotations", "bool ref", null ] ],
          [ "Function", [ "binary_annotations", "bool ref", null ] ],
          [ "Function", [ "use_threads", "bool ref", null ] ],
          [ "Function", [ "use_vmthreads", "bool ref", null ] ],
          [ "Function", [ "noassert", "bool ref", null ] ],
          [ "Function", [ "verbose", "bool ref", null ] ],
          [ "Function", [ "noprompt", "bool ref", null ] ],
          [ "Function", [ "nopromptcont", "bool ref", null ] ],
          [ "Function", [ "init_file", "string option ref", null ] ],
          [ "Function", [ "noinit", "bool ref", null ] ],
          [ "Function", [ "noversion", "bool ref", null ] ],
          [ "Function", [ "use_prims", "string ref", null ] ],
          [ "Function", [ "use_runtime", "string ref", null ] ],
          [ "Function", [ "principal", "bool ref", null ] ],
          [ "Function", [ "real_paths", "bool ref", null ] ],
          [ "Function", [ "recursive_types", "bool ref", null ] ],
          [ "Function", [ "strict_sequence", "bool ref", null ] ],
          [ "Function", [ "strict_formats", "bool ref", null ] ],
          [ "Function", [ "applicative_functors", "bool ref", null ] ],
          [ "Function", [ "make_runtime", "bool ref", null ] ],
          [ "Function", [ "gprofile", "bool ref", null ] ],
          [ "Function", [ "c_compiler", "string option ref", null ] ],
          [ "Function", [ "no_auto_link", "bool ref", null ] ],
          [ "Function", [ "dllpaths", "string list ref", null ] ],
          [ "Function", [ "make_package", "bool ref", null ] ],
          [ "Function", [ "for_package", "string option ref", null ] ],
          [ "Function", [ "error_size", "int ref", null ] ],
          [ "Function", [ "float_const_prop", "bool ref", null ] ],
          [ "Function", [ "transparent_modules", "bool ref", null ] ],
          [ "Function", [ "unique_ids", "bool ref", null ] ],
          [ "Function", [ "dump_source", "bool ref", null ] ],
          [ "Function", [ "dump_parsetree", "bool ref", null ] ],
          [ "Function", [ "dump_typedtree", "bool ref", null ] ],
          [ "Function", [ "dump_rawlambda", "bool ref", null ] ],
          [ "Function", [ "dump_lambda", "bool ref", null ] ],
          [ "Function", [ "dump_rawclambda", "bool ref", null ] ],
          [ "Function", [ "dump_clambda", "bool ref", null ] ],
          [ "Function", [ "dump_rawflambda", "bool ref", null ] ],
          [ "Function", [ "dump_flambda", "bool ref", null ] ],
          [ "Function", [ "dump_flambda_let", "int option ref", null ] ],
          [ "Function", [ "dump_instr", "bool ref", null ] ],
          [ "Function", [ "keep_asm_file", "bool ref", null ] ],
          [ "Function", [ "optimize_for_speed", "bool ref", null ] ],
          [ "Function", [ "dump_cmm", "bool ref", null ] ],
          [ "Function", [ "dump_selection", "bool ref", null ] ],
          [ "Function", [ "dump_cse", "bool ref", null ] ],
          [ "Function", [ "dump_live", "bool ref", null ] ],
          [ "Function", [ "dump_avail", "bool ref", null ] ],
          [ "Function", [ "debug_runavail", "bool ref", null ] ],
          [ "Function", [ "dump_spill", "bool ref", null ] ],
          [ "Function", [ "dump_split", "bool ref", null ] ],
          [ "Function", [ "dump_interf", "bool ref", null ] ],
          [ "Function", [ "dump_prefer", "bool ref", null ] ],
          [ "Function", [ "dump_regalloc", "bool ref", null ] ],
          [ "Function", [ "dump_reload", "bool ref", null ] ],
          [ "Function", [ "dump_scheduling", "bool ref", null ] ],
          [ "Function", [ "dump_linear", "bool ref", null ] ],
          [ "Function", [ "dump_interval", "bool ref", null ] ],
          [ "Function", [ "keep_startup_file", "bool ref", null ] ],
          [ "Function", [ "dump_combine", "bool ref", null ] ],
          [ "Function", [ "native_code", "bool ref", null ] ],
          [ "Function", [ "default_inline_threshold", "float", null ] ],
          [
            "Function",
            [ "inline_threshold", "Float_arg_helper.parsed ref", null ]
          ],
          [ "Function", [ "inlining_report", "bool ref", null ] ],
          [ "Function", [ "simplify_rounds", "int option ref", null ] ],
          [ "Function", [ "default_simplify_rounds", "int ref", null ] ],
          [ "Function", [ "rounds", "unit -> int", null ] ],
          [ "Function", [ "default_inline_max_unroll", "int", null ] ],
          [
            "Function",
            [ "inline_max_unroll", "Int_arg_helper.parsed ref", null ]
          ],
          [
            "Function",
            [ "default_inline_toplevel_threshold", "int", null ]
          ],
          [
            "Function",
            [
              "inline_toplevel_threshold", "Int_arg_helper.parsed ref", null
            ]
          ],
          [ "Function", [ "default_inline_call_cost", "int", null ] ],
          [ "Function", [ "default_inline_alloc_cost", "int", null ] ],
          [ "Function", [ "default_inline_prim_cost", "int", null ] ],
          [ "Function", [ "default_inline_branch_cost", "int", null ] ],
          [ "Function", [ "default_inline_indirect_cost", "int", null ] ],
          [ "Function", [ "default_inline_lifting_benefit", "int", null ] ],
          [
            "Function",
            [ "inline_call_cost", "Int_arg_helper.parsed ref", null ]
          ],
          [
            "Function",
            [ "inline_alloc_cost", "Int_arg_helper.parsed ref", null ]
          ],
          [
            "Function",
            [ "inline_prim_cost", "Int_arg_helper.parsed ref", null ]
          ],
          [
            "Function",
            [ "inline_branch_cost", "Int_arg_helper.parsed ref", null ]
          ],
          [
            "Function",
            [ "inline_indirect_cost", "Int_arg_helper.parsed ref", null ]
          ],
          [
            "Function",
            [ "inline_lifting_benefit", "Int_arg_helper.parsed ref", null ]
          ],
          [ "Function", [ "default_inline_branch_factor", "float", null ] ],
          [
            "Function",
            [ "inline_branch_factor", "Float_arg_helper.parsed ref", null ]
          ],
          [ "Function", [ "dont_write_files", "bool ref", null ] ],
          [ "Function", [ "std_include_flag", "string -> string", null ] ],
          [ "Function", [ "std_include_dir", "unit -> string list", null ] ],
          [ "Function", [ "shared", "bool ref", null ] ],
          [ "Function", [ "dlcode", "bool ref", null ] ],
          [ "Function", [ "pic_code", "bool ref", null ] ],
          [ "Function", [ "runtime_variant", "string ref", null ] ],
          [ "Function", [ "force_slash", "bool ref", null ] ],
          [ "Function", [ "keep_docs", "bool ref", null ] ],
          [ "Function", [ "keep_locs", "bool ref", null ] ],
          [ "Function", [ "unsafe_string", "bool ref", null ] ],
          [ "Function", [ "opaque", "bool ref", null ] ],
          [
            "Function",
            [ "profile_columns", "Profile.column list ref", null ]
          ],
          [ "Function", [ "flambda_invariant_checks", "bool ref", null ] ],
          [ "Function", [ "unbox_closures", "bool ref", null ] ],
          [ "Function", [ "unbox_closures_factor", "int ref", null ] ],
          [ "Function", [ "default_unbox_closures_factor", "int", null ] ],
          [ "Function", [ "unbox_free_vars_of_closures", "bool ref", null ] ],
          [ "Function", [ "unbox_specialised_args", "bool ref", null ] ],
          [ "Function", [ "clambda_checks", "bool ref", null ] ],
          [ "Function", [ "default_inline_max_depth", "int", null ] ],
          [
            "Function",
            [ "inline_max_depth", "Int_arg_helper.parsed ref", null ]
          ],
          [ "Function", [ "remove_unused_arguments", "bool ref", null ] ],
          [ "Function", [ "dump_flambda_verbose", "bool ref", null ] ],
          [ "Function", [ "classic_inlining", "bool ref", null ] ],
          [ "Function", [ "afl_instrument", "bool ref", null ] ],
          [ "Function", [ "afl_inst_ratio", "int ref", null ] ],
          [ "Function", [ "all_passes", "string list ref", null ] ],
          [ "Function", [ "dumped_pass", "string -> bool", null ] ],
          [
            "Function",
            [ "set_dumped_pass", "string -> bool -> unit", null ]
          ],
          [
            "Function",
            [
              "parse_color_setting", "string -> Misc.Color.setting option",
              null
            ]
          ],
          [ "Function", [ "color", "Misc.Color.setting option ref", null ] ],
          [ "Function", [ "unboxed_types", "bool ref", null ] ],
          [
            "Function",
            [ "arg_spec", "(string * Arg.spec * string) list ref", null ]
          ],
          [
            "Function",
            [
              "add_arguments",
              "string -> (string * Arg.spec * string) list -> unit", null
            ]
          ],
          [
            "Function",
            [ "parse_arguments", "Arg.anon_fun -> string -> unit", null ]
          ],
          [ "Function", [ "print_arguments", "string -> unit", null ] ],
          [ "Function", [ "reset_arguments", "unit -> unit", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Clflags.Int_arg_helper",
    "module_info":
      "\n<p>Optimization parameters represented as ints indexed by round number.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "parsed", null, null, null ] ],
          [
            "Function",
            [ "parse", "string -> string -> parsed ref -> unit", null ]
          ],
          [
            "Typevariant",
            [
              "parse_result", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTparse_result.Ok\"><span class=\"constructor\">Ok</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTparse_result.Parse_failed\"><span class=\"constructor\">Parse_failed</span></span> <span class=\"keyword\">of</span> <code class=\"type\">exn</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "parse_no_error", "string -> parsed ref -> parse_result", null
            ]
          ],
          [ "Function", [ "get", "key:int -> parsed -> int", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Complex",
    "module_info":
      "\n<p>Complex numbers.</p>\n\n<p>This module provides arithmetic operations on complex numbers.\n    Complex numbers are represented by their real and imaginary parts\n    (cartesian representation).  Each part is represented by a\n    double-precision floating-point number (type <code class=\"code\">float</code>).</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.re\">re</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.im\">im</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The type of complex numbers.  <code class=\"code\">re</code> is the real part and <code class=\"code\">im</code> the\n    imaginary part.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "zero", "t",
              "\n<div class=\"info-desc\">\n<p>The complex number <code class=\"code\">0</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "one", "t",
              "\n<div class=\"info-desc\">\n<p>The complex number <code class=\"code\">1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "i", "t",
              "\n<div class=\"info-desc\">\n<p>The complex number <code class=\"code\">i</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "neg", "t -> t",
              "\n<div class=\"info-desc\">\n<p>Unary negation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "conj", "t -> t",
              "\n<div class=\"info-desc\">\n<p>Conjugate: given the complex <code class=\"code\">x&nbsp;+&nbsp;i.y</code>, returns <code class=\"code\">x&nbsp;-&nbsp;i.y</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Addition</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Subtraction</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mul", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Multiplication</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "inv", "t -> t",
              "\n<div class=\"info-desc\">\n<p>Multiplicative inverse (<code class=\"code\">1/z</code>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "div", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Division</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sqrt", "t -> t",
              "\n<div class=\"info-desc\">\n<p>Square root.  The result <code class=\"code\">x&nbsp;+&nbsp;i.y</code> is such that <code class=\"code\">x&nbsp;&gt;&nbsp;0</code> or\n    <code class=\"code\">x&nbsp;=&nbsp;0</code> and <code class=\"code\">y&nbsp;&gt;=&nbsp;0</code>.\n    This function has a discontinuity along the negative real axis.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "norm2", "t -> float",
              "\n<div class=\"info-desc\">\n<p>Norm squared: given <code class=\"code\">x&nbsp;+&nbsp;i.y</code>, returns <code class=\"code\">x^2&nbsp;+&nbsp;y^2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "norm", "t -> float",
              "\n<div class=\"info-desc\">\n<p>Norm: given <code class=\"code\">x&nbsp;+&nbsp;i.y</code>, returns <code class=\"code\">sqrt(x^2&nbsp;+&nbsp;y^2)</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "arg", "t -> float",
              "\n<div class=\"info-desc\">\n<p>Argument.  The argument of a complex number is the angle\n    in the complex plane between the positive real axis and a line\n    passing through zero and the number.  This angle ranges from\n    <code class=\"code\">-pi</code> to <code class=\"code\">pi</code>.  This function has a discontinuity along the\n    negative real axis.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "polar", "float -> float -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">polar&nbsp;norm&nbsp;arg</code> returns the complex having norm <code class=\"code\">norm</code>\n    and argument <code class=\"code\">arg</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "exp", "t -> t",
              "\n<div class=\"info-desc\">\n<p>Exponentiation.  <code class=\"code\">exp&nbsp;z</code> returns <code class=\"code\">e</code> to the <code class=\"code\">z</code> power.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "log", "t -> t",
              "\n<div class=\"info-desc\">\n<p>Natural logarithm (in base <code class=\"code\">e</code>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pow", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Power function.  <code class=\"code\">pow&nbsp;z1&nbsp;z2</code> returns <code class=\"code\">z1</code> to the <code class=\"code\">z2</code> power.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Condition",
    "module_info":
      "\n<p>Condition variables to synchronize between threads.</p>\n\n<p>Condition variables are used when one thread wants to wait until another\n   thread has finished doing something: the former thread ``waits'' on the\n   condition variable, the latter thread ``signals'' the condition when it\n   is done. Condition variables should always be protected by a mutex.\n   The typical use is (if <code class=\"code\"><span class=\"constructor\">D</span></code> is a shared data structure, <code class=\"code\">m</code> its mutex,\n   and <code class=\"code\">c</code> is a condition variable):</p>\n<pre class=\"codepre\"><code class=\"code\">     <span class=\"constructor\">Mutex</span>.lock m;\n     <span class=\"keyword\">while</span> <span class=\"comment\">(* some predicate P over D is not satisfied *)</span> <span class=\"keyword\">do</span>\n       <span class=\"constructor\">Condition</span>.wait c m\n     <span class=\"keyword\">done</span>;\n     <span class=\"comment\">(* Modify D *)</span>\n     <span class=\"keyword\">if</span> <span class=\"comment\">(* the predicate P over D is now satisfied *)</span> <span class=\"keyword\">then</span> <span class=\"constructor\">Condition</span>.signal c;\n     <span class=\"constructor\">Mutex</span>.unlock m\n   </code></pre>",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of condition variables.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "unit -> t",
              "\n<div class=\"info-desc\">\n<p>Return a new condition variable.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "wait", "t -> Mutex.t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">wait&nbsp;c&nbsp;m</code> atomically unlocks the mutex <code class=\"code\">m</code> and suspends the\n   calling process on the condition variable <code class=\"code\">c</code>. The process will\n   restart after the condition variable <code class=\"code\">c</code> has been signalled.\n   The mutex <code class=\"code\">m</code> is locked again before <code class=\"code\">wait</code> returns.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "signal", "t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">signal&nbsp;c</code> restarts one of the processes waiting on the\n   condition variable <code class=\"code\">c</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "broadcast", "t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">broadcast&nbsp;c</code> restarts all processes waiting on the\n   condition variable <code class=\"code\">c</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Config",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Function", [ "version", "string", null ] ],
          [ "Function", [ "standard_library", "string", null ] ],
          [ "Function", [ "standard_runtime", "string", null ] ],
          [ "Function", [ "ccomp_type", "string", null ] ],
          [ "Function", [ "c_compiler", "string", null ] ],
          [ "Function", [ "c_output_obj", "string", null ] ],
          [ "Function", [ "ocamlc_cflags", "string", null ] ],
          [ "Function", [ "ocamlc_cppflags", "string", null ] ],
          [ "Function", [ "ocamlopt_cflags", "string", null ] ],
          [ "Function", [ "ocamlopt_cppflags", "string", null ] ],
          [ "Function", [ "bytecomp_c_libraries", "string", null ] ],
          [ "Function", [ "native_c_libraries", "string", null ] ],
          [ "Function", [ "native_pack_linker", "string", null ] ],
          [ "Function", [ "mkdll", "string", null ] ],
          [ "Function", [ "mkexe", "string", null ] ],
          [ "Function", [ "mkmaindll", "string", null ] ],
          [ "Function", [ "ranlib", "string", null ] ],
          [ "Function", [ "ar", "string", null ] ],
          [ "Function", [ "cc_profile", "string", null ] ],
          [ "Function", [ "load_path", "string list ref", null ] ],
          [ "Function", [ "interface_suffix", "string ref", null ] ],
          [ "Function", [ "exec_magic_number", "string", null ] ],
          [ "Function", [ "cmi_magic_number", "string", null ] ],
          [ "Function", [ "cmo_magic_number", "string", null ] ],
          [ "Function", [ "cma_magic_number", "string", null ] ],
          [ "Function", [ "cmx_magic_number", "string", null ] ],
          [ "Function", [ "cmxa_magic_number", "string", null ] ],
          [ "Function", [ "ast_intf_magic_number", "string", null ] ],
          [ "Function", [ "ast_impl_magic_number", "string", null ] ],
          [ "Function", [ "cmxs_magic_number", "string", null ] ],
          [ "Function", [ "cmt_magic_number", "string", null ] ],
          [ "Function", [ "max_tag", "int", null ] ],
          [ "Function", [ "lazy_tag", "int", null ] ],
          [ "Function", [ "max_young_wosize", "int", null ] ],
          [ "Function", [ "stack_threshold", "int", null ] ],
          [ "Function", [ "stack_safety_margin", "int", null ] ],
          [ "Function", [ "architecture", "string", null ] ],
          [ "Function", [ "model", "string", null ] ],
          [ "Function", [ "system", "string", null ] ],
          [ "Function", [ "asm", "string", null ] ],
          [ "Function", [ "asm_cfi_supported", "bool", null ] ],
          [ "Function", [ "with_frame_pointers", "bool", null ] ],
          [ "Function", [ "ext_obj", "string", null ] ],
          [ "Function", [ "ext_asm", "string", null ] ],
          [ "Function", [ "ext_lib", "string", null ] ],
          [ "Function", [ "ext_dll", "string", null ] ],
          [ "Function", [ "default_executable_name", "string", null ] ],
          [ "Function", [ "systhread_supported", "bool", null ] ],
          [ "Function", [ "flexdll_dirs", "string list", null ] ],
          [ "Function", [ "host", "string", null ] ],
          [ "Function", [ "target", "string", null ] ],
          [ "Function", [ "print_config", "out_channel -> unit", null ] ],
          [ "Function", [ "profiling", "bool", null ] ],
          [ "Function", [ "flambda", "bool", null ] ],
          [ "Function", [ "with_flambda_invariants", "bool", null ] ],
          [ "Function", [ "spacetime", "bool", null ] ],
          [ "Function", [ "enable_call_counts", "bool", null ] ],
          [ "Function", [ "profinfo", "bool", null ] ],
          [ "Function", [ "profinfo_width", "int", null ] ],
          [ "Function", [ "libunwind_available", "bool", null ] ],
          [ "Function", [ "libunwind_link_flags", "string", null ] ],
          [ "Function", [ "safe_string", "bool", null ] ],
          [ "Function", [ "default_safe_string", "bool", null ] ],
          [ "Function", [ "flat_float_array", "bool", null ] ],
          [ "Function", [ "windows_unicode", "bool", null ] ],
          [ "Function", [ "afl_instrument", "bool", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Consistbl",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [ "Function", [ "create", "unit -> t", null ] ],
          [ "Function", [ "clear", "t -> unit", null ] ],
          [
            "Function",
            [ "check", "t -> string -> Digest.t -> string -> unit", null ]
          ],
          [
            "Function",
            [
              "check_noadd", "t -> string -> Digest.t -> string -> unit",
              null
            ]
          ],
          [
            "Function",
            [ "set", "t -> string -> Digest.t -> string -> unit", null ]
          ],
          [ "Function", [ "source", "t -> string -> string", null ] ],
          [
            "Function",
            [
              "extract",
              "string list -> t -> (string * Digest.t option) list", null
            ]
          ],
          [ "Function", [ "filter", "(string -> bool) -> t -> unit", null ] ],
          [
            "Exception",
            [ "Inconsistency", "string * string * string", null ]
          ],
          [ "Exception", [ "Not_available", "string", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Depend",
    "module_info": "\n<p>Module dependencies.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Module", [ "StringSet", null ] ],
          [ "Module", [ "StringMap", null ] ],
          [
            "Typevariant",
            [
              "map_tree", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmap_tree.Node\"><span class=\"constructor\">Node</span></span> <span class=\"keyword\">of</span> <code class=\"type\">StringSet.t * <a href=\"Depend.html#TYPEbound_map\">bound_map</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [ "bound_map", "= map_tree StringMap.t", null, null ]
          ],
          [ "Function", [ "make_leaf", "string -> map_tree", null ] ],
          [ "Function", [ "make_node", "bound_map -> map_tree", null ] ],
          [
            "Function",
            [ "weaken_map", "StringSet.t -> map_tree -> map_tree", null ]
          ],
          [ "Function", [ "free_structure_names", "StringSet.t ref", null ] ],
          [ "Function", [ "pp_deps", "string list ref", null ] ],
          [
            "Function",
            [ "open_module", "bound_map -> Longident.t -> bound_map", null ]
          ],
          [
            "Function",
            [
              "add_use_file",
              "bound_map -> Parsetree.toplevel_phrase list -> unit", null
            ]
          ],
          [
            "Function",
            [
              "add_signature", "bound_map -> Parsetree.signature -> unit",
              null
            ]
          ],
          [
            "Function",
            [
              "add_implementation",
              "bound_map -> Parsetree.structure -> unit", null
            ]
          ],
          [
            "Function",
            [
              "add_implementation_binding",
              "bound_map -> Parsetree.structure -> bound_map", null
            ]
          ],
          [
            "Function",
            [
              "add_signature_binding",
              "bound_map -> Parsetree.signature -> bound_map", null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Depend.StringMap",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "key", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the map keys.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "+'a", "t", null,
              "\n<div class=\"info-desc\">\n<p>The type of maps from type <code class=\"code\">key</code> to type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "empty", "'a t",
              "\n<div class=\"info-desc\">\n<p>The empty map.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "is_empty", "'a t -> bool",
              "\n<div class=\"info-desc\">\n<p>Test whether a map is empty or not.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mem", "key -> 'a t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;x&nbsp;m</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">m</code> contains a binding for <code class=\"code\">x</code>,\n       and <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "key -> 'a -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add&nbsp;x&nbsp;y&nbsp;m</code> returns a map containing the same bindings as\n       <code class=\"code\">m</code>, plus a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code>. If <code class=\"code\">x</code> was already bound\n       in <code class=\"code\">m</code> to a value that is physically equal to <code class=\"code\">y</code>,\n       <code class=\"code\">m</code> is returned unchanged (the result of the function is\n       then physically equal to <code class=\"code\">m</code>). Otherwise, the previous binding\n       of <code class=\"code\">x</code> in <code class=\"code\">m</code> disappears.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "update", "key -> ('a option -> 'a option) -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">update&nbsp;x&nbsp;f&nbsp;m</code> returns a map containing the same bindings as\n        <code class=\"code\">m</code>, except for the binding of <code class=\"code\">x</code>. Depending on the value of\n        <code class=\"code\">y</code> where <code class=\"code\">y</code> is <code class=\"code\">f&nbsp;(find_opt&nbsp;x&nbsp;m)</code>, the binding of <code class=\"code\">x</code> is\n        added, removed or updated. If <code class=\"code\">y</code> is <code class=\"code\"><span class=\"constructor\">None</span></code>, the binding is\n        removed if it exists; otherwise, if <code class=\"code\">y</code> is <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;z</code> then <code class=\"code\">x</code>\n        is associated to <code class=\"code\">z</code> in the resulting map.  If <code class=\"code\">x</code> was already\n        bound in <code class=\"code\">m</code> to a value that is physically equal to <code class=\"code\">z</code>, <code class=\"code\">m</code>\n        is returned unchanged (the result of the function is then\n        physically equal to <code class=\"code\">m</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "singleton", "key -> 'a -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">singleton&nbsp;x&nbsp;y</code> returns the one-element map that contains a binding <code class=\"code\">y</code>\n        for <code class=\"code\">x</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "remove", "key -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">remove&nbsp;x&nbsp;m</code> returns a map containing the same bindings as\n       <code class=\"code\">m</code>, except for <code class=\"code\">x</code> which is unbound in the returned map.\n       If <code class=\"code\">x</code> was not in <code class=\"code\">m</code>, <code class=\"code\">m</code> is returned unchanged\n       (the result of the function is then physically equal to <code class=\"code\">m</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "merge",
              "( key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">merge&nbsp;f&nbsp;m1&nbsp;m2</code> computes a map whose keys is a subset of keys of <code class=\"code\">m1</code>\n        and of <code class=\"code\">m2</code>. The presence of each such binding, and the corresponding\n        value, is determined with the function <code class=\"code\">f</code>.\n        In terms of the <code class=\"code\">find_opt</code> operation, we have\n        <code class=\"code\">find_opt&nbsp;x&nbsp;(merge&nbsp;f&nbsp;m1&nbsp;m2)&nbsp;=&nbsp;f&nbsp;(find_opt&nbsp;x&nbsp;m1)&nbsp;(find_opt&nbsp;x&nbsp;m2)</code>\n        for any key <code class=\"code\">x</code>, provided that <code class=\"code\">f&nbsp;<span class=\"constructor\">None</span>&nbsp;<span class=\"constructor\">None</span>&nbsp;=&nbsp;<span class=\"constructor\">None</span></code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "union",
              "( key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">union&nbsp;f&nbsp;m1&nbsp;m2</code> computes a map whose keys is the union of keys\n        of <code class=\"code\">m1</code> and of <code class=\"code\">m2</code>.  When the same binding is defined in both\n        arguments, the function <code class=\"code\">f</code> is used to combine them.\n        This is a special case of <code class=\"code\">merge</code>: <code class=\"code\">union&nbsp;f&nbsp;m1&nbsp;m2</code> is equivalent\n        to <code class=\"code\">merge&nbsp;f'&nbsp;m1&nbsp;m2</code>, where</p>\n<ul>\n<li><code class=\"code\">f'&nbsp;<span class=\"constructor\">None</span>&nbsp;<span class=\"constructor\">None</span>&nbsp;=&nbsp;<span class=\"constructor\">None</span></code></li>\n<li><code class=\"code\">f'&nbsp;(<span class=\"constructor\">Some</span>&nbsp;v)&nbsp;<span class=\"constructor\">None</span>&nbsp;=&nbsp;<span class=\"constructor\">Some</span>&nbsp;v</code></li>\n<li><code class=\"code\">f'&nbsp;<span class=\"constructor\">None</span>&nbsp;(<span class=\"constructor\">Some</span>&nbsp;v)&nbsp;=&nbsp;<span class=\"constructor\">Some</span>&nbsp;v</code></li>\n<li><code class=\"code\">f'&nbsp;(<span class=\"constructor\">Some</span>&nbsp;v1)&nbsp;(<span class=\"constructor\">Some</span>&nbsp;v2)&nbsp;=&nbsp;f&nbsp;v1&nbsp;v2</code></li>\n</ul>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "('a -> 'a -> int) -> 'a t -> 'a t -> int",
              "\n<div class=\"info-desc\">\n<p>Total ordering between maps.  The first argument is a total ordering\n        used to compare data associated with equal keys in the two maps.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "('a -> 'a -> bool) -> 'a t -> 'a t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">equal&nbsp;cmp&nbsp;m1&nbsp;m2</code> tests whether the maps <code class=\"code\">m1</code> and <code class=\"code\">m2</code> are\n       equal, that is, contain equal keys and associate them with\n       equal data.  <code class=\"code\">cmp</code> is the equality predicate used to compare\n       the data associated with the keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "( key -> 'a -> unit) -> 'a t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;m</code> applies <code class=\"code\">f</code> to all bindings in map <code class=\"code\">m</code>.\n       <code class=\"code\">f</code> receives the key as first argument, and the associated value\n       as second argument.  The bindings are passed to <code class=\"code\">f</code> in increasing\n       order with respect to the ordering over the type of the keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold", "( key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;m&nbsp;a</code> computes <code class=\"code\">(f&nbsp;kN&nbsp;dN&nbsp;...&nbsp;(f&nbsp;k1&nbsp;d1&nbsp;a)...)</code>,\n       where <code class=\"code\">k1&nbsp;...&nbsp;kN</code> are the keys of all bindings in <code class=\"code\">m</code>\n       (in increasing order), and <code class=\"code\">d1&nbsp;...&nbsp;dN</code> are the associated data.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "for_all", "( key -> 'a -> bool) -> 'a t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;m</code> checks if all the bindings of the map\n        satisfy the predicate <code class=\"code\">p</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "exists", "( key -> 'a -> bool) -> 'a t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;m</code> checks if at least one binding of the map\n        satisfies the predicate <code class=\"code\">p</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "filter", "( key -> 'a -> bool) -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">filter&nbsp;p&nbsp;m</code> returns the map with all the bindings in <code class=\"code\">m</code>\n        that satisfy predicate <code class=\"code\">p</code>. If <code class=\"code\">p</code> satisfies every binding in <code class=\"code\">m</code>,\n        <code class=\"code\">m</code> is returned unchanged (the result of the function is then\n        physically equal to <code class=\"code\">m</code>)</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "partition", "( key -> 'a -> bool) -> 'a t -> 'a t * 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">partition&nbsp;p&nbsp;m</code> returns a pair of maps <code class=\"code\">(m1,&nbsp;m2)</code>, where\n        <code class=\"code\">m1</code> contains all the bindings of <code class=\"code\">s</code> that satisfy the\n        predicate <code class=\"code\">p</code>, and <code class=\"code\">m2</code> is the map with all the bindings of\n        <code class=\"code\">s</code> that do not satisfy <code class=\"code\">p</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "cardinal", "'a t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the number of bindings of a map.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "bindings", "'a t -> ( key * 'a) list",
              "\n<div class=\"info-desc\">\n<p>Return the list of all bindings of the given map.\n       The returned list is sorted in increasing order with respect\n       to the ordering <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>, where <code class=\"code\"><span class=\"constructor\">Ord</span></code> is the argument\n       given to <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "min_binding", "'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p>Return the smallest binding of the given map\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or raise\n       <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the map is empty.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "min_binding_opt", "'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p>Return the smallest binding of the given map\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or <code class=\"code\"><span class=\"constructor\">None</span></code>\n       if the map is empty.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "max_binding", "'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Map.S.html#VALmin_binding\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.min_binding</code></a>, but returns the largest binding\n        of the given map.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "max_binding_opt", "'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Map.S.html#VALmin_binding_opt\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.min_binding_opt</code></a>, but returns the largest binding\n        of the given map.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "choose", "'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p>Return one binding of the given map, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if\n       the map is empty. Which binding is chosen is unspecified,\n       but equal bindings will be chosen for equal maps.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "choose_opt", "'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p>Return one binding of the given map, or <code class=\"code\"><span class=\"constructor\">None</span></code> if\n       the map is empty. Which binding is chosen is unspecified,\n       but equal bindings will be chosen for equal maps.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "split", "key -> 'a t -> 'a t * 'a option * 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">split&nbsp;x&nbsp;m</code> returns a triple <code class=\"code\">(l,&nbsp;data,&nbsp;r)</code>, where\n          <code class=\"code\">l</code> is the map with all the bindings of <code class=\"code\">m</code> whose key\n        is strictly less than <code class=\"code\">x</code>;\n          <code class=\"code\">r</code> is the map with all the bindings of <code class=\"code\">m</code> whose key\n        is strictly greater than <code class=\"code\">x</code>;\n          <code class=\"code\">data</code> is <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">m</code> contains no binding for <code class=\"code\">x</code>,\n          or <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> if <code class=\"code\">m</code> binds <code class=\"code\">v</code> to <code class=\"code\">x</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find", "key -> 'a t -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;x&nbsp;m</code> returns the current binding of <code class=\"code\">x</code> in <code class=\"code\">m</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such binding exists.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find_opt", "key -> 'a t -> 'a option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_opt&nbsp;x&nbsp;m</code> returns <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> if the current binding of <code class=\"code\">x</code>\n        in <code class=\"code\">m</code> is <code class=\"code\">v</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such binding exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_first", "( key -> bool) -> 'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_first&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns the binding of <code class=\"code\">m</code> with the lowest key <code class=\"code\">k</code> such that <code class=\"code\">f&nbsp;k</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such key exists.</p>\n\n<p>For example, <code class=\"code\">find_first&nbsp;(<span class=\"keyword\">fun</span>&nbsp;k&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;<span class=\"constructor\">Ord</span>.compare&nbsp;k&nbsp;x&nbsp;&gt;=&nbsp;0)&nbsp;m</code> will return\n       the first binding <code class=\"code\">k,&nbsp;v</code> of <code class=\"code\">m</code> where <code class=\"code\"><span class=\"constructor\">Ord</span>.compare&nbsp;k&nbsp;x&nbsp;&gt;=&nbsp;0</code>\n       (intuitively: <code class=\"code\">k&nbsp;&gt;=&nbsp;x</code>), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">x</code> is greater than any\n       element of <code class=\"code\">m</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_first_opt",
              "( key -> bool) -> 'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_first_opt&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns an option containing the binding of <code class=\"code\">m</code> with the lowest key <code class=\"code\">k</code>\n       such that <code class=\"code\">f&nbsp;k</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such key exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_last", "( key -> bool) -> 'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_last&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns the binding of <code class=\"code\">m</code> with the highest key <code class=\"code\">k</code> such that <code class=\"code\">f&nbsp;k</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such key exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_last_opt",
              "( key -> bool) -> 'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_last_opt&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns an option containing the binding of <code class=\"code\">m</code> with the highest key <code class=\"code\">k</code>\n       such that <code class=\"code\">f&nbsp;k</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such key exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "('a -> 'b) -> 'a t -> 'b t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">map&nbsp;f&nbsp;m</code> returns a map with same domain as <code class=\"code\">m</code>, where the\n       associated value <code class=\"code\">a</code> of all bindings of <code class=\"code\">m</code> has been\n       replaced by the result of the application of <code class=\"code\">f</code> to <code class=\"code\">a</code>.\n       The bindings are passed to <code class=\"code\">f</code> in increasing order\n       with respect to the ordering over the type of the keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mapi", "( key -> 'a -> 'b) -> 'a t -> 'b t",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Map.S.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.map</code></a>, but the function receives as arguments both the\n       key and the associated value for each binding of the map.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "'a t -> ( key * 'a) Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the whole map, in ascending order</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq_from", "key -> 'a t -> ( key * 'a) Seq.t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">to_seq_from&nbsp;k&nbsp;m</code> iterates on a subset of the bindings of <code class=\"code\">m</code>,\n        in ascending order, from key <code class=\"code\">k</code> or above.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_seq", "( key * 'a) Seq.t -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p>Add the given bindings to the map, in order.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "( key * 'a) Seq.t -> 'a t",
              "\n<div class=\"info-desc\">\n<p>Build a map from the given bindings</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Depend.StringSet",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "elt", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the set elements.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of sets.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "empty", "t",
              "\n<div class=\"info-desc\">\n<p>The empty set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "is_empty", "t -> bool",
              "\n<div class=\"info-desc\">\n<p>Test whether a set is empty or not.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mem", "elt -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;x&nbsp;s</code> tests whether <code class=\"code\">x</code> belongs to the set <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "elt -> t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add&nbsp;x&nbsp;s</code> returns a set containing all elements of <code class=\"code\">s</code>,\n       plus <code class=\"code\">x</code>. If <code class=\"code\">x</code> was already in <code class=\"code\">s</code>, <code class=\"code\">s</code> is returned unchanged\n       (the result of the function is then physically equal to <code class=\"code\">s</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "singleton", "elt -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">singleton&nbsp;x</code> returns the one-element set containing only <code class=\"code\">x</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "remove", "elt -> t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">remove&nbsp;x&nbsp;s</code> returns a set containing all elements of <code class=\"code\">s</code>,\n       except <code class=\"code\">x</code>. If <code class=\"code\">x</code> was not in <code class=\"code\">s</code>, <code class=\"code\">s</code> is returned unchanged\n       (the result of the function is then physically equal to <code class=\"code\">s</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "union", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Set union.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "inter", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Set intersection.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "diff", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Set difference.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>Total ordering between sets. Can be used as the ordering function\n       for doing sets of sets.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">equal&nbsp;s1&nbsp;s2</code> tests whether the sets <code class=\"code\">s1</code> and <code class=\"code\">s2</code> are\n       equal, that is, contain equal elements.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "subset", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">subset&nbsp;s1&nbsp;s2</code> tests whether the set <code class=\"code\">s1</code> is a subset of\n       the set <code class=\"code\">s2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "( elt -> unit) -> t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies <code class=\"code\">f</code> in turn to all elements of <code class=\"code\">s</code>.\n       The elements of <code class=\"code\">s</code> are presented to <code class=\"code\">f</code> in increasing order\n       with respect to the ordering over the type of the elements.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "( elt -> elt ) -> t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">map&nbsp;f&nbsp;s</code> is the set whose elements are <code class=\"code\">f&nbsp;a0</code>,<code class=\"code\">f&nbsp;a1</code>... <code class=\"code\">f<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aN</code>, where <code class=\"code\">a0</code>,<code class=\"code\">a1</code>...<code class=\"code\">aN</code> are the elements of <code class=\"code\">s</code>.</p>\n\n<p>The elements are passed to <code class=\"code\">f</code> in increasing order\n       with respect to the ordering over the type of the elements.</p>\n\n<p>If no element of <code class=\"code\">s</code> is changed by <code class=\"code\">f</code>, <code class=\"code\">s</code> is returned\n       unchanged. (If each output of <code class=\"code\">f</code> is physically equal to its\n       input, the returned set is physically equal to <code class=\"code\">s</code>.)</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.04.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "fold", "( elt -> 'a -> 'a) -> t -> 'a -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;s&nbsp;a</code> computes <code class=\"code\">(f&nbsp;xN&nbsp;...&nbsp;(f&nbsp;x2&nbsp;(f&nbsp;x1&nbsp;a))...)</code>,\n       where <code class=\"code\">x1&nbsp;...&nbsp;xN</code> are the elements of <code class=\"code\">s</code>, in increasing order.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "for_all", "( elt -> bool) -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;s</code> checks if all elements of the set\n       satisfy the predicate <code class=\"code\">p</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "exists", "( elt -> bool) -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;s</code> checks if at least one element of\n       the set satisfies the predicate <code class=\"code\">p</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "filter", "( elt -> bool) -> t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">filter&nbsp;p&nbsp;s</code> returns the set of all elements in <code class=\"code\">s</code>\n       that satisfy predicate <code class=\"code\">p</code>. If <code class=\"code\">p</code> satisfies every element in <code class=\"code\">s</code>,\n       <code class=\"code\">s</code> is returned unchanged (the result of the function is then\n       physically equal to <code class=\"code\">s</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "partition", "( elt -> bool) -> t -> t * t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">partition&nbsp;p&nbsp;s</code> returns a pair of sets <code class=\"code\">(s1,&nbsp;s2)</code>, where\n       <code class=\"code\">s1</code> is the set of all the elements of <code class=\"code\">s</code> that satisfy the\n       predicate <code class=\"code\">p</code>, and <code class=\"code\">s2</code> is the set of all the elements of\n       <code class=\"code\">s</code> that do not satisfy <code class=\"code\">p</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "cardinal", "t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the number of elements of a set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "elements", "t -> elt list",
              "\n<div class=\"info-desc\">\n<p>Return the list of all elements of the given set.\n       The returned list is sorted in increasing order with respect\n       to the ordering <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>, where <code class=\"code\"><span class=\"constructor\">Ord</span></code> is the argument\n       given to <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "min_elt", "t -> elt",
              "\n<div class=\"info-desc\">\n<p>Return the smallest element of the given set\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or raise\n       <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the set is empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "min_elt_opt", "t -> elt option",
              "\n<div class=\"info-desc\">\n<p>Return the smallest element of the given set\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or <code class=\"code\"><span class=\"constructor\">None</span></code>\n       if the set is empty.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "max_elt", "t -> elt",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Set.S.html#VALmin_elt\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">S</span>.min_elt</code></a>, but returns the largest element of the\n       given set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "max_elt_opt", "t -> elt option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Set.S.html#VALmin_elt_opt\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">S</span>.min_elt_opt</code></a>, but returns the largest element of the\n        given set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "choose", "t -> elt",
              "\n<div class=\"info-desc\">\n<p>Return one element of the given set, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if\n       the set is empty. Which element is chosen is unspecified,\n       but equal elements will be chosen for equal sets.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "choose_opt", "t -> elt option",
              "\n<div class=\"info-desc\">\n<p>Return one element of the given set, or <code class=\"code\"><span class=\"constructor\">None</span></code> if\n        the set is empty. Which element is chosen is unspecified,\n        but equal elements will be chosen for equal sets.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "split", "elt -> t -> t * bool * t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">split&nbsp;x&nbsp;s</code> returns a triple <code class=\"code\">(l,&nbsp;present,&nbsp;r)</code>, where\n          <code class=\"code\">l</code> is the set of elements of <code class=\"code\">s</code> that are\n          strictly less than <code class=\"code\">x</code>;\n          <code class=\"code\">r</code> is the set of elements of <code class=\"code\">s</code> that are\n          strictly greater than <code class=\"code\">x</code>;\n          <code class=\"code\">present</code> is <code class=\"code\"><span class=\"keyword\">false</span></code> if <code class=\"code\">s</code> contains no element equal to <code class=\"code\">x</code>,\n          or <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">s</code> contains an element equal to <code class=\"code\">x</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find", "elt -> t -> elt",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;x&nbsp;s</code> returns the element of <code class=\"code\">s</code> equal to <code class=\"code\">x</code> (according\n        to <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element\n        exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_opt", "elt -> t -> elt option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_opt&nbsp;x&nbsp;s</code> returns the element of <code class=\"code\">s</code> equal to <code class=\"code\">x</code> (according\n        to <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>), or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element\n        exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_first", "( elt -> bool) -> t -> elt",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_first&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns the lowest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that <code class=\"code\">f&nbsp;e</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element exists.</p>\n\n<p>For example, <code class=\"code\">find_first&nbsp;(<span class=\"keyword\">fun</span>&nbsp;e&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;<span class=\"constructor\">Ord</span>.compare&nbsp;e&nbsp;x&nbsp;&gt;=&nbsp;0)&nbsp;s</code> will return\n       the first element <code class=\"code\">e</code> of <code class=\"code\">s</code> where <code class=\"code\"><span class=\"constructor\">Ord</span>.compare&nbsp;e&nbsp;x&nbsp;&gt;=&nbsp;0</code> (intuitively:\n       <code class=\"code\">e&nbsp;&gt;=&nbsp;x</code>), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">x</code> is greater than any element of\n       <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_first_opt", "( elt -> bool) -> t -> elt option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_first_opt&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns an option containing the lowest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that\n       <code class=\"code\">f&nbsp;e</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_last", "( elt -> bool) -> t -> elt",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_last&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns the highest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that <code class=\"code\">f&nbsp;e</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_last_opt", "( elt -> bool) -> t -> elt option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_last_opt&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns an option containing the highest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that\n       <code class=\"code\">f&nbsp;e</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_list", "elt list -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">of_list&nbsp;l</code> creates a set from a list of elements.\n        This is usually more efficient than folding <code class=\"code\">add</code> over the list,\n        except perhaps for lists with many duplicated elements.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq_from", "elt -> t -> elt Seq.t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">to_seq_from&nbsp;x&nbsp;s</code> iterates on a subset of the elements of <code class=\"code\">s</code>\n        in ascending order, from <code class=\"code\">x</code> or above.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq", "t -> elt Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the whole set, in ascending order</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_seq", "elt Seq.t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Add the given elements to the set, in order.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "elt Seq.t -> t",
              "\n<div class=\"info-desc\">\n<p>Build a set from the given bindings</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Digest",
    "module_info":
      "\n<p>MD5 message digest.</p>\n\n<p>This module provides functions to compute 128-bit 'digests' of\n   arbitrary-length strings or files. The digests are of cryptographic\n   quality: it is very hard, given a digest, to forge a string having\n   that digest. The algorithm used is MD5. This module should not be\n   used for secure and sensitive cryptographic applications. For these\n   kind of applications more recent and stronger cryptographic\n   primitives should be used instead.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", "= string", null,
              "\n<div class=\"info-desc\">\n<p>The type of digests: 16-character strings.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>The comparison function for 16-character digest, with the same\n    specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a> and the implementation\n    shared with <a href=\"String.html#VALcompare\"><code class=\"code\"><span class=\"constructor\">String</span>.compare</code></a>. Along with the type <code class=\"code\">t</code>, this\n    function <code class=\"code\">compare</code> allows the module <code class=\"code\"><span class=\"constructor\">Digest</span></code> to be passed as\n    argument to the functors <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p>The equal function for 16-character digest.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "string", "string -> t",
              "\n<div class=\"info-desc\">\n<p>Return the digest of the given string.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "bytes", "bytes -> t",
              "\n<div class=\"info-desc\">\n<p>Return the digest of the given byte sequence.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "substring", "string -> int -> int -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Digest</span>.substring&nbsp;s&nbsp;ofs&nbsp;len</code> returns the digest of the substring\n   of <code class=\"code\">s</code> starting at index <code class=\"code\">ofs</code> and containing <code class=\"code\">len</code> characters.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "subbytes", "bytes -> int -> int -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Digest</span>.subbytes&nbsp;s&nbsp;ofs&nbsp;len</code> returns the digest of the subsequence\n    of <code class=\"code\">s</code> starting at index <code class=\"code\">ofs</code> and containing <code class=\"code\">len</code> bytes.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "channel", "in_channel -> int -> t",
              "\n<div class=\"info-desc\">\n<p>If <code class=\"code\">len</code> is nonnegative, <code class=\"code\"><span class=\"constructor\">Digest</span>.channel&nbsp;ic&nbsp;len</code> reads <code class=\"code\">len</code>\n   characters from channel <code class=\"code\">ic</code> and returns their digest, or raises\n   <code class=\"code\"><span class=\"constructor\">End_of_file</span></code> if end-of-file is reached before <code class=\"code\">len</code> characters\n   are read.  If <code class=\"code\">len</code> is negative, <code class=\"code\"><span class=\"constructor\">Digest</span>.channel&nbsp;ic&nbsp;len</code> reads\n   all characters from <code class=\"code\">ic</code> until end-of-file is reached and return\n   their digest.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "file", "string -> t",
              "\n<div class=\"info-desc\">\n<p>Return the digest of the file whose name is given.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "output", "out_channel -> t -> unit",
              "\n<div class=\"info-desc\">\n<p>Write a digest on the given output channel.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "input", "in_channel -> t",
              "\n<div class=\"info-desc\">\n<p>Read a digest from the given input channel.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_hex", "t -> string",
              "\n<div class=\"info-desc\">\n<p>Return the printable hexadecimal representation of the given digest.\n    Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the argument is not exactly 16 bytes.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "from_hex", "string -> t",
              "\n<div class=\"info-desc\">\n<p>Convert a hexadecimal representation back into the corresponding digest.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the argument is not exactly 32 hexadecimal\n   characters.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Docstrings",
    "module_info": "\n<p>Documentation comments</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "init", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>(Re)Initialise all docstring state</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "warn_bad_docstrings", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Emit warnings for unattached and ambiguous docstrings</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": [
          {
            "section_name": "Docstrings",
            "section_info": null,
            "elements": [
              [
                "Typevariant",
                [
                  "docstring", null, null,
                  "\n<div class=\"info-desc\">\n<p>Documentation comments</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "docstring", "string -> Location.t -> docstring",
                  "\n<div class=\"info-desc\">\n<p>Create a docstring</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "register", "docstring -> unit",
                  "\n<div class=\"info-desc\">\n<p>Register a docstring</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "docstring_body", "docstring -> string",
                  "\n<div class=\"info-desc\">\n<p>Get the text of a docstring</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "docstring_loc", "docstring -> Location.t",
                  "\n<div class=\"info-desc\">\n<p>Get the location of a docstring</p>\n</div>\n"
                ]
              ]
            ],
            "sub_sections": []
          },
          {
            "section_name": "Set functions",
            "section_info":
              "<p>These functions are used by the lexer to associate docstrings to\n   the locations of tokens.</p>",
            "elements": [
              [
                "Function",
                [
                  "set_pre_docstrings",
                  "Lexing.position -> docstring list -> unit",
                  "\n<div class=\"info-desc\">\n<p>Docstrings immediately preceding a token</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "set_post_docstrings",
                  "Lexing.position -> docstring list -> unit",
                  "\n<div class=\"info-desc\">\n<p>Docstrings immediately following a token</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "set_floating_docstrings",
                  "Lexing.position -> docstring list -> unit",
                  "\n<div class=\"info-desc\">\n<p>Docstrings not immediately adjacent to a token</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "set_pre_extra_docstrings",
                  "Lexing.position -> docstring list -> unit",
                  "\n<div class=\"info-desc\">\n<p>Docstrings immediately following the token which precedes this one</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "set_post_extra_docstrings",
                  "Lexing.position -> docstring list -> unit",
                  "\n<div class=\"info-desc\">\n<p>Docstrings immediately preceding the token which follows this one</p>\n</div>\n"
                ]
              ]
            ],
            "sub_sections": []
          },
          {
            "section_name": "Items",
            "section_info":
              "<p>The <a href=\"Docstrings.html#TYPEdocs\"><code class=\"code\"><span class=\"constructor\">Docstrings</span>.docs</code></a> type represents documentation attached to an item.</p>",
            "elements": [
              [
                "Typevariant",
                [
                  "docs", "= {",
                  "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTdocs.docs_pre\">docs_pre</span>&nbsp;: <code class=\"type\"><a href=\"Docstrings.html#TYPEdocstring\">docstring</a> option</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTdocs.docs_post\">docs_post</span>&nbsp;: <code class=\"type\"><a href=\"Docstrings.html#TYPEdocstring\">docstring</a> option</code>;</code></td>\n\n</tr></tbody>",
                  null
                ]
              ],
              [ "Function", [ "empty_docs", "docs", null ] ],
              [
                "Function",
                [ "docs_attr", "docstring -> Parsetree.attribute", null ]
              ],
              [
                "Function",
                [
                  "add_docs_attrs",
                  "docs -> Parsetree.attributes -> Parsetree.attributes",
                  "\n<div class=\"info-desc\">\n<p>Convert item documentation to attributes and add them to an\n    attribute list</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "symbol_docs", "unit -> docs",
                  "\n<div class=\"info-desc\">\n<p>Fetch the item documentation for the current symbol. This also\n    marks this documentation (for ambiguity warnings).</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [ "symbol_docs_lazy", "unit -> docs Lazy.t", null ]
              ],
              [
                "Function",
                [
                  "rhs_docs", "int -> int -> docs",
                  "\n<div class=\"info-desc\">\n<p>Fetch the item documentation for the symbols between two\n    positions. This also marks this documentation (for ambiguity\n    warnings).</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [ "rhs_docs_lazy", "int -> int -> docs Lazy.t", null ]
              ],
              [
                "Function",
                [
                  "mark_symbol_docs", "unit -> unit",
                  "\n<div class=\"info-desc\">\n<p>Mark the item documentation for the current symbol (for ambiguity\n    warnings).</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "mark_rhs_docs", "int -> int -> unit",
                  "\n<div class=\"info-desc\">\n<p>Mark as associated the item documentation for the symbols between\n    two positions (for ambiguity warnings)</p>\n</div>\n"
                ]
              ]
            ],
            "sub_sections": []
          },
          {
            "section_name": "Fields and constructors",
            "section_info":
              "<p>The <a href=\"Docstrings.html#TYPEinfo\"><code class=\"code\"><span class=\"constructor\">Docstrings</span>.info</code></a> type represents documentation attached to a field or\n    constructor.</p>",
            "elements": [
              [ "Typevariant", [ "info", "= docstring option", null, null ] ],
              [ "Function", [ "empty_info", "info", null ] ],
              [
                "Function",
                [ "info_attr", "docstring -> Parsetree.attribute", null ]
              ],
              [
                "Function",
                [
                  "add_info_attrs",
                  "info -> Parsetree.attributes -> Parsetree.attributes",
                  "\n<div class=\"info-desc\">\n<p>Convert field info to attributes and add them to an\n    attribute list</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "symbol_info", "unit -> info",
                  "\n<div class=\"info-desc\">\n<p>Fetch the field info for the current symbol.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "rhs_info", "int -> info",
                  "\n<div class=\"info-desc\">\n<p>Fetch the field info following the symbol at a given position.</p>\n</div>\n"
                ]
              ]
            ],
            "sub_sections": []
          },
          {
            "section_name": "Unattached comments",
            "section_info":
              "<p>The <a href=\"Docstrings.html#TYPEtext\"><code class=\"code\"><span class=\"constructor\">Docstrings</span>.text</code></a> type represents documentation which is not attached to\n    anything.</p>",
            "elements": [
              [ "Typevariant", [ "text", "= docstring list", null, null ] ],
              [ "Function", [ "empty_text", "text", null ] ],
              [ "Function", [ "empty_text_lazy", "text Lazy.t", null ] ],
              [
                "Function",
                [ "text_attr", "docstring -> Parsetree.attribute", null ]
              ],
              [
                "Function",
                [
                  "add_text_attrs",
                  "text -> Parsetree.attributes -> Parsetree.attributes",
                  "\n<div class=\"info-desc\">\n<p>Convert text to attributes and add them to an attribute list</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "symbol_text", "unit -> text",
                  "\n<div class=\"info-desc\">\n<p>Fetch the text preceding the current symbol.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [ "symbol_text_lazy", "unit -> text Lazy.t", null ]
              ],
              [
                "Function",
                [
                  "rhs_text", "int -> text",
                  "\n<div class=\"info-desc\">\n<p>Fetch the text preceding the symbol at the given position.</p>\n</div>\n"
                ]
              ],
              [ "Function", [ "rhs_text_lazy", "int -> text Lazy.t", null ] ]
            ],
            "sub_sections": []
          },
          {
            "section_name": "Extra text",
            "section_info":
              "<p>There may be additional text attached to the delimiters of a block\n    (e.g. <code class=\"code\"><span class=\"keyword\">struct</span></code> and <code class=\"code\"><span class=\"keyword\">end</span></code>). This is fetched by the following\n    functions, which are applied to the contents of the block rather\n    than the delimiters.</p>",
            "elements": [
              [
                "Function",
                [
                  "symbol_pre_extra_text", "unit -> text",
                  "\n<div class=\"info-desc\">\n<p>Fetch additional text preceding the current symbol</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "symbol_post_extra_text", "unit -> text",
                  "\n<div class=\"info-desc\">\n<p>Fetch additional text following the current symbol</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "rhs_pre_extra_text", "int -> text",
                  "\n<div class=\"info-desc\">\n<p>Fetch additional text preceding the symbol at the given position</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "rhs_post_extra_text", "int -> text",
                  "\n<div class=\"info-desc\">\n<p>Fetch additional text following the symbol at the given position</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "rhs_post_text", "int -> text",
                  "\n<div class=\"info-desc\">\n<p>Fetch text following the symbol at the given position</p>\n</div>\n"
                ]
              ]
            ],
            "sub_sections": []
          }
        ]
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Dynlink",
    "module_info": "\n<p>Dynamic loading of object files.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "is_native", "bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"keyword\">true</span></code> if the program is native,\n    <code class=\"code\"><span class=\"keyword\">false</span></code> if the program is bytecode.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Dynamic loading of compiled files",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "loadfile", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>In bytecode: load the given bytecode object file (<code class=\"code\">.cmo</code> file) or\n    bytecode library file (<code class=\"code\">.cma</code> file), and link it with the running\n    program. In native code: load the given OCaml plugin file (usually\n    <code class=\"code\">.cmxs</code>), and link it with the running\n    program.\n    All toplevel expressions in the loaded compilation units\n    are evaluated. No facilities are provided to\n    access value names defined by the unit. Therefore, the unit\n    must register itself its entry points with the main program,\n    e.g. by modifying tables of functions.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "loadfile_private", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">loadfile</code>, except that the compilation units just loaded\n    are hidden (cannot be referenced) from other modules dynamically\n    loaded afterwards.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "adapt_filename", "string -> string",
              "\n<div class=\"info-desc\">\n<p>In bytecode, the identity function. In native code, replace the last\n    extension with <code class=\"code\">.cmxs</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Access control",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "allow_only", "string list -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">allow_only&nbsp;units</code> restricts the compilation units that\n    dynamically-linked units can reference: it forbids all references\n    to units other than those named in the list <code class=\"code\">units</code>. References\n    to any other compilation unit will cause a <code class=\"code\"><span class=\"constructor\">Unavailable_unit</span></code>\n    error during <code class=\"code\">loadfile</code> or <code class=\"code\">loadfile_private</code>.</p>\n\n<p>Initially (or after calling <code class=\"code\">default_available_units</code>) all\n    compilation units composing the program currently running are\n    available for reference from dynamically-linked units.\n    <code class=\"code\">allow_only</code> can be used to restrict access to a subset of these\n    units, e.g. to the units that compose the API for\n    dynamically-linked code, and prevent access to all other units,\n    e.g. private, internal modules of the running program. If\n    <code class=\"code\">allow_only</code> is called several times, access will be restricted to\n    the intersection of the given lists (i.e. a call to <code class=\"code\">allow_only</code>\n    can never increase the set of available units).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "prohibit", "string list -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">prohibit&nbsp;units</code> prohibits dynamically-linked units from referencing\n    the units named in list <code class=\"code\">units</code>.  This can be used to prevent\n    access to selected units, e.g. private, internal modules of\n    the running program.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "default_available_units", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Reset the set of units that can be referenced from dynamically-linked\n    code to its default value, that is, all units composing the currently\n    running program.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "allow_unsafe_modules", "bool -> unit",
              "\n<div class=\"info-desc\">\n<p>Govern whether unsafe object files are allowed to be\n    dynamically linked. A compilation unit is 'unsafe' if it contains\n    declarations of external functions, which can break type safety.\n    By default, dynamic linking of unsafe object files is\n    not allowed. In native code, this function does nothing; object files\n    with external functions are always allowed to be dynamically linked.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Deprecated, low-level API for access control",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "add_interfaces", "string list -> string list -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add_interfaces&nbsp;units&nbsp;path</code> grants dynamically-linked object\n    files access to the compilation  units named in list <code class=\"code\">units</code>.\n    The interfaces (<code class=\"code\">.cmi</code> files) for these units are searched in\n    <code class=\"code\">path</code> (a list of directory names).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add_available_units", "(string * Digest.t ) list -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Dynlink.html#VALadd_interfaces\"><code class=\"code\"><span class=\"constructor\">Dynlink</span>.add_interfaces</code></a>, but instead of searching <code class=\"code\">.cmi</code> files\n    to find the unit interfaces, uses the interface digests given\n    for each unit. This way, the <code class=\"code\">.cmi</code> interface files need not be\n    available at run-time. The digests can be extracted from <code class=\"code\">.cmi</code>\n    files using the <code class=\"code\">extract_crc</code> program installed in the\n    OCaml standard library directory.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "clear_available_units", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Empty the list of compilation units accessible to dynamically-linked\n    programs.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Deprecated, initialization",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "init", "unit -> unit",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Initialize the <code class=\"code\"><span class=\"constructor\">Dynlink</span></code> library. This function is called\n    automatically when needed.</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Error reporting",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "linking_error", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlinking_error.Undefined_global\"><span class=\"constructor\">Undefined_global</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlinking_error.Unavailable_primitive\"><span class=\"constructor\">Unavailable_primitive</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlinking_error.Uninitialized_global\"><span class=\"constructor\">Uninitialized_global</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "error", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Not_a_bytecode_file\"><span class=\"constructor\">Not_a_bytecode_file</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Inconsistent_import\"><span class=\"constructor\">Inconsistent_import</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Unavailable_unit\"><span class=\"constructor\">Unavailable_unit</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Unsafe_file\"><span class=\"constructor\">Unsafe_file</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Linking_error\"><span class=\"constructor\">Linking_error</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * <a href=\"Dynlink.html#TYPElinking_error\">linking_error</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Corrupted_interface\"><span class=\"constructor\">Corrupted_interface</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.File_not_found\"><span class=\"constructor\">File_not_found</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Cannot_open_dll\"><span class=\"constructor\">Cannot_open_dll</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Inconsistent_implementation\"><span class=\"constructor\">Inconsistent_implementation</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Exception",
            [
              "Error", "error",
              "\n<div class=\"info-desc\">\n<p>Errors in dynamic linking are reported by raising the <code class=\"code\"><span class=\"constructor\">Error</span></code>\n    exception with a description of the error.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "error_message", "error -> string",
              "\n<div class=\"info-desc\">\n<p>Convert an error description to a printable message.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ephemeron.GenHashTable",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info":
          "<p>Define a hash table on generic containers which have a notion of\n      \"death\" and aliveness. If a binding is dead the hash table can\n      automatically remove it.</p>",
        "elements": [
          [
            "Typevariant",
            [
              "equal", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTequal.ETrue\"><span class=\"constructor\">ETrue</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTequal.EFalse\"><span class=\"constructor\">EFalse</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTequal.EDead\"><span class=\"constructor\">EDead</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>the container is dead</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              null
            ]
          ],
          [ "Module", [ "MakeSeeded", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ephemeron.GenHashTable.MakeSeeded",
    "module_info":
      "\n<div class=\"info-desc\">\n<p>Functor building an implementation of an hash table that use the container\n      for keeping the information given</p>\n</div>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Include", "Hashtbl.SeededS" ],
          [
            "Function",
            [
              "clean", "'a t -> unit",
              "\n<div class=\"info-desc\">\n<p>remove all dead bindings. Done automatically during automatic resizing.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stats_alive", "'a t -> Hashtbl.statistics",
              "\n<div class=\"info-desc\">\n<p>same as <a href=\"Hashtbl.SeededS.html#VALstats\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">SeededS</span>.stats</code></a> but only count the alive bindings</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMakeSeeded\"><span class=\"keyword\">module</span> MakeSeeded</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">H</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"code\"><span class=\"keyword\">sig</span></code></div>",
      "functor_elements": [
        [
          "Typevariant",
          [
            "t", null, null,
            "\n<div class=\"info-desc\">\n<p>keys</p>\n</div>\n"
          ]
        ],
        [
          "Typevariant",
          [
            "'a", "container", null,
            "\n<div class=\"info-desc\">\n<p>contains keys and the associated data</p>\n</div>\n"
          ]
        ],
        [
          "Function",
          [
            "hash", "int -> t -> int",
            "\n<div class=\"info-desc\">\n<p>same as <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">SeededHashedType</span></code></p>\n</div>\n"
          ]
        ],
        [
          "Function",
          [
            "equal", "'a container -> t -> Ephemeron.GenHashTable.equal",
            "\n<div class=\"info-desc\">\n<p>equality predicate used to compare a key with the one in a\n        container. Can return <code class=\"code\"><span class=\"constructor\">EDead</span></code> if the keys in the container are\n        dead</p>\n</div>\n"
          ]
        ],
        [
          "Function",
          [
            "create", "t -> 'a -> 'a container",
            "\n<div class=\"info-desc\">\n<p><code class=\"code\">create&nbsp;key&nbsp;data</code> creates a container from\n        some initials keys and one data</p>\n</div>\n"
          ]
        ],
        [
          "Function",
          [
            "get_key", "'a container -> t option",
            "\n<div class=\"info-desc\">\n<p><code class=\"code\">get_key&nbsp;cont</code> returns the keys if they are all alive</p>\n</div>\n"
          ]
        ],
        [
          "Function",
          [
            "get_data", "'a container -> 'a option",
            "\n<div class=\"info-desc\">\n<p><code class=\"code\">get_data&nbsp;cont</code> returns the data if it is alive</p>\n</div>\n"
          ]
        ],
        [
          "Function",
          [
            "set_key_data", "'a container -> t -> 'a -> unit",
            "\n<div class=\"info-desc\">\n<p><code class=\"code\">set_key_data&nbsp;cont</code> modifies the key and data</p>\n</div>\n"
          ]
        ],
        [
          "Function",
          [
            "check_key", "'a container -> bool",
            "\n<div class=\"info-desc\">\n<p><code class=\"code\">check_key&nbsp;cont</code> checks if all the keys contained in the data\n        are alive</p>\n</div>\n"
          ]
        ]
      ],
      "end_sig":
        "<code class=\"code\"><span class=\"keyword\">end</span></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"Ephemeron.SeededS.html\">Ephemeron.SeededS</a></code><code class=\"type\">  with type key = H.t</code>",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>H</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\">sig\n    type t\n    (** keys *)\n\n    type 'a container\n    (** contains keys and the associated data *)\n\n    val hash: int -&gt; t -&gt; int\n    (** same as {!<a href=\"Hashtbl.SeededHashedType.html\">Hashtbl.SeededHashedType</a>} *)\n\n    val equal: 'a container -&gt; t -&gt; equal\n    (** equality predicate used to compare a key with the one in a\n        container. Can return [EDead] if the keys in the container are\n        dead *)\n\n    val create: t -&gt; 'a -&gt; 'a container\n    (** [create key data] creates a container from\n        some initials keys and one data *)\n\n    val get_key: 'a container -&gt; t option\n    (** [get_key cont] returns the keys if they are all alive *)\n\n    val get_data: 'a container -&gt; 'a option\n    (** [get_data cont] returns the data if it is alive *)\n\n    val set_key_data: 'a container -&gt; t -&gt; 'a -&gt; unit\n    (** [set_key_data cont] modifies the key and data *)\n\n    val check_key: 'a container -&gt; bool\n    (** [check_key cont] checks if all the keys contained in the data\n        are alive *)\n  end</code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "Ephemeron",
    "module_info": "\n<p>Ephemerons and weak hash table</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info":
          "<p>Ephemerons and weak hash table are useful when one wants to cache\n    or memorize the computation of a function, as long as the\n    arguments and the function are used, without creating memory leaks\n    by continuously keeping old computation results that are not\n    useful anymore because one argument or the function is freed. An\n    implementation using <a href=\"Hashtbl.html#TYPEt\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.t</code></a> is not suitable because all\n    associations would keep in memory the arguments and the result.</p><p>Ephemerons can also be used for \"adding\" a field to an arbitrary\n    boxed ocaml value: you can attach an information to a value\n    created by an external library without memory leaks.</p><p>Ephemerons hold some keys and one or no data. They are all boxed\n    ocaml values. The keys of an ephemeron have the same behavior\n    than weak pointers according to the garbage collector. In fact\n    ocaml weak pointers are implemented as ephemerons without data.</p><p>The keys and data of an ephemeron are said to be full if they\n    point to a value, empty if the value have never been set, have\n    been unset, or was erased by the GC. In the function that accesses\n    the keys or data these two states are represented by the <code class=\"code\">option</code>\n    type.</p><p>The data is considered by the garbage collector alive if all the\n    full keys are alive and if the ephemeron is alive. When one of the\n    keys is not considered alive anymore by the GC, the data is\n    emptied from the ephemeron. The data could be alive for another\n    reason and in that case the GC will not free it, but the ephemeron\n    will not hold the data anymore.</p><p>The ephemerons complicate the notion of liveness of values, because\n    it is not anymore an equivalence with the reachability from root\n    value by usual pointers (not weak and not ephemerons). With ephemerons\n    the notion of liveness is constructed by the least fixpoint of:\n       A value is alive if:</p><ul>\n<li>it is a root value</li>\n<li>it is reachable from alive value by usual pointers</li>\n<li>it is the data of an alive ephemeron with all its full keys alive</li>\n</ul><p>Notes:</p><ul>\n<li>All the types defined in this module cannot be marshaled\n    using <a href=\"Pervasives.html#VALoutput_value\"><code class=\"code\">output_value</code></a> or the functions of the\n    <a href=\"Marshal.html\"><code class=\"code\"><span class=\"constructor\">Marshal</span></code></a> module.</li>\n</ul><p>Ephemerons are defined in a language agnostic way in this paper:\n    B. Hayes, Ephemerons: a New Finalization Mechanism, OOPSLA'9</p>",
        "elements": [
          [
            "Moduletype",
            [
              "S",
              "\n<p>The output signature of the functor <a href=\"Ephemeron.K1.Make.html\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Ephemeron.K2.Make.html\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K2</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n\n"
            ]
          ],
          [
            "Moduletype",
            [
              "SeededS",
              "\n<p>The output signature of the functor <a href=\"Ephemeron.K1.MakeSeeded.html\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.<span class=\"constructor\">MakeSeeded</span></code></a> and <a href=\"Ephemeron.K2.MakeSeeded.html\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K2</span>.<span class=\"constructor\">MakeSeeded</span></code></a>.</p>\n\n"
            ]
          ],
          [ "Module", [ "K1", null ] ],
          [ "Module", [ "K2", null ] ],
          [ "Module", [ "Kn", null ] ],
          [ "Module", [ "GenHashTable", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ephemeron.K1",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "('k, 'd)", "t", null,
              "\n<div class=\"info-desc\">\n<p>an ephemeron with one key</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "unit -> ('k, 'd) t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.create&nbsp;()</code> creates an ephemeron with one key. The\n      data and the key are empty</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_key", "('k, 'd) t -> 'k option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key&nbsp;eph</code> returns <code class=\"code\"><span class=\"constructor\">None</span></code> if the key of <code class=\"code\">eph</code> is\n      empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is the key) if it is full.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_key_copy", "('k, 'd) t -> 'k option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key_copy&nbsp;eph</code> returns <code class=\"code\"><span class=\"constructor\">None</span></code> if the key of <code class=\"code\">eph</code> is\n      empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is a (shallow) copy of the key) if\n      it is full. This function has the same GC friendliness as <a href=\"Weak.html#VALget_copy\"><code class=\"code\"><span class=\"constructor\">Weak</span>.get_copy</code></a></p>\n\n<p>If the element is a custom block it is not copied.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_key", "('k, 'd) t -> 'k -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_key&nbsp;eph&nbsp;el</code> sets the key of <code class=\"code\">eph</code> to be a\n      (full) key to <code class=\"code\">el</code></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unset_key", "('k, 'd) t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_key&nbsp;eph&nbsp;el</code> sets the key of <code class=\"code\">eph</code> to be an\n      empty key. Since there is only one key, the ephemeron starts\n      behaving like a reference on the data.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "check_key", "('k, 'd) t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_key&nbsp;eph</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the key of the <code class=\"code\">eph</code>\n      is full, <code class=\"code\"><span class=\"keyword\">false</span></code> if it is empty. Note that even if\n      <code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_key&nbsp;eph</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code>, a subsequent\n      <a href=\"Ephemeron.K1.html#VALget_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key</code></a><code class=\"code\">eph</code> can return <code class=\"code\"><span class=\"constructor\">None</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit_key", "('k, 'a) t -> ('k, 'b) t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key&nbsp;eph1&nbsp;eph2</code> sets the key of <code class=\"code\">eph2</code> with\n      the key of <code class=\"code\">eph1</code>. Contrary to using <a href=\"Ephemeron.K1.html#VALget_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key</code></a>\n      followed by <a href=\"Ephemeron.K1.html#VALset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_key</code></a> or <a href=\"Ephemeron.K1.html#VALunset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_key</code></a>\n      this function does not prevent the incremental GC from erasing\n      the value in its current cycle.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_data", "('k, 'd) t -> 'd option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data&nbsp;eph</code> returns <code class=\"code\"><span class=\"constructor\">None</span></code> if the data of <code class=\"code\">eph</code> is\n      empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is the data) if it is full.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_data_copy", "('k, 'd) t -> 'd option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data_copy&nbsp;eph</code> returns <code class=\"code\"><span class=\"constructor\">None</span></code> if the data of <code class=\"code\">eph</code> is\n      empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is a (shallow) copy of the data) if\n      it is full. This function has the same GC friendliness as <a href=\"Weak.html#VALget_copy\"><code class=\"code\"><span class=\"constructor\">Weak</span>.get_copy</code></a></p>\n\n<p>If the element is a custom block it is not copied.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_data", "('k, 'd) t -> 'd -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_data&nbsp;eph&nbsp;el</code> sets the data of <code class=\"code\">eph</code> to be a\n      (full) data to <code class=\"code\">el</code></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unset_data", "('k, 'd) t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_data&nbsp;eph&nbsp;el</code> sets the key of <code class=\"code\">eph</code> to be an\n      empty key. The ephemeron starts behaving like a weak pointer.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "check_data", "('k, 'd) t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_data&nbsp;eph</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the data of the <code class=\"code\">eph</code>\n      is full, <code class=\"code\"><span class=\"keyword\">false</span></code> if it is empty. Note that even if\n      <code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_data&nbsp;eph</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code>, a subsequent\n      <a href=\"Ephemeron.K1.html#VALget_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data</code></a><code class=\"code\">eph</code> can return <code class=\"code\"><span class=\"constructor\">None</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit_data", "('a, 'd) t -> ('b, 'd) t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_data&nbsp;eph1&nbsp;eph2</code> sets the data of <code class=\"code\">eph2</code> with\n      the data of <code class=\"code\">eph1</code>. Contrary to using <a href=\"Ephemeron.K1.html#VALget_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data</code></a>\n      followed by <a href=\"Ephemeron.K1.html#VALset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_data</code></a> or <a href=\"Ephemeron.K1.html#VALunset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_data</code></a>\n      this function does not prevent the incremental GC from erasing\n      the value in its current cycle.</p>\n</div>\n"
            ]
          ],
          [
            "Module",
            [
              "Make",
              "\n<p>Functor building an implementation of a weak hash table</p>\n\n"
            ]
          ],
          [
            "Module",
            [
              "MakeSeeded",
              "\n<p>Functor building an implementation of a weak hash table.</p>\n\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ephemeron.K1.Make",
    "module_info":
      "\n<div class=\"info-desc\">\n<p>Functor building an implementation of a weak hash table</p>\n</div>\n",
    "sections": [
      {
        "section_name": null,
        "section_info":
          "<p>Propose the same interface as usual hash table. However since\n      the bindings are weak, even if <code class=\"code\">mem&nbsp;h&nbsp;k</code> is true, a subsequent\n      <code class=\"code\">find&nbsp;h&nbsp;k</code> may raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> because the garbage collector\n      can run between the two.</p><p>Moreover, the table shouldn't be modified during a call to <code class=\"code\">iter</code>.\n      Use <code class=\"code\">filter_map_inplace</code> in this case.</p>",
        "elements": [
          [ "Include", "Hashtbl.S" ],
          [
            "Function",
            [
              "clean", "'a t -> unit",
              "\n<div class=\"info-desc\">\n<p>remove all dead bindings. Done automatically during automatic resizing.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stats_alive", "'a t -> Hashtbl.statistics",
              "\n<div class=\"info-desc\">\n<p>same as <a href=\"Hashtbl.SeededS.html#VALstats\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">SeededS</span>.stats</code></a> but only count the alive bindings</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMake\"><span class=\"keyword\">module</span> Make</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">H</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"Hashtbl.HashedType.html\">Hashtbl.HashedType</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"Ephemeron.S.html\">Ephemeron.S</a></code><code class=\"type\">  with type key = H.t</code></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>H</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"Hashtbl.HashedType.html\">Hashtbl.HashedType</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "Ephemeron.K1.MakeSeeded",
    "module_info":
      "\n<div class=\"info-desc\">\n<p>Functor building an implementation of a weak hash table.\n      The seed is similar to the one of <a href=\"Hashtbl.MakeSeeded.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">MakeSeeded</span></code></a>.</p>\n</div>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Include", "Hashtbl.SeededS" ],
          [
            "Function",
            [
              "clean", "'a t -> unit",
              "\n<div class=\"info-desc\">\n<p>remove all dead bindings. Done automatically during automatic resizing.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stats_alive", "'a t -> Hashtbl.statistics",
              "\n<div class=\"info-desc\">\n<p>same as <a href=\"Hashtbl.SeededS.html#VALstats\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">SeededS</span>.stats</code></a> but only count the alive bindings</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMakeSeeded\"><span class=\"keyword\">module</span> MakeSeeded</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">H</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"Hashtbl.SeededHashedType.html\">Hashtbl.SeededHashedType</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"Ephemeron.SeededS.html\">Ephemeron.SeededS</a></code><code class=\"type\">  with type key = H.t</code></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>H</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"Hashtbl.SeededHashedType.html\">Hashtbl.SeededHashedType</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "Ephemeron.K2",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "('k1, 'k2, 'd)", "t", null,
              "\n<div class=\"info-desc\">\n<p>an ephemeron with two keys</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "unit -> ('k1, 'k2, 'd) t",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.create</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_key1", "('k1, 'k2, 'd) t -> 'k1 option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_key1_copy", "('k1, 'k2, 'd) t -> 'k1 option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_key_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key_copy</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_key1", "('k1, 'k2, 'd) t -> 'k1 -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unset_key1", "('k1, 'k2, 'd) t -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALunset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "check_key1", "('k1, 'k2, 'd) t -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcheck_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_key2", "('k1, 'k2, 'd) t -> 'k2 option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_key2_copy", "('k1, 'k2, 'd) t -> 'k2 option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_key_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key_copy</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_key2", "('k1, 'k2, 'd) t -> 'k2 -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unset_key2", "('k1, 'k2, 'd) t -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALunset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "check_key2", "('k1, 'k2, 'd) t -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcheck_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit_key1", "('k1, 'a, 'b) t -> ('k1, 'c, 'd) t -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALblit_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit_key2", "('a, 'k2, 'b) t -> ('c, 'k2, 'd) t -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALblit_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit_key12", "('k1, 'k2, 'a) t -> ('k1, 'k2, 'b) t -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALblit_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_data", "('k1, 'k2, 'd) t -> 'd option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_data_copy", "('k1, 'k2, 'd) t -> 'd option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_data_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data_copy</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_data", "('k1, 'k2, 'd) t -> 'd -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_data</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unset_data", "('k1, 'k2, 'd) t -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALunset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_data</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "check_data", "('k1, 'k2, 'd) t -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcheck_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_data</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit_data", "('k1, 'k2, 'd) t -> ('k1, 'k2, 'd) t -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALblit_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_data</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Module",
            [
              "Make",
              "\n<p>Functor building an implementation of a weak hash table</p>\n\n"
            ]
          ],
          [
            "Module",
            [
              "MakeSeeded",
              "\n<p>Functor building an implementation of a weak hash table.</p>\n\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ephemeron.K2.Make",
    "module_info":
      "\n<div class=\"info-desc\">\n<p>Functor building an implementation of a weak hash table</p>\n</div>\n",
    "sections": [
      {
        "section_name": null,
        "section_info":
          "<p>Propose the same interface as usual hash table. However since\n      the bindings are weak, even if <code class=\"code\">mem&nbsp;h&nbsp;k</code> is true, a subsequent\n      <code class=\"code\">find&nbsp;h&nbsp;k</code> may raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> because the garbage collector\n      can run between the two.</p><p>Moreover, the table shouldn't be modified during a call to <code class=\"code\">iter</code>.\n      Use <code class=\"code\">filter_map_inplace</code> in this case.</p>",
        "elements": [
          [ "Include", "Hashtbl.S" ],
          [
            "Function",
            [
              "clean", "'a t -> unit",
              "\n<div class=\"info-desc\">\n<p>remove all dead bindings. Done automatically during automatic resizing.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stats_alive", "'a t -> Hashtbl.statistics",
              "\n<div class=\"info-desc\">\n<p>same as <a href=\"Hashtbl.SeededS.html#VALstats\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">SeededS</span>.stats</code></a> but only count the alive bindings</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMake\"><span class=\"keyword\">module</span> Make</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">H1</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"Hashtbl.HashedType.html\">Hashtbl.HashedType</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">H2</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"Hashtbl.HashedType.html\">Hashtbl.HashedType</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"Ephemeron.S.html\">Ephemeron.S</a></code><code class=\"type\">  with type key = H1.t * H2.t</code></div></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>H1</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"Hashtbl.HashedType.html\">Hashtbl.HashedType</a></code>\n</td></tr><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>H2</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"Hashtbl.HashedType.html\">Hashtbl.HashedType</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "Ephemeron.K2.MakeSeeded",
    "module_info":
      "\n<div class=\"info-desc\">\n<p>Functor building an implementation of a weak hash table.\n      The seed is similar to the one of <a href=\"Hashtbl.MakeSeeded.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">MakeSeeded</span></code></a>.</p>\n</div>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Include", "Hashtbl.SeededS" ],
          [
            "Function",
            [
              "clean", "'a t -> unit",
              "\n<div class=\"info-desc\">\n<p>remove all dead bindings. Done automatically during automatic resizing.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stats_alive", "'a t -> Hashtbl.statistics",
              "\n<div class=\"info-desc\">\n<p>same as <a href=\"Hashtbl.SeededS.html#VALstats\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">SeededS</span>.stats</code></a> but only count the alive bindings</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMakeSeeded\"><span class=\"keyword\">module</span> MakeSeeded</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">H1</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"Hashtbl.SeededHashedType.html\">Hashtbl.SeededHashedType</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">H2</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"Hashtbl.SeededHashedType.html\">Hashtbl.SeededHashedType</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"Ephemeron.SeededS.html\">Ephemeron.SeededS</a></code><code class=\"type\">  with type key = H1.t * H2.t</code></div></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>H1</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"Hashtbl.SeededHashedType.html\">Hashtbl.SeededHashedType</a></code>\n</td></tr><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>H2</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"Hashtbl.SeededHashedType.html\">Hashtbl.SeededHashedType</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "Ephemeron.Kn",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "('k, 'd)", "t", null,
              "\n<div class=\"info-desc\">\n<p>an ephemeron with an arbitrary number of keys\n                      of the same type</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "int -> ('k, 'd) t",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.create</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_key", "('k, 'd) t -> int -> 'k option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_key_copy", "('k, 'd) t -> int -> 'k option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_key_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key_copy</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_key", "('k, 'd) t -> int -> 'k -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unset_key", "('k, 'd) t -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALunset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "check_key", "('k, 'd) t -> int -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcheck_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit_key",
              "('k, 'a) t -> int -> ('k, 'b) t -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALblit_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_data", "('k, 'd) t -> 'd option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_data_copy", "('k, 'd) t -> 'd option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_data_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data_copy</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_data", "('k, 'd) t -> 'd -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_data</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unset_data", "('k, 'd) t -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALunset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_data</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "check_data", "('k, 'd) t -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcheck_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_data</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit_data", "('k, 'd) t -> ('k, 'd) t -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALblit_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_data</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Module",
            [
              "Make",
              "\n<p>Functor building an implementation of a weak hash table</p>\n\n"
            ]
          ],
          [
            "Module",
            [
              "MakeSeeded",
              "\n<p>Functor building an implementation of a weak hash table.</p>\n\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Ephemeron.Kn.Make",
    "module_info":
      "\n<div class=\"info-desc\">\n<p>Functor building an implementation of a weak hash table</p>\n</div>\n",
    "sections": [
      {
        "section_name": null,
        "section_info":
          "<p>Propose the same interface as usual hash table. However since\n      the bindings are weak, even if <code class=\"code\">mem&nbsp;h&nbsp;k</code> is true, a subsequent\n      <code class=\"code\">find&nbsp;h&nbsp;k</code> may raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> because the garbage collector\n      can run between the two.</p><p>Moreover, the table shouldn't be modified during a call to <code class=\"code\">iter</code>.\n      Use <code class=\"code\">filter_map_inplace</code> in this case.</p>",
        "elements": [
          [ "Include", "Hashtbl.S" ],
          [
            "Function",
            [
              "clean", "'a t -> unit",
              "\n<div class=\"info-desc\">\n<p>remove all dead bindings. Done automatically during automatic resizing.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stats_alive", "'a t -> Hashtbl.statistics",
              "\n<div class=\"info-desc\">\n<p>same as <a href=\"Hashtbl.SeededS.html#VALstats\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">SeededS</span>.stats</code></a> but only count the alive bindings</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMake\"><span class=\"keyword\">module</span> Make</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">H</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"Hashtbl.HashedType.html\">Hashtbl.HashedType</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"Ephemeron.S.html\">Ephemeron.S</a></code><code class=\"type\">  with type key = H.t array</code></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>H</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"Hashtbl.HashedType.html\">Hashtbl.HashedType</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "Ephemeron.Kn.MakeSeeded",
    "module_info":
      "\n<div class=\"info-desc\">\n<p>Functor building an implementation of a weak hash table.\n      The seed is similar to the one of <a href=\"Hashtbl.MakeSeeded.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">MakeSeeded</span></code></a>.</p>\n</div>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Include", "Hashtbl.SeededS" ],
          [
            "Function",
            [
              "clean", "'a t -> unit",
              "\n<div class=\"info-desc\">\n<p>remove all dead bindings. Done automatically during automatic resizing.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stats_alive", "'a t -> Hashtbl.statistics",
              "\n<div class=\"info-desc\">\n<p>same as <a href=\"Hashtbl.SeededS.html#VALstats\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">SeededS</span>.stats</code></a> but only count the alive bindings</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMakeSeeded\"><span class=\"keyword\">module</span> MakeSeeded</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">H</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"Hashtbl.SeededHashedType.html\">Hashtbl.SeededHashedType</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"Ephemeron.SeededS.html\">Ephemeron.SeededS</a></code><code class=\"type\">  with type key = H.t array</code></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>H</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"Hashtbl.SeededHashedType.html\">Hashtbl.SeededHashedType</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "Ephemeron.S",
    "module_info":
      "\n<p>The output signature of the functor <a href=\"Ephemeron.K1.Make.html\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Ephemeron.K2.Make.html\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K2</span>.<span class=\"constructor\">Make</span></code></a>.\n    These hash tables are weak in the keys. If all the keys of a binding are\n    alive the binding is kept, but if one of the keys of the binding\n    is dead then the binding is removed.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info":
          "<p>Propose the same interface as usual hash table. However since\n      the bindings are weak, even if <code class=\"code\">mem&nbsp;h&nbsp;k</code> is true, a subsequent\n      <code class=\"code\">find&nbsp;h&nbsp;k</code> may raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> because the garbage collector\n      can run between the two.</p><p>Moreover, the table shouldn't be modified during a call to <code class=\"code\">iter</code>.\n      Use <code class=\"code\">filter_map_inplace</code> in this case.</p>",
        "elements": [
          [ "Include", "Hashtbl.S" ],
          [
            "Function",
            [
              "clean", "'a t -> unit",
              "\n<div class=\"info-desc\">\n<p>remove all dead bindings. Done automatically during automatic resizing.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stats_alive", "'a t -> Hashtbl.statistics",
              "\n<div class=\"info-desc\">\n<p>same as <a href=\"Hashtbl.SeededS.html#VALstats\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">SeededS</span>.stats</code></a> but only count the alive bindings</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Ephemeron.SeededS",
    "module_info":
      "\n<p>The output signature of the functor <a href=\"Ephemeron.K1.MakeSeeded.html\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.<span class=\"constructor\">MakeSeeded</span></code></a> and <a href=\"Ephemeron.K2.MakeSeeded.html\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K2</span>.<span class=\"constructor\">MakeSeeded</span></code></a>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Include", "Hashtbl.SeededS" ],
          [
            "Function",
            [
              "clean", "'a t -> unit",
              "\n<div class=\"info-desc\">\n<p>remove all dead bindings. Done automatically during automatic resizing.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stats_alive", "'a t -> Hashtbl.statistics",
              "\n<div class=\"info-desc\">\n<p>same as <a href=\"Hashtbl.SeededS.html#VALstats\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">SeededS</span>.stats</code></a> but only count the alive bindings</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Event",
    "module_info":
      "\n<p>First-class synchronous communication.</p>\n\n<p>This module implements synchronous inter-thread communications over\n   channels. As in John Reppy's Concurrent ML system, the communication\n   events are first-class values: they can be built and combined\n   independently before being offered for communication.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "'a", "channel", null,
              "\n<div class=\"info-desc\">\n<p>The type of communication channels carrying values of type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "new_channel", "unit -> 'a channel",
              "\n<div class=\"info-desc\">\n<p>Return a new channel.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "+'a", "event", null,
              "\n<div class=\"info-desc\">\n<p>The type of communication events returning a result of type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "send", "'a channel -> 'a -> unit event",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">send&nbsp;ch&nbsp;v</code> returns the event consisting in sending the value <code class=\"code\">v</code>\n   over the channel <code class=\"code\">ch</code>. The result value of this event is <code class=\"code\">()</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "receive", "'a channel -> 'a event",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">receive&nbsp;ch</code> returns the event consisting in receiving a value\n   from the channel <code class=\"code\">ch</code>. The result value of this event is the\n   value received.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "always", "'a -> 'a event",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">always&nbsp;v</code> returns an event that is always ready for\n   synchronization.  The result value of this event is <code class=\"code\">v</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "choose", "'a event list -> 'a event",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">choose&nbsp;evl</code> returns the event that is the alternative of\n   all the events in the list <code class=\"code\">evl</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "wrap", "'a event -> ('a -> 'b) -> 'b event",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">wrap&nbsp;ev&nbsp;fn</code> returns the event that performs the same communications\n   as <code class=\"code\">ev</code>, then applies the post-processing function <code class=\"code\">fn</code>\n   on the return value.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "wrap_abort", "'a event -> (unit -> unit) -> 'a event",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">wrap_abort&nbsp;ev&nbsp;fn</code> returns the event that performs\n   the same communications as <code class=\"code\">ev</code>, but if it is not selected\n   the function <code class=\"code\">fn</code> is called after the synchronization.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "guard", "(unit -> 'a event ) -> 'a event",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">guard&nbsp;fn</code> returns the event that, when synchronized, computes\n   <code class=\"code\">fn()</code> and behaves as the resulting event. This allows events with\n   side-effects to be computed at the time of the synchronization\n   operation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sync", "'a event -> 'a",
              "\n<div class=\"info-desc\">\n<p>``Synchronize'' on an event: offer all the communication\n   possibilities specified in the event to the outside world,\n   and block until one of the communications succeed. The result\n   value of that communication is returned.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "select", "'a event list -> 'a",
              "\n<div class=\"info-desc\">\n<p>``Synchronize'' on an alternative of events.\n   <code class=\"code\">select&nbsp;evl</code> is shorthand for <code class=\"code\">sync(choose&nbsp;evl)</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "poll", "'a event -> 'a option",
              "\n<div class=\"info-desc\">\n<p>Non-blocking version of <a href=\"Event.html#VALsync\"><code class=\"code\"><span class=\"constructor\">Event</span>.sync</code></a>: offer all the communication\n   possibilities specified in the event to the outside world,\n   and if one can take place immediately, perform it and return\n   <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;r</code> where <code class=\"code\">r</code> is the result value of that communication.\n   Otherwise, return <code class=\"code\"><span class=\"constructor\">None</span></code> without blocking.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Filename",
    "module_info": "\n<p>Operations on file names.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "current_dir_name", "string",
              "\n<div class=\"info-desc\">\n<p>The conventional name for the current directory (e.g. <code class=\"code\">.</code> in Unix).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "parent_dir_name", "string",
              "\n<div class=\"info-desc\">\n<p>The conventional name for the parent of the current directory\n   (e.g. <code class=\"code\">..</code> in Unix).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "dir_sep", "string",
              "\n<div class=\"info-desc\">\n<p>The directory separator (e.g. <code class=\"code\">/</code> in Unix).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.2</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "concat", "string -> string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">concat&nbsp;dir&nbsp;file</code> returns a file name that designates file\n   <code class=\"code\">file</code> in directory <code class=\"code\">dir</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "is_relative", "string -> bool",
              "\n<div class=\"info-desc\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the file name is relative to the current\n   directory, <code class=\"code\"><span class=\"keyword\">false</span></code> if it is absolute (i.e. in Unix, starts\n   with <code class=\"code\">/</code>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "is_implicit", "string -> bool",
              "\n<div class=\"info-desc\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the file name is relative and does not start\n   with an explicit reference to the current directory (<code class=\"code\">./</code> or\n   <code class=\"code\">../</code> in Unix), <code class=\"code\"><span class=\"keyword\">false</span></code> if it starts with an explicit reference\n   to the root directory or the current directory.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "check_suffix", "string -> string -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">check_suffix&nbsp;name&nbsp;suff</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the filename <code class=\"code\">name</code>\n   ends with the suffix <code class=\"code\">suff</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "chop_suffix", "string -> string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">chop_suffix&nbsp;name&nbsp;suff</code> removes the suffix <code class=\"code\">suff</code> from\n   the filename <code class=\"code\">name</code>. The behavior is undefined if <code class=\"code\">name</code> does not\n   end with the suffix <code class=\"code\">suff</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "extension", "string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">extension&nbsp;name</code> is the shortest suffix <code class=\"code\">ext</code> of <code class=\"code\">name0</code> where:</p>\n\n<ul>\n<li><code class=\"code\">name0</code> is the longest suffix of <code class=\"code\">name</code> that does not\n      contain a directory separator;</li>\n<li><code class=\"code\">ext</code> starts with a period;</li>\n<li><code class=\"code\">ext</code> is preceded by at least one non-period character\n      in <code class=\"code\">name0</code>.</li>\n</ul>\n<p>If such a suffix does not exist, <code class=\"code\">extension&nbsp;name</code> is the empty\n    string.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.04</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "remove_extension", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return the given file name without its extension, as defined\n    in <a href=\"Filename.html#VALextension\"><code class=\"code\"><span class=\"constructor\">Filename</span>.extension</code></a>. If the extension is empty, the function\n    returns the given file name.</p>\n\n<p>The following invariant holds for any file name <code class=\"code\">s</code>:</p>\n\n<p><code class=\"code\">remove_extension&nbsp;s&nbsp;^&nbsp;extension&nbsp;s&nbsp;=&nbsp;s</code></p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.04</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "chop_extension", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Filename.html#VALremove_extension\"><code class=\"code\"><span class=\"constructor\">Filename</span>.remove_extension</code></a>, but raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code>\n    if the given name has an empty extension.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "basename", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Split a file name into directory name / base file name.\n   If <code class=\"code\">name</code> is a valid file name, then <code class=\"code\">concat&nbsp;(dirname&nbsp;name)&nbsp;(basename&nbsp;name)</code>\n   returns a file name which is equivalent to <code class=\"code\">name</code>. Moreover,\n   after setting the current directory to <code class=\"code\">dirname&nbsp;name</code> (with <a href=\"Sys.html#VALchdir\"><code class=\"code\"><span class=\"constructor\">Sys</span>.chdir</code></a>),\n   references to <code class=\"code\">basename&nbsp;name</code> (which is a relative file name)\n   designate the same file as <code class=\"code\">name</code> before the call to <a href=\"Sys.html#VALchdir\"><code class=\"code\"><span class=\"constructor\">Sys</span>.chdir</code></a>.</p>\n\n<p>This function conforms to the specification of POSIX.1-2008 for the\n   <code class=\"code\">basename</code> utility.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "dirname", "string -> string",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Filename.html#VALbasename\"><code class=\"code\"><span class=\"constructor\">Filename</span>.basename</code></a>.\n   This function conforms to the specification of POSIX.1-2008 for the\n   <code class=\"code\">dirname</code> utility.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "temp_file", "?temp_dir:string -> string -> string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">temp_file&nbsp;prefix&nbsp;suffix</code> returns the name of a\n   fresh temporary file in the temporary directory.\n   The base name of the temporary file is formed by concatenating\n   <code class=\"code\">prefix</code>, then a suitably chosen integer number, then <code class=\"code\">suffix</code>.\n   The optional argument <code class=\"code\">temp_dir</code> indicates the temporary directory\n   to use, defaulting to the current result of <a href=\"Filename.html#VALget_temp_dir_name\"><code class=\"code\"><span class=\"constructor\">Filename</span>.get_temp_dir_name</code></a>.\n   The temporary file is created empty, with permissions <code class=\"code\">0o600</code>\n   (readable and writable only by the file owner).  The file is\n   guaranteed to be different from any other file that existed when\n   <code class=\"code\">temp_file</code> was called.\n   Raise <code class=\"code\"><span class=\"constructor\">Sys_error</span></code> if the file could not be created.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 3.11.2 </b> no ?temp_dir optional argument</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "open_temp_file",
              "?mode: open_flag list -> ?perms:int -> ?temp_dir:string -> string -> string -> string * out_channel",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Filename.html#VALtemp_file\"><code class=\"code\"><span class=\"constructor\">Filename</span>.temp_file</code></a>, but returns both the name of a fresh\n   temporary file, and an output channel opened (atomically) on\n   this file.  This function is more secure than <code class=\"code\">temp_file</code>: there\n   is no risk that the temporary file will be modified (e.g. replaced\n   by a symbolic link) before the program opens it.  The optional argument\n   <code class=\"code\">mode</code> is a list of additional flags to control the opening of the file.\n   It can contain one or several of <code class=\"code\"><span class=\"constructor\">Open_append</span></code>, <code class=\"code\"><span class=\"constructor\">Open_binary</span></code>,\n   and <code class=\"code\"><span class=\"constructor\">Open_text</span></code>.  The default is <code class=\"code\">[<span class=\"constructor\">Open_text</span>]</code> (open in text mode). The\n   file is created with permissions <code class=\"code\">perms</code> (defaults to readable and\n   writable only by the file owner, <code class=\"code\">0o600</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03.0 </b> no ?perms optional argument</li>\n<li><b>Before 3.11.2 </b> no ?temp_dir optional argument</li>\n<li><b>Raises</b> <code>Sys_error</code> if the file could not be opened.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "get_temp_dir_name", "unit -> string",
              "\n<div class=\"info-desc\">\n<p>The name of the temporary directory:\n    Under Unix, the value of the <code class=\"code\"><span class=\"constructor\">TMPDIR</span></code> environment variable, or \"/tmp\"\n    if the variable is not set.\n    Under Windows, the value of the <code class=\"code\"><span class=\"constructor\">TEMP</span></code> environment variable, or \".\"\n    if the variable is not set.\n    The temporary directory can be changed with <a href=\"Filename.html#VALset_temp_dir_name\"><code class=\"code\"><span class=\"constructor\">Filename</span>.set_temp_dir_name</code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "set_temp_dir_name", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>Change the temporary directory returned by <a href=\"Filename.html#VALget_temp_dir_name\"><code class=\"code\"><span class=\"constructor\">Filename</span>.get_temp_dir_name</code></a>\n    and used by <a href=\"Filename.html#VALtemp_file\"><code class=\"code\"><span class=\"constructor\">Filename</span>.temp_file</code></a> and <a href=\"Filename.html#VALopen_temp_file\"><code class=\"code\"><span class=\"constructor\">Filename</span>.open_temp_file</code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "temp_dir_name", "string",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>You should use <a href=\"Filename.html#VALget_temp_dir_name\"><code class=\"code\"><span class=\"constructor\">Filename</span>.get_temp_dir_name</code></a> instead.</div>\n<div class=\"info-desc\">\n<p>The name of the initial temporary directory:\n    Under Unix, the value of the <code class=\"code\"><span class=\"constructor\">TMPDIR</span></code> environment variable, or \"/tmp\"\n    if the variable is not set.\n    Under Windows, the value of the <code class=\"code\"><span class=\"constructor\">TEMP</span></code> environment variable, or \".\"\n    if the variable is not set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.09.1</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "quote", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a quoted version of a file name, suitable for use as\n    one argument in a command line, escaping all meta-characters.\n    Warning: under Windows, the output is only suitable for use\n    with programs that follow the standard Windows quoting\n    conventions.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Float.Array",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", "= floatarray", null, null ] ],
          [ "Function", [ "create", "int -> t", null ] ],
          [ "Function", [ "length", "t -> int", null ] ],
          [ "Function", [ "get", "t -> int -> float", null ] ],
          [ "Function", [ "set", "t -> int -> float -> unit", null ] ],
          [ "Function", [ "unsafe_get", "t -> int -> float", null ] ],
          [ "Function", [ "unsafe_set", "t -> int -> float -> unit", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Float",
    "module_info":
      "\n<h2 id=\"1_Floatingpointarithmetic\">Floating-point arithmetic</h2>\n<p>OCaml's floating-point numbers follow the\n    IEEE 754 standard, using double precision (64 bits) numbers.\n    Floating-point operations never raise an exception on overflow,\n    underflow, division by zero, etc.  Instead, special IEEE numbers\n    are returned as appropriate, such as <code class=\"code\">infinity</code> for <code class=\"code\">1.0&nbsp;/.&nbsp;0.0</code>,\n    <code class=\"code\">neg_infinity</code> for <code class=\"code\">-1.0&nbsp;/.&nbsp;0.0</code>, and <code class=\"code\">nan</code> ('not a number')\n    for <code class=\"code\">0.0&nbsp;/.&nbsp;0.0</code>.  These special numbers then propagate through\n    floating-point computations as expected: for instance,\n    <code class=\"code\">1.0&nbsp;/.&nbsp;infinity</code> is <code class=\"code\">0.0</code>, and any arithmetic operation with <code class=\"code\">nan</code>\n    as argument returns <code class=\"code\">nan</code> as result.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "neg", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Unary negation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p>Floating-point addition.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p>Floating-point subtraction.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mul", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p>Floating-point multiplication.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "div", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p>Floating-point division.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rem", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rem&nbsp;a&nbsp;b</code> returns the remainder of <code class=\"code\">a</code> with respect to <code class=\"code\">b</code>.  The returned\n    value is <code class=\"code\">a&nbsp;-.&nbsp;n&nbsp;*.&nbsp;b</code>, where <code class=\"code\">n</code> is the quotient <code class=\"code\">a&nbsp;/.&nbsp;b</code> rounded towards\n    zero to an integer.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "abs", "float -> float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">abs&nbsp;f</code> returns the absolute value of <code class=\"code\">f</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "infinity", "float",
              "\n<div class=\"info-desc\">\n<p>Positive infinity.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "neg_infinity", "float",
              "\n<div class=\"info-desc\">\n<p>Negative infinity.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "nan", "float",
              "\n<div class=\"info-desc\">\n<p>A special floating-point value denoting the result of an\n    undefined operation such as <code class=\"code\">0.0&nbsp;/.&nbsp;0.0</code>.  Stands for\n    'not a number'.  Any floating-point operation with <code class=\"code\">nan</code> as\n    argument returns <code class=\"code\">nan</code> as result.  As for floating-point comparisons,\n    <code class=\"code\">=</code>, <code class=\"code\">&lt;</code>, <code class=\"code\">&lt;=</code>, <code class=\"code\">&gt;</code> and <code class=\"code\">&gt;=</code> return <code class=\"code\"><span class=\"keyword\">false</span></code> and <code class=\"code\">&lt;&gt;</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code>\n    if one or both of their arguments is <code class=\"code\">nan</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pi", "float",
              "\n<div class=\"info-desc\">\n<p>The constant pi.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "max_float", "float",
              "\n<div class=\"info-desc\">\n<p>The largest positive finite value of type <code class=\"code\">float</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "min_float", "float",
              "\n<div class=\"info-desc\">\n<p>The smallest positive, non-zero, non-denormalized value of type <code class=\"code\">float</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "epsilon", "float",
              "\n<div class=\"info-desc\">\n<p>The difference between <code class=\"code\">1.0</code> and the smallest exactly representable\n    floating-point number greater than <code class=\"code\">1.0</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_int", "int -> float",
              "\n<div class=\"info-desc\">\n<p>Convert an integer to floating-point.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_int", "float -> int",
              "\n<div class=\"info-desc\">\n<p>Truncate the given floating-point number to an integer.\n    The result is unspecified if the argument is <code class=\"code\">nan</code> or falls outside the\n    range of representable integers.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_string", "string -> float",
              "\n<div class=\"info-desc\">\n<p>Convert the given string to a float.  The string is read in decimal\n    (by default) or in hexadecimal (marked by <code class=\"code\">0x</code> or <code class=\"code\">0<span class=\"constructor\">X</span></code>).\n    The format of decimal floating-point numbers is\n    <code class=\"code\">&nbsp;[-]&nbsp;dd.ddd&nbsp;(e<span class=\"keywordsign\">|</span><span class=\"constructor\">E</span>)&nbsp;[+|-]&nbsp;dd&nbsp;</code>, where <code class=\"code\">d</code> stands for a decimal digit.\n    The format of hexadecimal floating-point numbers is\n    <code class=\"code\">&nbsp;[-]&nbsp;0(x<span class=\"keywordsign\">|</span><span class=\"constructor\">X</span>)&nbsp;hh.hhh&nbsp;(p<span class=\"keywordsign\">|</span><span class=\"constructor\">P</span>)&nbsp;[+|-]&nbsp;dd&nbsp;</code>, where <code class=\"code\">h</code> stands for an\n    hexadecimal digit and <code class=\"code\">d</code> for a decimal digit.\n    In both cases, at least one of the integer and fractional parts must be\n    given; the exponent part is optional.\n    The <code class=\"code\">_</code> (underscore) character can appear anywhere in the string\n    and is ignored.\n    Depending on the execution platforms, other representations of\n    floating-point numbers can be accepted, but should not be relied upon.\n    Raise <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"float_of_string\"</span></code> if the given string is not a valid\n    representation of a float.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_string_opt", "string -> float option",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">of_string</code>, but returns <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_string", "float -> string",
              "\n<div class=\"info-desc\">\n<p>Return the string representation of a floating-point number.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "fpclass", "= fpclass =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfpclass.FP_normal\"><span class=\"constructor\">FP_normal</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Normal number, none of the below</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfpclass.FP_subnormal\"><span class=\"constructor\">FP_subnormal</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number very close to 0.0, has reduced precision</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfpclass.FP_zero\"><span class=\"constructor\">FP_zero</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number is 0.0 or -0.0</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfpclass.FP_infinite\"><span class=\"constructor\">FP_infinite</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number is positive or negative infinity</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfpclass.FP_nan\"><span class=\"constructor\">FP_nan</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Not a number: result of an undefined operation</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The five classes of floating-point numbers, as determined by\n    the <a href=\"Float.html#VALclassify_float\"><code class=\"code\"><span class=\"constructor\">Float</span>.classify_float</code></a> function.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "classify_float", "float -> fpclass",
              "\n<div class=\"info-desc\">\n<p>Return the class of the given floating-point number:\n    normal, subnormal, zero, infinite, or not a number.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pow", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p>Exponentiation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sqrt", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Square root.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "exp", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Exponential.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "log", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Natural logarithm.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "log10", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Base 10 logarithm.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "expm1", "float -> float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">expm1&nbsp;x</code> computes <code class=\"code\">exp&nbsp;x&nbsp;-.&nbsp;1.0</code>, giving numerically-accurate results\n    even if <code class=\"code\">x</code> is close to <code class=\"code\">0.0</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "log1p", "float -> float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">log1p&nbsp;x</code> computes <code class=\"code\">log(1.0&nbsp;+.&nbsp;x)</code> (natural logarithm),\n    giving numerically-accurate results even if <code class=\"code\">x</code> is close to <code class=\"code\">0.0</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "cos", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Cosine.  Argument is in radians.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sin", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Sine.  Argument is in radians.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "tan", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Tangent.  Argument is in radians.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "acos", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Arc cosine.  The argument must fall within the range <code class=\"code\">[-1.0,&nbsp;1.0]</code>.\n    Result is in radians and is between <code class=\"code\">0.0</code> and <code class=\"code\">pi</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "asin", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Arc sine.  The argument must fall within the range <code class=\"code\">[-1.0,&nbsp;1.0]</code>.\n    Result is in radians and is between <code class=\"code\">-pi/2</code> and <code class=\"code\">pi/2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "atan", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Arc tangent.\n    Result is in radians and is between <code class=\"code\">-pi/2</code> and <code class=\"code\">pi/2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "atan2", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">atan2&nbsp;y&nbsp;x</code> returns the arc tangent of <code class=\"code\">y&nbsp;/.&nbsp;x</code>.  The signs of <code class=\"code\">x</code>\n    and <code class=\"code\">y</code> are used to determine the quadrant of the result.\n    Result is in radians and is between <code class=\"code\">-pi</code> and <code class=\"code\">pi</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "hypot", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">hypot&nbsp;x&nbsp;y</code> returns <code class=\"code\">sqrt(x&nbsp;*.&nbsp;x&nbsp;+&nbsp;y&nbsp;*.&nbsp;y)</code>, that is, the length\n    of the hypotenuse of a right-angled triangle with sides of length\n    <code class=\"code\">x</code> and <code class=\"code\">y</code>, or, equivalently, the distance of the point <code class=\"code\">(x,y)</code>\n    to origin.  If one of <code class=\"code\">x</code> or <code class=\"code\">y</code> is infinite, returns <code class=\"code\">infinity</code>\n    even if the other is <code class=\"code\">nan</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "cosh", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Hyperbolic cosine.  Argument is in radians.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sinh", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Hyperbolic sine.  Argument is in radians.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "tanh", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Hyperbolic tangent.  Argument is in radians.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "ceil", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Round above to an integer value.\n    <code class=\"code\">ceil&nbsp;f</code> returns the least integer value greater than or equal to <code class=\"code\">f</code>.\n    The result is returned as a float.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "floor", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Round below to an integer value.\n    <code class=\"code\">floor&nbsp;f</code> returns the greatest integer value less than or\n    equal to <code class=\"code\">f</code>.\n    The result is returned as a float.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "copysign", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">copysign&nbsp;x&nbsp;y</code> returns a float whose absolute value is that of <code class=\"code\">x</code>\n    and whose sign is that of <code class=\"code\">y</code>.  If <code class=\"code\">x</code> is <code class=\"code\">nan</code>, returns <code class=\"code\">nan</code>.\n    If <code class=\"code\">y</code> is <code class=\"code\">nan</code>, returns either <code class=\"code\">x</code> or <code class=\"code\">-.&nbsp;x</code>, but it is not\n    specified which.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "frexp", "float -> float * int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">frexp&nbsp;f</code> returns the pair of the significant\n    and the exponent of <code class=\"code\">f</code>.  When <code class=\"code\">f</code> is zero, the\n    significant <code class=\"code\">x</code> and the exponent <code class=\"code\">n</code> of <code class=\"code\">f</code> are equal to\n    zero.  When <code class=\"code\">f</code> is non-zero, they are defined by\n    <code class=\"code\">f&nbsp;=&nbsp;x&nbsp;*.&nbsp;2&nbsp;**&nbsp;n</code> and <code class=\"code\">0.5&nbsp;&lt;=&nbsp;x&nbsp;&lt;&nbsp;1.0</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "ldexp", "float -> int -> float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">ldexp&nbsp;x&nbsp;n</code> returns <code class=\"code\">x&nbsp;*.&nbsp;2&nbsp;**&nbsp;n</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "modf", "float -> float * float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">modf&nbsp;f</code> returns the pair of the fractional and integral\n    part of <code class=\"code\">f</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", "= float", null,
              "\n<div class=\"info-desc\">\n<p>An alias for the type of floating-point numbers.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">compare&nbsp;x&nbsp;y</code> returns <code class=\"code\">0</code> if <code class=\"code\">x</code> is equal to <code class=\"code\">y</code>, a negative integer if <code class=\"code\">x</code>\n    is less than <code class=\"code\">y</code>, and a positive integer if <code class=\"code\">x</code> is greater than\n    <code class=\"code\">y</code>. <code class=\"code\">compare</code> treats <code class=\"code\">nan</code> as equal to itself and less than any other float\n    value.  This treatment of <code class=\"code\">nan</code> ensures that <code class=\"code\">compare</code> defines a total\n    ordering relation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p>The equal function for floating-point numbers, compared using <a href=\"Float.html#VALcompare\"><code class=\"code\"><span class=\"constructor\">Float</span>.compare</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "hash", "t -> int",
              "\n<div class=\"info-desc\">\n<p>The hash function for floating-point numbers.</p>\n</div>\n"
            ]
          ],
          [ "Module", [ "Array", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Format",
    "module_info":
      "\n<p>Pretty-printing.</p>\n\n<p>This module implements a pretty-printing facility to format values\n   within <a href=\"Format.html#boxes\">'pretty-printing boxes'</a> and <a href=\"Format.html#tags\">'semantic tags'</a>\n   combined with a set of <a href=\"Format.html#fpp\">printf-like functions</a>.\n   The pretty-printer splits lines at specified <a href=\"Format.html#breaks\">break hints</a>,\n   and indents lines according to the box structure.\n   Similarly, <a href=\"Format.html#tags\">semantic tags</a> can be used to decouple text\n   presentation from its contents.</p>\n\n<p>This pretty-printing facility is implemented as an overlay on top of\n   abstract <a href=\"Format.html#formatter\">formatters</a> which provide basic output\n   functions.\n   Some formatters are predefined, notably:</p>\n<ul>\n<li><a href=\"Format.html#VALstd_formatter\"><code class=\"code\"><span class=\"constructor\">Format</span>.std_formatter</code></a> outputs to <a href=\"Pervasives.html#VALstdout\">stdout</a></li>\n<li><a href=\"Format.html#VALerr_formatter\"><code class=\"code\"><span class=\"constructor\">Format</span>.err_formatter</code></a> outputs to <a href=\"Pervasives.html#VALstderr\">stderr</a></li>\n</ul>\n<p>Most functions in the <a href=\"Format.html\"><code class=\"code\"><span class=\"constructor\">Format</span></code></a> module come in two variants:\n   a short version that operates on <a href=\"Format.html#VALstd_formatter\"><code class=\"code\"><span class=\"constructor\">Format</span>.std_formatter</code></a> and the\n   generic version prefixed by <code class=\"code\">pp_</code> that takes a formatter\n   as its first argument.</p>\n\n<p>More formatters can be created with <a href=\"Format.html#VALformatter_of_out_channel\"><code class=\"code\"><span class=\"constructor\">Format</span>.formatter_of_out_channel</code></a>,\n   <a href=\"Format.html#VALformatter_of_buffer\"><code class=\"code\"><span class=\"constructor\">Format</span>.formatter_of_buffer</code></a>, <a href=\"Format.html#VALformatter_of_symbolic_output_buffer\"><code class=\"code\"><span class=\"constructor\">Format</span>.formatter_of_symbolic_output_buffer</code></a>\n   or using <a href=\"Format.html#formatter\">custom formatters</a>.</p>\n",
    "sections": [
      {
        "section_name": "Introduction",
        "section_info":
          "<p>For a gentle introduction to the basics of pretty-printing using\n   <code class=\"code\"><span class=\"constructor\">Format</span></code>, read\n   <a href=\"http://caml.inria.fr/resources/doc/guides/format.en.html\">\n    http://caml.inria.fr/resources/doc/guides/format.en.html</a>.</p><p>You may consider this module as providing an extension to the\n   <code class=\"code\">printf</code> facility to provide automatic line splitting. The addition of\n   pretty-printing annotations to your regular <code class=\"code\">printf</code> format strings gives\n   you fancy indentation and line breaks.\n   Pretty-printing annotations are described below in the documentation of\n   the function <a href=\"Format.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Format</span>.fprintf</code></a>.</p><p>You may also use the explicit pretty-printing box management and printing\n   functions provided by this module. This style is more basic but more\n   verbose than the concise <code class=\"code\">fprintf</code> format strings.</p><p>For instance, the sequence\n   <code class=\"code\">open_box&nbsp;0;&nbsp;print_string&nbsp;<span class=\"string\">\"x&nbsp;=\"</span>;&nbsp;print_space&nbsp;();<br>\n&nbsp;&nbsp;&nbsp;&nbsp;print_int&nbsp;1;&nbsp;close_box&nbsp;();&nbsp;print_newline&nbsp;()</code>\n   that prints <code class=\"code\">x&nbsp;=&nbsp;1</code> within a pretty-printing box, can be\n   abbreviated as <code class=\"code\">printf&nbsp;<span class=\"string\">\"@[%s@&nbsp;%i@]@.\"</span>&nbsp;<span class=\"string\">\"x&nbsp;=\"</span>&nbsp;1</code>, or even shorter\n   <code class=\"code\">printf&nbsp;<span class=\"string\">\"@[x&nbsp;=@&nbsp;%i@]@.\"</span>&nbsp;1</code>.</p><p>Rule of thumb for casual users of this library:</p><ul>\n<li>use simple pretty-printing boxes (as obtained by <code class=\"code\">open_box&nbsp;0</code>);</li>\n<li>use simple break hints as obtained by <code class=\"code\">print_cut&nbsp;()</code> that outputs a\n   simple break hint, or by <code class=\"code\">print_space&nbsp;()</code> that outputs a space\n   indicating a break hint;</li>\n<li>once a pretty-printing box is open, display its material with basic\n   printing functions (e. g. <code class=\"code\">print_int</code> and <code class=\"code\">print_string</code>);</li>\n<li>when the material for a pretty-printing box has been printed, call\n   <code class=\"code\">close_box&nbsp;()</code> to close the box;</li>\n<li>at the end of pretty-printing, flush the pretty-printer to display all\n   the remaining material, e.g. evaluate <code class=\"code\">print_newline&nbsp;()</code>.</li>\n</ul><p>The behavior of pretty-printing commands is unspecified\n   if there is no open pretty-printing box. Each box opened by\n   one of the <code class=\"code\">open_</code> functions below must be closed using <code class=\"code\">close_box</code>\n   for proper formatting. Otherwise, some of the material printed in the\n   boxes may not be output, or may be formatted incorrectly.</p><p>In case of interactive use, each phrase is executed in the initial state\n   of the standard pretty-printer: after each phrase execution, the\n   interactive system closes all open pretty-printing boxes, flushes all\n   pending text, and resets the standard pretty-printer.</p><p>Warning: mixing calls to pretty-printing functions of this module with\n   calls to <a href=\"Pervasives.html\"><code class=\"code\"><span class=\"constructor\">Pervasives</span></code></a> low level output functions is error prone.</p><p>The pretty-printing functions output material that is delayed in the\n   pretty-printer queue and stacks in order to compute proper line\n   splitting. In contrast, basic I/O output functions write directly in\n   their output device. As a consequence, the output of a basic I/O function\n   may appear before the output of a pretty-printing function that has been\n   called before. For instance,\n   <code class=\"code\"><br>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"constructor\">Pervasives</span>.print_string&nbsp;<span class=\"string\">\"&lt;\"</span>;<br>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"constructor\">Format</span>.print_string&nbsp;<span class=\"string\">\"PRETTY\"</span>;<br>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"constructor\">Pervasives</span>.print_string&nbsp;<span class=\"string\">\"&gt;\"</span>;<br>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"constructor\">Format</span>.print_string&nbsp;<span class=\"string\">\"TEXT\"</span>;<br>\n&nbsp;&nbsp;&nbsp;</code>\n   leads to output <code class=\"code\">&lt;&gt;<span class=\"constructor\">PRETTYTEXT</span></code>.</p>",
        "elements": [
          [
            "Typevariant",
            [
              "formatter", null, null,
              "\n<div class=\"info-desc\">\n<p>Abstract data corresponding to a pretty-printer (also called a\n    formatter) and all its machinery. See also <a href=\"Format.html#formatter\"><i>Defining formatters</i></a>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Pretty-printing boxes",
        "section_info":
          "<p>The pretty-printing engine uses the concepts of pretty-printing box and\n  break hint to drive indentation and line splitting behavior of the\n  pretty-printer.</p><p>Each different pretty-printing box kind introduces a specific line splitting\n  policy:</p><ul>\n<li>within an <em>horizontal</em> box, break hints never split the line (but the\n    line may be split in a box nested deeper),</li>\n<li>within a <em>vertical</em> box, break hints always split the line,</li>\n<li>within an <em>horizontal/vertical</em> box, if the box fits on the current line\n    then break hints never split the line, otherwise break hint always split\n    the line,</li>\n<li>within a <em>compacting</em> box, a break hint never splits the line,\n    unless there is no more room on the current line.</li>\n</ul><p>Note that line splitting policy is box specific: the policy of a box does\n  not rule the policy of inner boxes. For instance, if a vertical box is\n  nested in an horizontal box, all break hints within the vertical box will\n  split the line.</p>",
        "elements": [
          [ "Function", [ "pp_open_box", "formatter -> int -> unit", null ] ],
          [
            "Function",
            [
              "open_box", "int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_open_box&nbsp;ppf&nbsp;d</code> opens a new compacting pretty-printing box with\n    offset <code class=\"code\">d</code> in the formatter <code class=\"code\">ppf</code>.</p>\n\n<p>Within this box, the pretty-printer prints as much as possible material on\n   every line.</p>\n\n<p>A break hint splits the line if there is no more room on the line to\n   print the remainder of the box.</p>\n\n<p>Within this box, the pretty-printer emphasizes the box structure: a break\n   hint also splits the line if the splitting ``moves to the left''\n   (i.e. the new line gets an indentation smaller than the one of the current\n   line).</p>\n\n<p>This box is the general purpose pretty-printing box.</p>\n\n<p>If the pretty-printer splits the line in the box, offset <code class=\"code\">d</code> is added to\n   the current indentation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_close_box", "formatter -> unit -> unit", null ]
          ],
          [
            "Function",
            [
              "close_box", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Closes the most recently open pretty-printing box.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_open_hbox", "formatter -> unit -> unit", null ]
          ],
          [
            "Function",
            [
              "open_hbox", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_open_hbox&nbsp;ppf&nbsp;()</code> opens a new 'horizontal' pretty-printing box.</p>\n\n<p>This box prints material on a single line.</p>\n\n<p>Break hints in a horizontal box never split the line.\n  (Line splitting may still occur inside boxes nested deeper).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_open_vbox", "formatter -> int -> unit", null ]
          ],
          [
            "Function",
            [
              "open_vbox", "int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_open_vbox&nbsp;ppf&nbsp;d</code> opens a new 'vertical' pretty-printing box\n  with offset <code class=\"code\">d</code>.</p>\n\n<p>This box prints material on as many lines as break hints in the box.</p>\n\n<p>Every break hint in a vertical box splits the line.</p>\n\n<p>If the pretty-printer splits the line in the box, <code class=\"code\">d</code> is added to the\n  current indentation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_open_hvbox", "formatter -> int -> unit", null ]
          ],
          [
            "Function",
            [
              "open_hvbox", "int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_open_hvbox&nbsp;ppf&nbsp;d</code> opens a new 'horizontal/vertical' pretty-printing box\n  with offset <code class=\"code\">d</code>.</p>\n\n<p>This box behaves as an horizontal box if it fits on a single line,\n  otherwise it behaves as a vertical box.</p>\n\n<p>If the pretty-printer splits the line in the box, <code class=\"code\">d</code> is added to the\n  current indentation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_open_hovbox", "formatter -> int -> unit", null ]
          ],
          [
            "Function",
            [
              "open_hovbox", "int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_open_hovbox&nbsp;ppf&nbsp;d</code> opens a new 'horizontal-or-vertical'\n  pretty-printing box with offset <code class=\"code\">d</code>.</p>\n\n<p>This box prints material as much as possible on every line.</p>\n\n<p>A break hint splits the line if there is no more room on the line to\n  print the remainder of the box.</p>\n\n<p>If the pretty-printer splits the line in the box, <code class=\"code\">d</code> is added to the\n  current indentation.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Formatting functions",
        "section_info": null,
        "elements": [
          [
            "Function",
            [ "pp_print_string", "formatter -> string -> unit", null ]
          ],
          [
            "Function",
            [
              "print_string", "string -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_print_string&nbsp;ppf&nbsp;s</code> prints <code class=\"code\">s</code> in the current pretty-printing box.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_print_as", "formatter -> int -> string -> unit", null ]
          ],
          [
            "Function",
            [
              "print_as", "int -> string -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_print_as&nbsp;ppf&nbsp;len&nbsp;s</code> prints <code class=\"code\">s</code> in the current pretty-printing box.\n  The pretty-printer formats <code class=\"code\">s</code> as if it were of length <code class=\"code\">len</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_print_int", "formatter -> int -> unit", null ]
          ],
          [
            "Function",
            [
              "print_int", "int -> unit",
              "\n<div class=\"info-desc\">\n<p>Print an integer in the current pretty-printing box.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_print_float", "formatter -> float -> unit", null ]
          ],
          [
            "Function",
            [
              "print_float", "float -> unit",
              "\n<div class=\"info-desc\">\n<p>Print a floating point number in the current pretty-printing box.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_print_char", "formatter -> char -> unit", null ]
          ],
          [
            "Function",
            [
              "print_char", "char -> unit",
              "\n<div class=\"info-desc\">\n<p>Print a character in the current pretty-printing box.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_print_bool", "formatter -> bool -> unit", null ]
          ],
          [
            "Function",
            [
              "print_bool", "bool -> unit",
              "\n<div class=\"info-desc\">\n<p>Print a boolean in the current pretty-printing box.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Break hints",
        "section_info":
          "<p>A 'break hint' tells the pretty-printer to output some space or split the\n  line whichever way is more appropriate to the current pretty-printing box\n  splitting rules.</p><p>Break hints are used to separate printing items and are mandatory to let\n  the pretty-printer correctly split lines and indent items.</p><p>Simple break hints are:</p><ul>\n<li>the 'space': output a space or split the line if appropriate,</li>\n<li>the 'cut': split the line if appropriate.</li>\n</ul><p>Note: the notions of space and line splitting are abstract for the\n  pretty-printing engine, since those notions can be completely redefined\n  by the programmer.\n  However, in the pretty-printer default setting, ``output a space'' simply\n  means printing a space character (ASCII code 32) and ``split the line''\n  means printing a newline character (ASCII code 10).</p>",
        "elements": [
          [
            "Function",
            [ "pp_print_space", "formatter -> unit -> unit", null ]
          ],
          [
            "Function",
            [
              "print_space", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_print_space&nbsp;ppf&nbsp;()</code> emits a 'space' break hint:\n  the pretty-printer may split the line at this point,\n  otherwise it prints one space.</p>\n\n<p><code class=\"code\">pp_print_space&nbsp;ppf&nbsp;()</code> is equivalent to <code class=\"code\">pp_print_break&nbsp;ppf&nbsp;1&nbsp;0</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_print_cut", "formatter -> unit -> unit", null ]
          ],
          [
            "Function",
            [
              "print_cut", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_print_cut&nbsp;ppf&nbsp;()</code> emits a 'cut' break hint:\n  the pretty-printer may split the line at this point,\n  otherwise it prints nothing.</p>\n\n<p><code class=\"code\">pp_print_cut&nbsp;ppf&nbsp;()</code> is equivalent to <code class=\"code\">pp_print_break&nbsp;ppf&nbsp;0&nbsp;0</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_print_break", "formatter -> int -> int -> unit", null ]
          ],
          [
            "Function",
            [
              "print_break", "int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_print_break&nbsp;ppf&nbsp;nspaces&nbsp;offset</code> emits a 'full' break hint:\n  the pretty-printer may split the line at this point,\n  otherwise it prints <code class=\"code\">nspaces</code> spaces.</p>\n\n<p>If the pretty-printer splits the line, <code class=\"code\">offset</code> is added to\n  the current indentation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_force_newline", "formatter -> unit -> unit", null ]
          ],
          [
            "Function",
            [
              "force_newline", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Force a new line in the current pretty-printing box.</p>\n\n<p>The pretty-printer must split the line at this point,</p>\n\n<p>Not the normal way of pretty-printing, since imperative line splitting may\n  interfere with current line counters and box size calculation.\n  Using break hints within an enclosing vertical box is a better\n  alternative.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_print_if_newline", "formatter -> unit -> unit", null ]
          ],
          [
            "Function",
            [
              "print_if_newline", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Execute the next formatting command if the preceding line\n  has just been split. Otherwise, ignore the next formatting\n  command.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Pretty-printing termination",
        "section_info": null,
        "elements": [
          [
            "Function",
            [ "pp_print_flush", "formatter -> unit -> unit", null ]
          ],
          [
            "Function",
            [
              "print_flush", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>End of pretty-printing: resets the pretty-printer to initial state.</p>\n\n<p>All open pretty-printing boxes are closed, all pending text is printed.\n  In addition, the pretty-printer low level output device is flushed to\n  ensure that all pending text is really displayed.</p>\n\n<p>Note: never use <code class=\"code\">print_flush</code> in the normal course of a pretty-printing\n  routine, since the pretty-printer uses a complex buffering machinery to\n  properly indent the output; manually flushing those buffers at random\n  would conflict with the pretty-printer strategy and result to poor\n  rendering.</p>\n\n<p>Only consider using <code class=\"code\">print_flush</code> when displaying all pending material is\n  mandatory (for instance in case of interactive use when you want the user\n  to read some text) and when resetting the pretty-printer state will not\n  disturb further pretty-printing.</p>\n\n<p>Warning: If the output device of the pretty-printer is an output channel,\n  repeated calls to <code class=\"code\">print_flush</code> means repeated calls to <a href=\"Pervasives.html#VALflush\"><code class=\"code\">flush</code></a>\n  to flush the out channel; these explicit flush calls could foil the\n  buffering strategy of output channels and could dramatically impact\n  efficiency.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_print_newline", "formatter -> unit -> unit", null ]
          ],
          [
            "Function",
            [
              "print_newline", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>End of pretty-printing: resets the pretty-printer to initial state.</p>\n\n<p>All open pretty-printing boxes are closed, all pending text is printed.</p>\n\n<p>Equivalent to <a href=\"Format.html#VALprint_flush\"><code class=\"code\"><span class=\"constructor\">Format</span>.print_flush</code></a> followed by a new line.\n  See corresponding words of caution for <a href=\"Format.html#VALprint_flush\"><code class=\"code\"><span class=\"constructor\">Format</span>.print_flush</code></a>.</p>\n\n<p>Note: this is not the normal way to output a new line;\n  the preferred method is using break hints within a vertical pretty-printing\n  box.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Margin",
        "section_info": null,
        "elements": [
          [
            "Function",
            [ "pp_set_margin", "formatter -> int -> unit", null ]
          ],
          [
            "Function",
            [
              "set_margin", "int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_set_margin&nbsp;ppf&nbsp;d</code> sets the right margin to <code class=\"code\">d</code> (in characters):\n  the pretty-printer splits lines that overflow the right margin according to\n  the break hints given.\n  Nothing happens if <code class=\"code\">d</code> is smaller than 2.\n  If <code class=\"code\">d</code> is too large, the right margin is set to the maximum\n  admissible value (which is greater than <code class=\"code\">10&nbsp;^&nbsp;9</code>).\n  If <code class=\"code\">d</code> is less than the current maximum indentation limit, the\n  maximum indentation limit is decreased while trying to preserve\n  a minimal ratio <code class=\"code\">max_indent/margin&gt;=50%</code> and if possible\n  the current difference <code class=\"code\">margin&nbsp;-&nbsp;max_indent</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_get_margin", "formatter -> unit -> int", null ]
          ],
          [
            "Function",
            [
              "get_margin", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Returns the position of the right margin.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Maximum indentation limit",
        "section_info": null,
        "elements": [
          [
            "Function",
            [ "pp_set_max_indent", "formatter -> int -> unit", null ]
          ],
          [
            "Function",
            [
              "set_max_indent", "int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_set_max_indent&nbsp;ppf&nbsp;d</code> sets the maximum indentation limit of lines\n  to <code class=\"code\">d</code> (in characters):\n  once this limit is reached, new pretty-printing boxes are rejected to the\n  left, if they do not fit on the current line.</p>\n\n<p>Nothing happens if <code class=\"code\">d</code> is smaller than 2.\n  If <code class=\"code\">d</code> is too large, the limit is set to the maximum\n  admissible value (which is greater than <code class=\"code\">10&nbsp;^&nbsp;9</code>).</p>\n\n<p>If <code class=\"code\">d</code> is greater or equal than the current margin, it is ignored,\n  and the current maximum indentation limit is kept.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_get_max_indent", "formatter -> unit -> int", null ]
          ],
          [
            "Function",
            [
              "get_max_indent", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the maximum indentation limit (in characters).</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Maximum formatting depth",
        "section_info":
          "<p>The maximum formatting depth is the maximum number of pretty-printing\n  boxes simultaneously open.</p><p>Material inside boxes nested deeper is printed as an ellipsis (more\n  precisely as the text returned by <a href=\"Format.html#VALget_ellipsis_text\"><code class=\"code\"><span class=\"constructor\">Format</span>.get_ellipsis_text</code></a> <code class=\"code\">()</code>).</p>",
        "elements": [
          [
            "Function",
            [ "pp_set_max_boxes", "formatter -> int -> unit", null ]
          ],
          [
            "Function",
            [
              "set_max_boxes", "int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_set_max_boxes&nbsp;ppf&nbsp;max</code> sets the maximum number of pretty-printing\n    boxes simultaneously open.</p>\n\n<p>Material inside boxes nested deeper is printed as an ellipsis (more\n  precisely as the text returned by <a href=\"Format.html#VALget_ellipsis_text\"><code class=\"code\"><span class=\"constructor\">Format</span>.get_ellipsis_text</code></a> <code class=\"code\">()</code>).</p>\n\n<p>Nothing happens if <code class=\"code\">max</code> is smaller than 2.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_get_max_boxes", "formatter -> unit -> int", null ]
          ],
          [
            "Function",
            [
              "get_max_boxes", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Returns the maximum number of pretty-printing boxes allowed before\n  ellipsis.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_over_max_boxes", "formatter -> unit -> bool", null ]
          ],
          [
            "Function",
            [
              "over_max_boxes", "unit -> bool",
              "\n<div class=\"info-desc\">\n<p>Tests if the maximum number of pretty-printing boxes allowed have already\n  been opened.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Tabulation boxes",
        "section_info":
          "<p>A <em>tabulation box</em> prints material on lines divided into cells of fixed\n  length. A tabulation box provides a simple way to display vertical columns\n  of left adjusted text.</p><p>This box features command <code class=\"code\">set_tab</code> to define cell boundaries, and command\n  <code class=\"code\">print_tab</code> to move from cell to cell and split the line when there is no\n  more cells to print on the line.</p><p>Note: printing within tabulation box is line directed, so arbitrary line\n  splitting inside a tabulation box leads to poor rendering. Yet, controlled\n  use of tabulation boxes allows simple printing of columns within\n  module <a href=\"Format.html\"><code class=\"code\"><span class=\"constructor\">Format</span></code></a>.</p>",
        "elements": [
          [
            "Function",
            [ "pp_open_tbox", "formatter -> unit -> unit", null ]
          ],
          [
            "Function",
            [
              "open_tbox", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">open_tbox&nbsp;()</code> opens a new tabulation box.</p>\n\n<p>This box prints lines separated into cells of fixed width.</p>\n\n<p>Inside a tabulation box, special <em>tabulation markers</em> defines points of\n  interest on the line (for instance to delimit cell boundaries).\n  Function <a href=\"Format.html#VALset_tab\"><code class=\"code\"><span class=\"constructor\">Format</span>.set_tab</code></a> sets a tabulation marker at insertion point.</p>\n\n<p>A tabulation box features specific <em>tabulation breaks</em> to move to next\n  tabulation marker or split the line. Function <a href=\"Format.html#VALprint_tbreak\"><code class=\"code\"><span class=\"constructor\">Format</span>.print_tbreak</code></a> prints\n  a tabulation break.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_close_tbox", "formatter -> unit -> unit", null ]
          ],
          [
            "Function",
            [
              "close_tbox", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Closes the most recently opened tabulation box.</p>\n</div>\n"
            ]
          ],
          [ "Function", [ "pp_set_tab", "formatter -> unit -> unit", null ] ],
          [
            "Function",
            [
              "set_tab", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Sets a tabulation marker at current insertion point.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_print_tab", "formatter -> unit -> unit", null ]
          ],
          [
            "Function",
            [
              "print_tab", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">print_tab&nbsp;()</code> emits a 'next' tabulation break hint: if not already set on\n  a tabulation marker, the insertion point moves to the first tabulation\n  marker on the right, or the pretty-printer splits the line and insertion\n  point moves to the leftmost tabulation marker.</p>\n\n<p>It is equivalent to <code class=\"code\">print_tbreak&nbsp;0&nbsp;0</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_print_tbreak", "formatter -> int -> int -> unit", null ]
          ],
          [
            "Function",
            [
              "print_tbreak", "int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">print_tbreak&nbsp;nspaces&nbsp;offset</code> emits a 'full' tabulation break hint.</p>\n\n<p>If not already set on a tabulation marker, the insertion point moves to the\n  first tabulation marker on the right and the pretty-printer prints\n  <code class=\"code\">nspaces</code> spaces.</p>\n\n<p>If there is no next tabulation marker on the right, the pretty-printer\n  splits the line at this point, then insertion point moves to the leftmost\n  tabulation marker of the box.</p>\n\n<p>If the pretty-printer splits the line, <code class=\"code\">offset</code> is added to\n  the current indentation.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Ellipsis",
        "section_info": null,
        "elements": [
          [
            "Function",
            [ "pp_set_ellipsis_text", "formatter -> string -> unit", null ]
          ],
          [
            "Function",
            [
              "set_ellipsis_text", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the text of the ellipsis printed when too many pretty-printing boxes\n  are open (a single dot, <code class=\"code\">.</code>, by default).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_get_ellipsis_text", "formatter -> unit -> string", null ]
          ],
          [
            "Function",
            [
              "get_ellipsis_text", "unit -> string",
              "\n<div class=\"info-desc\">\n<p>Return the text of the ellipsis.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Semantic tags",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "tag", "= string", null,
              "<p><i>Semantic tags</i> (or simply <em>tags</em>) are user's defined delimiters\n  to associate user's specific operations to printed entities.</p><p>Common usage of semantic tags is text decoration to get specific font or\n  text size rendering for a display device, or marking delimitation of\n  entities (e.g. HTML or TeX elements or terminal escape sequences).\n  More sophisticated usage of semantic tags could handle dynamic\n  modification of the pretty-printer behavior to properly print the material\n  within some specific tags.</p><p>In order to properly delimit printed entities, a semantic tag must be\n  opened before and closed after the entity. Semantic tags must be properly\n  nested like parentheses.</p><p>Tag specific operations occur any time a tag is opened or closed, At each\n  occurrence, two kinds of operations are performed <em>tag-marking</em> and\n  <em>tag-printing</em>:</p><ul>\n<li>The tag-marking operation is the simpler tag specific operation: it simply\n  writes a tag specific string into the output device of the\n  formatter. Tag-marking does not interfere with line-splitting computation.</li>\n<li>The tag-printing operation is the more involved tag specific operation: it\n  can print arbitrary material to the formatter. Tag-printing is tightly\n  linked to the current pretty-printer operations.</li>\n</ul><p>Roughly speaking, tag-marking is commonly used to get a better rendering of\n  texts in the rendering device, while tag-printing allows fine tuning of\n  printing routines to print the same entity differently according to the\n  semantic tags (i.e. print additional material or even omit parts of the\n  output).</p><p>More precisely: when a semantic tag is opened or closed then both and\n  successive 'tag-printing' and 'tag-marking' operations occur:</p><ul>\n<li>Tag-printing a semantic tag means calling the formatter specific function\n  <code class=\"code\">print_open_tag</code> (resp. <code class=\"code\">print_close_tag</code>) with the name of the tag as\n  argument: that tag-printing function can then print any regular material\n  to the formatter (so that this material is enqueued as usual in the\n  formatter queue for further line splitting computation).</li>\n<li>Tag-marking a semantic tag means calling the formatter specific function\n  <code class=\"code\">mark_open_tag</code> (resp. <code class=\"code\">mark_close_tag</code>) with the name of the tag as\n  argument: that tag-marking function can then return the 'tag-opening\n  marker' (resp. `tag-closing marker') for direct output into the output\n  device of the formatter.</li>\n</ul><p>Being written directly into the output device of the formatter, semantic\n  tag marker strings are not considered as part of the printing material that\n  drives line splitting (in other words, the length of the strings\n  corresponding to tag markers is considered as zero for line splitting).</p><p>Thus, semantic tag handling is in some sense transparent to pretty-printing\n  and does not interfere with usual indentation. Hence, a single\n  pretty-printing routine can output both simple 'verbatim' material or\n  richer decorated output depending on the treatment of tags. By default,\n  tags are not active, hence the output is not decorated with tag\n  information. Once <code class=\"code\">set_tags</code> is set to <code class=\"code\"><span class=\"keyword\">true</span></code>, the pretty-printer engine\n  honors tags and decorates the output accordingly.</p><p>Default tag-marking functions behave the HTML way: tags are enclosed in \"&lt;\"\n  and \"&gt;\"; hence, opening marker for tag <code class=\"code\">t</code> is <code class=\"code\"><span class=\"string\">\"&lt;t&gt;\"</span></code> and closing marker is\n  <code class=\"code\"><span class=\"string\">\"&lt;/t&gt;\"</span></code>.</p><p>Default tag-printing functions just do nothing.</p><p>Tag-marking and tag-printing functions are user definable and can\n  be set by calling <a href=\"Format.html#VALset_formatter_tag_functions\"><code class=\"code\"><span class=\"constructor\">Format</span>.set_formatter_tag_functions</code></a>.</p><p>Semantic tag operations may be set on or off with <a href=\"Format.html#VALset_tags\"><code class=\"code\"><span class=\"constructor\">Format</span>.set_tags</code></a>.\n  Tag-marking operations may be set on or off with <a href=\"Format.html#VALset_mark_tags\"><code class=\"code\"><span class=\"constructor\">Format</span>.set_mark_tags</code></a>.\n  Tag-printing operations may be set on or off with <a href=\"Format.html#VALset_print_tags\"><code class=\"code\"><span class=\"constructor\">Format</span>.set_print_tags</code></a>.</p>"
            ]
          ],
          [
            "Function",
            [ "pp_open_tag", "formatter -> string -> unit", null ]
          ],
          [
            "Function",
            [
              "open_tag", "tag -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_open_tag&nbsp;ppf&nbsp;t</code> opens the semantic tag named <code class=\"code\">t</code>.</p>\n\n<p>The <code class=\"code\">print_open_tag</code> tag-printing function of the formatter is called with\n  <code class=\"code\">t</code> as argument; then the opening tag marker for <code class=\"code\">t</code>, as given by\n  <code class=\"code\">mark_open_tag&nbsp;t</code>, is written into the output device of the formatter.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_close_tag", "formatter -> unit -> unit", null ]
          ],
          [
            "Function",
            [
              "close_tag", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_close_tag&nbsp;ppf&nbsp;()</code> closes the most recently opened semantic tag <code class=\"code\">t</code>.</p>\n\n<p>The closing tag marker, as given by <code class=\"code\">mark_close_tag&nbsp;t</code>, is written into the\n  output device of the formatter; then the <code class=\"code\">print_close_tag</code> tag-printing\n  function of the formatter is called with <code class=\"code\">t</code> as argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_set_tags", "formatter -> bool -> unit", null ]
          ],
          [
            "Function",
            [
              "set_tags", "bool -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_set_tags&nbsp;ppf&nbsp;b</code> turns on or off the treatment of semantic tags\n  (default is off).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_set_print_tags", "formatter -> bool -> unit", null ]
          ],
          [
            "Function",
            [
              "set_print_tags", "bool -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_set_print_tags&nbsp;ppf&nbsp;b</code> turns on or off the tag-printing operations.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_set_mark_tags", "formatter -> bool -> unit", null ]
          ],
          [
            "Function",
            [
              "set_mark_tags", "bool -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_set_mark_tags&nbsp;ppf&nbsp;b</code> turns on or off the tag-marking operations.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_get_print_tags", "formatter -> unit -> bool", null ]
          ],
          [
            "Function",
            [
              "get_print_tags", "unit -> bool",
              "\n<div class=\"info-desc\">\n<p>Return the current status of tag-printing operations.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "pp_get_mark_tags", "formatter -> unit -> bool", null ]
          ],
          [
            "Function",
            [
              "get_mark_tags", "unit -> bool",
              "\n<div class=\"info-desc\">\n<p>Return the current status of tag-marking operations.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pp_set_formatter_out_channel",
              "formatter -> out_channel -> unit",
              "\n<div class=\"info-desc\">\n<h2 id=\"1_Redirectingthestandardformatteroutput\">Redirecting the standard formatter output</h2></div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_formatter_out_channel", "out_channel -> unit",
              "\n<div class=\"info-desc\">\n<p>Redirect the standard pretty-printer output to the given channel.\n  (All the output functions of the standard formatter are set to the\n   default output functions printing to the given channel.)</p>\n\n<p><code class=\"code\">set_formatter_out_channel</code> is equivalent to\n  <a href=\"Format.html#VALpp_set_formatter_out_channel\"><code class=\"code\"><span class=\"constructor\">Format</span>.pp_set_formatter_out_channel</code></a> <code class=\"code\">std_formatter</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pp_set_formatter_output_functions",
              "formatter -> (string -> int -> int -> unit) -> (unit -> unit) -> unit",
              null
            ]
          ],
          [
            "Function",
            [
              "set_formatter_output_functions",
              "(string -> int -> int -> unit) -> (unit -> unit) -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_set_formatter_output_functions&nbsp;ppf&nbsp;out&nbsp;flush</code> redirects the\n  standard pretty-printer output functions to the functions <code class=\"code\">out</code> and\n  <code class=\"code\">flush</code>.</p>\n\n<p>The <code class=\"code\">out</code> function performs all the pretty-printer string output.\n  It is called with a string <code class=\"code\">s</code>, a start position <code class=\"code\">p</code>, and a number of\n  characters <code class=\"code\">n</code>; it is supposed to output characters <code class=\"code\">p</code> to <code class=\"code\">p&nbsp;+&nbsp;n&nbsp;-&nbsp;1</code> of\n  <code class=\"code\">s</code>.</p>\n\n<p>The <code class=\"code\">flush</code> function is called whenever the pretty-printer is flushed\n  (via conversion <code class=\"code\">%!</code>, or pretty-printing indications <code class=\"code\">@?</code> or <code class=\"code\">@.</code>, or\n  using low level functions <code class=\"code\">print_flush</code> or <code class=\"code\">print_newline</code>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pp_get_formatter_output_functions",
              "formatter -> unit -> (string -> int -> int -> unit) * (unit -> unit)",
              null
            ]
          ],
          [
            "Function",
            [
              "get_formatter_output_functions",
              "unit -> (string -> int -> int -> unit) * (unit -> unit)",
              "\n<div class=\"info-desc\">\n<p>Return the current output functions of the standard pretty-printer.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Redefining formatter output",
        "section_info":
          "<p>The <code class=\"code\"><span class=\"constructor\">Format</span></code> module is versatile enough to let you completely redefine\n  the meaning of pretty-printing output: you may provide your own functions\n  to define how to handle indentation, line splitting, and even printing of\n  all the characters that have to be printed!</p>",
        "elements": [],
        "sub_sections": [
          {
            "section_name": "Redefining output functions",
            "section_info": null,
            "elements": [
              [
                "Typevariant",
                [
                  "formatter_out_functions", "= {",
                  "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatter_out_functions.out_string\">out_string</span>&nbsp;: <code class=\"type\">string -&gt; int -&gt; int -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatter_out_functions.out_flush\">out_flush</span>&nbsp;: <code class=\"type\">unit -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatter_out_functions.out_newline\">out_newline</span>&nbsp;: <code class=\"type\">unit -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatter_out_functions.out_spaces\">out_spaces</span>&nbsp;: <code class=\"type\">int -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatter_out_functions.out_indent\">out_indent</span>&nbsp;: <code class=\"type\">int -&gt; unit</code>;</code></td>\n\n</tr></tbody>",
                  "\n<div class=\"info-desc\">\n<p>The set of output functions specific to a formatter:</p>\n<ul>\n<li>the <code class=\"code\">out_string</code> function performs all the pretty-printer string output.\n  It is called with a string <code class=\"code\">s</code>, a start position <code class=\"code\">p</code>, and a number of\n  characters <code class=\"code\">n</code>; it is supposed to output characters <code class=\"code\">p</code> to <code class=\"code\">p&nbsp;+&nbsp;n&nbsp;-&nbsp;1</code> of\n  <code class=\"code\">s</code>.</li>\n<li>the <code class=\"code\">out_flush</code> function flushes the pretty-printer output device.</li>\n<li><code class=\"code\">out_newline</code> is called to open a new line when the pretty-printer splits\n  the line.</li>\n<li>the <code class=\"code\">out_spaces</code> function outputs spaces when a break hint leads to spaces\n  instead of a line split. It is called with the number of spaces to output.</li>\n<li>the <code class=\"code\">out_indent</code> function performs new line indentation when the\n  pretty-printer splits the line. It is called with the indentation value of\n  the new line.</li>\n</ul>\n<p>By default:</p>\n<ul>\n<li>fields <code class=\"code\">out_string</code> and <code class=\"code\">out_flush</code> are output device specific;\n  (e.g. <a href=\"Pervasives.html#VALoutput_string\"><code class=\"code\">output_string</code></a> and <a href=\"Pervasives.html#VALflush\"><code class=\"code\">flush</code></a> for a\n   <a href=\"Pervasives.html#TYPEout_channel\"><code class=\"code\">out_channel</code></a> device, or <code class=\"code\"><span class=\"constructor\">Buffer</span>.add_substring</code> and\n   <a href=\"Pervasives.html#VALignore\"><code class=\"code\">ignore</code></a> for a <code class=\"code\"><span class=\"constructor\">Buffer</span>.t</code> output device),</li>\n<li>field <code class=\"code\">out_newline</code> is equivalent to <code class=\"code\">out_string&nbsp;<span class=\"string\">\"\\n\"</span>&nbsp;0&nbsp;1</code>;</li>\n<li>fields <code class=\"code\">out_spaces</code> and <code class=\"code\">out_indent</code> are equivalent to\n  <code class=\"code\">out_string&nbsp;(<span class=\"constructor\">String</span>.make&nbsp;n&nbsp;<span class=\"string\">'&nbsp;'</span>)&nbsp;0&nbsp;n</code>.</li>\n</ul>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "pp_set_formatter_out_functions",
                  "formatter -> formatter_out_functions -> unit", null
                ]
              ],
              [
                "Function",
                [
                  "set_formatter_out_functions",
                  "formatter_out_functions -> unit",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_set_formatter_out_functions&nbsp;ppf&nbsp;out_funs</code>\n  Set all the pretty-printer output functions of <code class=\"code\">ppf</code> to those of\n  argument <code class=\"code\">out_funs</code>,</p>\n\n<p>This way, you can change the meaning of indentation (which can be\n  something else than just printing space characters) and the meaning of new\n  lines opening (which can be connected to any other action needed by the\n  application at hand).</p>\n\n<p>Reasonable defaults for functions <code class=\"code\">out_spaces</code> and <code class=\"code\">out_newline</code> are\n  respectively <code class=\"code\">out_funs.out_string&nbsp;(<span class=\"constructor\">String</span>.make&nbsp;n&nbsp;<span class=\"string\">'&nbsp;'</span>)&nbsp;0&nbsp;n</code> and\n  <code class=\"code\">out_funs.out_string&nbsp;<span class=\"string\">\"\\n\"</span>&nbsp;0&nbsp;1</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "pp_get_formatter_out_functions",
                  "formatter -> unit -> formatter_out_functions", null
                ]
              ],
              [
                "Function",
                [
                  "get_formatter_out_functions",
                  "unit -> formatter_out_functions",
                  "\n<div class=\"info-desc\">\n<p>Return the current output functions of the pretty-printer,\n  including line splitting and indentation functions. Useful to record the\n  current setting and restore it afterwards.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
                ]
              ]
            ],
            "sub_sections": []
          }
        ]
      },
      {
        "section_name": "Redefining semantic tag operations",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "formatter_tag_functions", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatter_tag_functions.mark_open_tag\">mark_open_tag</span>&nbsp;: <code class=\"type\"><a href=\"Format.html#TYPEtag\">tag</a> -&gt; string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatter_tag_functions.mark_close_tag\">mark_close_tag</span>&nbsp;: <code class=\"type\"><a href=\"Format.html#TYPEtag\">tag</a> -&gt; string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatter_tag_functions.print_open_tag\">print_open_tag</span>&nbsp;: <code class=\"type\"><a href=\"Format.html#TYPEtag\">tag</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTformatter_tag_functions.print_close_tag\">print_close_tag</span>&nbsp;: <code class=\"type\"><a href=\"Format.html#TYPEtag\">tag</a> -&gt; unit</code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The semantic tag handling functions specific to a formatter:\n  <code class=\"code\">mark</code> versions are the 'tag-marking' functions that associate a string\n  marker to a tag in order for the pretty-printing engine to write\n  those markers as 0 length tokens in the output device of the formatter.\n  <code class=\"code\">print</code> versions are the 'tag-printing' functions that can perform\n  regular printing when a tag is closed or opened.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pp_set_formatter_tag_functions",
              "formatter -> formatter_tag_functions -> unit", null
            ]
          ],
          [
            "Function",
            [
              "set_formatter_tag_functions",
              "formatter_tag_functions -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_set_formatter_tag_functions&nbsp;ppf&nbsp;tag_funs</code> changes the meaning of\n  opening and closing semantic tag operations to use the functions in\n  <code class=\"code\">tag_funs</code> when printing on <code class=\"code\">ppf</code>.</p>\n\n<p>When opening a semantic tag with name <code class=\"code\">t</code>, the string <code class=\"code\">t</code> is passed to the\n  opening tag-marking function (the <code class=\"code\">mark_open_tag</code> field of the\n  record <code class=\"code\">tag_funs</code>), that must return the opening tag marker for\n  that name. When the next call to <code class=\"code\">close_tag&nbsp;()</code> happens, the semantic tag\n  name <code class=\"code\">t</code> is sent back to the closing tag-marking function (the\n  <code class=\"code\">mark_close_tag</code> field of record <code class=\"code\">tag_funs</code>), that must return a\n  closing tag marker for that name.</p>\n\n<p>The <code class=\"code\">print_</code> field of the record contains the tag-printing functions that\n  are called at tag opening and tag closing time, to output regular material\n  in the pretty-printer queue.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pp_get_formatter_tag_functions",
              "formatter -> unit -> formatter_tag_functions", null
            ]
          ],
          [
            "Function",
            [
              "get_formatter_tag_functions",
              "unit -> formatter_tag_functions",
              "\n<div class=\"info-desc\">\n<p>Return the current semantic tag operation functions of the standard\n  pretty-printer.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Defining formatters",
        "section_info":
          "<p>Defining new formatters permits unrelated output of material in\n  parallel on several output devices.\n  All the parameters of a formatter are local to the formatter:\n  right margin, maximum indentation limit, maximum number of pretty-printing\n  boxes simultaneously open, ellipsis, and so on, are specific to\n  each formatter and may be fixed independently.</p><p>For instance, given a <a href=\"Buffer.html#TYPEt\"><code class=\"code\"><span class=\"constructor\">Buffer</span>.t</code></a> buffer <code class=\"code\">b</code>, <a href=\"Format.html#VALformatter_of_buffer\"><code class=\"code\"><span class=\"constructor\">Format</span>.formatter_of_buffer</code></a> <code class=\"code\">b</code>\n  returns a new formatter using buffer <code class=\"code\">b</code> as its output device.\n  Similarly, given a <a href=\"Pervasives.html#TYPEout_channel\"><code class=\"code\">out_channel</code></a> output channel <code class=\"code\">oc</code>,\n  <a href=\"Format.html#VALformatter_of_out_channel\"><code class=\"code\"><span class=\"constructor\">Format</span>.formatter_of_out_channel</code></a> <code class=\"code\">oc</code> returns a new formatter using\n  channel <code class=\"code\">oc</code> as its output device.</p><p>Alternatively, given <code class=\"code\">out_funs</code>, a complete set of output functions for a\n  formatter, then <a href=\"Format.html#VALformatter_of_out_functions\"><code class=\"code\"><span class=\"constructor\">Format</span>.formatter_of_out_functions</code></a> <code class=\"code\">out_funs</code> computes a new\n  formatter using those functions for output.</p>",
        "elements": [
          [
            "Function",
            [
              "formatter_of_out_channel", "out_channel -> formatter",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">formatter_of_out_channel&nbsp;oc</code> returns a new formatter writing\n  to the corresponding output channel <code class=\"code\">oc</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "std_formatter", "formatter",
              "\n<div class=\"info-desc\">\n<p>The standard formatter to write to standard output.</p>\n\n<p>It is defined as <a href=\"Format.html#VALformatter_of_out_channel\"><code class=\"code\"><span class=\"constructor\">Format</span>.formatter_of_out_channel</code></a> <a href=\"Pervasives.html#VALstdout\"><code class=\"code\">stdout</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "err_formatter", "formatter",
              "\n<div class=\"info-desc\">\n<p>A formatter to write to standard error.</p>\n\n<p>It is defined as <a href=\"Format.html#VALformatter_of_out_channel\"><code class=\"code\"><span class=\"constructor\">Format</span>.formatter_of_out_channel</code></a> <a href=\"Pervasives.html#VALstderr\"><code class=\"code\">stderr</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "formatter_of_buffer", "Buffer.t -> formatter",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">formatter_of_buffer&nbsp;b</code> returns a new formatter writing to\n  buffer <code class=\"code\">b</code>. At the end of pretty-printing, the formatter must be flushed\n  using <a href=\"Format.html#VALpp_print_flush\"><code class=\"code\"><span class=\"constructor\">Format</span>.pp_print_flush</code></a> or <a href=\"Format.html#VALpp_print_newline\"><code class=\"code\"><span class=\"constructor\">Format</span>.pp_print_newline</code></a>, to print all the\n  pending material into the buffer.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stdbuf", "Buffer.t",
              "\n<div class=\"info-desc\">\n<p>The string buffer in which <code class=\"code\">str_formatter</code> writes.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "str_formatter", "formatter",
              "\n<div class=\"info-desc\">\n<p>A formatter to output to the <a href=\"Format.html#VALstdbuf\"><code class=\"code\"><span class=\"constructor\">Format</span>.stdbuf</code></a> string buffer.</p>\n\n<p><code class=\"code\">str_formatter</code> is defined as <a href=\"Format.html#VALformatter_of_buffer\"><code class=\"code\"><span class=\"constructor\">Format</span>.formatter_of_buffer</code></a> <a href=\"Format.html#VALstdbuf\"><code class=\"code\"><span class=\"constructor\">Format</span>.stdbuf</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "flush_str_formatter", "unit -> string",
              "\n<div class=\"info-desc\">\n<p>Returns the material printed with <code class=\"code\">str_formatter</code>, flushes\n  the formatter and resets the corresponding buffer.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "make_formatter",
              "(string -> int -> int -> unit) -> (unit -> unit) -> formatter",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">make_formatter&nbsp;out&nbsp;flush</code> returns a new formatter that outputs with\n  function <code class=\"code\">out</code>, and flushes with function <code class=\"code\">flush</code>.</p>\n\n<p>For instance,</p>\n<pre class=\"codepre\"><code class=\"code\">    make_formatter\n      (<span class=\"constructor\">Pervasives</span>.output oc)\n      (<span class=\"keyword\">fun</span> () <span class=\"keywordsign\">-&gt;</span> <span class=\"constructor\">Pervasives</span>.flush oc) </code></pre><p>returns a formatter to the <a href=\"Pervasives.html#TYPEout_channel\"><code class=\"code\">out_channel</code></a> <code class=\"code\">oc</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "formatter_of_out_functions",
              "formatter_out_functions -> formatter",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">formatter_of_out_functions&nbsp;out_funs</code> returns a new formatter that writes\n  with the set of output functions <code class=\"code\">out_funs</code>.</p>\n\n<p>See definition of type <a href=\"Format.html#TYPEformatter_out_functions\"><code class=\"code\"><span class=\"constructor\">Format</span>.formatter_out_functions</code></a> for the meaning of argument\n  <code class=\"code\">out_funs</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": [
          {
            "section_name": "Symbolic pretty-printing",
            "section_info":
              "<p>Symbolic pretty-printing is pretty-printing using a symbolic formatter,\n  i.e. a formatter that outputs symbolic pretty-printing items.</p><p>When using a symbolic formatter, all regular pretty-printing activities\n  occur but output material is symbolic and stored in a buffer of output items.\n  At the end of pretty-printing, flushing the output buffer allows\n  post-processing of symbolic output before performing low level output\n  operations.</p><p>In practice, first define a symbolic output buffer <code class=\"code\">b</code> using:</p><ul>\n<li><code class=\"code\"><span class=\"keyword\">let</span>&nbsp;sob&nbsp;=&nbsp;make_symbolic_output_buffer&nbsp;()</code>.\n  Then define a symbolic formatter with:</li>\n<li><code class=\"code\"><span class=\"keyword\">let</span>&nbsp;ppf&nbsp;=&nbsp;formatter_of_symbolic_output_buffer&nbsp;sob</code></li>\n</ul><p>Use symbolic formatter <code class=\"code\">ppf</code> as usual, and retrieve symbolic items at end\n  of pretty-printing by flushing symbolic output buffer <code class=\"code\">sob</code> with:</p><ul>\n<li><code class=\"code\">flush_symbolic_output_buffer&nbsp;sob</code>.</li>\n</ul>",
            "elements": [
              [
                "Typevariant",
                [
                  "symbolic_output_item", "=",
                  "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsymbolic_output_item.Output_flush\"><span class=\"constructor\">Output_flush</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>symbolic flush command</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsymbolic_output_item.Output_newline\"><span class=\"constructor\">Output_newline</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>symbolic newline command</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsymbolic_output_item.Output_string\"><span class=\"constructor\">Output_string</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Output_string</span>&nbsp;s</code>: symbolic output for string <code class=\"code\">s</code></p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsymbolic_output_item.Output_spaces\"><span class=\"constructor\">Output_spaces</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Output_spaces</span>&nbsp;n</code>: symbolic command to output <code class=\"code\">n</code> spaces</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsymbolic_output_item.Output_indent\"><span class=\"constructor\">Output_indent</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Output_indent</span>&nbsp;i</code>: symbolic indentation of size <code class=\"code\">i</code></p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
                  "\n<div class=\"info-desc\">\n<p>Items produced by symbolic pretty-printers</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
                ]
              ],
              [
                "Typevariant",
                [
                  "symbolic_output_buffer", null, null,
                  "\n<div class=\"info-desc\">\n<p>The output buffer of a symbolic pretty-printer.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "make_symbolic_output_buffer",
                  "unit -> symbolic_output_buffer",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">make_symbolic_output_buffer&nbsp;()</code> returns a fresh buffer for\n  symbolic output.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "clear_symbolic_output_buffer",
                  "symbolic_output_buffer -> unit",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">clear_symbolic_output_buffer&nbsp;sob</code> resets buffer <code class=\"code\">sob</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "get_symbolic_output_buffer",
                  "symbolic_output_buffer -> symbolic_output_item list",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">get_symbolic_output_buffer&nbsp;sob</code> returns the contents of buffer <code class=\"code\">sob</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "flush_symbolic_output_buffer",
                  "symbolic_output_buffer -> symbolic_output_item list",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">flush_symbolic_output_buffer&nbsp;sob</code> returns the contents of buffer\n  <code class=\"code\">sob</code> and resets buffer <code class=\"code\">sob</code>.\n  <code class=\"code\">flush_symbolic_output_buffer&nbsp;sob</code> is equivalent to\n  <code class=\"code\"><span class=\"keyword\">let</span>&nbsp;items&nbsp;=&nbsp;get_symbolic_output_buffer&nbsp;sob&nbsp;<span class=\"keyword\">in</span><br>\n&nbsp;&nbsp;&nbsp;clear_symbolic_output_buffer&nbsp;sob;&nbsp;items</code></p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "add_symbolic_output_item",
                  "symbolic_output_buffer -> symbolic_output_item -> unit",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">add_symbolic_output_item&nbsp;sob&nbsp;itm</code> adds item <code class=\"code\">itm</code> to buffer <code class=\"code\">sob</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "formatter_of_symbolic_output_buffer",
                  "symbolic_output_buffer -> formatter",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">formatter_of_symbolic_output_buffer&nbsp;sob</code> returns a symbolic formatter\n  that outputs to <code class=\"code\">symbolic_output_buffer</code> <code class=\"code\">sob</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
                ]
              ]
            ],
            "sub_sections": []
          }
        ]
      },
      {
        "section_name": "Convenience formatting functions.",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "pp_print_list",
              "?pp_sep:( formatter -> unit -> unit) -> ( formatter -> 'a -> unit) -> formatter -> 'a list -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_print_list&nbsp;?pp_sep&nbsp;pp_v&nbsp;ppf&nbsp;l</code> prints items of list <code class=\"code\">l</code>,\n  using <code class=\"code\">pp_v</code> to print each item, and calling <code class=\"code\">pp_sep</code>\n  between items (<code class=\"code\">pp_sep</code> defaults to <a href=\"Format.html#VALpp_print_cut\"><code class=\"code\"><span class=\"constructor\">Format</span>.pp_print_cut</code></a>.\n  Does nothing on empty lists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "pp_print_text", "formatter -> string -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pp_print_text&nbsp;ppf&nbsp;s</code> prints <code class=\"code\">s</code> with spaces and newlines respectively\n  printed using <a href=\"Format.html#VALpp_print_space\"><code class=\"code\"><span class=\"constructor\">Format</span>.pp_print_space</code></a> and <a href=\"Format.html#VALpp_force_newline\"><code class=\"code\"><span class=\"constructor\">Format</span>.pp_force_newline</code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Formatted pretty-printing",
        "section_info":
          "<p>Module <code class=\"code\"><span class=\"constructor\">Format</span></code> provides a complete set of <code class=\"code\">printf</code> like functions for\n  pretty-printing using format string specifications.</p><p>Specific annotations may be added in the format strings to give\n  pretty-printing commands to the pretty-printing engine.</p><p>Those annotations are introduced in the format strings using the <code class=\"code\">@</code>\n  character. For instance, <code class=\"code\">@&nbsp;</code> means a space break, <code class=\"code\">@,</code> means a cut,\n  <code class=\"code\">@[</code> opens a new box, and <code class=\"code\">@]</code> closes the last open box.</p>",
        "elements": [
          [
            "Function",
            [
              "fprintf", "formatter -> ('a, formatter , unit) format -> 'a",
              "<p><code class=\"code\">fprintf&nbsp;ff&nbsp;fmt&nbsp;arg1&nbsp;...&nbsp;argN</code> formats the arguments <code class=\"code\">arg1</code> to <code class=\"code\">argN</code>\n  according to the format string <code class=\"code\">fmt</code>, and outputs the resulting string on\n  the formatter <code class=\"code\">ff</code>.</p><p>The format string <code class=\"code\">fmt</code> is a character string which contains three types of\n  objects: plain characters and conversion specifications as specified in\n  the <a href=\"Printf.html\"><code class=\"code\"><span class=\"constructor\">Printf</span></code></a> module, and pretty-printing indications specific to the\n  <code class=\"code\"><span class=\"constructor\">Format</span></code> module.</p><p>The pretty-printing indication characters are introduced by\n  a <code class=\"code\">@</code> character, and their meanings are:</p><ul>\n<li><code class=\"code\">@[</code>: open a pretty-printing box. The type and offset of the\n    box may be optionally specified with the following syntax:\n    the <code class=\"code\">&lt;</code> character, followed by an optional box type indication,\n    then an optional integer offset, and the closing <code class=\"code\">&gt;</code> character.\n    Pretty-printing box type is one of <code class=\"code\">h</code>, <code class=\"code\">v</code>, <code class=\"code\">hv</code>, <code class=\"code\">b</code>, or <code class=\"code\">hov</code>.\n    '<code class=\"code\">h</code>' stands for an 'horizontal' pretty-printing box,\n    '<code class=\"code\">v</code>' stands for a 'vertical' pretty-printing box,\n    '<code class=\"code\">hv</code>' stands for an 'horizontal/vertical' pretty-printing box,\n    '<code class=\"code\">b</code>' stands for an 'horizontal-or-vertical' pretty-printing box\n    demonstrating indentation,\n    '<code class=\"code\">hov</code>' stands a simple 'horizontal-or-vertical' pretty-printing box.\n    For instance, <code class=\"code\">@[&lt;hov&nbsp;2&gt;</code> opens an 'horizontal-or-vertical'\n    pretty-printing box with indentation 2 as obtained with <code class=\"code\">open_hovbox&nbsp;2</code>.\n    For more details about pretty-printing boxes, see the various box opening\n    functions <code class=\"code\">open_*box</code>.</li>\n<li><code class=\"code\">@]</code>: close the most recently opened pretty-printing box.</li>\n<li><code class=\"code\">@,</code>: output a 'cut' break hint, as with <code class=\"code\">print_cut&nbsp;()</code>.</li>\n<li><code class=\"code\">@&nbsp;</code>: output a 'space' break hint, as with <code class=\"code\">print_space&nbsp;()</code>.</li>\n<li><code class=\"code\">@;</code>: output a 'full' break hint as with <code class=\"code\">print_break</code>. The\n    <code class=\"code\">nspaces</code> and <code class=\"code\">offset</code> parameters of the break hint may be\n    optionally specified with the following syntax:\n    the <code class=\"code\">&lt;</code> character, followed by an integer <code class=\"code\">nspaces</code> value,\n    then an integer <code class=\"code\">offset</code>, and a closing <code class=\"code\">&gt;</code> character.\n    If no parameters are provided, the good break defaults to a\n    'space' break hint.</li>\n<li><code class=\"code\">@.</code>: flush the pretty-printer and split the line, as with\n    <code class=\"code\">print_newline&nbsp;()</code>.</li>\n<li><code class=\"code\">@&lt;n&gt;</code>: print the following item as if it were of length <code class=\"code\">n</code>.\n    Hence, <code class=\"code\">printf&nbsp;<span class=\"string\">\"@&lt;0&gt;%s\"</span>&nbsp;arg</code> prints <code class=\"code\">arg</code> as a zero length string.\n    If <code class=\"code\">@&lt;n&gt;</code> is not followed by a conversion specification,\n    then the following character of the format is printed as if\n    it were of length <code class=\"code\">n</code>.</li>\n<li><code class=\"code\">@{</code>: open a semantic tag. The name of the tag may be optionally\n    specified with the following syntax:\n    the <code class=\"code\">&lt;</code> character, followed by an optional string\n    specification, and the closing <code class=\"code\">&gt;</code> character. The string\n    specification is any character string that does not contain the\n    closing character <code class=\"code\"><span class=\"string\">'&gt;'</span></code>. If omitted, the tag name defaults to the\n    empty string.\n    For more details about semantic tags, see the functions <a href=\"Format.html#VALopen_tag\"><code class=\"code\"><span class=\"constructor\">Format</span>.open_tag</code></a> and\n    <a href=\"Format.html#VALclose_tag\"><code class=\"code\"><span class=\"constructor\">Format</span>.close_tag</code></a>.</li>\n<li><code class=\"code\">@}</code>: close the most recently opened semantic tag.</li>\n<li><code class=\"code\">@?</code>: flush the pretty-printer as with <code class=\"code\">print_flush&nbsp;()</code>.\n    This is equivalent to the conversion <code class=\"code\">%!</code>.</li>\n<li><code class=\"code\">@\\n</code>: force a newline, as with <code class=\"code\">force_newline&nbsp;()</code>, not the normal way\n    of pretty-printing, you should prefer using break hints inside a vertical\n    pretty-printing box.</li>\n</ul><p>Note: To prevent the interpretation of a <code class=\"code\">@</code> character as a\n  pretty-printing indication, escape it with a <code class=\"code\">%</code> character.\n  Old quotation mode <code class=\"code\">@@</code> is deprecated since it is not compatible with\n  formatted input interpretation of character <code class=\"code\"><span class=\"string\">'@'</span></code>.</p><p>Example: <code class=\"code\">printf&nbsp;<span class=\"string\">\"@[%s@&nbsp;%d@]@.\"</span>&nbsp;<span class=\"string\">\"x&nbsp;=\"</span>&nbsp;1</code> is equivalent to\n  <code class=\"code\">open_box&nbsp;();&nbsp;print_string&nbsp;<span class=\"string\">\"x&nbsp;=\"</span>;&nbsp;print_space&nbsp;();<br>\n&nbsp;&nbsp;&nbsp;print_int&nbsp;1;&nbsp;close_box&nbsp;();&nbsp;print_newline&nbsp;()</code>.\n  It prints <code class=\"code\">x&nbsp;=&nbsp;1</code> within a pretty-printing 'horizontal-or-vertical' box.</p>"
            ]
          ],
          [
            "Function",
            [
              "printf", "('a, formatter , unit) format -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">fprintf</code> above, but output on <code class=\"code\">std_formatter</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "eprintf", "('a, formatter , unit) format -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">fprintf</code> above, but output on <code class=\"code\">err_formatter</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sprintf", "('a, unit, string) format -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">printf</code> above, but instead of printing on a formatter,\n  returns a string containing the result of formatting the arguments.\n  Note that the pretty-printer queue is flushed at the end of <em>each\n  call</em> to <code class=\"code\">sprintf</code>.</p>\n\n<p>In case of multiple and related calls to <code class=\"code\">sprintf</code> to output\n  material on a single string, you should consider using <code class=\"code\">fprintf</code>\n  with the predefined formatter <code class=\"code\">str_formatter</code> and call\n  <code class=\"code\">flush_str_formatter&nbsp;()</code> to get the final result.</p>\n\n<p>Alternatively, you can use <code class=\"code\"><span class=\"constructor\">Format</span>.fprintf</code> with a formatter writing to a\n  buffer of your own: flushing the formatter and the buffer at the end of\n  pretty-printing returns the desired string.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "asprintf", "('a, formatter , unit, string) format4 -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">printf</code> above, but instead of printing on a formatter,\n  returns a string containing the result of formatting the arguments.\n  The type of <code class=\"code\">asprintf</code> is general enough to interact nicely with <code class=\"code\">%a</code>\n  conversions.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "ifprintf", "formatter -> ('a, formatter , unit) format -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">fprintf</code> above, but does not print anything.\n  Useful to ignore some material when conditionally printing.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.10.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": null,
        "section_info":
          "<p>Formatted Pretty-Printing with continuations.</p>",
        "elements": [
          [
            "Function",
            [
              "kfprintf",
              "( formatter -> 'a) -> formatter -> ('b, formatter , unit, 'a) format4 -> 'b",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">fprintf</code> above, but instead of returning immediately,\n  passes the formatter to its first argument at the end of printing.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "ikfprintf",
              "( formatter -> 'a) -> formatter -> ('b, formatter , unit, 'a) format4 -> 'b",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">kfprintf</code> above, but does not print anything.\n  Useful to ignore some material when conditionally printing.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "ksprintf",
              "(string -> 'a) -> ('b, unit, string, 'a) format4 -> 'b",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">sprintf</code> above, but instead of returning the string,\n  passes it to the first argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "kasprintf",
              "(string -> 'a) -> ('b, formatter , unit, 'a) format4 -> 'b",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">asprintf</code> above, but instead of returning the string,\n  passes it to the first argument.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Deprecated",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "bprintf", "Buffer.t -> ('a, formatter , unit) format -> 'a",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>This function is error prone. Do not use it.\n  This function is neither compositional nor incremental, since it flushes\n  the pretty-printer queue at each call.\n\n  If you need to print to some buffer <code class=\"code\">b</code>, you must first define a\n  formatter writing to <code class=\"code\">b</code>, using <code class=\"code\"><span class=\"keyword\">let</span>&nbsp;to_b&nbsp;=&nbsp;formatter_of_buffer&nbsp;b</code>; then\n  use regular calls to <code class=\"code\"><span class=\"constructor\">Format</span>.fprintf</code> with formatter <code class=\"code\">to_b</code>.</div>\n"
            ]
          ],
          [
            "Function",
            [
              "kprintf",
              "(string -> 'a) -> ('b, unit, string, 'a) format4 -> 'b",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>An alias for <code class=\"code\">ksprintf</code>.</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_all_formatter_output_functions",
              "out:(string -> int -> int -> unit) -> flush:(unit -> unit) -> newline:(unit -> unit) -> spaces:(int -> unit) -> unit",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Subsumed by <code class=\"code\">set_formatter_out_functions</code>.</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_all_formatter_output_functions",
              "unit -> (string -> int -> int -> unit) * (unit -> unit) * (unit -> unit) * (int -> unit)",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Subsumed by <code class=\"code\">get_formatter_out_functions</code>.</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pp_set_all_formatter_output_functions",
              "formatter -> out:(string -> int -> int -> unit) -> flush:(unit -> unit) -> newline:(unit -> unit) -> spaces:(int -> unit) -> unit",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Subsumed by <code class=\"code\">pp_set_formatter_out_functions</code>.</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pp_get_all_formatter_output_functions",
              "formatter -> unit -> (string -> int -> int -> unit) * (unit -> unit) * (unit -> unit) * (int -> unit)",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Subsumed by <code class=\"code\">pp_get_formatter_out_functions</code>.</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Gc",
    "module_info":
      "\n<p>Memory management control and statistics; finalised values.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "stat", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.minor_words\">minor_words</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of words allocated in the minor heap since\n       the program was started.  This number is accurate in\n       byte-code programs, but only an approximation in programs\n       compiled to native code.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.promoted_words\">promoted_words</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of words allocated in the minor heap that\n       survived a minor collection and were moved to the major heap\n       since the program was started.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.major_words\">major_words</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of words allocated in the major heap, including\n       the promoted words, since the program was started.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.minor_collections\">minor_collections</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of minor collections since the program was started.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.major_collections\">major_collections</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of major collection cycles completed since the program\n        was started.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.heap_words\">heap_words</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Total size of the major heap, in words.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.heap_chunks\">heap_chunks</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of contiguous pieces of memory that make up the major heap.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.live_words\">live_words</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of words of live data in the major heap, including the header\n       words.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.live_blocks\">live_blocks</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of live blocks in the major heap.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.free_words\">free_words</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of words in the free list.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.free_blocks\">free_blocks</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of blocks in the free list.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.largest_free\">largest_free</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Size (in words) of the largest block in the free list.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.fragments\">fragments</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of wasted words due to fragmentation.  These are\n       1-words free blocks placed between two live blocks.  They\n       are not available for allocation.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.compactions\">compactions</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of heap compactions since the program was started.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.top_heap_words\">top_heap_words</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Maximum size reached by the major heap, in words.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstat.stack_size\">stack_size</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Current size of the stack, in words.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The memory management counters are returned in a <code class=\"code\">stat</code> record.</p>\n\n<p>The total amount of memory allocated by the program since it was started\n   is (in words) <code class=\"code\">minor_words&nbsp;+&nbsp;major_words&nbsp;-&nbsp;promoted_words</code>.  Multiply by\n   the word size (4 on a 32-bit machine, 8 on a 64-bit machine) to get\n   the number of bytes.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "control", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTcontrol.minor_heap_size\">minor_heap_size</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The size (in words) of the minor heap.  Changing\n       this parameter will trigger a minor collection.  Default: 256k.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTcontrol.major_heap_increment\">major_heap_increment</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>How much to add to the major heap when increasing it. If this\n        number is less than or equal to 1000, it is a percentage of\n        the current heap size (i.e. setting it to 100 will double the heap\n        size at each increase). If it is more than 1000, it is a fixed\n        number of words that will be added to the heap. Default: 15.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTcontrol.space_overhead\">space_overhead</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The major GC speed is computed from this parameter.\n       This is the memory that will be \"wasted\" because the GC does not\n       immediately collect unreachable blocks.  It is expressed as a\n       percentage of the memory used for live data.\n       The GC will work more (use more CPU time and collect\n       blocks more eagerly) if <code class=\"code\">space_overhead</code> is smaller.\n       Default: 80.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTcontrol.verbose\">verbose</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>This value controls the GC messages on standard error output.\n       It is a sum of some of the following flags, to print messages\n       on the corresponding events:</p>\n<ul>\n<li><code class=\"code\">0x001</code> Start of major GC cycle.</li>\n<li><code class=\"code\">0x002</code> Minor collection and major GC slice.</li>\n<li><code class=\"code\">0x004</code> Growing and shrinking of the heap.</li>\n<li><code class=\"code\">0x008</code> Resizing of stacks and memory manager tables.</li>\n<li><code class=\"code\">0x010</code> Heap compaction.</li>\n<li><code class=\"code\">0x020</code> Change of GC parameters.</li>\n<li><code class=\"code\">0x040</code> Computation of major GC slice size.</li>\n<li><code class=\"code\">0x080</code> Calling of finalisation functions.</li>\n<li><code class=\"code\">0x100</code> Bytecode executable and shared library search at start-up.</li>\n<li><code class=\"code\">0x200</code> Computation of compaction-triggering condition.</li>\n<li><code class=\"code\">0x400</code> Output GC statistics at program exit.\n       Default: 0.</li>\n</ul>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTcontrol.max_overhead\">max_overhead</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Heap compaction is triggered when the estimated amount\n       of \"wasted\" memory is more than <code class=\"code\">max_overhead</code> percent of the\n       amount of live data.  If <code class=\"code\">max_overhead</code> is set to 0, heap\n       compaction is triggered at the end of each major GC cycle\n       (this setting is intended for testing purposes only).\n       If <code class=\"code\">max_overhead&nbsp;&gt;=&nbsp;1000000</code>, compaction is never triggered.\n       If compaction is permanently disabled, it is strongly suggested\n       to set <code class=\"code\">allocation_policy</code> to 1.\n       Default: 500.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTcontrol.stack_limit\">stack_limit</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The maximum size of the stack (in words).  This is only\n       relevant to the byte-code runtime, as the native code runtime\n       uses the operating system's stack.  Default: 1024k.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTcontrol.allocation_policy\">allocation_policy</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The policy used for allocating in the heap.  Possible\n        values are 0 and 1.  0 is the next-fit policy, which is\n        quite fast but can result in fragmentation.  1 is the\n        first-fit policy, which can be slower in some cases but\n        can be better for programs with fragmentation problems.\n        Default: 0.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.0</li>\n</ul>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcontrol.window_size\">window_size</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The size of the window used by the major GC for smoothing\n        out variations in its workload. This is an integer between\n        1 and 50.\n        Default: 1.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The GC parameters are given as a <code class=\"code\">control</code> record.  Note that\n    these parameters can also be initialised by setting the\n    OCAMLRUNPARAM environment variable.  See the documentation of\n    <code class=\"code\">ocamlrun</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stat", "unit -> stat",
              "\n<div class=\"info-desc\">\n<p>Return the current values of the memory management counters in a\n   <code class=\"code\">stat</code> record.  This function examines every heap block to get the\n   statistics.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "quick_stat", "unit -> stat",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">stat</code> except that <code class=\"code\">live_words</code>, <code class=\"code\">live_blocks</code>, <code class=\"code\">free_words</code>,\n    <code class=\"code\">free_blocks</code>, <code class=\"code\">largest_free</code>, and <code class=\"code\">fragments</code> are set to 0.  This\n    function is much faster than <code class=\"code\">stat</code> because it does not need to go\n    through the heap.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "counters", "unit -> float * float * float",
              "\n<div class=\"info-desc\">\n<p>Return <code class=\"code\">(minor_words,&nbsp;promoted_words,&nbsp;major_words)</code>.  This function\n    is as fast as <code class=\"code\">quick_stat</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "minor_words", "unit -> float",
              "\n<div class=\"info-desc\">\n<p>Number of words allocated in the minor heap since the program was\n    started. This number is accurate in byte-code programs, but only an\n    approximation in programs compiled to native code.</p>\n\n<p>In native code this function does not allocate.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.04</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "get", "unit -> control",
              "\n<div class=\"info-desc\">\n<p>Return the current values of the GC parameters in a <code class=\"code\">control</code> record.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set", "control -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">set&nbsp;r</code> changes the GC parameters according to the <code class=\"code\">control</code> record <code class=\"code\">r</code>.\n   The normal usage is: <code class=\"code\"><span class=\"constructor\">Gc</span>.set&nbsp;{&nbsp;(<span class=\"constructor\">Gc</span>.get())&nbsp;<span class=\"keyword\">with</span>&nbsp;<span class=\"constructor\">Gc</span>.verbose&nbsp;=&nbsp;0x00d&nbsp;}</code></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "minor", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Trigger a minor collection.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "major_slice", "int -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">major_slice&nbsp;n</code>\n    Do a minor collection and a slice of major collection. <code class=\"code\">n</code> is the\n    size of the slice: the GC will do enough work to free (on average)\n    <code class=\"code\">n</code> words of memory. If <code class=\"code\">n</code> = 0, the GC will try to do enough work\n    to ensure that the next automatic slice has no work to do.\n    This function returns an unspecified integer (currently: 0).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "major", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Do a minor collection and finish the current major collection cycle.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "full_major", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Do a minor collection, finish the current major collection cycle,\n   and perform a complete new cycle.  This will collect all currently\n   unreachable blocks.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compact", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Perform a full major collection and compact the heap.  Note that heap\n   compaction is a lengthy operation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "print_stat", "out_channel -> unit",
              "\n<div class=\"info-desc\">\n<p>Print the current values of the memory management counters (in\n   human-readable form) into the channel argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "allocated_bytes", "unit -> float",
              "\n<div class=\"info-desc\">\n<p>Return the total number of bytes allocated since the program was\n   started.  It is returned as a <code class=\"code\">float</code> to avoid overflow problems\n   with <code class=\"code\">int</code> on 32-bit machines.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_minor_free", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the current size of the free space inside the minor heap.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "get_bucket", "int -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">get_bucket&nbsp;n</code> returns the current size of the <code class=\"code\">n</code>-th future bucket\n    of the GC smoothing system. The unit is one millionth of a full GC.\n    Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is negative, return 0 if n is larger\n    than the smoothing window.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "get_credit", "unit -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">get_credit&nbsp;()</code> returns the current size of the \"work done in advance\"\n    counter of the GC smoothing system. The unit is one millionth of a\n    full GC.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "huge_fallback_count", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the number of times we tried to map huge pages and had to fall\n    back to small pages. This is always 0 if <code class=\"code\"><span class=\"constructor\">OCAMLRUNPARAM</span></code> contains <code class=\"code\"><span class=\"constructor\">H</span>=1</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "finalise", "('a -> unit) -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">finalise&nbsp;f&nbsp;v</code> registers <code class=\"code\">f</code> as a finalisation function for <code class=\"code\">v</code>.\n   <code class=\"code\">v</code> must be heap-allocated.  <code class=\"code\">f</code> will be called with <code class=\"code\">v</code> as\n   argument at some point between the first time <code class=\"code\">v</code> becomes unreachable\n   (including through weak pointers) and the time <code class=\"code\">v</code> is collected by\n   the GC. Several functions can\n   be registered for the same value, or even several instances of the\n   same function.  Each instance will be called once (or never,\n   if the program terminates before <code class=\"code\">v</code> becomes unreachable).</p>\n\n<p>The GC will call the finalisation functions in the order of\n   deallocation.  When several values become unreachable at the\n   same time (i.e. during the same GC cycle), the finalisation\n   functions will be called in the reverse order of the corresponding\n   calls to <code class=\"code\">finalise</code>.  If <code class=\"code\">finalise</code> is called in the same order\n   as the values are allocated, that means each value is finalised\n   before the values it depends upon.  Of course, this becomes\n   false if additional dependencies are introduced by assignments.</p>\n\n<p>In the presence of multiple OCaml threads it should be assumed that\n   any particular finaliser may be executed in any of the threads.</p>\n\n<p>Anything reachable from the closure of finalisation functions\n   is considered reachable, so the following code will not work\n   as expected:</p>\n<ul>\n<li><code class=\"code\">&nbsp;<span class=\"keyword\">let</span>&nbsp;v&nbsp;=&nbsp;...&nbsp;<span class=\"keyword\">in</span>&nbsp;<span class=\"constructor\">Gc</span>.finalise&nbsp;(<span class=\"keyword\">fun</span>&nbsp;_&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;...v...)&nbsp;v&nbsp;</code></li>\n</ul>\n<p>Instead you should make sure that <code class=\"code\">v</code> is not in the closure of\n   the finalisation function by writing:</p>\n<ul>\n<li><code class=\"code\">&nbsp;<span class=\"keyword\">let</span>&nbsp;f&nbsp;=&nbsp;<span class=\"keyword\">fun</span>&nbsp;x&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;...&nbsp;&nbsp;<span class=\"keyword\">let</span>&nbsp;v&nbsp;=&nbsp;...&nbsp;<span class=\"keyword\">in</span>&nbsp;<span class=\"constructor\">Gc</span>.finalise&nbsp;f&nbsp;v&nbsp;</code></li>\n</ul>\n<p>The <code class=\"code\">f</code> function can use all features of OCaml, including\n   assignments that make the value reachable again.  It can also\n   loop forever (in this case, the other\n   finalisation functions will not be called during the execution of f,\n   unless it calls <code class=\"code\">finalise_release</code>).\n   It can call <code class=\"code\">finalise</code> on <code class=\"code\">v</code> or other values to register other\n   functions or even itself.  It can raise an exception; in this case\n   the exception will interrupt whatever the program was doing when\n   the function was called.</p>\n\n<p><code class=\"code\">finalise</code> will raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">v</code> is not\n   guaranteed to be heap-allocated.  Some examples of values that are not\n   heap-allocated are integers, constant constructors, booleans,\n   the empty array, the empty list, the unit value.  The exact list\n   of what is heap-allocated or not is implementation-dependent.\n   Some constant values can be heap-allocated but never deallocated\n   during the lifetime of the program, for example a list of integer\n   constants; this is also implementation-dependent.\n   Note that values of types <code class=\"code\">float</code> are sometimes allocated and\n   sometimes not, so finalising them is unsafe, and <code class=\"code\">finalise</code> will\n   also raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> for them. Values of type <code class=\"code\"><span class=\"keywordsign\">'</span>a&nbsp;<span class=\"constructor\">Lazy</span>.t</code>\n   (for any <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>) are like <code class=\"code\">float</code> in this respect, except that the\n   compiler sometimes optimizes them in a way that prevents <code class=\"code\">finalise</code>\n   from detecting them. In this case, it will not raise\n   <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code>, but you should still avoid calling <code class=\"code\">finalise</code>\n   on lazy values.</p>\n\n<p>The results of calling <a href=\"String.html#VALmake\"><code class=\"code\"><span class=\"constructor\">String</span>.make</code></a>, <a href=\"Bytes.html#VALmake\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.make</code></a>, <a href=\"Bytes.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.create</code></a>,\n   <a href=\"Array.html#VALmake\"><code class=\"code\"><span class=\"constructor\">Array</span>.make</code></a>, and <a href=\"Pervasives.html#VALref\"><code class=\"code\">ref</code></a> are guaranteed to be\n   heap-allocated and non-constant except when the length argument is <code class=\"code\">0</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "finalise_last", "(unit -> unit) -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p>same as <a href=\"Gc.html#VALfinalise\"><code class=\"code\"><span class=\"constructor\">Gc</span>.finalise</code></a> except the value is not given as argument. So\n    you can't use the given value for the computation of the\n    finalisation function. The benefit is that the function is called\n    after the value is unreachable for the last time instead of the\n    first time. So contrary to <a href=\"Gc.html#VALfinalise\"><code class=\"code\"><span class=\"constructor\">Gc</span>.finalise</code></a> the value will never be\n    reachable again or used again. In particular every weak pointer\n    and ephemeron that contained this value as key or data is unset\n    before running the finalisation function. Moreover the\n    finalisation function attached with `GC.finalise` are always\n    called before the finalisation function attached with `GC.finalise_last`.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.04</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "finalise_release", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>A finalisation function may call <code class=\"code\">finalise_release</code> to tell the\n    GC that it can launch the next finalisation function without waiting\n    for the current one to return.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "alarm", null, null,
              "\n<div class=\"info-desc\">\n<p>An alarm is a piece of data that calls a user function at the end of\n   each major GC cycle.  The following functions are provided to create\n   and delete alarms.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create_alarm", "(unit -> unit) -> alarm",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">create_alarm&nbsp;f</code> will arrange for <code class=\"code\">f</code> to be called at the end of each\n   major GC cycle, starting with the current cycle or the next one.\n   A value of type <code class=\"code\">alarm</code> is returned that you can\n   use to call <code class=\"code\">delete_alarm</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "delete_alarm", "alarm -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">delete_alarm&nbsp;a</code> will stop the calls to the function associated\n   to <code class=\"code\">a</code>.  Calling <code class=\"code\">delete_alarm&nbsp;a</code> again has no effect.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Genlex",
    "module_info":
      "\n<p>A generic lexical analyzer.</p>\n\n<p>This module implements a simple 'standard' lexical analyzer, presented\n   as a function from character streams to token streams. It implements\n   roughly the lexical conventions of OCaml, but is parameterized by the\n   set of keywords of your language.</p>\n\n<p>Example: a lexer suitable for a desk calculator is obtained by</p>\n<pre class=\"codepre\"><code class=\"code\">     <span class=\"keyword\">let</span> lexer = make_lexer [<span class=\"string\">\"+\"</span>;<span class=\"string\">\"-\"</span>;<span class=\"string\">\"*\"</span>;<span class=\"string\">\"/\"</span>;<span class=\"string\">\"let\"</span>;<span class=\"string\">\"=\"</span>; <span class=\"string\">\"(\"</span>; <span class=\"string\">\")\"</span>]  </code></pre>\n<p>The associated parser would be a function from <code class=\"code\">token&nbsp;stream</code>\n   to, for instance, <code class=\"code\">int</code>, and would have rules such as:</p>\n\n<pre class=\"codepre\"><code class=\"code\">           <span class=\"keyword\">let</span> <span class=\"keyword\">rec</span> parse_expr = <span class=\"keyword\">parser</span>\n             <span class=\"keywordsign\">|</span> [&lt; n1 = parse_atom; n2 = parse_remainder n1 &gt;] <span class=\"keywordsign\">-&gt;</span> n2\n           <span class=\"keyword\">and</span> parse_atom = <span class=\"keyword\">parser</span>\n             <span class=\"keywordsign\">|</span> [&lt; <span class=\"keywordsign\">'</span><span class=\"constructor\">Int</span> n &gt;] <span class=\"keywordsign\">-&gt;</span> n\n             <span class=\"keywordsign\">|</span> [&lt; <span class=\"keywordsign\">'</span><span class=\"constructor\">Kwd</span> <span class=\"string\">\"(\"</span>; n = parse_expr; <span class=\"keywordsign\">'</span><span class=\"constructor\">Kwd</span> <span class=\"string\">\")\"</span> &gt;] <span class=\"keywordsign\">-&gt;</span> n\n           <span class=\"keyword\">and</span> parse_remainder n1 = <span class=\"keyword\">parser</span>\n             <span class=\"keywordsign\">|</span> [&lt; <span class=\"keywordsign\">'</span><span class=\"constructor\">Kwd</span> <span class=\"string\">\"+\"</span>; n2 = parse_expr &gt;] <span class=\"keywordsign\">-&gt;</span> n1+n2\n             <span class=\"keywordsign\">|</span> [&lt; &gt;] <span class=\"keywordsign\">-&gt;</span> n1\n   </code></pre>\n<p>One should notice that the use of the <code class=\"code\"><span class=\"keyword\">parser</span></code> keyword and associated\n   notation for streams are only available through camlp4 extensions. This\n   means that one has to preprocess its sources <i>e. g.</i> by using the\n   <code class=\"code\"><span class=\"string\">\"-pp\"</span></code> command-line switch of the compilers.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "token", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.Kwd\"><span class=\"constructor\">Kwd</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.Ident\"><span class=\"constructor\">Ident</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.Int\"><span class=\"constructor\">Int</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.Float\"><span class=\"constructor\">Float</span></span> <span class=\"keyword\">of</span> <code class=\"type\">float</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.String\"><span class=\"constructor\">String</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.Char\"><span class=\"constructor\">Char</span></span> <span class=\"keyword\">of</span> <code class=\"type\">char</code></code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The type of tokens. The lexical classes are: <code class=\"code\"><span class=\"constructor\">Int</span></code> and <code class=\"code\"><span class=\"constructor\">Float</span></code>\n   for integer and floating-point numbers; <code class=\"code\"><span class=\"constructor\">String</span></code> for\n   string literals, enclosed in double quotes; <code class=\"code\"><span class=\"constructor\">Char</span></code> for\n   character literals, enclosed in single quotes; <code class=\"code\"><span class=\"constructor\">Ident</span></code> for\n   identifiers (either sequences of letters, digits, underscores\n   and quotes, or sequences of 'operator characters' such as\n   <code class=\"code\">+</code>, <code class=\"code\">*</code>, etc); and <code class=\"code\"><span class=\"constructor\">Kwd</span></code> for keywords (either identifiers or\n   single 'special characters' such as <code class=\"code\">(</code>, <code class=\"code\">}</code>, etc).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "make_lexer", "string list -> char Stream.t -> token Stream.t",
              "\n<div class=\"info-desc\">\n<p>Construct the lexer function. The first argument is the list of\n   keywords. An identifier <code class=\"code\">s</code> is returned as <code class=\"code\"><span class=\"constructor\">Kwd</span>&nbsp;s</code> if <code class=\"code\">s</code>\n   belongs to this list, and as <code class=\"code\"><span class=\"constructor\">Ident</span>&nbsp;s</code> otherwise.\n   A special character <code class=\"code\">s</code> is returned as <code class=\"code\"><span class=\"constructor\">Kwd</span>&nbsp;s</code> if <code class=\"code\">s</code>\n   belongs to this list, and cause a lexical error (exception\n   <a href=\"Stream.html#EXCEPTIONError\"><code class=\"code\"><span class=\"constructor\">Stream</span>.<span class=\"constructor\">Error</span></code></a> with the offending lexeme as its parameter) otherwise.\n   Blanks and newlines are skipped. Comments delimited by <code class=\"code\">(*</code> and <code class=\"code\">*)</code>\n   are skipped as well, and can be nested. A <a href=\"Stream.html#EXCEPTIONFailure\"><code class=\"code\"><span class=\"constructor\">Stream</span>.<span class=\"constructor\">Failure</span></code></a> exception\n   is raised if end of stream is unexpectedly reached.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Graphics",
    "module_info": "\n<p>Machine-independent graphics primitives.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Exception",
            [
              "Graphic_failure", "string",
              "\n<div class=\"info-desc\">\n<p>Raised by the functions below when they encounter an error.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Initializations",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "open_graph", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>Show the graphics window or switch the screen to graphic mode.\n   The graphics window is cleared and the current point is set\n   to (0, 0). The string argument is used to pass optional\n   information on the desired graphics mode, the graphics window\n   size, and so on. Its interpretation is implementation-dependent.\n   If the empty string is given, a sensible default is selected.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "close_graph", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Delete the graphics window or switch the screen back to text mode.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_window_title", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the title of the graphics window.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "resize_window", "int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Resize and erase the graphics window.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "clear_graph", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Erase the graphics window.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "size_x", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Graphics.html#VALsize_y\"><code class=\"code\"><span class=\"constructor\">Graphics</span>.size_y</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "size_y", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the size of the graphics window. Coordinates of the screen\n   pixels range over <code class=\"code\">0&nbsp;..&nbsp;size_x()-1</code> and <code class=\"code\">0&nbsp;..&nbsp;size_y()-1</code>.\n   Drawings outside of this rectangle are clipped, without causing\n   an error. The origin (0,0) is at the lower left corner. \n   Some implementation (e.g. X Windows) represent coordinates by\n   16-bit integers, hence wrong clipping may occur with coordinates\n   below <code class=\"code\">-32768</code> or above <code class=\"code\">32676</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Colors",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "color", "= int", null,
              "\n<div class=\"info-desc\">\n<p>A color is specified by its R, G, B components. Each component\n   is in the range <code class=\"code\">0..255</code>. The three components are packed in\n   an <code class=\"code\">int</code>: <code class=\"code\">0xRRGGBB</code>, where <code class=\"code\"><span class=\"constructor\">RR</span></code> are the two hexadecimal digits for\n   the red component, <code class=\"code\"><span class=\"constructor\">GG</span></code> for the green component, <code class=\"code\"><span class=\"constructor\">BB</span></code> for the\n   blue component.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rgb", "int -> int -> int -> color",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rgb&nbsp;r&nbsp;g&nbsp;b</code> returns the integer encoding the color with red\n   component <code class=\"code\">r</code>, green component <code class=\"code\">g</code>, and blue component <code class=\"code\">b</code>.\n   <code class=\"code\">r</code>, <code class=\"code\">g</code> and <code class=\"code\">b</code> are in the range <code class=\"code\">0..255</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_color", "color -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the current drawing color.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "background", "color",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Graphics.html#VALforeground\"><code class=\"code\"><span class=\"constructor\">Graphics</span>.foreground</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "foreground", "color",
              "\n<div class=\"info-desc\">\n<p>Default background and foreground colors (usually, either black\n   foreground on a white background or white foreground on a\n   black background).\n   <a href=\"Graphics.html#VALclear_graph\"><code class=\"code\"><span class=\"constructor\">Graphics</span>.clear_graph</code></a> fills the screen with the <code class=\"code\">background</code> color.\n   The initial drawing color is <code class=\"code\">foreground</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": [
          {
            "section_name": "Some predefined colors",
            "section_info": null,
            "elements": [
              [ "Function", [ "black", "color", null ] ],
              [ "Function", [ "white", "color", null ] ],
              [ "Function", [ "red", "color", null ] ],
              [ "Function", [ "green", "color", null ] ],
              [ "Function", [ "blue", "color", null ] ],
              [ "Function", [ "yellow", "color", null ] ],
              [ "Function", [ "cyan", "color", null ] ],
              [ "Function", [ "magenta", "color", null ] ]
            ],
            "sub_sections": []
          }
        ]
      },
      {
        "section_name": "Point and line drawing",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "plot", "int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Plot the given point with the current drawing color.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "plots", "(int * int) array -> unit",
              "\n<div class=\"info-desc\">\n<p>Plot the given points with the current drawing color.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "point_color", "int -> int -> color",
              "\n<div class=\"info-desc\">\n<p>Return the color of the given point in the backing store\n   (see \"Double buffering\" below).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "moveto", "int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Position the current point.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rmoveto", "int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rmoveto&nbsp;dx&nbsp;dy</code> translates the current point by the given vector.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "current_x", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the abscissa of the current point.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "current_y", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the ordinate of the current point.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "current_point", "unit -> int * int",
              "\n<div class=\"info-desc\">\n<p>Return the position of the current point.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lineto", "int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Draw a line with endpoints the current point and the given point,\n   and move the current point to the given point.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rlineto", "int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Draw a line with endpoints the current point and the\n   current point translated of the given vector,\n   and move the current point to this point.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "curveto", "int * int -> int * int -> int * int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">curveto&nbsp;b&nbsp;c&nbsp;d</code> draws a cubic Bezier curve starting from\n   the current point to point <code class=\"code\">d</code>, with control points <code class=\"code\">b</code> and\n   <code class=\"code\">c</code>, and moves the current point to <code class=\"code\">d</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "draw_rect", "int -> int -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">draw_rect&nbsp;x&nbsp;y&nbsp;w&nbsp;h</code> draws the rectangle with lower left corner\n   at <code class=\"code\">x,y</code>, width <code class=\"code\">w</code> and height <code class=\"code\">h</code>.\n   The current point is unchanged.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">w</code> or <code class=\"code\">h</code> is negative.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "draw_poly_line", "(int * int) array -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">draw_poly_line&nbsp;points</code> draws the line that joins the\n   points given by the array argument.\n   The array contains the coordinates of the vertices of the\n   polygonal line, which need not be closed.\n   The current point is unchanged.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "draw_poly", "(int * int) array -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">draw_poly&nbsp;polygon</code> draws the given polygon.\n   The array contains the coordinates of the vertices of the\n   polygon.\n   The current point is unchanged.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "draw_segments", "(int * int * int * int) array -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">draw_segments&nbsp;segments</code> draws the segments given in the array\n   argument. Each segment is specified as a quadruple\n   <code class=\"code\">(x0,&nbsp;y0,&nbsp;x1,&nbsp;y1)</code> where <code class=\"code\">(x0,&nbsp;y0)</code> and <code class=\"code\">(x1,&nbsp;y1)</code> are\n   the coordinates of the end points of the segment.\n   The current point is unchanged.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "draw_arc", "int -> int -> int -> int -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">draw_arc&nbsp;x&nbsp;y&nbsp;rx&nbsp;ry&nbsp;a1&nbsp;a2</code> draws an elliptical arc with center\n   <code class=\"code\">x,y</code>, horizontal radius <code class=\"code\">rx</code>, vertical radius <code class=\"code\">ry</code>, from angle\n   <code class=\"code\">a1</code> to angle <code class=\"code\">a2</code> (in degrees). The current point is unchanged.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">rx</code> or <code class=\"code\">ry</code> is negative.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "draw_ellipse", "int -> int -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">draw_ellipse&nbsp;x&nbsp;y&nbsp;rx&nbsp;ry</code> draws an ellipse with center\n   <code class=\"code\">x,y</code>, horizontal radius <code class=\"code\">rx</code> and vertical radius <code class=\"code\">ry</code>.\n   The current point is unchanged.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">rx</code> or <code class=\"code\">ry</code> is negative.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "draw_circle", "int -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">draw_circle&nbsp;x&nbsp;y&nbsp;r</code> draws a circle with center <code class=\"code\">x,y</code> and\n   radius <code class=\"code\">r</code>. The current point is unchanged.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">r</code> is negative.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_line_width", "int -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the width of points and lines drawn with the functions above.\n   Under X Windows, <code class=\"code\">set_line_width&nbsp;0</code> selects a width of 1 pixel\n   and a faster, but less precise drawing algorithm than the one\n   used when <code class=\"code\">set_line_width&nbsp;1</code> is specified.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the argument is negative.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Text drawing",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "draw_char", "char -> unit",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Graphics.html#VALdraw_string\"><code class=\"code\"><span class=\"constructor\">Graphics</span>.draw_string</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "draw_string", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>Draw a character or a character string with lower left corner\n   at current position. After drawing, the current position is set\n   to the lower right corner of the text drawn.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_font", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the font used for drawing text.\n   The interpretation of the argument to <code class=\"code\">set_font</code>\n   is implementation-dependent.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_text_size", "int -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the character size used for drawing text.\n   The interpretation of the argument to <code class=\"code\">set_text_size</code>\n   is implementation-dependent.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "text_size", "string -> int * int",
              "\n<div class=\"info-desc\">\n<p>Return the dimensions of the given text, if it were drawn with\n   the current font and size.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Filling",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "fill_rect", "int -> int -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">fill_rect&nbsp;x&nbsp;y&nbsp;w&nbsp;h</code> fills the rectangle with lower left corner\n   at <code class=\"code\">x,y</code>, width <code class=\"code\">w</code> and height <code class=\"code\">h</code>, with the current color.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">w</code> or <code class=\"code\">h</code> is negative.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fill_poly", "(int * int) array -> unit",
              "\n<div class=\"info-desc\">\n<p>Fill the given polygon with the current color. The array\n   contains the coordinates of the vertices of the polygon.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fill_arc", "int -> int -> int -> int -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Fill an elliptical pie slice with the current color. The\n   parameters are the same as for <a href=\"Graphics.html#VALdraw_arc\"><code class=\"code\"><span class=\"constructor\">Graphics</span>.draw_arc</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fill_ellipse", "int -> int -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Fill an ellipse with the current color. The\n   parameters are the same as for <a href=\"Graphics.html#VALdraw_ellipse\"><code class=\"code\"><span class=\"constructor\">Graphics</span>.draw_ellipse</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fill_circle", "int -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Fill a circle with the current color. The\n   parameters are the same as for <a href=\"Graphics.html#VALdraw_circle\"><code class=\"code\"><span class=\"constructor\">Graphics</span>.draw_circle</code></a>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Images",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "image", null, null,
              "\n<div class=\"info-desc\">\n<p>The abstract type for images, in internal representation.\n   Externally, images are represented as matrices of colors.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "transp", "color",
              "\n<div class=\"info-desc\">\n<p>In matrices of colors, this color represent a 'transparent'\n   point: when drawing the corresponding image, all pixels on the\n   screen corresponding to a transparent pixel in the image will\n   not be modified, while other points will be set to the color\n   of the corresponding point in the image. This allows superimposing\n   an image over an existing background.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "make_image", "color array array -> image",
              "\n<div class=\"info-desc\">\n<p>Convert the given color matrix to an image.\n   Each sub-array represents one horizontal line. All sub-arrays\n   must have the same length; otherwise, exception <code class=\"code\"><span class=\"constructor\">Graphic_failure</span></code>\n   is raised.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "dump_image", "image -> color array array",
              "\n<div class=\"info-desc\">\n<p>Convert an image to a color matrix.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "draw_image", "image -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Draw the given image with lower left corner at the given point.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_image", "int -> int -> int -> int -> image",
              "\n<div class=\"info-desc\">\n<p>Capture the contents of a rectangle on the screen as an image.\n   The parameters are the same as for <a href=\"Graphics.html#VALfill_rect\"><code class=\"code\"><span class=\"constructor\">Graphics</span>.fill_rect</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create_image", "int -> int -> image",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">create_image&nbsp;w&nbsp;h</code> returns a new image <code class=\"code\">w</code> pixels wide and <code class=\"code\">h</code>\n   pixels tall, to be used in conjunction with <code class=\"code\">blit_image</code>.\n   The initial image contents are random, except that no point\n   is transparent.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit_image", "image -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">blit_image&nbsp;img&nbsp;x&nbsp;y</code> copies screen pixels into the image <code class=\"code\">img</code>,\n   modifying <code class=\"code\">img</code> in-place. The pixels copied are those inside the\n   rectangle with lower left corner at <code class=\"code\">x,y</code>, and width and height\n   equal to those of the image. Pixels that were transparent in\n   <code class=\"code\">img</code> are left unchanged.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Mouse and keyboard events",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "status", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstatus.mouse_x\">mouse_x</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>X coordinate of the mouse</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstatus.mouse_y\">mouse_y</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Y coordinate of the mouse</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstatus.button\">button</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>true if a mouse button is pressed</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstatus.keypressed\">keypressed</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>true if a key has been pressed</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstatus.key\">key</span>&nbsp;: <code class=\"type\">char</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>the character for the key pressed</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>To report events.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "event", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTevent.Button_down\"><span class=\"constructor\">Button_down</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>A mouse button is pressed</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTevent.Button_up\"><span class=\"constructor\">Button_up</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>A mouse button is released</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTevent.Key_pressed\"><span class=\"constructor\">Key_pressed</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>A key is pressed</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTevent.Mouse_motion\"><span class=\"constructor\">Mouse_motion</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The mouse is moved</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTevent.Poll\"><span class=\"constructor\">Poll</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Don't wait; return immediately</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>To specify events to wait for.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "wait_next_event", "event list -> status",
              "\n<div class=\"info-desc\">\n<p>Wait until one of the events specified in the given event list\n   occurs, and return the status of the mouse and keyboard at\n   that time. If <code class=\"code\"><span class=\"constructor\">Poll</span></code> is given in the event list, return immediately\n   with the current status. If the mouse cursor is outside of the\n   graphics window, the <code class=\"code\">mouse_x</code> and <code class=\"code\">mouse_y</code> fields of the event are\n   outside the range <code class=\"code\">0..size_x()-1,&nbsp;0..size_y()-1</code>. Keypresses\n   are queued, and dequeued one by one when the <code class=\"code\"><span class=\"constructor\">Key_pressed</span></code>\n   event is specified and the <code class=\"code\"><span class=\"constructor\">Poll</span></code> event is not specified.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "loop_at_exit", "event list -> ( status -> unit) -> unit",
              "\n<div class=\"info-desc\">\n<p>Loop before exiting the program, the list given as argument is the\n    list of handlers and the events on which these handlers are called.\n    To exit cleanly the loop, the handler should raise Exit. Any other\n    exception will be propagated outside of the loop.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Mouse and keyboard polling",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mouse_pos", "unit -> int * int",
              "\n<div class=\"info-desc\">\n<p>Return the position of the mouse cursor, relative to the\n   graphics window. If the mouse cursor is outside of the graphics\n   window, <code class=\"code\">mouse_pos()</code> returns a point outside of the range\n   <code class=\"code\">0..size_x()-1,&nbsp;0..size_y()-1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "button_down", "unit -> bool",
              "\n<div class=\"info-desc\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the mouse button is pressed, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "read_key", "unit -> char",
              "\n<div class=\"info-desc\">\n<p>Wait for a key to be pressed, and return the corresponding\n   character. Keypresses are queued.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "key_pressed", "unit -> bool",
              "\n<div class=\"info-desc\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if a keypress is available; that is, if <code class=\"code\">read_key</code>\n   would not block.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Sound",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "sound", "int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">sound&nbsp;freq&nbsp;dur</code> plays a sound at frequency <code class=\"code\">freq</code> (in hertz)\n   for a duration <code class=\"code\">dur</code> (in milliseconds).</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Double buffering",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "auto_synchronize", "bool -> unit",
              "\n<div class=\"info-desc\">\n<p>By default, drawing takes place both on the window displayed\n   on screen, and in a memory area (the 'backing store').\n   The backing store image is used to re-paint the on-screen\n   window when necessary.</p>\n\n<p>To avoid flicker during animations, it is possible to turn\n   off on-screen drawing, perform a number of drawing operations\n   in the backing store only, then refresh the on-screen window\n   explicitly.</p>\n\n<p><code class=\"code\">auto_synchronize&nbsp;<span class=\"keyword\">false</span></code> turns on-screen drawing off.  All\n   subsequent drawing commands are performed on the backing store\n   only.</p>\n\n<p><code class=\"code\">auto_synchronize&nbsp;<span class=\"keyword\">true</span></code> refreshes the on-screen window from\n   the backing store (as per <code class=\"code\">synchronize</code>), then turns on-screen\n   drawing back on.  All subsequent drawing commands are performed\n   both on screen and in the backing store.</p>\n\n<p>The default drawing mode corresponds to <code class=\"code\">auto_synchronize&nbsp;<span class=\"keyword\">true</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "synchronize", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Synchronize the backing store and the on-screen window, by\n   copying the contents of the backing store onto the graphics\n   window.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "display_mode", "bool -> unit",
              "\n<div class=\"info-desc\">\n<p>Set display mode on or off. When turned on, drawings are done\n   in the graphics window; when turned off, drawings do not affect\n   the graphics window.  This occurs independently of\n   drawing into the backing store (see the function <a href=\"Graphics.html#VALremember_mode\"><code class=\"code\"><span class=\"constructor\">Graphics</span>.remember_mode</code></a>\n   below). Default display mode is on.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "remember_mode", "bool -> unit",
              "\n<div class=\"info-desc\">\n<p>Set remember mode on or off. When turned on, drawings are done\n   in the backing store; when turned off, the backing store is\n   unaffected by drawings.  This occurs independently of drawing\n   onto the graphics window (see the function <a href=\"Graphics.html#VALdisplay_mode\"><code class=\"code\"><span class=\"constructor\">Graphics</span>.display_mode</code></a> above).\n   Default remember mode is on.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "GraphicsX11",
    "module_info":
      "\n<p>Additional graphics primitives for the X Windows system.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "window_id", "= string", null, null ] ],
          [
            "Function",
            [
              "window_id", "unit -> window_id",
              "\n<div class=\"info-desc\">\n<p>Return the unique identifier of the OCaml graphics window.\n   The returned string is an unsigned 32 bits integer\n   in decimal form.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "open_subwindow",
              "x:int -> y:int -> width:int -> height:int -> window_id",
              "\n<div class=\"info-desc\">\n<p>Create a sub-window of the current OCaml graphics window\n   and return its identifier.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "close_subwindow", "window_id -> unit",
              "\n<div class=\"info-desc\">\n<p>Close the sub-window having the given identifier.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Hashtbl.HashedType",
    "module_info":
      "\n<p>The input signature of the functor <a href=\"Hashtbl.Make.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the hashtable keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p>The equality predicate used to compare keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "hash", "t -> int",
              "\n<div class=\"info-desc\">\n<p>A hashing function on keys. It must be such that if two keys are\n          equal according to <code class=\"code\">equal</code>, then they have identical hash values\n          as computed by <code class=\"code\">hash</code>.\n          Examples: suitable (<code class=\"code\">equal</code>, <code class=\"code\">hash</code>) pairs for arbitrary key\n          types include</p>\n<ul>\n<li>        (<code class=\"code\">(=)</code>, <a href=\"Hashtbl.html#VALhash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash</code></a>) for comparing objects by structure\n              (provided objects do not contain floats)</li>\n<li>        (<code class=\"code\">(<span class=\"keyword\">fun</span>&nbsp;x&nbsp;y&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;compare&nbsp;x&nbsp;y&nbsp;=&nbsp;0)</code>, <a href=\"Hashtbl.html#VALhash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash</code></a>)\n              for comparing objects by structure\n              and handling <a href=\"Pervasives.html#VALnan\"><code class=\"code\">nan</code></a> correctly</li>\n<li>        (<code class=\"code\">(==)</code>, <a href=\"Hashtbl.html#VALhash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash</code></a>) for comparing objects by physical\n              equality (e.g. for mutable or cyclic objects).</li>\n</ul>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Hashtbl",
    "module_info":
      "\n<p>Hash tables and hash functions.</p>\n\n<p>Hash tables are hashed association tables, with in-place modification.</p>\n",
    "sections": [
      {
        "section_name": "Generic interface",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "('a, 'b)", "t", null,
              "\n<div class=\"info-desc\">\n<p>The type of hash tables from type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code> to type <code class=\"code\"><span class=\"keywordsign\">'</span>b</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "?random:bool -> int -> ('a, 'b) t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create&nbsp;n</code> creates a new, empty hash table, with\n   initial size <code class=\"code\">n</code>.  For best results, <code class=\"code\">n</code> should be on the\n   order of the expected number of elements that will be in\n   the table.  The table grows as needed, so <code class=\"code\">n</code> is just an\n   initial guess.</p>\n\n<p>The optional <code class=\"code\">random</code> parameter (a boolean) controls whether\n   the internal organization of the hash table is randomized at each\n   execution of <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create</code> or deterministic over all executions.</p>\n\n<p>A hash table that is created with <code class=\"code\">~random:<span class=\"keyword\">false</span></code> uses a\n   fixed hash function (<a href=\"Hashtbl.html#VALhash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash</code></a>) to distribute keys among\n   buckets.  As a consequence, collisions between keys happen\n   deterministically.  In Web-facing applications or other\n   security-sensitive applications, the deterministic collision\n   patterns can be exploited by a malicious user to create a\n   denial-of-service attack: the attacker sends input crafted to\n   create many collisions in the table, slowing the application down.</p>\n\n<p>A hash table that is created with <code class=\"code\">~random:<span class=\"keyword\">true</span></code> uses the seeded\n   hash function <a href=\"Hashtbl.html#VALseeded_hash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.seeded_hash</code></a> with a seed that is randomly\n   chosen at hash table creation time.  In effect, the hash function\n   used is randomly selected among <code class=\"code\">2^{30}</code> different hash functions.\n   All these hash functions have different collision patterns,\n   rendering ineffective the denial-of-service attack described above.\n   However, because of randomization, enumerating all elements of the\n   hash table using <a href=\"Hashtbl.html#VALfold\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.fold</code></a> or <a href=\"Hashtbl.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.iter</code></a> is no longer\n   deterministic: elements are enumerated in different orders at\n   different runs of the program.</p>\n\n<p>If no <code class=\"code\">~random</code> parameter is given, hash tables are created\n   in non-random mode by default.  This default can be changed\n   either programmatically by calling <a href=\"Hashtbl.html#VALrandomize\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.randomize</code></a> or by\n   setting the <code class=\"code\"><span class=\"constructor\">R</span></code> flag in the <code class=\"code\"><span class=\"constructor\">OCAMLRUNPARAM</span></code> environment variable.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.00.0 </b> the <code class=\"code\">random</code> parameter was not present and all\n   hash tables were created in non-randomized mode.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "clear", "('a, 'b) t -> unit",
              "\n<div class=\"info-desc\">\n<p>Empty a hash table. Use <code class=\"code\">reset</code> instead of <code class=\"code\">clear</code> to shrink the\n    size of the bucket table to its initial size.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "reset", "('a, 'b) t -> unit",
              "\n<div class=\"info-desc\">\n<p>Empty a hash table and shrink the size of the bucket table\n    to its initial size.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "copy", "('a, 'b) t -> ('a, 'b) t",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the given hashtable.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "('a, 'b) t -> 'a -> 'b -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.add&nbsp;tbl&nbsp;x&nbsp;y</code> adds a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code> in table <code class=\"code\">tbl</code>.\n   Previous bindings for <code class=\"code\">x</code> are not removed, but simply\n   hidden. That is, after performing <a href=\"Hashtbl.html#VALremove\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.remove</code></a><code class=\"code\">&nbsp;tbl&nbsp;x</code>,\n   the previous binding for <code class=\"code\">x</code>, if any, is restored.\n   (Same behavior as with association lists.)</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find", "('a, 'b) t -> 'a -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.find&nbsp;tbl&nbsp;x</code> returns the current binding of <code class=\"code\">x</code> in <code class=\"code\">tbl</code>,\n   or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such binding exists.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find_opt", "('a, 'b) t -> 'a -> 'b option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.find_opt&nbsp;tbl&nbsp;x</code> returns the current binding of <code class=\"code\">x</code> in <code class=\"code\">tbl</code>,\n    or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such binding exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_all", "('a, 'b) t -> 'a -> 'b list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.find_all&nbsp;tbl&nbsp;x</code> returns the list of all data\n   associated with <code class=\"code\">x</code> in <code class=\"code\">tbl</code>.\n   The current binding is returned first, then the previous\n   bindings, in reverse order of introduction in the table.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mem", "('a, 'b) t -> 'a -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.mem&nbsp;tbl&nbsp;x</code> checks if <code class=\"code\">x</code> is bound in <code class=\"code\">tbl</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "remove", "('a, 'b) t -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.remove&nbsp;tbl&nbsp;x</code> removes the current binding of <code class=\"code\">x</code> in <code class=\"code\">tbl</code>,\n   restoring the previous binding if it exists.\n   It does nothing if <code class=\"code\">x</code> is not bound in <code class=\"code\">tbl</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "replace", "('a, 'b) t -> 'a -> 'b -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.replace&nbsp;tbl&nbsp;x&nbsp;y</code> replaces the current binding of <code class=\"code\">x</code>\n   in <code class=\"code\">tbl</code> by a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code>.  If <code class=\"code\">x</code> is unbound in <code class=\"code\">tbl</code>,\n   a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code> is added to <code class=\"code\">tbl</code>.\n   This is functionally equivalent to <a href=\"Hashtbl.html#VALremove\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.remove</code></a><code class=\"code\">&nbsp;tbl&nbsp;x</code>\n   followed by <a href=\"Hashtbl.html#VALadd\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.add</code></a><code class=\"code\">&nbsp;tbl&nbsp;x&nbsp;y</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "('a -> 'b -> unit) -> ('a, 'b) t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.iter&nbsp;f&nbsp;tbl</code> applies <code class=\"code\">f</code> to all bindings in table <code class=\"code\">tbl</code>.\n   <code class=\"code\">f</code> receives the key as first argument, and the associated value\n   as second argument. Each binding is presented exactly once to <code class=\"code\">f</code>.</p>\n\n<p>The order in which the bindings are passed to <code class=\"code\">f</code> is unspecified.\n   However, if the table contains several bindings for the same key,\n   they are passed to <code class=\"code\">f</code> in reverse order of introduction, that is,\n   the most recent binding is passed first.</p>\n\n<p>If the hash table was created in non-randomized mode, the order\n   in which the bindings are enumerated is reproducible between\n   successive runs of the program, and even between minor versions\n   of OCaml.  For randomized hash tables, the order of enumeration\n   is entirely random.</p>\n\n<p>The behavior is not defined if the hash table is modified\n   by <code class=\"code\">f</code> during the iteration.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "filter_map_inplace",
              "('a -> 'b -> 'b option) -> ('a, 'b) t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.filter_map_inplace&nbsp;f&nbsp;tbl</code> applies <code class=\"code\">f</code> to all bindings in\n    table <code class=\"code\">tbl</code> and update each binding depending on the result of\n    <code class=\"code\">f</code>.  If <code class=\"code\">f</code> returns <code class=\"code\"><span class=\"constructor\">None</span></code>, the binding is discarded.  If it\n    returns <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;new_val</code>, the binding is update to associate the key\n    to <code class=\"code\">new_val</code>.</p>\n\n<p>Other comments for <a href=\"Hashtbl.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.iter</code></a> apply as well.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "fold", "('a -> 'b -> 'c -> 'c) -> ('a, 'b) t -> 'c -> 'c",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.fold&nbsp;f&nbsp;tbl&nbsp;init</code> computes\n   <code class=\"code\">(f&nbsp;kN&nbsp;dN&nbsp;...&nbsp;(f&nbsp;k1&nbsp;d1&nbsp;init)...)</code>,\n   where <code class=\"code\">k1&nbsp;...&nbsp;kN</code> are the keys of all bindings in <code class=\"code\">tbl</code>,\n   and <code class=\"code\">d1&nbsp;...&nbsp;dN</code> are the associated values.\n   Each binding is presented exactly once to <code class=\"code\">f</code>.</p>\n\n<p>The order in which the bindings are passed to <code class=\"code\">f</code> is unspecified.\n   However, if the table contains several bindings for the same key,\n   they are passed to <code class=\"code\">f</code> in reverse order of introduction, that is,\n   the most recent binding is passed first.</p>\n\n<p>If the hash table was created in non-randomized mode, the order\n   in which the bindings are enumerated is reproducible between\n   successive runs of the program, and even between minor versions\n   of OCaml.  For randomized hash tables, the order of enumeration\n   is entirely random.</p>\n\n<p>The behavior is not defined if the hash table is modified\n   by <code class=\"code\">f</code> during the iteration.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "length", "('a, 'b) t -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.length&nbsp;tbl</code> returns the number of bindings in <code class=\"code\">tbl</code>.\n   It takes constant time.  Multiple bindings are counted once each, so\n   <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.length</code> gives the number of times <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.iter</code> calls its\n   first argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "randomize", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>After a call to <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.randomize()</code>, hash tables are created in\n    randomized mode by default: <a href=\"Hashtbl.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create</code></a> returns randomized\n    hash tables, unless the <code class=\"code\">~random:<span class=\"keyword\">false</span></code> optional parameter is given.\n    The same effect can be achieved by setting the <code class=\"code\"><span class=\"constructor\">R</span></code> parameter in\n    the <code class=\"code\"><span class=\"constructor\">OCAMLRUNPARAM</span></code> environment variable.</p>\n\n<p>It is recommended that applications or Web frameworks that need to\n    protect themselves against the denial-of-service attack described\n    in <a href=\"Hashtbl.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create</code></a> call <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.randomize()</code> at initialization\n    time.</p>\n\n<p>Note that once <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.randomize()</code> was called, there is no way\n    to revert to the non-randomized default behavior of <a href=\"Hashtbl.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create</code></a>.\n    This is intentional.  Non-randomized hash tables can still be\n    created using <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create&nbsp;~random:<span class=\"keyword\">false</span></code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "is_randomized", "unit -> bool",
              "\n<div class=\"info-desc\">\n<p>return if the tables are currently created in randomized mode by default</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "statistics", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstatistics.num_bindings\">num_bindings</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of bindings present in the table.\n        Same value as returned by <a href=\"Hashtbl.html#VALlength\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.length</code></a>.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstatistics.num_buckets\">num_buckets</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of buckets in the table.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstatistics.max_bucket_length\">max_bucket_length</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Maximal number of bindings per bucket.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstatistics.bucket_histogram\">bucket_histogram</span>&nbsp;: <code class=\"type\">int array</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Histogram of bucket sizes.  This array <code class=\"code\">histo</code> has\n        length <code class=\"code\">max_bucket_length&nbsp;+&nbsp;1</code>.  The value of\n        <code class=\"code\">histo.(i)</code> is the number of buckets whose size is <code class=\"code\">i</code>.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "stats", "('a, 'b) t -> statistics",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.stats&nbsp;tbl</code> returns statistics about the table <code class=\"code\">tbl</code>:\n   number of buckets, size of the biggest bucket, distribution of\n   buckets by size.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "('a, 'b) t -> ('a * 'b) Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the whole table, in unspecified order.</p>\n\n<p>The behavior is not defined if the hash table is modified\n    during the iteration.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq_keys", "('a, 'b) t -> 'a Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on 'as, in ascending order</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq_values", "('a, 'b) t -> 'b Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on values, in ascending order of their corresponding 'a</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_seq", "('a, 'b) t -> ('a * 'b) Seq.t -> unit",
              "\n<div class=\"info-desc\">\n<p>Add the given bindings to the table, using <a href=\"Hashtbl.html#VALadd\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.add</code></a></p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "replace_seq", "('a, 'b) t -> ('a * 'b) Seq.t -> unit",
              "\n<div class=\"info-desc\">\n<p>Add the given bindings to the table, using <a href=\"Hashtbl.html#VALreplace\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.replace</code></a></p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "('a * 'b) Seq.t -> ('a, 'b) t",
              "\n<div class=\"info-desc\">\n<p>Build a table from the given bindings. The bindings are added\n    in the same order they appear in the sequence, using <a href=\"Hashtbl.html#VALreplace_seq\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.replace_seq</code></a>,\n    which means that if two pairs have the same key, only the latest one\n    will appear in the table.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Functorial interface",
        "section_info":
          "<p>The functorial interface allows the use of specific comparison\n    and hash functions, either for performance/security concerns,\n    or because keys are not hashable/comparable with the polymorphic builtins.</p><p>For instance, one might want to specialize a table for integer keys:</p>",
        "elements": [
          [
            "Module",
            [
              "IntHash",
              "<p>This creates a new module <code class=\"code\"><span class=\"constructor\">IntHashtbl</span></code>, with a new type <code class=\"code\"><span class=\"keywordsign\">'</span>a<br>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"constructor\">IntHashtbl</span>.t</code> of tables from <code class=\"code\">int</code> to <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>. In this example, <code class=\"code\">h</code>\n    contains <code class=\"code\">string</code> values so its type is <code class=\"code\">string&nbsp;<span class=\"constructor\">IntHashtbl</span>.t</code>.</p><p>Note that the new type <code class=\"code\"><span class=\"keywordsign\">'</span>a&nbsp;<span class=\"constructor\">IntHashtbl</span>.t</code> is not compatible with\n    the type <code class=\"code\">(<span class=\"keywordsign\">'</span>a,<span class=\"keywordsign\">'</span>b)&nbsp;<span class=\"constructor\">Hashtbl</span>.t</code> of the generic interface. For\n    example, <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.length&nbsp;h</code> would not type-check, you must use\n    <code class=\"code\"><span class=\"constructor\">IntHashtbl</span>.length</code>.</p>"
            ]
          ],
          [
            "Moduletype",
            [
              "HashedType",
              "\n<p>The input signature of the functor <a href=\"Hashtbl.Make.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n\n"
            ]
          ],
          [
            "Moduletype",
            [
              "S",
              "\n<p>The output signature of the functor <a href=\"Hashtbl.Make.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n\n"
            ]
          ],
          [
            "Module",
            [
              "Make",
              "\n<p>Functor building an implementation of the hashtable structure.</p>\n\n"
            ]
          ],
          [
            "Moduletype",
            [
              "SeededHashedType",
              "\n<p>The input signature of the functor <a href=\"Hashtbl.MakeSeeded.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">MakeSeeded</span></code></a>.</p>\n\n"
            ]
          ],
          [
            "Moduletype",
            [
              "SeededS",
              "\n<p>The output signature of the functor <a href=\"Hashtbl.MakeSeeded.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">MakeSeeded</span></code></a>.</p>\n\n"
            ]
          ],
          [
            "Module",
            [
              "MakeSeeded",
              "\n<p>Functor building an implementation of the hashtable structure.</p>\n\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "The polymorphic hash functions",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "hash", "'a -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash&nbsp;x</code> associates a nonnegative integer to any value of\n   any type. It is guaranteed that\n   if <code class=\"code\">x&nbsp;=&nbsp;y</code> or <code class=\"code\"><span class=\"constructor\">Pervasives</span>.compare&nbsp;x&nbsp;y&nbsp;=&nbsp;0</code>, then <code class=\"code\">hash&nbsp;x&nbsp;=&nbsp;hash&nbsp;y</code>.\n   Moreover, <code class=\"code\">hash</code> always terminates, even on cyclic structures.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "seeded_hash", "int -> 'a -> int",
              "\n<div class=\"info-desc\">\n<p>A variant of <a href=\"Hashtbl.html#VALhash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash</code></a> that is further parameterized by\n   an integer seed.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "hash_param", "int -> int -> 'a -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash_param&nbsp;meaningful&nbsp;total&nbsp;x</code> computes a hash value for <code class=\"code\">x</code>,\n   with the same properties as for <code class=\"code\">hash</code>. The two extra integer\n   parameters <code class=\"code\">meaningful</code> and <code class=\"code\">total</code> give more precise control over\n   hashing. Hashing performs a breadth-first, left-to-right traversal\n   of the structure <code class=\"code\">x</code>, stopping after <code class=\"code\">meaningful</code> meaningful nodes\n   were encountered, or <code class=\"code\">total</code> nodes (meaningful or not) were\n   encountered.  If <code class=\"code\">total</code> as specified by the user exceeds a certain\n   value, currently 256, then it is capped to that value.\n   Meaningful nodes are: integers; floating-point\n   numbers; strings; characters; booleans; and constant\n   constructors. Larger values of <code class=\"code\">meaningful</code> and <code class=\"code\">total</code> means that\n   more nodes are taken into account to compute the final hash value,\n   and therefore collisions are less likely to happen.  However,\n   hashing takes longer. The parameters <code class=\"code\">meaningful</code> and <code class=\"code\">total</code>\n   govern the tradeoff between accuracy and speed.  As default\n   choices, <a href=\"Hashtbl.html#VALhash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash</code></a> and <a href=\"Hashtbl.html#VALseeded_hash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.seeded_hash</code></a> take\n   <code class=\"code\">meaningful&nbsp;=&nbsp;10</code> and <code class=\"code\">total&nbsp;=&nbsp;100</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "seeded_hash_param", "int -> int -> int -> 'a -> int",
              "\n<div class=\"info-desc\">\n<p>A variant of <a href=\"Hashtbl.html#VALhash_param\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash_param</code></a> that is further parameterized by\n   an integer seed.  Usage:\n   <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.seeded_hash_param&nbsp;meaningful&nbsp;total&nbsp;seed&nbsp;x</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Hashtbl.Make",
    "module_info":
      "\n<div class=\"info-desc\">\n<p>Functor building an implementation of the hashtable structure.\n    The functor <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">Make</span></code> returns a structure containing\n    a type <code class=\"code\">key</code> of keys and a type <code class=\"code\"><span class=\"keywordsign\">'</span>a&nbsp;t</code> of hash tables\n    associating data of type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code> to keys of type <code class=\"code\">key</code>.\n    The operations perform similarly to those of the generic\n    interface, but use the hashing and equality functions\n    specified in the functor argument <code class=\"code\"><span class=\"constructor\">H</span></code> instead of generic\n    equality and hashing.  Since the hash function is not seeded,\n    the <code class=\"code\">create</code> operation of the result structure always returns\n    non-randomized hash tables.</p>\n</div>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "key", null, null, null ] ],
          [ "Typevariant", [ "'a", "t", null, null ] ],
          [ "Function", [ "create", "int -> 'a t", null ] ],
          [ "Function", [ "clear", "'a t -> unit", null ] ],
          [
            "Function",
            [
              "reset", "'a t -> unit",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [ "Function", [ "copy", "'a t -> 'a t", null ] ],
          [ "Function", [ "add", "'a t -> key -> 'a -> unit", null ] ],
          [ "Function", [ "remove", "'a t -> key -> unit", null ] ],
          [ "Function", [ "find", "'a t -> key -> 'a", null ] ],
          [
            "Function",
            [
              "find_opt", "'a t -> key -> 'a option",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [ "Function", [ "find_all", "'a t -> key -> 'a list", null ] ],
          [ "Function", [ "replace", "'a t -> key -> 'a -> unit", null ] ],
          [ "Function", [ "mem", "'a t -> key -> bool", null ] ],
          [
            "Function",
            [ "iter", "( key -> 'a -> unit) -> 'a t -> unit", null ]
          ],
          [
            "Function",
            [
              "filter_map_inplace",
              "( key -> 'a -> 'a option) -> 'a t -> unit",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [ "fold", "( key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b", null ]
          ],
          [ "Function", [ "length", "'a t -> int", null ] ],
          [
            "Function",
            [
              "stats", "'a t -> Hashtbl.statistics",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq", "'a t -> ( key * 'a) Seq.t",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq_keys", "'a t -> key Seq.t",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq_values", "'a t -> 'a Seq.t",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_seq", "'a t -> ( key * 'a) Seq.t -> unit",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "replace_seq", "'a t -> ( key * 'a) Seq.t -> unit",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "( key * 'a) Seq.t -> 'a t",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMake\"><span class=\"keyword\">module</span> Make</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">H</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"Hashtbl.HashedType.html\">HashedType</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"Hashtbl.S.html\">S</a></code><code class=\"type\">  with type key = H.t</code></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>H</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"Hashtbl.HashedType.html\">HashedType</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "Hashtbl.MakeSeeded",
    "module_info":
      "\n<div class=\"info-desc\">\n<p>Functor building an implementation of the hashtable structure.\n    The functor <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">MakeSeeded</span></code> returns a structure containing\n    a type <code class=\"code\">key</code> of keys and a type <code class=\"code\"><span class=\"keywordsign\">'</span>a&nbsp;t</code> of hash tables\n    associating data of type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code> to keys of type <code class=\"code\">key</code>.\n    The operations perform similarly to those of the generic\n    interface, but use the seeded hashing and equality functions\n    specified in the functor argument <code class=\"code\"><span class=\"constructor\">H</span></code> instead of generic\n    equality and hashing.  The <code class=\"code\">create</code> operation of the\n    result structure supports the <code class=\"code\">~random</code> optional parameter\n    and returns randomized hash tables if <code class=\"code\">~random:<span class=\"keyword\">true</span></code> is passed\n    or if randomization is globally on (see <a href=\"Hashtbl.html#VALrandomize\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.randomize</code></a>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "key", null, null, null ] ],
          [ "Typevariant", [ "'a", "t", null, null ] ],
          [ "Function", [ "create", "?random:bool -> int -> 'a t", null ] ],
          [ "Function", [ "clear", "'a t -> unit", null ] ],
          [ "Function", [ "reset", "'a t -> unit", null ] ],
          [ "Function", [ "copy", "'a t -> 'a t", null ] ],
          [ "Function", [ "add", "'a t -> key -> 'a -> unit", null ] ],
          [ "Function", [ "remove", "'a t -> key -> unit", null ] ],
          [ "Function", [ "find", "'a t -> key -> 'a", null ] ],
          [
            "Function",
            [
              "find_opt", "'a t -> key -> 'a option",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [ "Function", [ "find_all", "'a t -> key -> 'a list", null ] ],
          [ "Function", [ "replace", "'a t -> key -> 'a -> unit", null ] ],
          [ "Function", [ "mem", "'a t -> key -> bool", null ] ],
          [
            "Function",
            [ "iter", "( key -> 'a -> unit) -> 'a t -> unit", null ]
          ],
          [
            "Function",
            [
              "filter_map_inplace",
              "( key -> 'a -> 'a option) -> 'a t -> unit",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [ "fold", "( key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b", null ]
          ],
          [ "Function", [ "length", "'a t -> int", null ] ],
          [ "Function", [ "stats", "'a t -> Hashtbl.statistics", null ] ],
          [
            "Function",
            [
              "to_seq", "'a t -> ( key * 'a) Seq.t",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq_keys", "'a t -> key Seq.t",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq_values", "'a t -> 'a Seq.t",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_seq", "'a t -> ( key * 'a) Seq.t -> unit",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "replace_seq", "'a t -> ( key * 'a) Seq.t -> unit",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "( key * 'a) Seq.t -> 'a t",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMakeSeeded\"><span class=\"keyword\">module</span> MakeSeeded</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">H</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"Hashtbl.SeededHashedType.html\">SeededHashedType</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"Hashtbl.SeededS.html\">SeededS</a></code><code class=\"type\">  with type key = H.t</code></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>H</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"Hashtbl.SeededHashedType.html\">SeededHashedType</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "Hashtbl.S",
    "module_info":
      "\n<p>The output signature of the functor <a href=\"Hashtbl.Make.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "key", null, null, null ] ],
          [ "Typevariant", [ "'a", "t", null, null ] ],
          [ "Function", [ "create", "int -> 'a t", null ] ],
          [ "Function", [ "clear", "'a t -> unit", null ] ],
          [
            "Function",
            [
              "reset", "'a t -> unit",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [ "Function", [ "copy", "'a t -> 'a t", null ] ],
          [ "Function", [ "add", "'a t -> key -> 'a -> unit", null ] ],
          [ "Function", [ "remove", "'a t -> key -> unit", null ] ],
          [ "Function", [ "find", "'a t -> key -> 'a", null ] ],
          [
            "Function",
            [
              "find_opt", "'a t -> key -> 'a option",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [ "Function", [ "find_all", "'a t -> key -> 'a list", null ] ],
          [ "Function", [ "replace", "'a t -> key -> 'a -> unit", null ] ],
          [ "Function", [ "mem", "'a t -> key -> bool", null ] ],
          [
            "Function",
            [ "iter", "( key -> 'a -> unit) -> 'a t -> unit", null ]
          ],
          [
            "Function",
            [
              "filter_map_inplace",
              "( key -> 'a -> 'a option) -> 'a t -> unit",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [ "fold", "( key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b", null ]
          ],
          [ "Function", [ "length", "'a t -> int", null ] ],
          [
            "Function",
            [
              "stats", "'a t -> Hashtbl.statistics",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq", "'a t -> ( key * 'a) Seq.t",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq_keys", "'a t -> key Seq.t",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq_values", "'a t -> 'a Seq.t",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_seq", "'a t -> ( key * 'a) Seq.t -> unit",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "replace_seq", "'a t -> ( key * 'a) Seq.t -> unit",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "( key * 'a) Seq.t -> 'a t",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Hashtbl.SeededHashedType",
    "module_info":
      "\n<p>The input signature of the functor <a href=\"Hashtbl.MakeSeeded.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">MakeSeeded</span></code></a>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the hashtable keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p>The equality predicate used to compare keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "hash", "int -> t -> int",
              "\n<div class=\"info-desc\">\n<p>A seeded hashing function on keys.  The first argument is\n          the seed.  It must be the case that if <code class=\"code\">equal&nbsp;x&nbsp;y</code> is true,\n          then <code class=\"code\">hash&nbsp;seed&nbsp;x&nbsp;=&nbsp;hash&nbsp;seed&nbsp;y</code> for any value of <code class=\"code\">seed</code>.\n          A suitable choice for <code class=\"code\">hash</code> is the function <a href=\"Hashtbl.html#VALseeded_hash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.seeded_hash</code></a>\n          below.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Hashtbl.SeededS",
    "module_info":
      "\n<p>The output signature of the functor <a href=\"Hashtbl.MakeSeeded.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">MakeSeeded</span></code></a>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "key", null, null, null ] ],
          [ "Typevariant", [ "'a", "t", null, null ] ],
          [ "Function", [ "create", "?random:bool -> int -> 'a t", null ] ],
          [ "Function", [ "clear", "'a t -> unit", null ] ],
          [ "Function", [ "reset", "'a t -> unit", null ] ],
          [ "Function", [ "copy", "'a t -> 'a t", null ] ],
          [ "Function", [ "add", "'a t -> key -> 'a -> unit", null ] ],
          [ "Function", [ "remove", "'a t -> key -> unit", null ] ],
          [ "Function", [ "find", "'a t -> key -> 'a", null ] ],
          [
            "Function",
            [
              "find_opt", "'a t -> key -> 'a option",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [ "Function", [ "find_all", "'a t -> key -> 'a list", null ] ],
          [ "Function", [ "replace", "'a t -> key -> 'a -> unit", null ] ],
          [ "Function", [ "mem", "'a t -> key -> bool", null ] ],
          [
            "Function",
            [ "iter", "( key -> 'a -> unit) -> 'a t -> unit", null ]
          ],
          [
            "Function",
            [
              "filter_map_inplace",
              "( key -> 'a -> 'a option) -> 'a t -> unit",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [ "fold", "( key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b", null ]
          ],
          [ "Function", [ "length", "'a t -> int", null ] ],
          [ "Function", [ "stats", "'a t -> Hashtbl.statistics", null ] ],
          [
            "Function",
            [
              "to_seq", "'a t -> ( key * 'a) Seq.t",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq_keys", "'a t -> key Seq.t",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq_values", "'a t -> 'a Seq.t",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_seq", "'a t -> ( key * 'a) Seq.t -> unit",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "replace_seq", "'a t -> ( key * 'a) Seq.t -> unit",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "( key * 'a) Seq.t -> 'a t",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Identifiable",
    "module_info":
      "\n<p>Uniform interface for common data structures over various things.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Moduletype", [ "Thing", null ] ],
          [ "Module", [ "Pair", null ] ],
          [ "Moduletype", [ "Set", null ] ],
          [ "Moduletype", [ "Map", null ] ],
          [ "Moduletype", [ "Tbl", null ] ],
          [ "Moduletype", [ "S", null ] ],
          [ "Module", [ "Make", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Identifiable.Make",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [ "Module", [ "T", null ] ],
          [ "Include", "Identifiable.Thing" ],
          [ "Module", [ "Set", null ] ],
          [ "Module", [ "Map", null ] ],
          [ "Module", [ "Tbl", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMake\"><span class=\"keyword\">module</span> Make</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">T</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"Identifiable.Thing.html\">Thing</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"Identifiable.S.html\">S</a></code><code class=\"type\">  with type t := T.t</code></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>T</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"Identifiable.Thing.html\">Thing</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "Identifiable.Map",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Module", [ "T", null ] ],
          [ "Include", "Map.S" ],
          [
            "Function",
            [
              "filter_map", "'a t -> f:(key -> 'a -> 'b option) -> 'b t",
              null
            ]
          ],
          [ "Function", [ "of_list", "(key * 'a) list -> 'a t", null ] ],
          [
            "Function",
            [
              "disjoint_union",
              "?eq:('a -> 'a -> bool) -> ?print:( Format.formatter -> 'a -> unit) -> 'a t -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">disjoint_union&nbsp;m1&nbsp;m2</code> contains all bindings from <code class=\"code\">m1</code> and\n      <code class=\"code\">m2</code>. If some binding is present in both and the associated\n      value is not equal, a Fatal_error is raised</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "union_right", "'a t -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">union_right&nbsp;m1&nbsp;m2</code> contains all bindings from <code class=\"code\">m1</code> and <code class=\"code\">m2</code>. If\n      some binding is present in both, the one from <code class=\"code\">m2</code> is taken</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "union_left", "'a t -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">union_left&nbsp;m1&nbsp;m2&nbsp;=&nbsp;union_right&nbsp;m2&nbsp;m1</code></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "union_merge", "('a -> 'a -> 'a) -> 'a t -> 'a t -> 'a t", null
            ]
          ],
          [ "Function", [ "rename", "key t -> key -> key", null ] ],
          [
            "Function",
            [ "map_keys", "(key -> key) -> 'a t -> 'a t", null ]
          ],
          [ "Function", [ "keys", "'a t -> Set.Make(T).t", null ] ],
          [ "Function", [ "data", "'a t -> 'a list", null ] ],
          [
            "Function",
            [ "of_set", "(key -> 'a) -> Set.Make(T).t -> 'a t", null ]
          ],
          [
            "Function",
            [ "transpose_keys_and_data", "key t -> key t", null ]
          ],
          [
            "Function",
            [
              "transpose_keys_and_data_set", "key t -> Set.Make(T).t t", null
            ]
          ],
          [
            "Function",
            [
              "print",
              "( Format.formatter -> 'a -> unit) -> Format.formatter -> 'a t -> unit",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Identifiable.Map.T",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the map keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>A total ordering function over the keys.\n          This is a two-argument function <code class=\"code\">f</code> such that\n          <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is zero if the keys <code class=\"code\">e1</code> and <code class=\"code\">e2</code> are equal,\n          <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is strictly negative if <code class=\"code\">e1</code> is smaller than <code class=\"code\">e2</code>,\n          and <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is strictly positive if <code class=\"code\">e1</code> is greater than <code class=\"code\">e2</code>.\n          Example: a suitable ordering function is the generic structural\n          comparison function <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Identifiable.Pair",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [ "Include", "Hashtbl.HashedType" ],
          [ "Include", "Map.OrderedType" ],
          [ "Function", [ "output", "out_channel -> t -> unit", null ] ],
          [ "Function", [ "print", "Format.formatter -> t -> unit", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEPair\"><span class=\"keyword\">module</span> Pair</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">A</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"Identifiable.Thing.html\">Thing</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">B</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"Identifiable.Thing.html\">Thing</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"Identifiable.Thing.html\">Thing</a></code><code class=\"type\">  with type t = A.t * B.t</code></div></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>A</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"Identifiable.Thing.html\">Thing</a></code>\n</td></tr><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>B</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"Identifiable.Thing.html\">Thing</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "Identifiable.S",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [ "Module", [ "T", null ] ],
          [ "Include", "Identifiable.Thing" ],
          [ "Module", [ "Set", null ] ],
          [ "Module", [ "Map", null ] ],
          [ "Module", [ "Tbl", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Identifiable.S.Map",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Module", [ "T", null ] ],
          [ "Include", "Map.S" ],
          [
            "Function",
            [
              "filter_map", "'a t -> f:(key -> 'a -> 'b option) -> 'b t",
              null
            ]
          ],
          [ "Function", [ "of_list", "(key * 'a) list -> 'a t", null ] ],
          [
            "Function",
            [
              "disjoint_union",
              "?eq:('a -> 'a -> bool) -> ?print:( Format.formatter -> 'a -> unit) -> 'a t -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">disjoint_union&nbsp;m1&nbsp;m2</code> contains all bindings from <code class=\"code\">m1</code> and\n      <code class=\"code\">m2</code>. If some binding is present in both and the associated\n      value is not equal, a Fatal_error is raised</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "union_right", "'a t -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">union_right&nbsp;m1&nbsp;m2</code> contains all bindings from <code class=\"code\">m1</code> and <code class=\"code\">m2</code>. If\n      some binding is present in both, the one from <code class=\"code\">m2</code> is taken</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "union_left", "'a t -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">union_left&nbsp;m1&nbsp;m2&nbsp;=&nbsp;union_right&nbsp;m2&nbsp;m1</code></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "union_merge", "('a -> 'a -> 'a) -> 'a t -> 'a t -> 'a t", null
            ]
          ],
          [ "Function", [ "rename", "key t -> key -> key", null ] ],
          [
            "Function",
            [ "map_keys", "(key -> key) -> 'a t -> 'a t", null ]
          ],
          [ "Function", [ "keys", "'a t -> Set.Make(T).t", null ] ],
          [ "Function", [ "data", "'a t -> 'a list", null ] ],
          [
            "Function",
            [ "of_set", "(key -> 'a) -> Set.Make(T).t -> 'a t", null ]
          ],
          [
            "Function",
            [ "transpose_keys_and_data", "key t -> key t", null ]
          ],
          [
            "Function",
            [
              "transpose_keys_and_data_set", "key t -> Set.Make(T).t t", null
            ]
          ],
          [
            "Function",
            [
              "print",
              "( Format.formatter -> 'a -> unit) -> Format.formatter -> 'a t -> unit",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Identifiable.S.Set",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Module", [ "T", null ] ],
          [ "Include", "Set.S" ],
          [ "Function", [ "output", "out_channel -> t -> unit", null ] ],
          [ "Function", [ "print", "Format.formatter -> t -> unit", null ] ],
          [ "Function", [ "to_string", "t -> string", null ] ],
          [ "Function", [ "of_list", "elt list -> t", null ] ],
          [ "Function", [ "map", "(elt -> elt) -> t -> t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Identifiable.S.T",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [ "Include", "Hashtbl.HashedType" ],
          [ "Include", "Map.OrderedType" ],
          [ "Function", [ "output", "out_channel -> t -> unit", null ] ],
          [ "Function", [ "print", "Format.formatter -> t -> unit", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Identifiable.S.Tbl",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Module", [ "T", null ] ],
          [ "Include", "Hashtbl.S" ],
          [ "Function", [ "to_list", "'a t -> ( T.t * 'a) list", null ] ],
          [ "Function", [ "of_list", "( T.t * 'a) list -> 'a t", null ] ],
          [ "Function", [ "to_map", "'a t -> 'a Map.Make(T).t", null ] ],
          [ "Function", [ "of_map", "'a Map.Make(T).t -> 'a t", null ] ],
          [
            "Function",
            [ "memoize", "'a t -> (key -> 'a) -> key -> 'a", null ]
          ],
          [ "Function", [ "map", "'a t -> ('a -> 'b) -> 'b t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Identifiable.Set",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Module", [ "T", null ] ],
          [ "Include", "Set.S" ],
          [ "Function", [ "output", "out_channel -> t -> unit", null ] ],
          [ "Function", [ "print", "Format.formatter -> t -> unit", null ] ],
          [ "Function", [ "to_string", "t -> string", null ] ],
          [ "Function", [ "of_list", "elt list -> t", null ] ],
          [ "Function", [ "map", "(elt -> elt) -> t -> t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Identifiable.Set.T",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the set elements.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>A total ordering function over the set elements.\n          This is a two-argument function <code class=\"code\">f</code> such that\n          <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is zero if the elements <code class=\"code\">e1</code> and <code class=\"code\">e2</code> are equal,\n          <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is strictly negative if <code class=\"code\">e1</code> is smaller than <code class=\"code\">e2</code>,\n          and <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is strictly positive if <code class=\"code\">e1</code> is greater than <code class=\"code\">e2</code>.\n          Example: a suitable ordering function is the generic structural\n          comparison function <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Identifiable.Tbl",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Module", [ "T", null ] ],
          [ "Include", "Hashtbl.S" ],
          [ "Function", [ "to_list", "'a t -> ( T.t * 'a) list", null ] ],
          [ "Function", [ "of_list", "( T.t * 'a) list -> 'a t", null ] ],
          [ "Function", [ "to_map", "'a t -> 'a Map.Make(T).t", null ] ],
          [ "Function", [ "of_map", "'a Map.Make(T).t -> 'a t", null ] ],
          [
            "Function",
            [ "memoize", "'a t -> (key -> 'a) -> key -> 'a", null ]
          ],
          [ "Function", [ "map", "'a t -> ('a -> 'b) -> 'b t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Identifiable.Tbl.T",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [ "Include", "Map.OrderedType" ],
          [ "Include", "Hashtbl.HashedType" ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Identifiable.Thing",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [ "Include", "Hashtbl.HashedType" ],
          [ "Include", "Map.OrderedType" ],
          [ "Function", [ "output", "out_channel -> t -> unit", null ] ],
          [ "Function", [ "print", "Format.formatter -> t -> unit", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Int32",
    "module_info":
      "\n<p>32-bit integers.</p>\n\n<p>This module provides operations on the type <code class=\"code\">int32</code>\n   of signed 32-bit integers.  Unlike the built-in <code class=\"code\">int</code> type,\n   the type <code class=\"code\">int32</code> is guaranteed to be exactly 32-bit wide on all\n   platforms.  All arithmetic operations over <code class=\"code\">int32</code> are taken\n   modulo 2<sup class=\"superscript\">32</sup>.</p>\n\n<p>Performance notice: values of type <code class=\"code\">int32</code> occupy more memory\n   space than values of type <code class=\"code\">int</code>, and arithmetic operations on\n   <code class=\"code\">int32</code> are generally slower than those on <code class=\"code\">int</code>.  Use <code class=\"code\">int32</code>\n   only when the application requires exact 32-bit arithmetic.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "zero", "int32",
              "\n<div class=\"info-desc\">\n<p>The 32-bit integer 0.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "one", "int32",
              "\n<div class=\"info-desc\">\n<p>The 32-bit integer 1.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "minus_one", "int32",
              "\n<div class=\"info-desc\">\n<p>The 32-bit integer -1.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "neg", "int32 -> int32",
              "\n<div class=\"info-desc\">\n<p>Unary negation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "int32 -> int32 -> int32",
              "\n<div class=\"info-desc\">\n<p>Addition.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub", "int32 -> int32 -> int32",
              "\n<div class=\"info-desc\">\n<p>Subtraction.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mul", "int32 -> int32 -> int32",
              "\n<div class=\"info-desc\">\n<p>Multiplication.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "div", "int32 -> int32 -> int32",
              "\n<div class=\"info-desc\">\n<p>Integer division.  Raise <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code> if the second\n   argument is zero.  This division rounds the real quotient of\n   its arguments towards zero, as specified for <a href=\"Pervasives.html#VAL(/)\"><code class=\"code\">(/)</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rem", "int32 -> int32 -> int32",
              "\n<div class=\"info-desc\">\n<p>Integer remainder.  If <code class=\"code\">y</code> is not zero, the result\n   of <code class=\"code\"><span class=\"constructor\">Int32</span>.rem&nbsp;x&nbsp;y</code> satisfies the following property:\n   <code class=\"code\">x&nbsp;=&nbsp;<span class=\"constructor\">Int32</span>.add&nbsp;(<span class=\"constructor\">Int32</span>.mul&nbsp;(<span class=\"constructor\">Int32</span>.div&nbsp;x&nbsp;y)&nbsp;y)&nbsp;(<span class=\"constructor\">Int32</span>.rem&nbsp;x&nbsp;y)</code>.\n   If <code class=\"code\">y&nbsp;=&nbsp;0</code>, <code class=\"code\"><span class=\"constructor\">Int32</span>.rem&nbsp;x&nbsp;y</code> raises <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "succ", "int32 -> int32",
              "\n<div class=\"info-desc\">\n<p>Successor.  <code class=\"code\"><span class=\"constructor\">Int32</span>.succ&nbsp;x</code> is <code class=\"code\"><span class=\"constructor\">Int32</span>.add&nbsp;x&nbsp;<span class=\"constructor\">Int32</span>.one</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pred", "int32 -> int32",
              "\n<div class=\"info-desc\">\n<p>Predecessor.  <code class=\"code\"><span class=\"constructor\">Int32</span>.pred&nbsp;x</code> is <code class=\"code\"><span class=\"constructor\">Int32</span>.sub&nbsp;x&nbsp;<span class=\"constructor\">Int32</span>.one</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "abs", "int32 -> int32",
              "\n<div class=\"info-desc\">\n<p>Return the absolute value of its argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "max_int", "int32",
              "\n<div class=\"info-desc\">\n<p>The greatest representable 32-bit integer, 2<sup class=\"superscript\">31</sup> - 1.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "min_int", "int32",
              "\n<div class=\"info-desc\">\n<p>The smallest representable 32-bit integer, -2<sup class=\"superscript\">31</sup>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "logand", "int32 -> int32 -> int32",
              "\n<div class=\"info-desc\">\n<p>Bitwise logical and.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "logor", "int32 -> int32 -> int32",
              "\n<div class=\"info-desc\">\n<p>Bitwise logical or.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "logxor", "int32 -> int32 -> int32",
              "\n<div class=\"info-desc\">\n<p>Bitwise logical exclusive or.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lognot", "int32 -> int32",
              "\n<div class=\"info-desc\">\n<p>Bitwise logical negation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "shift_left", "int32 -> int -> int32",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Int32</span>.shift_left&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;32</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "shift_right", "int32 -> int -> int32",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Int32</span>.shift_right&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.\n   This is an arithmetic shift: the sign bit of <code class=\"code\">x</code> is replicated\n   and inserted in the vacated bits.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;32</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "shift_right_logical", "int32 -> int -> int32",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Int32</span>.shift_right_logical&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.\n   This is a logical shift: zeroes are inserted in the vacated bits\n   regardless of the sign of <code class=\"code\">x</code>.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;32</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_int", "int -> int32",
              "\n<div class=\"info-desc\">\n<p>Convert the given integer (type <code class=\"code\">int</code>) to a 32-bit integer\n    (type <code class=\"code\">int32</code>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_int", "int32 -> int",
              "\n<div class=\"info-desc\">\n<p>Convert the given 32-bit integer (type <code class=\"code\">int32</code>) to an\n   integer (type <code class=\"code\">int</code>).  On 32-bit platforms, the 32-bit integer\n   is taken modulo 2<sup class=\"superscript\">31</sup>, i.e. the high-order bit is lost\n   during the conversion.  On 64-bit platforms, the conversion\n   is exact.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_float", "float -> int32",
              "\n<div class=\"info-desc\">\n<p>Convert the given floating-point number to a 32-bit integer,\n   discarding the fractional part (truncate towards 0).\n   The result of the conversion is undefined if, after truncation,\n   the number is outside the range [<a href=\"Int32.html#VALmin_int\"><code class=\"code\"><span class=\"constructor\">Int32</span>.min_int</code></a>, <a href=\"Int32.html#VALmax_int\"><code class=\"code\"><span class=\"constructor\">Int32</span>.max_int</code></a>].</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_float", "int32 -> float",
              "\n<div class=\"info-desc\">\n<p>Convert the given 32-bit integer to a floating-point number.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_string", "string -> int32",
              "\n<div class=\"info-desc\">\n<p>Convert the given string to a 32-bit integer.\n   The string is read in decimal (by default, or if the string \n   begins with <code class=\"code\">0u</code>) or in hexadecimal, octal or binary if the\n   string begins with <code class=\"code\">0x</code>, <code class=\"code\">0o</code> or <code class=\"code\">0b</code> respectively.</p>\n\n<p>The <code class=\"code\">0u</code> prefix reads the input as an unsigned integer in the range\n   <code class=\"code\">[0,&nbsp;2*<span class=\"constructor\">Int32</span>.max_int+1]</code>.  If the input exceeds <a href=\"Int32.html#VALmax_int\"><code class=\"code\"><span class=\"constructor\">Int32</span>.max_int</code></a>\n   it is converted to the signed integer\n   <code class=\"code\"><span class=\"constructor\">Int32</span>.min_int&nbsp;+&nbsp;input&nbsp;-&nbsp;<span class=\"constructor\">Int32</span>.max_int&nbsp;-&nbsp;1</code>.</p>\n\n<p>The <code class=\"code\">_</code> (underscore) character can appear anywhere in the string\n   and is ignored.\n   Raise <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"Int32.of_string\"</span></code> if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type <code class=\"code\">int32</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_string_opt", "string -> int32 option",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">of_string</code>, but return <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_string", "int32 -> string",
              "\n<div class=\"info-desc\">\n<p>Return the string representation of its argument, in signed decimal.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "bits_of_float", "float -> int32",
              "\n<div class=\"info-desc\">\n<p>Return the internal representation of the given float according\n   to the IEEE 754 floating-point 'single format' bit layout.\n   Bit 31 of the result represents the sign of the float;\n   bits 30 to 23 represent the (biased) exponent; bits 22 to 0\n   represent the mantissa.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "float_of_bits", "int32 -> float",
              "\n<div class=\"info-desc\">\n<p>Return the floating-point number whose internal representation,\n   according to the IEEE 754 floating-point 'single format' bit layout,\n   is the given <code class=\"code\">int32</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", "= int32", null,
              "\n<div class=\"info-desc\">\n<p>An alias for the type of 32-bit integers.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>The comparison function for 32-bit integers, with the same specification as\n    <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>, this function <code class=\"code\">compare</code>\n    allows the module <code class=\"code\"><span class=\"constructor\">Int32</span></code> to be passed as argument to the functors\n    <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p>The equal function for int32s.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Int64",
    "module_info":
      "\n<p>64-bit integers.</p>\n\n<p>This module provides operations on the type <code class=\"code\">int64</code> of\n   signed 64-bit integers.  Unlike the built-in <code class=\"code\">int</code> type,\n   the type <code class=\"code\">int64</code> is guaranteed to be exactly 64-bit wide on all\n   platforms.  All arithmetic operations over <code class=\"code\">int64</code> are taken\n   modulo 2<sup class=\"superscript\">64</sup></p>\n\n<p>Performance notice: values of type <code class=\"code\">int64</code> occupy more memory\n   space than values of type <code class=\"code\">int</code>, and arithmetic operations on\n   <code class=\"code\">int64</code> are generally slower than those on <code class=\"code\">int</code>.  Use <code class=\"code\">int64</code>\n   only when the application requires exact 64-bit arithmetic.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "zero", "int64",
              "\n<div class=\"info-desc\">\n<p>The 64-bit integer 0.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "one", "int64",
              "\n<div class=\"info-desc\">\n<p>The 64-bit integer 1.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "minus_one", "int64",
              "\n<div class=\"info-desc\">\n<p>The 64-bit integer -1.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "neg", "int64 -> int64",
              "\n<div class=\"info-desc\">\n<p>Unary negation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "int64 -> int64 -> int64",
              "\n<div class=\"info-desc\">\n<p>Addition.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub", "int64 -> int64 -> int64",
              "\n<div class=\"info-desc\">\n<p>Subtraction.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mul", "int64 -> int64 -> int64",
              "\n<div class=\"info-desc\">\n<p>Multiplication.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "div", "int64 -> int64 -> int64",
              "\n<div class=\"info-desc\">\n<p>Integer division.  Raise <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code> if the second\n   argument is zero.  This division rounds the real quotient of\n   its arguments towards zero, as specified for <a href=\"Pervasives.html#VAL(/)\"><code class=\"code\">(/)</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rem", "int64 -> int64 -> int64",
              "\n<div class=\"info-desc\">\n<p>Integer remainder.  If <code class=\"code\">y</code> is not zero, the result\n   of <code class=\"code\"><span class=\"constructor\">Int64</span>.rem&nbsp;x&nbsp;y</code> satisfies the following property:\n   <code class=\"code\">x&nbsp;=&nbsp;<span class=\"constructor\">Int64</span>.add&nbsp;(<span class=\"constructor\">Int64</span>.mul&nbsp;(<span class=\"constructor\">Int64</span>.div&nbsp;x&nbsp;y)&nbsp;y)&nbsp;(<span class=\"constructor\">Int64</span>.rem&nbsp;x&nbsp;y)</code>.\n   If <code class=\"code\">y&nbsp;=&nbsp;0</code>, <code class=\"code\"><span class=\"constructor\">Int64</span>.rem&nbsp;x&nbsp;y</code> raises <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "succ", "int64 -> int64",
              "\n<div class=\"info-desc\">\n<p>Successor.  <code class=\"code\"><span class=\"constructor\">Int64</span>.succ&nbsp;x</code> is <code class=\"code\"><span class=\"constructor\">Int64</span>.add&nbsp;x&nbsp;<span class=\"constructor\">Int64</span>.one</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pred", "int64 -> int64",
              "\n<div class=\"info-desc\">\n<p>Predecessor.  <code class=\"code\"><span class=\"constructor\">Int64</span>.pred&nbsp;x</code> is <code class=\"code\"><span class=\"constructor\">Int64</span>.sub&nbsp;x&nbsp;<span class=\"constructor\">Int64</span>.one</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "abs", "int64 -> int64",
              "\n<div class=\"info-desc\">\n<p>Return the absolute value of its argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "max_int", "int64",
              "\n<div class=\"info-desc\">\n<p>The greatest representable 64-bit integer, 2<sup class=\"superscript\">63</sup> - 1.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "min_int", "int64",
              "\n<div class=\"info-desc\">\n<p>The smallest representable 64-bit integer, -2<sup class=\"superscript\">63</sup>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "logand", "int64 -> int64 -> int64",
              "\n<div class=\"info-desc\">\n<p>Bitwise logical and.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "logor", "int64 -> int64 -> int64",
              "\n<div class=\"info-desc\">\n<p>Bitwise logical or.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "logxor", "int64 -> int64 -> int64",
              "\n<div class=\"info-desc\">\n<p>Bitwise logical exclusive or.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lognot", "int64 -> int64",
              "\n<div class=\"info-desc\">\n<p>Bitwise logical negation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "shift_left", "int64 -> int -> int64",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Int64</span>.shift_left&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;64</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "shift_right", "int64 -> int -> int64",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Int64</span>.shift_right&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.\n   This is an arithmetic shift: the sign bit of <code class=\"code\">x</code> is replicated\n   and inserted in the vacated bits.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;64</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "shift_right_logical", "int64 -> int -> int64",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Int64</span>.shift_right_logical&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.\n   This is a logical shift: zeroes are inserted in the vacated bits\n   regardless of the sign of <code class=\"code\">x</code>.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;64</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_int", "int -> int64",
              "\n<div class=\"info-desc\">\n<p>Convert the given integer (type <code class=\"code\">int</code>) to a 64-bit integer\n    (type <code class=\"code\">int64</code>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_int", "int64 -> int",
              "\n<div class=\"info-desc\">\n<p>Convert the given 64-bit integer (type <code class=\"code\">int64</code>) to an\n   integer (type <code class=\"code\">int</code>).  On 64-bit platforms, the 64-bit integer\n   is taken modulo 2<sup class=\"superscript\">63</sup>, i.e. the high-order bit is lost\n   during the conversion.  On 32-bit platforms, the 64-bit integer\n   is taken modulo 2<sup class=\"superscript\">31</sup>, i.e. the top 33 bits are lost\n   during the conversion.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_float", "float -> int64",
              "\n<div class=\"info-desc\">\n<p>Convert the given floating-point number to a 64-bit integer,\n   discarding the fractional part (truncate towards 0).\n   The result of the conversion is undefined if, after truncation,\n   the number is outside the range [<a href=\"Int64.html#VALmin_int\"><code class=\"code\"><span class=\"constructor\">Int64</span>.min_int</code></a>, <a href=\"Int64.html#VALmax_int\"><code class=\"code\"><span class=\"constructor\">Int64</span>.max_int</code></a>].</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_float", "int64 -> float",
              "\n<div class=\"info-desc\">\n<p>Convert the given 64-bit integer to a floating-point number.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_int32", "int32 -> int64",
              "\n<div class=\"info-desc\">\n<p>Convert the given 32-bit integer (type <code class=\"code\">int32</code>)\n   to a 64-bit integer (type <code class=\"code\">int64</code>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_int32", "int64 -> int32",
              "\n<div class=\"info-desc\">\n<p>Convert the given 64-bit integer (type <code class=\"code\">int64</code>) to a\n   32-bit integer (type <code class=\"code\">int32</code>). The 64-bit integer\n   is taken modulo 2<sup class=\"superscript\">32</sup>, i.e. the top 32 bits are lost\n   during the conversion.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_nativeint", "nativeint -> int64",
              "\n<div class=\"info-desc\">\n<p>Convert the given native integer (type <code class=\"code\">nativeint</code>)\n   to a 64-bit integer (type <code class=\"code\">int64</code>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_nativeint", "int64 -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Convert the given 64-bit integer (type <code class=\"code\">int64</code>) to a\n   native integer.  On 32-bit platforms, the 64-bit integer\n   is taken modulo 2<sup class=\"superscript\">32</sup>.  On 64-bit platforms,\n   the conversion is exact.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_string", "string -> int64",
              "\n<div class=\"info-desc\">\n<p>Convert the given string to a 64-bit integer.\n   The string is read in decimal (by default, or if the string \n   begins with <code class=\"code\">0u</code>) or in hexadecimal, octal or binary if the\n   string begins with <code class=\"code\">0x</code>, <code class=\"code\">0o</code> or <code class=\"code\">0b</code> respectively.</p>\n\n<p>The <code class=\"code\">0u</code> prefix reads the input as an unsigned integer in the range\n   <code class=\"code\">[0,&nbsp;2*<span class=\"constructor\">Int64</span>.max_int+1]</code>.  If the input exceeds <a href=\"Int64.html#VALmax_int\"><code class=\"code\"><span class=\"constructor\">Int64</span>.max_int</code></a>\n   it is converted to the signed integer\n   <code class=\"code\"><span class=\"constructor\">Int64</span>.min_int&nbsp;+&nbsp;input&nbsp;-&nbsp;<span class=\"constructor\">Int64</span>.max_int&nbsp;-&nbsp;1</code>.</p>\n\n<p>The <code class=\"code\">_</code> (underscore) character can appear anywhere in the string\n   and is ignored.\n   Raise <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"Int64.of_string\"</span></code> if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type <code class=\"code\">int64</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_string_opt", "string -> int64 option",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">of_string</code>, but return <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_string", "int64 -> string",
              "\n<div class=\"info-desc\">\n<p>Return the string representation of its argument, in decimal.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "bits_of_float", "float -> int64",
              "\n<div class=\"info-desc\">\n<p>Return the internal representation of the given float according\n   to the IEEE 754 floating-point 'double format' bit layout.\n   Bit 63 of the result represents the sign of the float;\n   bits 62 to 52 represent the (biased) exponent; bits 51 to 0\n   represent the mantissa.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "float_of_bits", "int64 -> float",
              "\n<div class=\"info-desc\">\n<p>Return the floating-point number whose internal representation,\n   according to the IEEE 754 floating-point 'double format' bit layout,\n   is the given <code class=\"code\">int64</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", "= int64", null,
              "\n<div class=\"info-desc\">\n<p>An alias for the type of 64-bit integers.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>The comparison function for 64-bit integers, with the same specification as\n    <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>, this function <code class=\"code\">compare</code>\n    allows the module <code class=\"code\"><span class=\"constructor\">Int64</span></code> to be passed as argument to the functors\n    <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p>The equal function for int64s.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Lazy",
    "module_info": "\n<p>Deferred computations.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "'a", "t = 'a lazy_t", null,
              "\n<div class=\"info-desc\">\n<p>A value of type <code class=\"code\"><span class=\"keywordsign\">'</span>a&nbsp;<span class=\"constructor\">Lazy</span>.t</code> is a deferred computation, called\n   a suspension, that has a result of type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.  The special\n   expression syntax <code class=\"code\"><span class=\"keyword\">lazy</span>&nbsp;(expr)</code> makes a suspension of the\n   computation of <code class=\"code\">expr</code>, without computing <code class=\"code\">expr</code> itself yet.\n   \"Forcing\" the suspension will then compute <code class=\"code\">expr</code> and return its\n   result.</p>\n\n<p>Note: <code class=\"code\">lazy_t</code> is the built-in type constructor used by the compiler\n   for the <code class=\"code\"><span class=\"keyword\">lazy</span></code> keyword.  You should not use it directly.  Always use\n   <code class=\"code\"><span class=\"constructor\">Lazy</span>.t</code> instead.</p>\n\n<p>Note: <code class=\"code\"><span class=\"constructor\">Lazy</span>.force</code> is not thread-safe.  If you use this module in\n   a multi-threaded program, you will need to add some locks.</p>\n\n<p>Note: if the program is compiled with the <code class=\"code\">-rectypes</code> option,\n   ill-founded recursive definitions of the form <code class=\"code\"><span class=\"keyword\">let</span>&nbsp;<span class=\"keyword\">rec</span>&nbsp;x&nbsp;=&nbsp;<span class=\"keyword\">lazy</span>&nbsp;x</code>\n   or <code class=\"code\"><span class=\"keyword\">let</span>&nbsp;<span class=\"keyword\">rec</span>&nbsp;x&nbsp;=&nbsp;<span class=\"keyword\">lazy</span>(<span class=\"keyword\">lazy</span>(...(<span class=\"keyword\">lazy</span>&nbsp;x)))</code> are accepted by the type-checker\n   and lead, when forced, to ill-formed values that trigger infinite\n   loops in the garbage collector and other parts of the run-time system.\n   Without the <code class=\"code\">-rectypes</code> option, such ill-founded recursive definitions\n   are rejected by the type-checker.</p>\n</div>\n"
            ]
          ],
          [ "Exception", [ "Undefined", null, null ] ],
          [
            "Function",
            [
              "force", "'a t -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">force&nbsp;x</code> forces the suspension <code class=\"code\">x</code> and returns its result.\n   If <code class=\"code\">x</code> has already been forced, <code class=\"code\"><span class=\"constructor\">Lazy</span>.force&nbsp;x</code> returns the\n   same value again without recomputing it.  If it raised an exception,\n   the same exception is raised again.\n   Raise <a href=\"Lazy.html#EXCEPTIONUndefined\"><code class=\"code\"><span class=\"constructor\">Lazy</span>.<span class=\"constructor\">Undefined</span></code></a> if the forcing of <code class=\"code\">x</code> tries to force <code class=\"code\">x</code> itself\n   recursively.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "force_val", "'a t -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">force_val&nbsp;x</code> forces the suspension <code class=\"code\">x</code> and returns its\n    result.  If <code class=\"code\">x</code> has already been forced, <code class=\"code\">force_val&nbsp;x</code>\n    returns the same value again without recomputing it.\n    Raise <a href=\"Lazy.html#EXCEPTIONUndefined\"><code class=\"code\"><span class=\"constructor\">Lazy</span>.<span class=\"constructor\">Undefined</span></code></a> if the forcing of <code class=\"code\">x</code> tries to force <code class=\"code\">x</code> itself\n    recursively.\n    If the computation of <code class=\"code\">x</code> raises an exception, it is unspecified\n    whether <code class=\"code\">force_val&nbsp;x</code> raises the same exception or <a href=\"Lazy.html#EXCEPTIONUndefined\"><code class=\"code\"><span class=\"constructor\">Lazy</span>.<span class=\"constructor\">Undefined</span></code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "from_fun", "(unit -> 'a) -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">from_fun&nbsp;f</code> is the same as <code class=\"code\"><span class=\"keyword\">lazy</span>&nbsp;(f&nbsp;())</code> but slightly more efficient.</p>\n\n<p><code class=\"code\">from_fun</code> should only be used if the function <code class=\"code\">f</code> is already defined.\n    In particular it is always less efficient to write\n    <code class=\"code\">from_fun&nbsp;(<span class=\"keyword\">fun</span>&nbsp;()&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;expr)</code> than <code class=\"code\"><span class=\"keyword\">lazy</span>&nbsp;expr</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "from_val", "'a -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">from_val&nbsp;v</code> returns an already-forced suspension of <code class=\"code\">v</code>.\n    This is for special purposes only and should not be confused with\n    <code class=\"code\"><span class=\"keyword\">lazy</span>&nbsp;(v)</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "is_val", "'a t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">is_val&nbsp;x</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">x</code> has already been forced and\n    did not raise an exception.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "lazy_from_fun", "(unit -> 'a) -> 'a t",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>synonym for <code class=\"code\">from_fun</code>.</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lazy_from_val", "'a -> 'a t",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>synonym for <code class=\"code\">from_val</code>.</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lazy_is_val", "'a t -> bool",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>synonym for <code class=\"code\">is_val</code>.</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Lexer",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Function", [ "init", "unit -> unit", null ] ],
          [ "Function", [ "token", "Lexing.lexbuf -> Parser.token", null ] ],
          [ "Function", [ "skip_hash_bang", "Lexing.lexbuf -> unit", null ] ],
          [
            "Typevariant",
            [
              "error", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Illegal_character\"><span class=\"constructor\">Illegal_character</span></span> <span class=\"keyword\">of</span> <code class=\"type\">char</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Illegal_escape\"><span class=\"constructor\">Illegal_escape</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Unterminated_comment\"><span class=\"constructor\">Unterminated_comment</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Unterminated_string\"><span class=\"constructor\">Unterminated_string</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Unterminated_string_in_comment\"><span class=\"constructor\">Unterminated_string_in_comment</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a> * <a href=\"Location.html#TYPEt\">Location.t</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Keyword_as_label\"><span class=\"constructor\">Keyword_as_label</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Invalid_literal\"><span class=\"constructor\">Invalid_literal</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Invalid_directive\"><span class=\"constructor\">Invalid_directive</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * string option</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Exception", [ "Error", "error", null ] ],
          [
            "Function",
            [ "report_error", "Format.formatter -> error -> unit", null ]
          ],
          [ "Function", [ "in_comment", "unit -> bool", null ] ],
          [ "Function", [ "in_string", "unit -> bool", null ] ],
          [ "Function", [ "print_warnings", "bool ref", null ] ],
          [ "Function", [ "handle_docstrings", "bool ref", null ] ],
          [
            "Function",
            [ "comments", "unit -> (string * Location.t ) list", null ]
          ],
          [
            "Function",
            [ "token_with_comments", "Lexing.lexbuf -> Parser.token", null ]
          ],
          [
            "Function",
            [
              "set_preprocessor",
              "(unit -> unit) -> (( Lexing.lexbuf -> Parser.token ) -> Lexing.lexbuf -> Parser.token ) -> unit",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Lexing",
    "module_info":
      "\n<p>The run-time library for lexers generated by <code class=\"code\">ocamllex</code>.</p>\n",
    "sections": [
      {
        "section_name": "Positions",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "position", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTposition.pos_fname\">pos_fname</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTposition.pos_lnum\">pos_lnum</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTposition.pos_bol\">pos_bol</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTposition.pos_cnum\">pos_cnum</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>A value of type <code class=\"code\">position</code> describes a point in a source file.\n   <code class=\"code\">pos_fname</code> is the file name; <code class=\"code\">pos_lnum</code> is the line number;\n   <code class=\"code\">pos_bol</code> is the offset of the beginning of the line (number\n   of characters between the beginning of the lexbuf and the beginning\n   of the line); <code class=\"code\">pos_cnum</code> is the offset of the position (number of\n   characters between the beginning of the lexbuf and the position).\n   The difference between <code class=\"code\">pos_cnum</code> and <code class=\"code\">pos_bol</code> is the character\n   offset within the line (i.e. the column number, assuming each\n   character is one column wide).</p>\n\n<p>See the documentation of type <code class=\"code\">lexbuf</code> for information about\n   how the lexing engine will manage positions.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "dummy_pos", "position",
              "\n<div class=\"info-desc\">\n<p>A value of type <code class=\"code\">position</code>, guaranteed to be different from any\n   valid position.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Lexer buffers",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "lexbuf", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlexbuf.refill_buff\">refill_buff</span>&nbsp;: <code class=\"type\"><a href=\"Lexing.html#TYPElexbuf\">lexbuf</a> -&gt; unit</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_buffer\">lex_buffer</span>&nbsp;: <code class=\"type\">bytes</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_buffer_len\">lex_buffer_len</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_abs_pos\">lex_abs_pos</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_start_pos\">lex_start_pos</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_curr_pos\">lex_curr_pos</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_last_pos\">lex_last_pos</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_last_action\">lex_last_action</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_eof_reached\">lex_eof_reached</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_mem\">lex_mem</span>&nbsp;: <code class=\"type\">int array</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_start_p\">lex_start_p</span>&nbsp;: <code class=\"type\"><a href=\"Lexing.html#TYPEposition\">position</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTlexbuf.lex_curr_p\">lex_curr_p</span>&nbsp;: <code class=\"type\"><a href=\"Lexing.html#TYPEposition\">position</a></code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The type of lexer buffers. A lexer buffer is the argument passed\n   to the scanning functions defined by the generated scanners.\n   The lexer buffer holds the current state of the scanner, plus\n   a function to refill the buffer from the input.</p>\n\n<p>At each token, the lexing engine will copy <code class=\"code\">lex_curr_p</code> to\n   <code class=\"code\">lex_start_p</code>, then change the <code class=\"code\">pos_cnum</code> field\n   of <code class=\"code\">lex_curr_p</code> by updating it with the number of characters read\n   since the start of the <code class=\"code\">lexbuf</code>.  The other fields are left\n   unchanged by the lexing engine.  In order to keep them\n   accurate, they must be initialised before the first use of the\n   lexbuf, and updated by the relevant lexer actions (i.e. at each\n   end of line -- see also <code class=\"code\">new_line</code>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "from_channel", "in_channel -> lexbuf",
              "\n<div class=\"info-desc\">\n<p>Create a lexer buffer on the given input channel.\n   <code class=\"code\"><span class=\"constructor\">Lexing</span>.from_channel&nbsp;inchan</code> returns a lexer buffer which reads\n   from the input channel <code class=\"code\">inchan</code>, at the current reading position.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "from_string", "string -> lexbuf",
              "\n<div class=\"info-desc\">\n<p>Create a lexer buffer which reads from\n   the given string. Reading starts from the first character in\n   the string. An end-of-input condition is generated when the\n   end of the string is reached.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "from_function", "(bytes -> int -> int) -> lexbuf",
              "\n<div class=\"info-desc\">\n<p>Create a lexer buffer with the given function as its reading method.\n   When the scanner needs more characters, it will call the given\n   function, giving it a byte sequence <code class=\"code\">s</code> and a byte\n   count <code class=\"code\">n</code>. The function should put <code class=\"code\">n</code> bytes or fewer in <code class=\"code\">s</code>,\n   starting at index 0, and return the number of bytes\n   provided. A return value of 0 means end of input.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Functions for lexer semantic actions",
        "section_info":
          "<p>The following functions can be called from the semantic actions\n   of lexer definitions (the ML code enclosed in braces that\n   computes the value returned by lexing functions). They give\n   access to the character string matched by the regular expression\n   associated with the semantic action. These functions must be\n   applied to the argument <code class=\"code\">lexbuf</code>, which, in the code generated by\n   <code class=\"code\">ocamllex</code>, is bound to the lexer buffer passed to the parsing\n   function.</p>",
        "elements": [
          [
            "Function",
            [
              "lexeme", "lexbuf -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme&nbsp;lexbuf</code> returns the string matched by\n           the regular expression.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lexeme_char", "lexbuf -> int -> char",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme_char&nbsp;lexbuf&nbsp;i</code> returns character number <code class=\"code\">i</code> in\n   the matched string.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lexeme_start", "lexbuf -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme_start&nbsp;lexbuf</code> returns the offset in the\n   input stream of the first character of the matched string.\n   The first character of the stream has offset 0.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lexeme_end", "lexbuf -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme_end&nbsp;lexbuf</code> returns the offset in the input stream\n   of the character following the last character of the matched\n   string. The first character of the stream has offset 0.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lexeme_start_p", "lexbuf -> position",
              "\n<div class=\"info-desc\">\n<p>Like <code class=\"code\">lexeme_start</code>, but return a complete <code class=\"code\">position</code> instead\n    of an offset.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lexeme_end_p", "lexbuf -> position",
              "\n<div class=\"info-desc\">\n<p>Like <code class=\"code\">lexeme_end</code>, but return a complete <code class=\"code\">position</code> instead\n    of an offset.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "new_line", "lexbuf -> unit",
              "\n<div class=\"info-desc\">\n<p>Update the <code class=\"code\">lex_curr_p</code> field of the lexbuf to reflect the start\n    of a new line.  You can call this function in the semantic action\n    of the rule that matches the end-of-line character.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Miscellaneous functions",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "flush_input", "lexbuf -> unit",
              "\n<div class=\"info-desc\">\n<p>Discard the contents of the buffer and reset the current\n    position to 0.  The next use of the lexbuf will trigger a\n    refill.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "List",
    "module_info":
      "\n<p>List operations.</p>\n\n<p>Some functions are flagged as not tail-recursive.  A tail-recursive\n   function uses constant stack space, while a non-tail-recursive function\n   uses stack space proportional to the length of its list argument, which\n   can be a problem with very long lists.  When the function takes several\n   list arguments, an approximate formula giving stack usage (in some\n   unspecified constant unit) is shown in parentheses.</p>\n\n<p>The above considerations can usually be ignored if your lists are not\n   longer than about 10000 elements.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "length", "'a list -> int",
              "\n<div class=\"info-desc\">\n<p>Return the length (number of elements) of the given list.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare_lengths", "'a list -> 'b list -> int",
              "\n<div class=\"info-desc\">\n<p>Compare the lengths of two lists. <code class=\"code\">compare_lengths&nbsp;l1&nbsp;l2</code> is\n   equivalent to <code class=\"code\">compare&nbsp;(length&nbsp;l1)&nbsp;(length&nbsp;l2)</code>, except that\n   the computation stops after itering on the shortest list.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "compare_length_with", "'a list -> int -> int",
              "\n<div class=\"info-desc\">\n<p>Compare the length of a list to an integer. <code class=\"code\">compare_length_with&nbsp;l&nbsp;n</code> is\n   equivalent to <code class=\"code\">compare&nbsp;(length&nbsp;l)&nbsp;n</code>, except that\n   the computation stops after at most <code class=\"code\">n</code> iterations on the list.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "cons", "'a -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">cons&nbsp;x&nbsp;xs</code> is <code class=\"code\">x&nbsp;::&nbsp;xs</code></p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "hd", "'a list -> 'a",
              "\n<div class=\"info-desc\">\n<p>Return the first element of the given list. Raise\n   <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"hd\"</span></code> if the list is empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "tl", "'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Return the given list without its first element. Raise\n    <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"tl\"</span></code> if the list is empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "nth", "'a list -> int -> 'a",
              "\n<div class=\"info-desc\">\n<p>Return the <code class=\"code\">n</code>-th element of the given list.\n   The first element (head of the list) is at position 0.\n   Raise <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"nth\"</span></code> if the list is too short.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"List.nth\"</span></code> if <code class=\"code\">n</code> is negative.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "nth_opt", "'a list -> int -> 'a option",
              "\n<div class=\"info-desc\">\n<p>Return the <code class=\"code\">n</code>-th element of the given list.\n    The first element (head of the list) is at position 0.\n    Return <code class=\"code\"><span class=\"constructor\">None</span></code> if the list is too short.\n    Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"List.nth\"</span></code> if <code class=\"code\">n</code> is negative.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rev", "'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>List reversal.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "init", "int -> (int -> 'a) -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.init&nbsp;len&nbsp;f</code> is <code class=\"code\">f&nbsp;0;&nbsp;f&nbsp;1;&nbsp;...;&nbsp;f&nbsp;(len-1)</code>, evaluated left to right.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n<li><b>Raises</b> <code>Invalid_argument</code> if len &lt; 0.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "append", "'a list -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Concatenate two lists.  Same as the infix operator <code class=\"code\">@</code>.\n   Not tail-recursive (length of the first argument).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rev_append", "'a list -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_append&nbsp;l1&nbsp;l2</code> reverses <code class=\"code\">l1</code> and concatenates it to <code class=\"code\">l2</code>.\n   This is equivalent to <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;l1&nbsp;@&nbsp;l2</code>, but <code class=\"code\">rev_append</code> is\n   tail-recursive and more efficient.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "concat", "'a list list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Concatenate a list of lists.  The elements of the argument are all\n   concatenated together (in the same order) to give the result.\n   Not tail-recursive\n   (length of the argument + length of the longest sub-list).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "flatten", "'a list list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>An alias for <code class=\"code\">concat</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "iter", "('a -> unit) -> 'a list -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.iter&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> in turn to\n   <code class=\"code\">a1;&nbsp;...;&nbsp;an</code>. It is equivalent to\n   <code class=\"code\"><span class=\"keyword\">begin</span>&nbsp;f&nbsp;a1;&nbsp;f&nbsp;a2;&nbsp;...;&nbsp;f&nbsp;an;&nbsp;()&nbsp;<span class=\"keyword\">end</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iteri", "(int -> 'a -> unit) -> 'a list -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALiter\"><code class=\"code\"><span class=\"constructor\">List</span>.iter</code></a>, but the function is applied to the index of\n   the element as first argument (counting from 0), and the element\n   itself as second argument.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "('a -> 'b) -> 'a list -> 'b list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.map&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> to <code class=\"code\">a1,&nbsp;...,&nbsp;an</code>,\n   and builds the list <code class=\"code\">[f&nbsp;a1;&nbsp;...;&nbsp;f&nbsp;an]</code>\n   with the results returned by <code class=\"code\">f</code>.  Not tail-recursive.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mapi", "(int -> 'a -> 'b) -> 'a list -> 'b list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a>, but the function is applied to the index of\n   the element as first argument (counting from 0), and the element\n   itself as second argument.  Not tail-recursive.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rev_map", "('a -> 'b) -> 'a list -> 'b list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map&nbsp;f&nbsp;l</code> gives the same result as\n   <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a><code class=\"code\">&nbsp;f&nbsp;l)</code>, but is tail-recursive and\n   more efficient.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_left", "('a -> 'b -> 'a) -> 'a -> 'b list -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1)&nbsp;b2)&nbsp;...)&nbsp;bn</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_right", "('a -> 'b -> 'b) -> 'a list -> 'b -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;b</code> is\n   <code class=\"code\">f&nbsp;a1&nbsp;(f&nbsp;a2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;b)&nbsp;...))</code>.  Not tail-recursive.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators on two lists",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "iter2", "('a -> 'b -> unit) -> 'a list -> 'b list -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.iter2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> calls in turn\n   <code class=\"code\">f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "map2", "('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.map2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">[f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn]</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.  Not tail-recursive.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rev_map2",
              "('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map2&nbsp;f&nbsp;l1&nbsp;l2</code> gives the same result as\n   <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap2\"><code class=\"code\"><span class=\"constructor\">List</span>.map2</code></a><code class=\"code\">&nbsp;f&nbsp;l1&nbsp;l2)</code>, but is tail-recursive and\n   more efficient.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_left2",
              "('a -> 'b -> 'c -> 'a) -> 'a -> 'b list -> 'c list -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left2&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;[c1;&nbsp;...;&nbsp;cn]</code> is\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1&nbsp;c1)&nbsp;b2&nbsp;c2)&nbsp;...)&nbsp;bn&nbsp;cn</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_right2",
              "('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> 'c -> 'c",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;c</code> is\n   <code class=\"code\">f&nbsp;a1&nbsp;b1&nbsp;(f&nbsp;a2&nbsp;b2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;bn&nbsp;c)&nbsp;...))</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.  Not tail-recursive.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "List scanning",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "for_all", "('a -> bool) -> 'a list -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if all elements of the list\n   satisfy the predicate <code class=\"code\">p</code>. That is, it returns\n   <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;...&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "exists", "('a -> bool) -> 'a list -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if at least one element of\n   the list satisfies the predicate <code class=\"code\">p</code>. That is, it returns\n   <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;...&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "for_all2", "('a -> 'b -> bool) -> 'a list -> 'b list -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALfor_all\"><code class=\"code\"><span class=\"constructor\">List</span>.for_all</code></a>, but for a two-argument predicate.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "exists2", "('a -> 'b -> bool) -> 'a list -> 'b list -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALexists\"><code class=\"code\"><span class=\"constructor\">List</span>.exists</code></a>, but for a two-argument predicate.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mem", "'a -> 'a list -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;a&nbsp;l</code> is true if and only if <code class=\"code\">a</code> is equal\n   to an element of <code class=\"code\">l</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "memq", "'a -> 'a list -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALmem\"><code class=\"code\"><span class=\"constructor\">List</span>.mem</code></a>, but uses physical equality instead of structural\n   equality to compare list elements.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "List searching",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "find", "('a -> bool) -> 'a list -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code>\n   that satisfies the predicate <code class=\"code\">p</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if there is no value that satisfies <code class=\"code\">p</code> in the\n   list <code class=\"code\">l</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find_opt", "('a -> bool) -> 'a list -> 'a option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_opt&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code> that\n    satisfies the predicate <code class=\"code\">p</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no value that\n    satisfies <code class=\"code\">p</code> in the list <code class=\"code\">l</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "filter", "('a -> bool) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">filter&nbsp;p&nbsp;l</code> returns all the elements of the list <code class=\"code\">l</code>\n   that satisfy the predicate <code class=\"code\">p</code>.  The order of the elements\n   in the input list is preserved.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find_all", "('a -> bool) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_all</code> is another name for <a href=\"List.html#VALfilter\"><code class=\"code\"><span class=\"constructor\">List</span>.filter</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "partition", "('a -> bool) -> 'a list -> 'a list * 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">partition&nbsp;p&nbsp;l</code> returns a pair of lists <code class=\"code\">(l1,&nbsp;l2)</code>, where\n   <code class=\"code\">l1</code> is the list of all the elements of <code class=\"code\">l</code> that\n   satisfy the predicate <code class=\"code\">p</code>, and <code class=\"code\">l2</code> is the list of all the\n   elements of <code class=\"code\">l</code> that do not satisfy <code class=\"code\">p</code>.\n   The order of the elements in the input list is preserved.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Association lists",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "assoc", "'a -> ('a * 'b) list -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">assoc&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of\n   pairs <code class=\"code\">l</code>. That is,\n   <code class=\"code\">assoc&nbsp;a&nbsp;[&nbsp;...;&nbsp;(a,b);&nbsp;...]&nbsp;=&nbsp;b</code>\n   if <code class=\"code\">(a,b)</code> is the leftmost binding of <code class=\"code\">a</code> in list <code class=\"code\">l</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if there is no value associated with <code class=\"code\">a</code> in the\n   list <code class=\"code\">l</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "assoc_opt", "'a -> ('a * 'b) list -> 'b option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">assoc_opt&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of\n   pairs <code class=\"code\">l</code>. That is,\n   <code class=\"code\">assoc_opt&nbsp;a&nbsp;[&nbsp;...;&nbsp;(a,b);&nbsp;...]&nbsp;=&nbsp;b</code>\n   if <code class=\"code\">(a,b)</code> is the leftmost binding of <code class=\"code\">a</code> in list <code class=\"code\">l</code>.\n   Returns <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no value associated with <code class=\"code\">a</code> in the\n   list <code class=\"code\">l</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "assq", "'a -> ('a * 'b) list -> 'b",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but uses physical equality instead of structural\n   equality to compare keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "assq_opt", "'a -> ('a * 'b) list -> 'b option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALassoc_opt\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc_opt</code></a>, but uses physical equality instead of structural\n    equality to compare keys.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "mem_assoc", "'a -> ('a * 'b) list -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but simply return true if a binding exists,\n   and false if no bindings exist for the given key.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mem_assq", "'a -> ('a * 'b) list -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALmem_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.mem_assoc</code></a>, but uses physical equality instead of\n   structural equality to compare keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "remove_assoc", "'a -> ('a * 'b) list -> ('a * 'b) list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">remove_assoc&nbsp;a&nbsp;l</code> returns the list of\n   pairs <code class=\"code\">l</code> without the first pair with key <code class=\"code\">a</code>, if any.\n   Not tail-recursive.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "remove_assq", "'a -> ('a * 'b) list -> ('a * 'b) list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALremove_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.remove_assoc</code></a>, but uses physical equality instead\n   of structural equality to compare keys.  Not tail-recursive.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Lists of pairs",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "split", "('a * 'b) list -> 'a list * 'b list",
              "\n<div class=\"info-desc\">\n<p>Transform a list of pairs into a pair of lists:\n   <code class=\"code\">split&nbsp;[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code> is <code class=\"code\">([a1;&nbsp;...;&nbsp;an],&nbsp;[b1;&nbsp;...;&nbsp;bn])</code>.\n   Not tail-recursive.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "combine", "'a list -> 'b list -> ('a * 'b) list",
              "\n<div class=\"info-desc\">\n<p>Transform a pair of lists into a list of pairs:\n   <code class=\"code\">combine&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists\n   have different lengths.  Not tail-recursive.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Sorting",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "sort", "('a -> 'a -> int) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Sort a list in increasing order according to a comparison\n   function.  The comparison function must return 0 if its arguments\n   compare as equal, a positive integer if the first is greater,\n   and a negative integer if the first is smaller (see Array.sort for\n   a complete specification).  For example,\n   <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a> is a suitable comparison function.\n   The resulting list is sorted in increasing order.\n   <code class=\"code\"><span class=\"constructor\">List</span>.sort</code> is guaranteed to run in constant heap space\n   (in addition to the size of the result list) and logarithmic\n   stack space.</p>\n\n<p>The current implementation uses Merge Sort. It runs in constant\n   heap space and logarithmic stack space.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stable_sort", "('a -> 'a -> int) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but the sorting algorithm is guaranteed to\n   be stable (i.e. elements that compare equal are kept in their\n   original order) .</p>\n\n<p>The current implementation uses Merge Sort. It runs in constant\n   heap space and logarithmic stack space.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fast_sort", "('a -> 'a -> int) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a> or <a href=\"List.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">List</span>.stable_sort</code></a>, whichever is faster\n    on typical input.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sort_uniq", "('a -> 'a -> int) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but also remove duplicates.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "merge", "('a -> 'a -> int) -> 'a list -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Merge two lists:\n    Assuming that <code class=\"code\">l1</code> and <code class=\"code\">l2</code> are sorted according to the\n    comparison function <code class=\"code\">cmp</code>, <code class=\"code\">merge&nbsp;cmp&nbsp;l1&nbsp;l2</code> will return a\n    sorted list containing all the elements of <code class=\"code\">l1</code> and <code class=\"code\">l2</code>.\n    If several elements compare equal, the elements of <code class=\"code\">l1</code> will be\n    before the elements of <code class=\"code\">l2</code>.\n    Not tail-recursive (sum of the lengths of the arguments).</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "'a list -> 'a Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the list</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "'a Seq.t -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Create a list from the iterator</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "ListLabels",
    "module_info":
      "\n<p>List operations.</p>\n\n<p>Some functions are flagged as not tail-recursive.  A tail-recursive\n   function uses constant stack space, while a non-tail-recursive function\n   uses stack space proportional to the length of its list argument, which\n   can be a problem with very long lists.  When the function takes several\n   list arguments, an approximate formula giving stack usage (in some\n   unspecified constant unit) is shown in parentheses.</p>\n\n<p>The above considerations can usually be ignored if your lists are not\n   longer than about 10000 elements.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "length", "'a list -> int",
              "\n<div class=\"info-desc\">\n<p>Return the length (number of elements) of the given list.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "hd", "'a list -> 'a",
              "\n<div class=\"info-desc\">\n<p>Return the first element of the given list. Raise\n   <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"hd\"</span></code> if the list is empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare_lengths", "'a list -> 'b list -> int",
              "\n<div class=\"info-desc\">\n<p>Compare the lengths of two lists. <code class=\"code\">compare_lengths&nbsp;l1&nbsp;l2</code> is\n   equivalent to <code class=\"code\">compare&nbsp;(length&nbsp;l1)&nbsp;(length&nbsp;l2)</code>, except that\n   the computation stops after itering on the shortest list.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "compare_length_with", "'a list -> len:int -> int",
              "\n<div class=\"info-desc\">\n<p>Compare the length of a list to an integer. <code class=\"code\">compare_length_with&nbsp;l&nbsp;n</code> is\n   equivalent to <code class=\"code\">compare&nbsp;(length&nbsp;l)&nbsp;n</code>, except that\n   the computation stops after at most <code class=\"code\">n</code> iterations on the list.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "cons", "'a -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">cons&nbsp;x&nbsp;xs</code> is <code class=\"code\">x&nbsp;::&nbsp;xs</code></p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "tl", "'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Return the given list without its first element. Raise\n   <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"tl\"</span></code> if the list is empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "nth", "'a list -> int -> 'a",
              "\n<div class=\"info-desc\">\n<p>Return the <code class=\"code\">n</code>-th element of the given list.\n   The first element (head of the list) is at position 0.\n   Raise <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"nth\"</span></code> if the list is too short.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"List.nth\"</span></code> if <code class=\"code\">n</code> is negative.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "nth_opt", "'a list -> int -> 'a option",
              "\n<div class=\"info-desc\">\n<p>Return the <code class=\"code\">n</code>-th element of the given list.\n    The first element (head of the list) is at position 0.\n    Return <code class=\"code\"><span class=\"constructor\">None</span></code> if the list is too short.\n    Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"List.nth\"</span></code> if <code class=\"code\">n</code> is negative.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rev", "'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>List reversal.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "init", "len:int -> f:(int -> 'a) -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.init&nbsp;len&nbsp;f</code> is <code class=\"code\">f&nbsp;0;&nbsp;f&nbsp;1;&nbsp;...;&nbsp;f&nbsp;(len-1)</code>, evaluated left to right.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n<li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">len&nbsp;&lt;&nbsp;0</code>.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "append", "'a list -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Catenate two lists.  Same function as the infix operator <code class=\"code\">@</code>.\n   Not tail-recursive (length of the first argument).  The <code class=\"code\">@</code>\n   operator is not tail-recursive either.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rev_append", "'a list -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_append&nbsp;l1&nbsp;l2</code> reverses <code class=\"code\">l1</code> and concatenates it with <code class=\"code\">l2</code>.\n   This is equivalent to <code class=\"code\">(</code><a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;l1)&nbsp;@&nbsp;l2</code>, but <code class=\"code\">rev_append</code> is\n   tail-recursive and more efficient.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "concat", "'a list list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Concatenate a list of lists.  The elements of the argument are all\n   concatenated together (in the same order) to give the result.\n   Not tail-recursive\n   (length of the argument + length of the longest sub-list).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "flatten", "'a list list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">concat</code>.  Not tail-recursive\n   (length of the argument + length of the longest sub-list).</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "iter", "f:('a -> unit) -> 'a list -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.iter&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> in turn to\n   <code class=\"code\">a1;&nbsp;...;&nbsp;an</code>. It is equivalent to\n   <code class=\"code\"><span class=\"keyword\">begin</span>&nbsp;f&nbsp;a1;&nbsp;f&nbsp;a2;&nbsp;...;&nbsp;f&nbsp;an;&nbsp;()&nbsp;<span class=\"keyword\">end</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iteri", "f:(int -> 'a -> unit) -> 'a list -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALiter\"><code class=\"code\"><span class=\"constructor\">List</span>.iter</code></a>, but the function is applied to the index of\n   the element as first argument (counting from 0), and the element\n   itself as second argument.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "f:('a -> 'b) -> 'a list -> 'b list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.map&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> to <code class=\"code\">a1,&nbsp;...,&nbsp;an</code>,\n   and builds the list <code class=\"code\">[f&nbsp;a1;&nbsp;...;&nbsp;f&nbsp;an]</code>\n   with the results returned by <code class=\"code\">f</code>.  Not tail-recursive.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mapi", "f:(int -> 'a -> 'b) -> 'a list -> 'b list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a>, but the function is applied to the index of\n   the element as first argument (counting from 0), and the element\n   itself as second argument.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rev_map", "f:('a -> 'b) -> 'a list -> 'b list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map&nbsp;f&nbsp;l</code> gives the same result as\n   <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a><code class=\"code\">&nbsp;f&nbsp;l)</code>, but is tail-recursive and\n   more efficient.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_left", "f:('a -> 'b -> 'a) -> init:'a -> 'b list -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1)&nbsp;b2)&nbsp;...)&nbsp;bn</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_right", "f:('a -> 'b -> 'b) -> 'a list -> init:'b -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;b</code> is\n   <code class=\"code\">f&nbsp;a1&nbsp;(f&nbsp;a2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;b)&nbsp;...))</code>.  Not tail-recursive.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators on two lists",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "iter2", "f:('a -> 'b -> unit) -> 'a list -> 'b list -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.iter2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> calls in turn\n   <code class=\"code\">f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "map2", "f:('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.map2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">[f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn]</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.  Not tail-recursive.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rev_map2",
              "f:('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map2&nbsp;f&nbsp;l1&nbsp;l2</code> gives the same result as\n   <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap2\"><code class=\"code\"><span class=\"constructor\">List</span>.map2</code></a><code class=\"code\">&nbsp;f&nbsp;l1&nbsp;l2)</code>, but is tail-recursive and\n   more efficient.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_left2",
              "f:('a -> 'b -> 'c -> 'a) -> init:'a -> 'b list -> 'c list -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left2&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;[c1;&nbsp;...;&nbsp;cn]</code> is\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1&nbsp;c1)&nbsp;b2&nbsp;c2)&nbsp;...)&nbsp;bn&nbsp;cn</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_right2",
              "f:('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> init:'c -> 'c",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;c</code> is\n   <code class=\"code\">f&nbsp;a1&nbsp;b1&nbsp;(f&nbsp;a2&nbsp;b2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;bn&nbsp;c)&nbsp;...))</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.  Not tail-recursive.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "List scanning",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "for_all", "f:('a -> bool) -> 'a list -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if all elements of the list\n   satisfy the predicate <code class=\"code\">p</code>. That is, it returns\n   <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;...&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "exists", "f:('a -> bool) -> 'a list -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if at least one element of\n   the list satisfies the predicate <code class=\"code\">p</code>. That is, it returns\n   <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;...&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "for_all2",
              "f:('a -> 'b -> bool) -> 'a list -> 'b list -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALfor_all\"><code class=\"code\"><span class=\"constructor\">List</span>.for_all</code></a>, but for a two-argument predicate.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "exists2",
              "f:('a -> 'b -> bool) -> 'a list -> 'b list -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALexists\"><code class=\"code\"><span class=\"constructor\">List</span>.exists</code></a>, but for a two-argument predicate.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mem", "'a -> set:'a list -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;a&nbsp;l</code> is true if and only if <code class=\"code\">a</code> is equal\n   to an element of <code class=\"code\">l</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "memq", "'a -> set:'a list -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALmem\"><code class=\"code\"><span class=\"constructor\">List</span>.mem</code></a>, but uses physical equality instead of structural\n   equality to compare list elements.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "List searching",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "find", "f:('a -> bool) -> 'a list -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code>\n   that satisfies the predicate <code class=\"code\">p</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if there is no value that satisfies <code class=\"code\">p</code> in the\n   list <code class=\"code\">l</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find_opt", "f:('a -> bool) -> 'a list -> 'a option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code>\n   that satisfies the predicate <code class=\"code\">p</code>.\n   Returns <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no value that satisfies <code class=\"code\">p</code> in the\n   list <code class=\"code\">l</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "filter", "f:('a -> bool) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">filter&nbsp;p&nbsp;l</code> returns all the elements of the list <code class=\"code\">l</code>\n   that satisfy the predicate <code class=\"code\">p</code>.  The order of the elements\n   in the input list is preserved.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find_all", "f:('a -> bool) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_all</code> is another name for <a href=\"List.html#VALfilter\"><code class=\"code\"><span class=\"constructor\">List</span>.filter</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "partition", "f:('a -> bool) -> 'a list -> 'a list * 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">partition&nbsp;p&nbsp;l</code> returns a pair of lists <code class=\"code\">(l1,&nbsp;l2)</code>, where\n   <code class=\"code\">l1</code> is the list of all the elements of <code class=\"code\">l</code> that\n   satisfy the predicate <code class=\"code\">p</code>, and <code class=\"code\">l2</code> is the list of all the\n   elements of <code class=\"code\">l</code> that do not satisfy <code class=\"code\">p</code>.\n   The order of the elements in the input list is preserved.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Association lists",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "assoc", "'a -> ('a * 'b) list -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">assoc&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of\n   pairs <code class=\"code\">l</code>. That is,\n   <code class=\"code\">assoc&nbsp;a&nbsp;[&nbsp;...;&nbsp;(a,b);&nbsp;...]&nbsp;=&nbsp;b</code>\n   if <code class=\"code\">(a,b)</code> is the leftmost binding of <code class=\"code\">a</code> in list <code class=\"code\">l</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if there is no value associated with <code class=\"code\">a</code> in the\n   list <code class=\"code\">l</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "assoc_opt", "'a -> ('a * 'b) list -> 'b option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">assoc_opt&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of\n    pairs <code class=\"code\">l</code>. That is,\n    <code class=\"code\">assoc&nbsp;a&nbsp;[&nbsp;...;&nbsp;(a,b);&nbsp;...]&nbsp;=&nbsp;b</code>\n    if <code class=\"code\">(a,b)</code> is the leftmost binding of <code class=\"code\">a</code> in list <code class=\"code\">l</code>.\n    Returns <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no value associated with <code class=\"code\">a</code> in the\n    list <code class=\"code\">l</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "assq", "'a -> ('a * 'b) list -> 'b",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but uses physical equality instead of\n   structural equality to compare keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "assq_opt", "'a -> ('a * 'b) list -> 'b option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALassoc_opt\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc_opt</code></a>, but uses physical equality instead of\n   structural equality to compare keys.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "mem_assoc", "'a -> map:('a * 'b) list -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but simply return true if a binding exists,\n   and false if no bindings exist for the given key.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mem_assq", "'a -> map:('a * 'b) list -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALmem_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.mem_assoc</code></a>, but uses physical equality instead of\n   structural equality to compare keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "remove_assoc", "'a -> ('a * 'b) list -> ('a * 'b) list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">remove_assoc&nbsp;a&nbsp;l</code> returns the list of\n   pairs <code class=\"code\">l</code> without the first pair with key <code class=\"code\">a</code>, if any.\n   Not tail-recursive.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "remove_assq", "'a -> ('a * 'b) list -> ('a * 'b) list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALremove_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.remove_assoc</code></a>, but uses physical equality instead\n   of structural equality to compare keys.  Not tail-recursive.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Lists of pairs",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "split", "('a * 'b) list -> 'a list * 'b list",
              "\n<div class=\"info-desc\">\n<p>Transform a list of pairs into a pair of lists:\n   <code class=\"code\">split&nbsp;[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code> is <code class=\"code\">([a1;&nbsp;...;&nbsp;an],&nbsp;[b1;&nbsp;...;&nbsp;bn])</code>.\n   Not tail-recursive.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "combine", "'a list -> 'b list -> ('a * 'b) list",
              "\n<div class=\"info-desc\">\n<p>Transform a pair of lists into a list of pairs:\n   <code class=\"code\">combine&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists\n   have different lengths.  Not tail-recursive.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Sorting",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "sort", "cmp:('a -> 'a -> int) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Sort a list in increasing order according to a comparison\n   function.  The comparison function must return 0 if its arguments\n   compare as equal, a positive integer if the first is greater,\n   and a negative integer if the first is smaller (see Array.sort for\n   a complete specification).  For example,\n   <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a> is a suitable comparison function.\n   The resulting list is sorted in increasing order.\n   <code class=\"code\"><span class=\"constructor\">List</span>.sort</code> is guaranteed to run in constant heap space\n   (in addition to the size of the result list) and logarithmic\n   stack space.</p>\n\n<p>The current implementation uses Merge Sort. It runs in constant\n   heap space and logarithmic stack space.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stable_sort", "cmp:('a -> 'a -> int) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but the sorting algorithm is guaranteed to\n   be stable (i.e. elements that compare equal are kept in their\n   original order) .</p>\n\n<p>The current implementation uses Merge Sort. It runs in constant\n   heap space and logarithmic stack space.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fast_sort", "cmp:('a -> 'a -> int) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a> or <a href=\"List.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">List</span>.stable_sort</code></a>, whichever is\n    faster on typical input.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sort_uniq", "cmp:('a -> 'a -> int) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but also remove duplicates.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "merge",
              "cmp:('a -> 'a -> int) -> 'a list -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Merge two lists:\n    Assuming that <code class=\"code\">l1</code> and <code class=\"code\">l2</code> are sorted according to the\n    comparison function <code class=\"code\">cmp</code>, <code class=\"code\">merge&nbsp;cmp&nbsp;l1&nbsp;l2</code> will return a\n    sorted list containing all the elements of <code class=\"code\">l1</code> and <code class=\"code\">l2</code>.\n    If several elements compare equal, the elements of <code class=\"code\">l1</code> will be\n    before the elements of <code class=\"code\">l2</code>.\n    Not tail-recursive (sum of the lengths of the arguments).</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "'a list -> 'a Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the list</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "'a Seq.t -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Create a list from the iterator</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Location",
    "module_info":
      "\n<p>Source code locations (ranges of positions), used in parsetree.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", "= Warnings.loc = {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.loc_start\">loc_start</span>&nbsp;: <code class=\"type\"><a href=\"Lexing.html#TYPEposition\">Lexing.position</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.loc_end\">loc_end</span>&nbsp;: <code class=\"type\"><a href=\"Lexing.html#TYPEposition\">Lexing.position</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.loc_ghost\">loc_ghost</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n\n</tr></tbody>",
              "Note on the use of Lexing.position in this module.\n   If <code class=\"code\">pos_fname&nbsp;=&nbsp;<span class=\"string\">\"\"</span></code>, then use <code class=\"code\">!input_name</code> instead.\n   If <code class=\"code\">pos_lnum&nbsp;=&nbsp;-1</code>, then <code class=\"code\">pos_bol&nbsp;=&nbsp;0</code>. Use <code class=\"code\">pos_cnum</code> and\n     re-parse the file to get the line and character numbers.\n   Else all fields are correct."
            ]
          ],
          [
            "Function",
            [
              "none", "t",
              "\n<div class=\"info-desc\">\n<p>An arbitrary value of type <code class=\"code\">t</code>; describes an empty ghost range.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "in_file", "string -> t",
              "\n<div class=\"info-desc\">\n<p>Return an empty ghost range located in a given file.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "init", "Lexing.lexbuf -> string -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the file name and line number of the <code class=\"code\">lexbuf</code> to be the start\n    of the named file.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "curr", "Lexing.lexbuf -> t",
              "\n<div class=\"info-desc\">\n<p>Get the location of the current token from the <code class=\"code\">lexbuf</code>.</p>\n</div>\n"
            ]
          ],
          [ "Function", [ "symbol_rloc", "unit -> t", null ] ],
          [ "Function", [ "symbol_gloc", "unit -> t", null ] ],
          [
            "Function",
            [
              "rhs_loc", "int -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rhs_loc&nbsp;n</code> returns the location of the symbol at position <code class=\"code\">n</code>, starting\n  at 1, in the current parser rule.</p>\n</div>\n"
            ]
          ],
          [ "Function", [ "input_name", "string ref", null ] ],
          [
            "Function",
            [ "input_lexbuf", "Lexing.lexbuf option ref", null ]
          ],
          [
            "Function",
            [ "get_pos_info", "Lexing.position -> string * int * int", null ]
          ],
          [
            "Function",
            [ "print_loc", "Format.formatter -> t -> unit", null ]
          ],
          [
            "Function",
            [ "print_error_prefix", "Format.formatter -> unit", null ]
          ],
          [
            "Function",
            [ "print_error", "Format.formatter -> t -> unit", null ]
          ],
          [
            "Function",
            [
              "print_error_cur_file", "Format.formatter -> unit -> unit",
              null
            ]
          ],
          [
            "Function",
            [
              "print_warning", "t -> Format.formatter -> Warnings.t -> unit",
              null
            ]
          ],
          [
            "Function",
            [ "formatter_for_warnings", "Format.formatter ref", null ]
          ],
          [
            "Function",
            [ "prerr_warning", "t -> Warnings.t -> unit", null ]
          ],
          [ "Function", [ "echo_eof", "unit -> unit", null ] ],
          [ "Function", [ "reset", "unit -> unit", null ] ],
          [
            "Function",
            [ "default_printer", "Format.formatter -> t -> unit", null ]
          ],
          [
            "Function",
            [ "printer", "( Format.formatter -> t -> unit) ref", null ]
          ],
          [
            "Function",
            [
              "warning_printer",
              "( t -> Format.formatter -> Warnings.t -> unit) ref",
              "\n<div class=\"info-desc\">\n<p>Hook for intercepting warnings.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "default_warning_printer",
              "t -> Format.formatter -> Warnings.t -> unit",
              "\n<div class=\"info-desc\">\n<p>Original warning printer for use in hooks.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "highlight_locations", "Format.formatter -> t list -> bool",
              null
            ]
          ],
          [
            "Function",
            [
              "show_code_at_location",
              "Format.formatter -> Lexing.lexbuf -> t -> unit", null
            ]
          ],
          [
            "Typevariant",
            [
              "'a", "loc = {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTloc.txt\">txt</span>&nbsp;: <code class=\"type\">'a</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTloc.loc\">loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">t</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Function", [ "mknoloc", "'a -> 'a loc", null ] ],
          [ "Function", [ "mkloc", "'a -> t -> 'a loc", null ] ],
          [ "Function", [ "print", "Format.formatter -> t -> unit", null ] ],
          [
            "Function",
            [ "print_compact", "Format.formatter -> t -> unit", null ]
          ],
          [
            "Function",
            [ "print_filename", "Format.formatter -> string -> unit", null ]
          ],
          [
            "Function",
            [
              "rewrite_absolute_path", "string -> string",
              "\n<div class=\"info-desc\">\n<p>rewrite absolute path to honor the BUILD_PATH_PREFIX_MAP\n        variable (https://reproducible-builds.org/specs/build-path-prefix-map/)\n        if it is set.</p>\n</div>\n"
            ]
          ],
          [ "Function", [ "absolute_path", "string -> string", null ] ],
          [
            "Function",
            [
              "show_filename", "string -> string",
              "\n<div class=\"info-desc\">\n<p>In -absname mode, return the absolute path for this filename.\n        Otherwise, returns the filename unchanged.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "absname", "bool ref", "<p>Support for located errors</p>" ]
          ],
          [
            "Typevariant",
            [
              "error", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.loc\">loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">t</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.msg\">msg</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.sub\">sub</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEerror\">error</a> list</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.if_highlight\">if_highlight</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Exception", [ "Already_displayed_error", null, null ] ],
          [ "Exception", [ "Error", "error", null ] ],
          [
            "Function",
            [
              "error",
              "?loc: t -> ?sub: error list -> ?if_highlight:string -> string -> error",
              null
            ]
          ],
          [
            "Function",
            [
              "errorf",
              "?loc: t -> ?sub: error list -> ?if_highlight:string -> ('a, Format.formatter , unit, error ) format4 -> 'a",
              null
            ]
          ],
          [
            "Function",
            [
              "raise_errorf",
              "?loc: t -> ?sub: error list -> ?if_highlight:string -> ('a, Format.formatter , unit, 'b) format4 -> 'a",
              null
            ]
          ],
          [
            "Function",
            [
              "error_of_printer",
              "t -> ( Format.formatter -> 'a -> unit) -> 'a -> error", null
            ]
          ],
          [
            "Function",
            [
              "error_of_printer_file",
              "( Format.formatter -> 'a -> unit) -> 'a -> error", null
            ]
          ],
          [
            "Function",
            [
              "error_of_exn",
              "exn -> [ `Already_displayed | `Ok of error ] option", null
            ]
          ],
          [
            "Function",
            [
              "register_error_of_exn", "(exn -> error option) -> unit",
              "\n<div class=\"info-desc\">\n<p>Each compiler module which defines a custom type of exception\n    which can surface as a user-visible error should register\n    a \"printer\" for this exception using <code class=\"code\">register_error_of_exn</code>.\n    The result of the printer is an <code class=\"code\">error</code> value containing\n    a location, a message, and optionally sub-messages (each of them\n    being located as well).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [ "report_error", "Format.formatter -> error -> unit", null ]
          ],
          [
            "Function",
            [
              "error_reporter", "( Format.formatter -> error -> unit) ref",
              "\n<div class=\"info-desc\">\n<p>Hook for intercepting error reports.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "default_error_reporter", "Format.formatter -> error -> unit",
              "\n<div class=\"info-desc\">\n<p>Original error reporter for use in hooks.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "report_exception", "Format.formatter -> exn -> unit",
              "\n<div class=\"info-desc\">\n<p>Reraise the exception if it is unknown.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "deprecated", "?def: t -> ?use: t -> t -> string -> unit", null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Longident",
    "module_info": "\n<p>Long identifiers, used in parsetree.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Lident\"><span class=\"constructor\">Lident</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Ldot\"><span class=\"constructor\">Ldot</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">t</a> * string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Lapply\"><span class=\"constructor\">Lapply</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">t</a> * <a href=\"Longident.html#TYPEt\">t</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Function", [ "flatten", "t -> string list", null ] ],
          [ "Function", [ "unflatten", "string list -> t option", null ] ],
          [ "Function", [ "last", "t -> string", null ] ],
          [ "Function", [ "parse", "string -> t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Map",
    "module_info":
      "\n<p>Association tables over ordered types.</p>\n\n<p>This module implements applicative association tables, also known as\n   finite maps or dictionaries, given a total ordering function\n   over the keys.\n   All operations over maps are purely applicative (no side-effects).\n   The implementation uses balanced binary trees, and therefore searching\n   and insertion take time logarithmic in the size of the map.</p>\n\n<p>For instance:</p>\n<pre class=\"codepre\"><code class=\"code\">     <span class=\"keyword\">module</span> <span class=\"constructor\">IntPairs</span> =\n       <span class=\"keyword\">struct</span>\n         <span class=\"keyword\">type</span> t = int * int\n         <span class=\"keyword\">let</span> compare (x0,y0) (x1,y1) =\n           <span class=\"keyword\">match</span> <span class=\"constructor\">Pervasives</span>.compare x0 x1 <span class=\"keyword\">with</span>\n               0 <span class=\"keywordsign\">-&gt;</span> <span class=\"constructor\">Pervasives</span>.compare y0 y1\n             <span class=\"keywordsign\">|</span> c <span class=\"keywordsign\">-&gt;</span> c\n       <span class=\"keyword\">end</span>\n\n     <span class=\"keyword\">module</span> <span class=\"constructor\">PairsMap</span> = <span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span>(<span class=\"constructor\">IntPairs</span>)\n\n     <span class=\"keyword\">let</span> m = <span class=\"constructor\">PairsMap</span>.(empty |&gt; add (0,1) <span class=\"string\">\"hello\"</span> |&gt; add (1,0) <span class=\"string\">\"world\"</span>)\n   </code></pre>\n<p>This creates a new module <code class=\"code\"><span class=\"constructor\">PairsMap</span></code>, with a new type <code class=\"code\"><span class=\"keywordsign\">'</span>a&nbsp;<span class=\"constructor\">PairsMap</span>.t</code>\n   of maps from <code class=\"code\">int&nbsp;*&nbsp;int</code> to <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>. In this example, <code class=\"code\">m</code> contains <code class=\"code\">string</code>\n   values so its type is <code class=\"code\">string&nbsp;<span class=\"constructor\">PairsMap</span>.t</code>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Moduletype",
            [
              "OrderedType",
              "\n<p>Input signature of the functor <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n\n"
            ]
          ],
          [
            "Moduletype",
            [
              "S",
              "\n<p>Output signature of the functor <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n\n"
            ]
          ],
          [
            "Module",
            [
              "Make",
              "\n<p>Functor building an implementation of the map structure\n   given a totally ordered type.</p>\n\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Map.Make",
    "module_info":
      "\n<div class=\"info-desc\">\n<p>Functor building an implementation of the map structure\n   given a totally ordered type.</p>\n</div>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "key", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the map keys.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "+'a", "t", null,
              "\n<div class=\"info-desc\">\n<p>The type of maps from type <code class=\"code\">key</code> to type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "empty", "'a t",
              "\n<div class=\"info-desc\">\n<p>The empty map.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "is_empty", "'a t -> bool",
              "\n<div class=\"info-desc\">\n<p>Test whether a map is empty or not.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mem", "key -> 'a t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;x&nbsp;m</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">m</code> contains a binding for <code class=\"code\">x</code>,\n       and <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "key -> 'a -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add&nbsp;x&nbsp;y&nbsp;m</code> returns a map containing the same bindings as\n       <code class=\"code\">m</code>, plus a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code>. If <code class=\"code\">x</code> was already bound\n       in <code class=\"code\">m</code> to a value that is physically equal to <code class=\"code\">y</code>,\n       <code class=\"code\">m</code> is returned unchanged (the result of the function is\n       then physically equal to <code class=\"code\">m</code>). Otherwise, the previous binding\n       of <code class=\"code\">x</code> in <code class=\"code\">m</code> disappears.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "update", "key -> ('a option -> 'a option) -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">update&nbsp;x&nbsp;f&nbsp;m</code> returns a map containing the same bindings as\n        <code class=\"code\">m</code>, except for the binding of <code class=\"code\">x</code>. Depending on the value of\n        <code class=\"code\">y</code> where <code class=\"code\">y</code> is <code class=\"code\">f&nbsp;(find_opt&nbsp;x&nbsp;m)</code>, the binding of <code class=\"code\">x</code> is\n        added, removed or updated. If <code class=\"code\">y</code> is <code class=\"code\"><span class=\"constructor\">None</span></code>, the binding is\n        removed if it exists; otherwise, if <code class=\"code\">y</code> is <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;z</code> then <code class=\"code\">x</code>\n        is associated to <code class=\"code\">z</code> in the resulting map.  If <code class=\"code\">x</code> was already\n        bound in <code class=\"code\">m</code> to a value that is physically equal to <code class=\"code\">z</code>, <code class=\"code\">m</code>\n        is returned unchanged (the result of the function is then\n        physically equal to <code class=\"code\">m</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "singleton", "key -> 'a -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">singleton&nbsp;x&nbsp;y</code> returns the one-element map that contains a binding <code class=\"code\">y</code>\n        for <code class=\"code\">x</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "remove", "key -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">remove&nbsp;x&nbsp;m</code> returns a map containing the same bindings as\n       <code class=\"code\">m</code>, except for <code class=\"code\">x</code> which is unbound in the returned map.\n       If <code class=\"code\">x</code> was not in <code class=\"code\">m</code>, <code class=\"code\">m</code> is returned unchanged\n       (the result of the function is then physically equal to <code class=\"code\">m</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "merge",
              "( key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">merge&nbsp;f&nbsp;m1&nbsp;m2</code> computes a map whose keys is a subset of keys of <code class=\"code\">m1</code>\n        and of <code class=\"code\">m2</code>. The presence of each such binding, and the corresponding\n        value, is determined with the function <code class=\"code\">f</code>.\n        In terms of the <code class=\"code\">find_opt</code> operation, we have\n        <code class=\"code\">find_opt&nbsp;x&nbsp;(merge&nbsp;f&nbsp;m1&nbsp;m2)&nbsp;=&nbsp;f&nbsp;(find_opt&nbsp;x&nbsp;m1)&nbsp;(find_opt&nbsp;x&nbsp;m2)</code>\n        for any key <code class=\"code\">x</code>, provided that <code class=\"code\">f&nbsp;<span class=\"constructor\">None</span>&nbsp;<span class=\"constructor\">None</span>&nbsp;=&nbsp;<span class=\"constructor\">None</span></code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "union",
              "( key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">union&nbsp;f&nbsp;m1&nbsp;m2</code> computes a map whose keys is the union of keys\n        of <code class=\"code\">m1</code> and of <code class=\"code\">m2</code>.  When the same binding is defined in both\n        arguments, the function <code class=\"code\">f</code> is used to combine them.\n        This is a special case of <code class=\"code\">merge</code>: <code class=\"code\">union&nbsp;f&nbsp;m1&nbsp;m2</code> is equivalent\n        to <code class=\"code\">merge&nbsp;f'&nbsp;m1&nbsp;m2</code>, where</p>\n<ul>\n<li><code class=\"code\">f'&nbsp;<span class=\"constructor\">None</span>&nbsp;<span class=\"constructor\">None</span>&nbsp;=&nbsp;<span class=\"constructor\">None</span></code></li>\n<li><code class=\"code\">f'&nbsp;(<span class=\"constructor\">Some</span>&nbsp;v)&nbsp;<span class=\"constructor\">None</span>&nbsp;=&nbsp;<span class=\"constructor\">Some</span>&nbsp;v</code></li>\n<li><code class=\"code\">f'&nbsp;<span class=\"constructor\">None</span>&nbsp;(<span class=\"constructor\">Some</span>&nbsp;v)&nbsp;=&nbsp;<span class=\"constructor\">Some</span>&nbsp;v</code></li>\n<li><code class=\"code\">f'&nbsp;(<span class=\"constructor\">Some</span>&nbsp;v1)&nbsp;(<span class=\"constructor\">Some</span>&nbsp;v2)&nbsp;=&nbsp;f&nbsp;v1&nbsp;v2</code></li>\n</ul>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "('a -> 'a -> int) -> 'a t -> 'a t -> int",
              "\n<div class=\"info-desc\">\n<p>Total ordering between maps.  The first argument is a total ordering\n        used to compare data associated with equal keys in the two maps.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "('a -> 'a -> bool) -> 'a t -> 'a t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">equal&nbsp;cmp&nbsp;m1&nbsp;m2</code> tests whether the maps <code class=\"code\">m1</code> and <code class=\"code\">m2</code> are\n       equal, that is, contain equal keys and associate them with\n       equal data.  <code class=\"code\">cmp</code> is the equality predicate used to compare\n       the data associated with the keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "( key -> 'a -> unit) -> 'a t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;m</code> applies <code class=\"code\">f</code> to all bindings in map <code class=\"code\">m</code>.\n       <code class=\"code\">f</code> receives the key as first argument, and the associated value\n       as second argument.  The bindings are passed to <code class=\"code\">f</code> in increasing\n       order with respect to the ordering over the type of the keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold", "( key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;m&nbsp;a</code> computes <code class=\"code\">(f&nbsp;kN&nbsp;dN&nbsp;...&nbsp;(f&nbsp;k1&nbsp;d1&nbsp;a)...)</code>,\n       where <code class=\"code\">k1&nbsp;...&nbsp;kN</code> are the keys of all bindings in <code class=\"code\">m</code>\n       (in increasing order), and <code class=\"code\">d1&nbsp;...&nbsp;dN</code> are the associated data.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "for_all", "( key -> 'a -> bool) -> 'a t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;m</code> checks if all the bindings of the map\n        satisfy the predicate <code class=\"code\">p</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "exists", "( key -> 'a -> bool) -> 'a t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;m</code> checks if at least one binding of the map\n        satisfies the predicate <code class=\"code\">p</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "filter", "( key -> 'a -> bool) -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">filter&nbsp;p&nbsp;m</code> returns the map with all the bindings in <code class=\"code\">m</code>\n        that satisfy predicate <code class=\"code\">p</code>. If <code class=\"code\">p</code> satisfies every binding in <code class=\"code\">m</code>,\n        <code class=\"code\">m</code> is returned unchanged (the result of the function is then\n        physically equal to <code class=\"code\">m</code>)</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "partition", "( key -> 'a -> bool) -> 'a t -> 'a t * 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">partition&nbsp;p&nbsp;m</code> returns a pair of maps <code class=\"code\">(m1,&nbsp;m2)</code>, where\n        <code class=\"code\">m1</code> contains all the bindings of <code class=\"code\">s</code> that satisfy the\n        predicate <code class=\"code\">p</code>, and <code class=\"code\">m2</code> is the map with all the bindings of\n        <code class=\"code\">s</code> that do not satisfy <code class=\"code\">p</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "cardinal", "'a t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the number of bindings of a map.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "bindings", "'a t -> ( key * 'a) list",
              "\n<div class=\"info-desc\">\n<p>Return the list of all bindings of the given map.\n       The returned list is sorted in increasing order with respect\n       to the ordering <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>, where <code class=\"code\"><span class=\"constructor\">Ord</span></code> is the argument\n       given to <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "min_binding", "'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p>Return the smallest binding of the given map\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or raise\n       <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the map is empty.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "min_binding_opt", "'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p>Return the smallest binding of the given map\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or <code class=\"code\"><span class=\"constructor\">None</span></code>\n       if the map is empty.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "max_binding", "'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Map.S.html#VALmin_binding\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.min_binding</code></a>, but returns the largest binding\n        of the given map.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "max_binding_opt", "'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Map.S.html#VALmin_binding_opt\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.min_binding_opt</code></a>, but returns the largest binding\n        of the given map.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "choose", "'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p>Return one binding of the given map, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if\n       the map is empty. Which binding is chosen is unspecified,\n       but equal bindings will be chosen for equal maps.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "choose_opt", "'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p>Return one binding of the given map, or <code class=\"code\"><span class=\"constructor\">None</span></code> if\n       the map is empty. Which binding is chosen is unspecified,\n       but equal bindings will be chosen for equal maps.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "split", "key -> 'a t -> 'a t * 'a option * 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">split&nbsp;x&nbsp;m</code> returns a triple <code class=\"code\">(l,&nbsp;data,&nbsp;r)</code>, where\n          <code class=\"code\">l</code> is the map with all the bindings of <code class=\"code\">m</code> whose key\n        is strictly less than <code class=\"code\">x</code>;\n          <code class=\"code\">r</code> is the map with all the bindings of <code class=\"code\">m</code> whose key\n        is strictly greater than <code class=\"code\">x</code>;\n          <code class=\"code\">data</code> is <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">m</code> contains no binding for <code class=\"code\">x</code>,\n          or <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> if <code class=\"code\">m</code> binds <code class=\"code\">v</code> to <code class=\"code\">x</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find", "key -> 'a t -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;x&nbsp;m</code> returns the current binding of <code class=\"code\">x</code> in <code class=\"code\">m</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such binding exists.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find_opt", "key -> 'a t -> 'a option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_opt&nbsp;x&nbsp;m</code> returns <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> if the current binding of <code class=\"code\">x</code>\n        in <code class=\"code\">m</code> is <code class=\"code\">v</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such binding exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_first", "( key -> bool) -> 'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_first&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns the binding of <code class=\"code\">m</code> with the lowest key <code class=\"code\">k</code> such that <code class=\"code\">f&nbsp;k</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such key exists.</p>\n\n<p>For example, <code class=\"code\">find_first&nbsp;(<span class=\"keyword\">fun</span>&nbsp;k&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;<span class=\"constructor\">Ord</span>.compare&nbsp;k&nbsp;x&nbsp;&gt;=&nbsp;0)&nbsp;m</code> will return\n       the first binding <code class=\"code\">k,&nbsp;v</code> of <code class=\"code\">m</code> where <code class=\"code\"><span class=\"constructor\">Ord</span>.compare&nbsp;k&nbsp;x&nbsp;&gt;=&nbsp;0</code>\n       (intuitively: <code class=\"code\">k&nbsp;&gt;=&nbsp;x</code>), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">x</code> is greater than any\n       element of <code class=\"code\">m</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_first_opt",
              "( key -> bool) -> 'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_first_opt&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns an option containing the binding of <code class=\"code\">m</code> with the lowest key <code class=\"code\">k</code>\n       such that <code class=\"code\">f&nbsp;k</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such key exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_last", "( key -> bool) -> 'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_last&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns the binding of <code class=\"code\">m</code> with the highest key <code class=\"code\">k</code> such that <code class=\"code\">f&nbsp;k</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such key exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_last_opt",
              "( key -> bool) -> 'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_last_opt&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns an option containing the binding of <code class=\"code\">m</code> with the highest key <code class=\"code\">k</code>\n       such that <code class=\"code\">f&nbsp;k</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such key exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "('a -> 'b) -> 'a t -> 'b t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">map&nbsp;f&nbsp;m</code> returns a map with same domain as <code class=\"code\">m</code>, where the\n       associated value <code class=\"code\">a</code> of all bindings of <code class=\"code\">m</code> has been\n       replaced by the result of the application of <code class=\"code\">f</code> to <code class=\"code\">a</code>.\n       The bindings are passed to <code class=\"code\">f</code> in increasing order\n       with respect to the ordering over the type of the keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mapi", "( key -> 'a -> 'b) -> 'a t -> 'b t",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Map.S.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.map</code></a>, but the function receives as arguments both the\n       key and the associated value for each binding of the map.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "'a t -> ( key * 'a) Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the whole map, in ascending order</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq_from", "key -> 'a t -> ( key * 'a) Seq.t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">to_seq_from&nbsp;k&nbsp;m</code> iterates on a subset of the bindings of <code class=\"code\">m</code>,\n        in ascending order, from key <code class=\"code\">k</code> or above.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_seq", "( key * 'a) Seq.t -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p>Add the given bindings to the map, in order.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "( key * 'a) Seq.t -> 'a t",
              "\n<div class=\"info-desc\">\n<p>Build a map from the given bindings</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMake\"><span class=\"keyword\">module</span> Make</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">Ord</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"Map.OrderedType.html\">OrderedType</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"Map.S.html\">S</a></code><code class=\"type\">  with type key = Ord.t</code></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>Ord</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"Map.OrderedType.html\">OrderedType</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "Map.OrderedType",
    "module_info":
      "\n<p>Input signature of the functor <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the map keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>A total ordering function over the keys.\n          This is a two-argument function <code class=\"code\">f</code> such that\n          <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is zero if the keys <code class=\"code\">e1</code> and <code class=\"code\">e2</code> are equal,\n          <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is strictly negative if <code class=\"code\">e1</code> is smaller than <code class=\"code\">e2</code>,\n          and <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is strictly positive if <code class=\"code\">e1</code> is greater than <code class=\"code\">e2</code>.\n          Example: a suitable ordering function is the generic structural\n          comparison function <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Map.S",
    "module_info":
      "\n<p>Output signature of the functor <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "key", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the map keys.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "+'a", "t", null,
              "\n<div class=\"info-desc\">\n<p>The type of maps from type <code class=\"code\">key</code> to type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "empty", "'a t",
              "\n<div class=\"info-desc\">\n<p>The empty map.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "is_empty", "'a t -> bool",
              "\n<div class=\"info-desc\">\n<p>Test whether a map is empty or not.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mem", "key -> 'a t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;x&nbsp;m</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">m</code> contains a binding for <code class=\"code\">x</code>,\n       and <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "key -> 'a -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add&nbsp;x&nbsp;y&nbsp;m</code> returns a map containing the same bindings as\n       <code class=\"code\">m</code>, plus a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code>. If <code class=\"code\">x</code> was already bound\n       in <code class=\"code\">m</code> to a value that is physically equal to <code class=\"code\">y</code>,\n       <code class=\"code\">m</code> is returned unchanged (the result of the function is\n       then physically equal to <code class=\"code\">m</code>). Otherwise, the previous binding\n       of <code class=\"code\">x</code> in <code class=\"code\">m</code> disappears.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "update", "key -> ('a option -> 'a option) -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">update&nbsp;x&nbsp;f&nbsp;m</code> returns a map containing the same bindings as\n        <code class=\"code\">m</code>, except for the binding of <code class=\"code\">x</code>. Depending on the value of\n        <code class=\"code\">y</code> where <code class=\"code\">y</code> is <code class=\"code\">f&nbsp;(find_opt&nbsp;x&nbsp;m)</code>, the binding of <code class=\"code\">x</code> is\n        added, removed or updated. If <code class=\"code\">y</code> is <code class=\"code\"><span class=\"constructor\">None</span></code>, the binding is\n        removed if it exists; otherwise, if <code class=\"code\">y</code> is <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;z</code> then <code class=\"code\">x</code>\n        is associated to <code class=\"code\">z</code> in the resulting map.  If <code class=\"code\">x</code> was already\n        bound in <code class=\"code\">m</code> to a value that is physically equal to <code class=\"code\">z</code>, <code class=\"code\">m</code>\n        is returned unchanged (the result of the function is then\n        physically equal to <code class=\"code\">m</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "singleton", "key -> 'a -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">singleton&nbsp;x&nbsp;y</code> returns the one-element map that contains a binding <code class=\"code\">y</code>\n        for <code class=\"code\">x</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "remove", "key -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">remove&nbsp;x&nbsp;m</code> returns a map containing the same bindings as\n       <code class=\"code\">m</code>, except for <code class=\"code\">x</code> which is unbound in the returned map.\n       If <code class=\"code\">x</code> was not in <code class=\"code\">m</code>, <code class=\"code\">m</code> is returned unchanged\n       (the result of the function is then physically equal to <code class=\"code\">m</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "merge",
              "( key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">merge&nbsp;f&nbsp;m1&nbsp;m2</code> computes a map whose keys is a subset of keys of <code class=\"code\">m1</code>\n        and of <code class=\"code\">m2</code>. The presence of each such binding, and the corresponding\n        value, is determined with the function <code class=\"code\">f</code>.\n        In terms of the <code class=\"code\">find_opt</code> operation, we have\n        <code class=\"code\">find_opt&nbsp;x&nbsp;(merge&nbsp;f&nbsp;m1&nbsp;m2)&nbsp;=&nbsp;f&nbsp;(find_opt&nbsp;x&nbsp;m1)&nbsp;(find_opt&nbsp;x&nbsp;m2)</code>\n        for any key <code class=\"code\">x</code>, provided that <code class=\"code\">f&nbsp;<span class=\"constructor\">None</span>&nbsp;<span class=\"constructor\">None</span>&nbsp;=&nbsp;<span class=\"constructor\">None</span></code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "union",
              "( key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">union&nbsp;f&nbsp;m1&nbsp;m2</code> computes a map whose keys is the union of keys\n        of <code class=\"code\">m1</code> and of <code class=\"code\">m2</code>.  When the same binding is defined in both\n        arguments, the function <code class=\"code\">f</code> is used to combine them.\n        This is a special case of <code class=\"code\">merge</code>: <code class=\"code\">union&nbsp;f&nbsp;m1&nbsp;m2</code> is equivalent\n        to <code class=\"code\">merge&nbsp;f'&nbsp;m1&nbsp;m2</code>, where</p>\n<ul>\n<li><code class=\"code\">f'&nbsp;<span class=\"constructor\">None</span>&nbsp;<span class=\"constructor\">None</span>&nbsp;=&nbsp;<span class=\"constructor\">None</span></code></li>\n<li><code class=\"code\">f'&nbsp;(<span class=\"constructor\">Some</span>&nbsp;v)&nbsp;<span class=\"constructor\">None</span>&nbsp;=&nbsp;<span class=\"constructor\">Some</span>&nbsp;v</code></li>\n<li><code class=\"code\">f'&nbsp;<span class=\"constructor\">None</span>&nbsp;(<span class=\"constructor\">Some</span>&nbsp;v)&nbsp;=&nbsp;<span class=\"constructor\">Some</span>&nbsp;v</code></li>\n<li><code class=\"code\">f'&nbsp;(<span class=\"constructor\">Some</span>&nbsp;v1)&nbsp;(<span class=\"constructor\">Some</span>&nbsp;v2)&nbsp;=&nbsp;f&nbsp;v1&nbsp;v2</code></li>\n</ul>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "('a -> 'a -> int) -> 'a t -> 'a t -> int",
              "\n<div class=\"info-desc\">\n<p>Total ordering between maps.  The first argument is a total ordering\n        used to compare data associated with equal keys in the two maps.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "('a -> 'a -> bool) -> 'a t -> 'a t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">equal&nbsp;cmp&nbsp;m1&nbsp;m2</code> tests whether the maps <code class=\"code\">m1</code> and <code class=\"code\">m2</code> are\n       equal, that is, contain equal keys and associate them with\n       equal data.  <code class=\"code\">cmp</code> is the equality predicate used to compare\n       the data associated with the keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "( key -> 'a -> unit) -> 'a t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;m</code> applies <code class=\"code\">f</code> to all bindings in map <code class=\"code\">m</code>.\n       <code class=\"code\">f</code> receives the key as first argument, and the associated value\n       as second argument.  The bindings are passed to <code class=\"code\">f</code> in increasing\n       order with respect to the ordering over the type of the keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold", "( key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;m&nbsp;a</code> computes <code class=\"code\">(f&nbsp;kN&nbsp;dN&nbsp;...&nbsp;(f&nbsp;k1&nbsp;d1&nbsp;a)...)</code>,\n       where <code class=\"code\">k1&nbsp;...&nbsp;kN</code> are the keys of all bindings in <code class=\"code\">m</code>\n       (in increasing order), and <code class=\"code\">d1&nbsp;...&nbsp;dN</code> are the associated data.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "for_all", "( key -> 'a -> bool) -> 'a t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;m</code> checks if all the bindings of the map\n        satisfy the predicate <code class=\"code\">p</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "exists", "( key -> 'a -> bool) -> 'a t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;m</code> checks if at least one binding of the map\n        satisfies the predicate <code class=\"code\">p</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "filter", "( key -> 'a -> bool) -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">filter&nbsp;p&nbsp;m</code> returns the map with all the bindings in <code class=\"code\">m</code>\n        that satisfy predicate <code class=\"code\">p</code>. If <code class=\"code\">p</code> satisfies every binding in <code class=\"code\">m</code>,\n        <code class=\"code\">m</code> is returned unchanged (the result of the function is then\n        physically equal to <code class=\"code\">m</code>)</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "partition", "( key -> 'a -> bool) -> 'a t -> 'a t * 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">partition&nbsp;p&nbsp;m</code> returns a pair of maps <code class=\"code\">(m1,&nbsp;m2)</code>, where\n        <code class=\"code\">m1</code> contains all the bindings of <code class=\"code\">s</code> that satisfy the\n        predicate <code class=\"code\">p</code>, and <code class=\"code\">m2</code> is the map with all the bindings of\n        <code class=\"code\">s</code> that do not satisfy <code class=\"code\">p</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "cardinal", "'a t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the number of bindings of a map.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "bindings", "'a t -> ( key * 'a) list",
              "\n<div class=\"info-desc\">\n<p>Return the list of all bindings of the given map.\n       The returned list is sorted in increasing order with respect\n       to the ordering <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>, where <code class=\"code\"><span class=\"constructor\">Ord</span></code> is the argument\n       given to <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "min_binding", "'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p>Return the smallest binding of the given map\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or raise\n       <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the map is empty.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "min_binding_opt", "'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p>Return the smallest binding of the given map\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or <code class=\"code\"><span class=\"constructor\">None</span></code>\n       if the map is empty.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "max_binding", "'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Map.S.html#VALmin_binding\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.min_binding</code></a>, but returns the largest binding\n        of the given map.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "max_binding_opt", "'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Map.S.html#VALmin_binding_opt\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.min_binding_opt</code></a>, but returns the largest binding\n        of the given map.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "choose", "'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p>Return one binding of the given map, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if\n       the map is empty. Which binding is chosen is unspecified,\n       but equal bindings will be chosen for equal maps.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "choose_opt", "'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p>Return one binding of the given map, or <code class=\"code\"><span class=\"constructor\">None</span></code> if\n       the map is empty. Which binding is chosen is unspecified,\n       but equal bindings will be chosen for equal maps.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "split", "key -> 'a t -> 'a t * 'a option * 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">split&nbsp;x&nbsp;m</code> returns a triple <code class=\"code\">(l,&nbsp;data,&nbsp;r)</code>, where\n          <code class=\"code\">l</code> is the map with all the bindings of <code class=\"code\">m</code> whose key\n        is strictly less than <code class=\"code\">x</code>;\n          <code class=\"code\">r</code> is the map with all the bindings of <code class=\"code\">m</code> whose key\n        is strictly greater than <code class=\"code\">x</code>;\n          <code class=\"code\">data</code> is <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">m</code> contains no binding for <code class=\"code\">x</code>,\n          or <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> if <code class=\"code\">m</code> binds <code class=\"code\">v</code> to <code class=\"code\">x</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find", "key -> 'a t -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;x&nbsp;m</code> returns the current binding of <code class=\"code\">x</code> in <code class=\"code\">m</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such binding exists.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find_opt", "key -> 'a t -> 'a option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_opt&nbsp;x&nbsp;m</code> returns <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> if the current binding of <code class=\"code\">x</code>\n        in <code class=\"code\">m</code> is <code class=\"code\">v</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such binding exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_first", "( key -> bool) -> 'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_first&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns the binding of <code class=\"code\">m</code> with the lowest key <code class=\"code\">k</code> such that <code class=\"code\">f&nbsp;k</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such key exists.</p>\n\n<p>For example, <code class=\"code\">find_first&nbsp;(<span class=\"keyword\">fun</span>&nbsp;k&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;<span class=\"constructor\">Ord</span>.compare&nbsp;k&nbsp;x&nbsp;&gt;=&nbsp;0)&nbsp;m</code> will return\n       the first binding <code class=\"code\">k,&nbsp;v</code> of <code class=\"code\">m</code> where <code class=\"code\"><span class=\"constructor\">Ord</span>.compare&nbsp;k&nbsp;x&nbsp;&gt;=&nbsp;0</code>\n       (intuitively: <code class=\"code\">k&nbsp;&gt;=&nbsp;x</code>), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">x</code> is greater than any\n       element of <code class=\"code\">m</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_first_opt",
              "( key -> bool) -> 'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_first_opt&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns an option containing the binding of <code class=\"code\">m</code> with the lowest key <code class=\"code\">k</code>\n       such that <code class=\"code\">f&nbsp;k</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such key exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_last", "( key -> bool) -> 'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_last&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns the binding of <code class=\"code\">m</code> with the highest key <code class=\"code\">k</code> such that <code class=\"code\">f&nbsp;k</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such key exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_last_opt",
              "( key -> bool) -> 'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_last_opt&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns an option containing the binding of <code class=\"code\">m</code> with the highest key <code class=\"code\">k</code>\n       such that <code class=\"code\">f&nbsp;k</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such key exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "('a -> 'b) -> 'a t -> 'b t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">map&nbsp;f&nbsp;m</code> returns a map with same domain as <code class=\"code\">m</code>, where the\n       associated value <code class=\"code\">a</code> of all bindings of <code class=\"code\">m</code> has been\n       replaced by the result of the application of <code class=\"code\">f</code> to <code class=\"code\">a</code>.\n       The bindings are passed to <code class=\"code\">f</code> in increasing order\n       with respect to the ordering over the type of the keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mapi", "( key -> 'a -> 'b) -> 'a t -> 'b t",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Map.S.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.map</code></a>, but the function receives as arguments both the\n       key and the associated value for each binding of the map.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "'a t -> ( key * 'a) Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the whole map, in ascending order</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq_from", "key -> 'a t -> ( key * 'a) Seq.t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">to_seq_from&nbsp;k&nbsp;m</code> iterates on a subset of the bindings of <code class=\"code\">m</code>,\n        in ascending order, from key <code class=\"code\">k</code> or above.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_seq", "( key * 'a) Seq.t -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p>Add the given bindings to the map, in order.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "( key * 'a) Seq.t -> 'a t",
              "\n<div class=\"info-desc\">\n<p>Build a map from the given bindings</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Marshal",
    "module_info":
      "\n<p>Marshaling of data structures.</p>\n\n<p>This module provides functions to encode arbitrary data structures\n   as sequences of bytes, which can then be written on a file or\n   sent over a pipe or network connection.  The bytes can then\n   be read back later, possibly in another process, and decoded back\n   into a data structure. The format for the byte sequences\n   is compatible across all machines for a given version of OCaml.</p>\n\n<p>Warning: marshaling is currently not type-safe. The type\n   of marshaled data is not transmitted along the value of the data,\n   making it impossible to check that the data read back possesses the\n   type expected by the context. In particular, the result type of\n   the <code class=\"code\"><span class=\"constructor\">Marshal</span>.from_*</code> functions is given as <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>, but this is\n   misleading: the returned OCaml value does not possess type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>\n   for all <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>; it has one, unique type which cannot be determined\n   at compile-time.  The programmer should explicitly give the expected\n   type of the returned value, using the following syntax:</p>\n<ul>\n<li><code class=\"code\">(<span class=\"constructor\">Marshal</span>.from_channel&nbsp;chan&nbsp;:&nbsp;<span class=\"keyword\">type</span>)</code>.\n   Anything can happen at run-time if the object in the file does not\n   belong to the given type.</li>\n</ul>\n<p>Values of extensible variant types, for example exceptions (of\n   extensible type <code class=\"code\">exn</code>), returned by the unmarshaller should not be\n   pattern-matched over through <code class=\"code\"><span class=\"keyword\">match</span>&nbsp;...&nbsp;<span class=\"keyword\">with</span></code> or <code class=\"code\"><span class=\"keyword\">try</span>&nbsp;...&nbsp;<span class=\"keyword\">with</span></code>,\n   because unmarshalling does not preserve the information required for\n   matching their constructors. Structural equalities with other\n   extensible variant values does not work either.  Most other uses such\n   as Printexc.to_string, will still work as expected.</p>\n\n<p>The representation of marshaled values is not human-readable,\n   and uses bytes that are not printable characters. Therefore,\n   input and output channels used in conjunction with <code class=\"code\"><span class=\"constructor\">Marshal</span>.to_channel</code>\n   and <code class=\"code\"><span class=\"constructor\">Marshal</span>.from_channel</code> must be opened in binary mode, using e.g.\n   <code class=\"code\">open_out_bin</code> or <code class=\"code\">open_in_bin</code>; channels opened in text mode will\n   cause unmarshaling errors on platforms where text channels behave\n   differently than binary channels, e.g. Windows.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "extern_flags", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTextern_flags.No_sharing\"><span class=\"constructor\">No_sharing</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Don't preserve sharing</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTextern_flags.Closures\"><span class=\"constructor\">Closures</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Send function closures</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTextern_flags.Compat_32\"><span class=\"constructor\">Compat_32</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Ensure 32-bit compatibility</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The flags to the <code class=\"code\"><span class=\"constructor\">Marshal</span>.to_*</code> functions below.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_channel", "out_channel -> 'a -> extern_flags list -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Marshal</span>.to_channel&nbsp;chan&nbsp;v&nbsp;flags</code> writes the representation\n   of <code class=\"code\">v</code> on channel <code class=\"code\">chan</code>. The <code class=\"code\">flags</code> argument is a\n   possibly empty list of flags that governs the marshaling\n   behavior with respect to sharing, functional values, and compatibility\n   between 32- and 64-bit platforms.</p>\n\n<p>If <code class=\"code\">flags</code> does not contain <code class=\"code\"><span class=\"constructor\">Marshal</span>.<span class=\"constructor\">No_sharing</span></code>, circularities\n   and sharing inside the value <code class=\"code\">v</code> are detected and preserved\n   in the sequence of bytes produced. In particular, this\n   guarantees that marshaling always terminates. Sharing\n   between values marshaled by successive calls to\n   <code class=\"code\"><span class=\"constructor\">Marshal</span>.to_channel</code> is neither detected nor preserved, though.\n   If <code class=\"code\">flags</code> contains <code class=\"code\"><span class=\"constructor\">Marshal</span>.<span class=\"constructor\">No_sharing</span></code>, sharing is ignored.\n   This results in faster marshaling if <code class=\"code\">v</code> contains no shared\n   substructures, but may cause slower marshaling and larger\n   byte representations if <code class=\"code\">v</code> actually contains sharing,\n   or even non-termination if <code class=\"code\">v</code> contains cycles.</p>\n\n<p>If <code class=\"code\">flags</code> does not contain <code class=\"code\"><span class=\"constructor\">Marshal</span>.<span class=\"constructor\">Closures</span></code>, marshaling fails\n   when it encounters a functional value inside <code class=\"code\">v</code>: only 'pure' data\n   structures, containing neither functions nor objects, can safely be\n   transmitted between different programs. If <code class=\"code\">flags</code> contains\n   <code class=\"code\"><span class=\"constructor\">Marshal</span>.<span class=\"constructor\">Closures</span></code>, functional values will be marshaled as a the\n   position in the code of the program together with the values\n   corresponding to the free variables captured in the closure.  In\n   this case, the output of marshaling can only be read back in\n   processes that run exactly the same program, with exactly the same\n   compiled code. (This is checked at un-marshaling time, using an MD5\n   digest of the code transmitted along with the code position.)</p>\n\n<p>The exact definition of which free variables are captured in a\n   closure is not specified and can vary between bytecode and native\n   code (and according to optimization flags).  In particular, a\n   function value accessing a global reference may or may not include\n   the reference in its closure.  If it does, unmarshaling the\n   corresponding closure will create a new reference, different from\n   the global one.</p>\n\n<p>If <code class=\"code\">flags</code> contains <code class=\"code\"><span class=\"constructor\">Marshal</span>.<span class=\"constructor\">Compat_32</span></code>, marshaling fails when\n   it encounters an integer value outside the range <code class=\"code\">[-2{^30},&nbsp;2{^30}-1]</code>\n   of integers that are representable on a 32-bit platform.  This\n   ensures that marshaled data generated on a 64-bit platform can be\n   safely read back on a 32-bit platform.  If <code class=\"code\">flags</code> does not\n   contain <code class=\"code\"><span class=\"constructor\">Marshal</span>.<span class=\"constructor\">Compat_32</span></code>, integer values outside the\n   range <code class=\"code\">[-2{^30},&nbsp;2{^30}-1]</code> are marshaled, and can be read back on\n   a 64-bit platform, but will cause an error at un-marshaling time\n   when read back on a 32-bit platform.  The <code class=\"code\"><span class=\"constructor\">Mashal</span>.<span class=\"constructor\">Compat_32</span></code> flag\n   only matters when marshaling is performed on a 64-bit platform;\n   it has no effect if marshaling is performed on a 32-bit platform.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_bytes", "'a -> extern_flags list -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Marshal</span>.to_bytes&nbsp;v&nbsp;flags</code> returns a byte sequence containing\n   the representation of <code class=\"code\">v</code>.\n   The <code class=\"code\">flags</code> argument has the same meaning as for\n   <a href=\"Marshal.html#VALto_channel\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.to_channel</code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_string", "'a -> extern_flags list -> string",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">to_bytes</code> but return the result as a string instead of\n    a byte sequence.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_buffer",
              "bytes -> int -> int -> 'a -> extern_flags list -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Marshal</span>.to_buffer&nbsp;buff&nbsp;ofs&nbsp;len&nbsp;v&nbsp;flags</code> marshals the value <code class=\"code\">v</code>,\n   storing its byte representation in the sequence <code class=\"code\">buff</code>,\n   starting at index <code class=\"code\">ofs</code>, and writing at most\n   <code class=\"code\">len</code> bytes.  It returns the number of bytes\n   actually written to the sequence. If the byte representation\n   of <code class=\"code\">v</code> does not fit in <code class=\"code\">len</code> characters, the exception <code class=\"code\"><span class=\"constructor\">Failure</span></code>\n   is raised.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "from_channel", "in_channel -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Marshal</span>.from_channel&nbsp;chan</code> reads from channel <code class=\"code\">chan</code> the\n   byte representation of a structured value, as produced by\n   one of the <code class=\"code\"><span class=\"constructor\">Marshal</span>.to_*</code> functions, and reconstructs and\n   returns the corresponding value.</p>\n\n<p>It raises <code class=\"code\"><span class=\"constructor\">End_of_file</span></code> if the function has already reached the\n   end of file when starting to read from the channel, and raises\n   <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"input_value:&nbsp;truncated&nbsp;object\"</span></code> if it reaches the end\n   of file later during the unmarshalling.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "from_bytes", "bytes -> int -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Marshal</span>.from_bytes&nbsp;buff&nbsp;ofs</code> unmarshals a structured value\n   like <a href=\"Marshal.html#VALfrom_channel\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.from_channel</code></a> does, except that the byte\n   representation is not read from a channel, but taken from\n   the byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code>.\n   The byte sequence is not mutated.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "from_string", "string -> int -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">from_bytes</code> but take a string as argument instead of a\n    byte sequence.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "header_size", "int",
              "\n<div class=\"info-desc\">\n<p>The bytes representing a marshaled value are composed of\n   a fixed-size header and a variable-sized data part,\n   whose size can be determined from the header.\n   <a href=\"Marshal.html#VALheader_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.header_size</code></a> is the size, in bytes, of the header.\n   <a href=\"Marshal.html#VALdata_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.data_size</code></a><code class=\"code\">&nbsp;buff&nbsp;ofs</code> is the size, in bytes,\n   of the data part, assuming a valid header is stored in\n   <code class=\"code\">buff</code> starting at position <code class=\"code\">ofs</code>.\n   Finally, <a href=\"Marshal.html#VALtotal_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.total_size</code></a> <code class=\"code\">buff&nbsp;ofs</code> is the total size,\n   in bytes, of the marshaled value.\n   Both <a href=\"Marshal.html#VALdata_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.data_size</code></a> and <a href=\"Marshal.html#VALtotal_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.total_size</code></a> raise <code class=\"code\"><span class=\"constructor\">Failure</span></code>\n   if <code class=\"code\">buff</code>, <code class=\"code\">ofs</code> does not contain a valid header.</p>\n\n<p>To read the byte representation of a marshaled value into\n   a byte sequence, the program needs to read first\n   <a href=\"Marshal.html#VALheader_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.header_size</code></a> bytes into the sequence,\n   then determine the length of the remainder of the\n   representation using <a href=\"Marshal.html#VALdata_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.data_size</code></a>,\n   make sure the sequence is large enough to hold the remaining\n   data, then read it, and finally call <a href=\"Marshal.html#VALfrom_bytes\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.from_bytes</code></a>\n   to unmarshal the value.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "data_size", "bytes -> int -> int",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Marshal.html#VALheader_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.header_size</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "total_size", "bytes -> int -> int",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Marshal.html#VALheader_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.header_size</code></a>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Misc.Color",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "color", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcolor.Black\"><span class=\"constructor\">Black</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcolor.Red\"><span class=\"constructor\">Red</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcolor.Green\"><span class=\"constructor\">Green</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcolor.Yellow\"><span class=\"constructor\">Yellow</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcolor.Blue\"><span class=\"constructor\">Blue</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcolor.Magenta\"><span class=\"constructor\">Magenta</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcolor.Cyan\"><span class=\"constructor\">Cyan</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcolor.White\"><span class=\"constructor\">White</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "style", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstyle.FG\"><span class=\"constructor\">FG</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Misc.Color.html#TYPEcolor\">color</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstyle.BG\"><span class=\"constructor\">BG</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Misc.Color.html#TYPEcolor\">color</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstyle.Bold\"><span class=\"constructor\">Bold</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstyle.Reset\"><span class=\"constructor\">Reset</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Function", [ "ansi_of_style_l", "style list -> string", null ] ],
          [
            "Typevariant",
            [
              "styles", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstyles.error\">error</span>&nbsp;: <code class=\"type\"><a href=\"Misc.Color.html#TYPEstyle\">style</a> list</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstyles.warning\">warning</span>&nbsp;: <code class=\"type\"><a href=\"Misc.Color.html#TYPEstyle\">style</a> list</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstyles.loc\">loc</span>&nbsp;: <code class=\"type\"><a href=\"Misc.Color.html#TYPEstyle\">style</a> list</code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Function", [ "default_styles", "styles", null ] ],
          [ "Function", [ "get_styles", "unit -> styles", null ] ],
          [ "Function", [ "set_styles", "styles -> unit", null ] ],
          [
            "Typevariant",
            [
              "setting", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsetting.Auto\"><span class=\"constructor\">Auto</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsetting.Always\"><span class=\"constructor\">Always</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsetting.Never\"><span class=\"constructor\">Never</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Function", [ "setup", "setting option -> unit", null ] ],
          [
            "Function",
            [ "set_color_tag_handling", "Format.formatter -> unit", null ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Misc.HookSig",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [
            "Function",
            [
              "add_hook", "string -> ( Misc.hook_info -> t -> t ) -> unit",
              null
            ]
          ],
          [ "Function", [ "apply_hooks", "Misc.hook_info -> t -> t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Misc",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Function", [ "fatal_error", "string -> 'a", null ] ],
          [
            "Function",
            [
              "fatal_errorf",
              "('a, Format.formatter , unit, 'b) format4 -> 'a", null
            ]
          ],
          [ "Exception", [ "Fatal_error", null, null ] ],
          [
            "Function",
            [ "try_finally", "(unit -> 'a) -> (unit -> unit) -> 'a", null ]
          ],
          [
            "Function",
            [
              "map_end", "('a -> 'b) -> 'a list -> 'b list -> 'b list", null
            ]
          ],
          [
            "Function",
            [ "map_left_right", "('a -> 'b) -> 'a list -> 'b list", null ]
          ],
          [
            "Function",
            [
              "for_all2", "('a -> 'b -> bool) -> 'a list -> 'b list -> bool",
              null
            ]
          ],
          [ "Function", [ "replicate_list", "'a -> int -> 'a list", null ] ],
          [ "Function", [ "list_remove", "'a -> 'a list -> 'a list", null ] ],
          [ "Function", [ "split_last", "'a list -> 'a list * 'a", null ] ],
          [
            "Function",
            [ "may", "('a -> unit) -> 'a option -> unit", null ]
          ],
          [
            "Function",
            [ "may_map", "('a -> 'b) -> 'a option -> 'b option", null ]
          ],
          [
            "Typevariant",
            [
              "ref_and_value", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTref_and_value.R\"><span class=\"constructor\">R</span></span> <span class=\"keyword\">:</span> <code class=\"type\">'a <a href=\"Pervasives.html#TYPEref\">ref</a> * 'a</code> <span class=\"keyword\">-&gt;</span> <code class=\"type\"><a href=\"Misc.html#TYPEref_and_value\">ref_and_value</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "protect_refs", "ref_and_value list -> (unit -> 'a) -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">protect_refs&nbsp;l&nbsp;f</code> temporarily sets <code class=\"code\">r</code> to <code class=\"code\">v</code> for each <code class=\"code\"><span class=\"constructor\">R</span>&nbsp;(r,&nbsp;v)</code> in <code class=\"code\">l</code>\n    while executing <code class=\"code\">f</code>. The previous contents of the references is restored\n    even if <code class=\"code\">f</code> raises an exception.</p>\n</div>\n"
            ]
          ],
          [ "Module", [ "Stdlib", null ] ],
          [
            "Function",
            [ "find_in_path", "string list -> string -> string", null ]
          ],
          [
            "Function",
            [ "find_in_path_rel", "string list -> string -> string", null ]
          ],
          [
            "Function",
            [ "find_in_path_uncap", "string list -> string -> string", null ]
          ],
          [ "Function", [ "remove_file", "string -> unit", null ] ],
          [
            "Function",
            [ "expand_directory", "string -> string -> string", null ]
          ],
          [
            "Function",
            [
              "create_hashtable",
              "int -> ('a * 'b) list -> ('a, 'b) Hashtbl.t", null
            ]
          ],
          [
            "Function",
            [ "copy_file", "in_channel -> out_channel -> unit", null ]
          ],
          [
            "Function",
            [
              "copy_file_chunk", "in_channel -> out_channel -> int -> unit",
              null
            ]
          ],
          [ "Function", [ "string_of_file", "in_channel -> string", null ] ],
          [
            "Function",
            [
              "output_to_file_via_temporary",
              "?mode: open_flag list -> string -> (string -> out_channel -> 'a) -> 'a",
              null
            ]
          ],
          [ "Function", [ "log2", "int -> int", null ] ],
          [ "Function", [ "align", "int -> int -> int", null ] ],
          [ "Function", [ "no_overflow_add", "int -> int -> bool", null ] ],
          [ "Function", [ "no_overflow_sub", "int -> int -> bool", null ] ],
          [ "Function", [ "no_overflow_mul", "int -> int -> bool", null ] ],
          [ "Function", [ "no_overflow_lsl", "int -> int -> bool", null ] ],
          [ "Module", [ "Int_literal_converter", null ] ],
          [ "Function", [ "chop_extensions", "string -> string", null ] ],
          [
            "Function",
            [ "search_substring", "string -> string -> int -> int", null ]
          ],
          [
            "Function",
            [
              "replace_substring",
              "before:string -> after:string -> string -> string", null
            ]
          ],
          [
            "Function",
            [ "rev_split_words", "string -> string list", null ]
          ],
          [ "Function", [ "get_ref", "'a list ref -> 'a list", null ] ],
          [ "Function", [ "fst3", "'a * 'b * 'c -> 'a", null ] ],
          [ "Function", [ "snd3", "'a * 'b * 'c -> 'b", null ] ],
          [ "Function", [ "thd3", "'a * 'b * 'c -> 'c", null ] ],
          [ "Function", [ "fst4", "'a * 'b * 'c * 'd -> 'a", null ] ],
          [ "Function", [ "snd4", "'a * 'b * 'c * 'd -> 'b", null ] ],
          [ "Function", [ "thd4", "'a * 'b * 'c * 'd -> 'c", null ] ],
          [ "Function", [ "for4", "'a * 'b * 'c * 'd -> 'd", null ] ],
          [ "Module", [ "LongString", null ] ],
          [
            "Function",
            [
              "edit_distance", "string -> string -> int -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">edit_distance&nbsp;a&nbsp;b&nbsp;cutoff</code> computes the edit distance between\n    strings <code class=\"code\">a</code> and <code class=\"code\">b</code>. To help efficiency, it uses a cutoff: if the\n    distance <code class=\"code\">d</code> is smaller than <code class=\"code\">cutoff</code>, it returns <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;d</code>, else\n    <code class=\"code\"><span class=\"constructor\">None</span></code>.</p>\n\n<p>The distance algorithm currently used is Damerau-Levenshtein: it\n    computes the number of insertion, deletion, substitution of\n    letters, or swapping of adjacent letters to go from one word to the\n    other. The particular algorithm may change in the future.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "spellcheck", "string list -> string -> string list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">spellcheck&nbsp;env&nbsp;name</code> takes a list of names <code class=\"code\">env</code> that exist in\n    the current environment and an erroneous <code class=\"code\">name</code>, and returns a\n    list of suggestions taken from <code class=\"code\">env</code>, that are close enough to\n    <code class=\"code\">name</code> that it may be a typo for one of them.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "did_you_mean",
              "Format.formatter -> (unit -> string list) -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">did_you_mean&nbsp;ppf&nbsp;get_choices</code> hints that the user may have meant\n    one of the option returned by calling <code class=\"code\">get_choices</code>. It does nothing\n    if the returned list is empty.</p>\n\n<p>The <code class=\"code\">unit&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;...</code> thunking is meant to delay any potentially-slow\n    computation (typically computing edit-distance with many things\n    from the current environment) to when the hint message is to be\n    printed. You should print an understandable error message before\n    calling <code class=\"code\">did_you_mean</code>, so that users get a clear notification of\n    the failure even if producing the hint is slow.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "cut_at", "string -> char -> string * string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.cut_at&nbsp;s&nbsp;c</code> returns a pair containing the sub-string before\n   the first occurrence of <code class=\"code\">c</code> in <code class=\"code\">s</code>, and the sub-string after the\n   first occurrence of <code class=\"code\">c</code> in <code class=\"code\">s</code>.\n   <code class=\"code\"><span class=\"keyword\">let</span>&nbsp;(before,&nbsp;after)&nbsp;=&nbsp;<span class=\"constructor\">String</span>.cut_at&nbsp;s&nbsp;c&nbsp;<span class=\"keyword\">in</span><br>\n&nbsp;&nbsp;&nbsp;&nbsp;before&nbsp;^&nbsp;<span class=\"constructor\">String</span>.make&nbsp;1&nbsp;c&nbsp;^&nbsp;after</code> is the identity if <code class=\"code\">s</code> contains <code class=\"code\">c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the character does not appear in the string</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01</li>\n</ul>\n"
            ]
          ],
          [ "Module", [ "StringSet", null ] ],
          [ "Module", [ "StringMap", null ] ],
          [ "Module", [ "Color", null ] ],
          [
            "Function",
            [
              "normalise_eol", "string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">normalise_eol&nbsp;s</code> returns a fresh copy of <code class=\"code\">s</code> with any '\\r' characters\n   removed. Intended for pre-processing text which will subsequently be printed\n   on a channel which performs EOL transformations (i.e. Windows)</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "delete_eol_spaces", "string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">delete_eol_spaces&nbsp;s</code> returns a fresh copy of <code class=\"code\">s</code> with any end of\n   line spaces removed. Intended to normalize the output of the\n   toplevel for tests.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Hook machinery",
        "section_info":
          "<p>Hooks machinery:\n   <code class=\"code\">add_hook&nbsp;name&nbsp;f</code> will register a function that will be called on the\n    argument of a later call to <code class=\"code\">apply_hooks</code>. Hooks are applied in the\n    lexicographical order of their names.</p>",
        "elements": [
          [
            "Typevariant",
            [
              "hook_info", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELThook_info.sourcefile\">sourcefile</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Exception",
            [
              "HookExnWrapper", "{",
              "\n<div class=\"info-desc\">\n<p>An exception raised by a hook will be wrapped into a\n        <code class=\"code\"><span class=\"constructor\">HookExnWrapper</span></code> constructor by the hook machinery.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "raise_direct_hook_exn", "exn -> 'a",
              "\n<div class=\"info-desc\">\n<p>A hook can use <code class=\"code\">raise_unwrapped_hook_exn</code> to raise an exception that will\n      not be wrapped into a <a href=\"Misc.html#EXCEPTIONHookExnWrapper\"><code class=\"code\"><span class=\"constructor\">Misc</span>.<span class=\"constructor\">HookExnWrapper</span></code></a>.</p>\n</div>\n"
            ]
          ],
          [ "Moduletype", [ "HookSig", null ] ],
          [ "Module", [ "MakeHooks", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Misc.Int_literal_converter",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Function", [ "int", "string -> int", null ] ],
          [ "Function", [ "int32", "string -> int32", null ] ],
          [ "Function", [ "int64", "string -> int64", null ] ],
          [ "Function", [ "nativeint", "string -> nativeint", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Misc.LongString",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", "= bytes array", null, null ] ],
          [ "Function", [ "create", "int -> t", null ] ],
          [ "Function", [ "length", "t -> int", null ] ],
          [ "Function", [ "get", "t -> int -> char", null ] ],
          [ "Function", [ "set", "t -> int -> char -> unit", null ] ],
          [
            "Function",
            [ "blit", "t -> int -> t -> int -> int -> unit", null ]
          ],
          [
            "Function",
            [ "output", "out_channel -> t -> int -> int -> unit", null ]
          ],
          [
            "Function",
            [
              "unsafe_blit_to_bytes",
              "t -> int -> bytes -> int -> int -> unit", null
            ]
          ],
          [ "Function", [ "input_bytes", "in_channel -> int -> t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Misc.MakeHooks",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [
            "Function",
            [
              "add_hook", "string -> ( Misc.hook_info -> t -> t ) -> unit",
              null
            ]
          ],
          [ "Function", [ "apply_hooks", "Misc.hook_info -> t -> t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMakeHooks\"><span class=\"keyword\">module</span> MakeHooks</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">M</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"code\"><span class=\"keyword\">sig</span></code></div>",
      "functor_elements": [ [ "Typevariant", [ "t", null, null, null ] ] ],
      "end_sig":
        "<code class=\"code\"><span class=\"keyword\">end</span></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"Misc.HookSig.html\">HookSig</a></code><code class=\"type\">  with type t = M.t</code>",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>M</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\">sig type t end</code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "Misc.Stdlib.Array",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "exists2",
              "('a -> 'b -> bool) -> 'a array -> 'b array -> bool", null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Misc.Stdlib",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Module", [ "List", null ] ],
          [ "Module", [ "Option", null ] ],
          [ "Module", [ "Array", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Misc.Stdlib.List",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "'a", "t = 'a list", null, null ] ],
          [
            "Function",
            [
              "compare", "('a -> 'a -> int) -> 'a t -> 'a t -> int",
              "\n<div class=\"info-desc\">\n<p>The lexicographic order supported by the provided order.\n        There is no constraint on the relative lengths of the lists.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "('a -> 'a -> bool) -> 'a t -> 'a t -> bool",
              "\n<div class=\"info-desc\">\n<p>Returns <code class=\"code\"><span class=\"keyword\">true</span></code> iff the given lists have the same length and content\n        with respect to the given equality function.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "filter_map", "('a -> 'b option) -> 'a t -> 'b t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">filter_map&nbsp;f&nbsp;l</code> applies <code class=\"code\">f</code> to every element of <code class=\"code\">l</code>, filters\n        out the <code class=\"code\"><span class=\"constructor\">None</span></code> elements and returns the list of the arguments of\n        the <code class=\"code\"><span class=\"constructor\">Some</span></code> elements.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "some_if_all_elements_are_some", "'a option t -> 'a t option",
              "\n<div class=\"info-desc\">\n<p>If all elements of the given list are <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;_</code> then <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;xs</code>\n        is returned with the <code class=\"code\">xs</code> being the contents of those <code class=\"code\"><span class=\"constructor\">Some</span></code>s, with\n        order preserved.  Otherwise return <code class=\"code\"><span class=\"constructor\">None</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "map2_prefix",
              "('a -> 'b -> 'c) -> 'a t -> 'b t -> 'c t * 'b t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"keyword\">let</span>&nbsp;r1,&nbsp;r2&nbsp;=&nbsp;map2_prefix&nbsp;f&nbsp;l1&nbsp;l2</code>\n        If <code class=\"code\">l1</code> is of length n and <code class=\"code\">l2&nbsp;=&nbsp;h2&nbsp;@&nbsp;t2</code> with h2 of length n,\n        r1 is <code class=\"code\"><span class=\"constructor\">List</span>.map2&nbsp;f&nbsp;l1&nbsp;h1</code> and r2 is t2.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "split_at", "int -> 'a t -> 'a t * 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">split_at&nbsp;n&nbsp;l</code> returns the pair <code class=\"code\">before,&nbsp;after</code> where <code class=\"code\">before</code> is\n        the <code class=\"code\">n</code> first elements of <code class=\"code\">l</code> and <code class=\"code\">after</code> the remaining ones.\n        If <code class=\"code\">l</code> has less than <code class=\"code\">n</code> elements, raises Invalid_argument.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Misc.Stdlib.Option",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "'a", "t = 'a option", null, null ] ],
          [
            "Function",
            [ "equal", "('a -> 'a -> bool) -> 'a t -> 'a t -> bool", null ]
          ],
          [ "Function", [ "iter", "('a -> unit) -> 'a t -> unit", null ] ],
          [ "Function", [ "map", "('a -> 'b) -> 'a t -> 'b t", null ] ],
          [
            "Function",
            [ "fold", "('a -> 'b -> 'b) -> 'a t -> 'b -> 'b", null ]
          ],
          [
            "Function",
            [
              "value_default", "('a -> 'b) -> default:'b -> 'a t -> 'b", null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Misc.StringMap",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "key", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the map keys.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "+'a", "t", null,
              "\n<div class=\"info-desc\">\n<p>The type of maps from type <code class=\"code\">key</code> to type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "empty", "'a t",
              "\n<div class=\"info-desc\">\n<p>The empty map.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "is_empty", "'a t -> bool",
              "\n<div class=\"info-desc\">\n<p>Test whether a map is empty or not.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mem", "key -> 'a t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;x&nbsp;m</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">m</code> contains a binding for <code class=\"code\">x</code>,\n       and <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "key -> 'a -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add&nbsp;x&nbsp;y&nbsp;m</code> returns a map containing the same bindings as\n       <code class=\"code\">m</code>, plus a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code>. If <code class=\"code\">x</code> was already bound\n       in <code class=\"code\">m</code> to a value that is physically equal to <code class=\"code\">y</code>,\n       <code class=\"code\">m</code> is returned unchanged (the result of the function is\n       then physically equal to <code class=\"code\">m</code>). Otherwise, the previous binding\n       of <code class=\"code\">x</code> in <code class=\"code\">m</code> disappears.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "update", "key -> ('a option -> 'a option) -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">update&nbsp;x&nbsp;f&nbsp;m</code> returns a map containing the same bindings as\n        <code class=\"code\">m</code>, except for the binding of <code class=\"code\">x</code>. Depending on the value of\n        <code class=\"code\">y</code> where <code class=\"code\">y</code> is <code class=\"code\">f&nbsp;(find_opt&nbsp;x&nbsp;m)</code>, the binding of <code class=\"code\">x</code> is\n        added, removed or updated. If <code class=\"code\">y</code> is <code class=\"code\"><span class=\"constructor\">None</span></code>, the binding is\n        removed if it exists; otherwise, if <code class=\"code\">y</code> is <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;z</code> then <code class=\"code\">x</code>\n        is associated to <code class=\"code\">z</code> in the resulting map.  If <code class=\"code\">x</code> was already\n        bound in <code class=\"code\">m</code> to a value that is physically equal to <code class=\"code\">z</code>, <code class=\"code\">m</code>\n        is returned unchanged (the result of the function is then\n        physically equal to <code class=\"code\">m</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "singleton", "key -> 'a -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">singleton&nbsp;x&nbsp;y</code> returns the one-element map that contains a binding <code class=\"code\">y</code>\n        for <code class=\"code\">x</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "remove", "key -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">remove&nbsp;x&nbsp;m</code> returns a map containing the same bindings as\n       <code class=\"code\">m</code>, except for <code class=\"code\">x</code> which is unbound in the returned map.\n       If <code class=\"code\">x</code> was not in <code class=\"code\">m</code>, <code class=\"code\">m</code> is returned unchanged\n       (the result of the function is then physically equal to <code class=\"code\">m</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "merge",
              "( key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">merge&nbsp;f&nbsp;m1&nbsp;m2</code> computes a map whose keys is a subset of keys of <code class=\"code\">m1</code>\n        and of <code class=\"code\">m2</code>. The presence of each such binding, and the corresponding\n        value, is determined with the function <code class=\"code\">f</code>.\n        In terms of the <code class=\"code\">find_opt</code> operation, we have\n        <code class=\"code\">find_opt&nbsp;x&nbsp;(merge&nbsp;f&nbsp;m1&nbsp;m2)&nbsp;=&nbsp;f&nbsp;(find_opt&nbsp;x&nbsp;m1)&nbsp;(find_opt&nbsp;x&nbsp;m2)</code>\n        for any key <code class=\"code\">x</code>, provided that <code class=\"code\">f&nbsp;<span class=\"constructor\">None</span>&nbsp;<span class=\"constructor\">None</span>&nbsp;=&nbsp;<span class=\"constructor\">None</span></code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "union",
              "( key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">union&nbsp;f&nbsp;m1&nbsp;m2</code> computes a map whose keys is the union of keys\n        of <code class=\"code\">m1</code> and of <code class=\"code\">m2</code>.  When the same binding is defined in both\n        arguments, the function <code class=\"code\">f</code> is used to combine them.\n        This is a special case of <code class=\"code\">merge</code>: <code class=\"code\">union&nbsp;f&nbsp;m1&nbsp;m2</code> is equivalent\n        to <code class=\"code\">merge&nbsp;f'&nbsp;m1&nbsp;m2</code>, where</p>\n<ul>\n<li><code class=\"code\">f'&nbsp;<span class=\"constructor\">None</span>&nbsp;<span class=\"constructor\">None</span>&nbsp;=&nbsp;<span class=\"constructor\">None</span></code></li>\n<li><code class=\"code\">f'&nbsp;(<span class=\"constructor\">Some</span>&nbsp;v)&nbsp;<span class=\"constructor\">None</span>&nbsp;=&nbsp;<span class=\"constructor\">Some</span>&nbsp;v</code></li>\n<li><code class=\"code\">f'&nbsp;<span class=\"constructor\">None</span>&nbsp;(<span class=\"constructor\">Some</span>&nbsp;v)&nbsp;=&nbsp;<span class=\"constructor\">Some</span>&nbsp;v</code></li>\n<li><code class=\"code\">f'&nbsp;(<span class=\"constructor\">Some</span>&nbsp;v1)&nbsp;(<span class=\"constructor\">Some</span>&nbsp;v2)&nbsp;=&nbsp;f&nbsp;v1&nbsp;v2</code></li>\n</ul>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "('a -> 'a -> int) -> 'a t -> 'a t -> int",
              "\n<div class=\"info-desc\">\n<p>Total ordering between maps.  The first argument is a total ordering\n        used to compare data associated with equal keys in the two maps.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "('a -> 'a -> bool) -> 'a t -> 'a t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">equal&nbsp;cmp&nbsp;m1&nbsp;m2</code> tests whether the maps <code class=\"code\">m1</code> and <code class=\"code\">m2</code> are\n       equal, that is, contain equal keys and associate them with\n       equal data.  <code class=\"code\">cmp</code> is the equality predicate used to compare\n       the data associated with the keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "( key -> 'a -> unit) -> 'a t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;m</code> applies <code class=\"code\">f</code> to all bindings in map <code class=\"code\">m</code>.\n       <code class=\"code\">f</code> receives the key as first argument, and the associated value\n       as second argument.  The bindings are passed to <code class=\"code\">f</code> in increasing\n       order with respect to the ordering over the type of the keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold", "( key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;m&nbsp;a</code> computes <code class=\"code\">(f&nbsp;kN&nbsp;dN&nbsp;...&nbsp;(f&nbsp;k1&nbsp;d1&nbsp;a)...)</code>,\n       where <code class=\"code\">k1&nbsp;...&nbsp;kN</code> are the keys of all bindings in <code class=\"code\">m</code>\n       (in increasing order), and <code class=\"code\">d1&nbsp;...&nbsp;dN</code> are the associated data.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "for_all", "( key -> 'a -> bool) -> 'a t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;m</code> checks if all the bindings of the map\n        satisfy the predicate <code class=\"code\">p</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "exists", "( key -> 'a -> bool) -> 'a t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;m</code> checks if at least one binding of the map\n        satisfies the predicate <code class=\"code\">p</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "filter", "( key -> 'a -> bool) -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">filter&nbsp;p&nbsp;m</code> returns the map with all the bindings in <code class=\"code\">m</code>\n        that satisfy predicate <code class=\"code\">p</code>. If <code class=\"code\">p</code> satisfies every binding in <code class=\"code\">m</code>,\n        <code class=\"code\">m</code> is returned unchanged (the result of the function is then\n        physically equal to <code class=\"code\">m</code>)</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "partition", "( key -> 'a -> bool) -> 'a t -> 'a t * 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">partition&nbsp;p&nbsp;m</code> returns a pair of maps <code class=\"code\">(m1,&nbsp;m2)</code>, where\n        <code class=\"code\">m1</code> contains all the bindings of <code class=\"code\">s</code> that satisfy the\n        predicate <code class=\"code\">p</code>, and <code class=\"code\">m2</code> is the map with all the bindings of\n        <code class=\"code\">s</code> that do not satisfy <code class=\"code\">p</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "cardinal", "'a t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the number of bindings of a map.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "bindings", "'a t -> ( key * 'a) list",
              "\n<div class=\"info-desc\">\n<p>Return the list of all bindings of the given map.\n       The returned list is sorted in increasing order with respect\n       to the ordering <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>, where <code class=\"code\"><span class=\"constructor\">Ord</span></code> is the argument\n       given to <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "min_binding", "'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p>Return the smallest binding of the given map\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or raise\n       <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the map is empty.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "min_binding_opt", "'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p>Return the smallest binding of the given map\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or <code class=\"code\"><span class=\"constructor\">None</span></code>\n       if the map is empty.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "max_binding", "'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Map.S.html#VALmin_binding\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.min_binding</code></a>, but returns the largest binding\n        of the given map.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "max_binding_opt", "'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Map.S.html#VALmin_binding_opt\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.min_binding_opt</code></a>, but returns the largest binding\n        of the given map.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "choose", "'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p>Return one binding of the given map, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if\n       the map is empty. Which binding is chosen is unspecified,\n       but equal bindings will be chosen for equal maps.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "choose_opt", "'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p>Return one binding of the given map, or <code class=\"code\"><span class=\"constructor\">None</span></code> if\n       the map is empty. Which binding is chosen is unspecified,\n       but equal bindings will be chosen for equal maps.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "split", "key -> 'a t -> 'a t * 'a option * 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">split&nbsp;x&nbsp;m</code> returns a triple <code class=\"code\">(l,&nbsp;data,&nbsp;r)</code>, where\n          <code class=\"code\">l</code> is the map with all the bindings of <code class=\"code\">m</code> whose key\n        is strictly less than <code class=\"code\">x</code>;\n          <code class=\"code\">r</code> is the map with all the bindings of <code class=\"code\">m</code> whose key\n        is strictly greater than <code class=\"code\">x</code>;\n          <code class=\"code\">data</code> is <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">m</code> contains no binding for <code class=\"code\">x</code>,\n          or <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> if <code class=\"code\">m</code> binds <code class=\"code\">v</code> to <code class=\"code\">x</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find", "key -> 'a t -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;x&nbsp;m</code> returns the current binding of <code class=\"code\">x</code> in <code class=\"code\">m</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such binding exists.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find_opt", "key -> 'a t -> 'a option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_opt&nbsp;x&nbsp;m</code> returns <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> if the current binding of <code class=\"code\">x</code>\n        in <code class=\"code\">m</code> is <code class=\"code\">v</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such binding exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_first", "( key -> bool) -> 'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_first&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns the binding of <code class=\"code\">m</code> with the lowest key <code class=\"code\">k</code> such that <code class=\"code\">f&nbsp;k</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such key exists.</p>\n\n<p>For example, <code class=\"code\">find_first&nbsp;(<span class=\"keyword\">fun</span>&nbsp;k&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;<span class=\"constructor\">Ord</span>.compare&nbsp;k&nbsp;x&nbsp;&gt;=&nbsp;0)&nbsp;m</code> will return\n       the first binding <code class=\"code\">k,&nbsp;v</code> of <code class=\"code\">m</code> where <code class=\"code\"><span class=\"constructor\">Ord</span>.compare&nbsp;k&nbsp;x&nbsp;&gt;=&nbsp;0</code>\n       (intuitively: <code class=\"code\">k&nbsp;&gt;=&nbsp;x</code>), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">x</code> is greater than any\n       element of <code class=\"code\">m</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_first_opt",
              "( key -> bool) -> 'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_first_opt&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns an option containing the binding of <code class=\"code\">m</code> with the lowest key <code class=\"code\">k</code>\n       such that <code class=\"code\">f&nbsp;k</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such key exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_last", "( key -> bool) -> 'a t -> key * 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_last&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns the binding of <code class=\"code\">m</code> with the highest key <code class=\"code\">k</code> such that <code class=\"code\">f&nbsp;k</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such key exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_last_opt",
              "( key -> bool) -> 'a t -> ( key * 'a) option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_last_opt&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns an option containing the binding of <code class=\"code\">m</code> with the highest key <code class=\"code\">k</code>\n       such that <code class=\"code\">f&nbsp;k</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such key exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "('a -> 'b) -> 'a t -> 'b t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">map&nbsp;f&nbsp;m</code> returns a map with same domain as <code class=\"code\">m</code>, where the\n       associated value <code class=\"code\">a</code> of all bindings of <code class=\"code\">m</code> has been\n       replaced by the result of the application of <code class=\"code\">f</code> to <code class=\"code\">a</code>.\n       The bindings are passed to <code class=\"code\">f</code> in increasing order\n       with respect to the ordering over the type of the keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mapi", "( key -> 'a -> 'b) -> 'a t -> 'b t",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Map.S.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.map</code></a>, but the function receives as arguments both the\n       key and the associated value for each binding of the map.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "'a t -> ( key * 'a) Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the whole map, in ascending order</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq_from", "key -> 'a t -> ( key * 'a) Seq.t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">to_seq_from&nbsp;k&nbsp;m</code> iterates on a subset of the bindings of <code class=\"code\">m</code>,\n        in ascending order, from key <code class=\"code\">k</code> or above.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_seq", "( key * 'a) Seq.t -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p>Add the given bindings to the map, in order.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "( key * 'a) Seq.t -> 'a t",
              "\n<div class=\"info-desc\">\n<p>Build a map from the given bindings</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Misc.StringSet",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "elt", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the set elements.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of sets.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "empty", "t",
              "\n<div class=\"info-desc\">\n<p>The empty set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "is_empty", "t -> bool",
              "\n<div class=\"info-desc\">\n<p>Test whether a set is empty or not.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mem", "elt -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;x&nbsp;s</code> tests whether <code class=\"code\">x</code> belongs to the set <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "elt -> t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add&nbsp;x&nbsp;s</code> returns a set containing all elements of <code class=\"code\">s</code>,\n       plus <code class=\"code\">x</code>. If <code class=\"code\">x</code> was already in <code class=\"code\">s</code>, <code class=\"code\">s</code> is returned unchanged\n       (the result of the function is then physically equal to <code class=\"code\">s</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "singleton", "elt -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">singleton&nbsp;x</code> returns the one-element set containing only <code class=\"code\">x</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "remove", "elt -> t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">remove&nbsp;x&nbsp;s</code> returns a set containing all elements of <code class=\"code\">s</code>,\n       except <code class=\"code\">x</code>. If <code class=\"code\">x</code> was not in <code class=\"code\">s</code>, <code class=\"code\">s</code> is returned unchanged\n       (the result of the function is then physically equal to <code class=\"code\">s</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "union", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Set union.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "inter", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Set intersection.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "diff", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Set difference.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>Total ordering between sets. Can be used as the ordering function\n       for doing sets of sets.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">equal&nbsp;s1&nbsp;s2</code> tests whether the sets <code class=\"code\">s1</code> and <code class=\"code\">s2</code> are\n       equal, that is, contain equal elements.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "subset", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">subset&nbsp;s1&nbsp;s2</code> tests whether the set <code class=\"code\">s1</code> is a subset of\n       the set <code class=\"code\">s2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "( elt -> unit) -> t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies <code class=\"code\">f</code> in turn to all elements of <code class=\"code\">s</code>.\n       The elements of <code class=\"code\">s</code> are presented to <code class=\"code\">f</code> in increasing order\n       with respect to the ordering over the type of the elements.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "( elt -> elt ) -> t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">map&nbsp;f&nbsp;s</code> is the set whose elements are <code class=\"code\">f&nbsp;a0</code>,<code class=\"code\">f&nbsp;a1</code>... <code class=\"code\">f<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aN</code>, where <code class=\"code\">a0</code>,<code class=\"code\">a1</code>...<code class=\"code\">aN</code> are the elements of <code class=\"code\">s</code>.</p>\n\n<p>The elements are passed to <code class=\"code\">f</code> in increasing order\n       with respect to the ordering over the type of the elements.</p>\n\n<p>If no element of <code class=\"code\">s</code> is changed by <code class=\"code\">f</code>, <code class=\"code\">s</code> is returned\n       unchanged. (If each output of <code class=\"code\">f</code> is physically equal to its\n       input, the returned set is physically equal to <code class=\"code\">s</code>.)</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.04.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "fold", "( elt -> 'a -> 'a) -> t -> 'a -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;s&nbsp;a</code> computes <code class=\"code\">(f&nbsp;xN&nbsp;...&nbsp;(f&nbsp;x2&nbsp;(f&nbsp;x1&nbsp;a))...)</code>,\n       where <code class=\"code\">x1&nbsp;...&nbsp;xN</code> are the elements of <code class=\"code\">s</code>, in increasing order.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "for_all", "( elt -> bool) -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;s</code> checks if all elements of the set\n       satisfy the predicate <code class=\"code\">p</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "exists", "( elt -> bool) -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;s</code> checks if at least one element of\n       the set satisfies the predicate <code class=\"code\">p</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "filter", "( elt -> bool) -> t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">filter&nbsp;p&nbsp;s</code> returns the set of all elements in <code class=\"code\">s</code>\n       that satisfy predicate <code class=\"code\">p</code>. If <code class=\"code\">p</code> satisfies every element in <code class=\"code\">s</code>,\n       <code class=\"code\">s</code> is returned unchanged (the result of the function is then\n       physically equal to <code class=\"code\">s</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "partition", "( elt -> bool) -> t -> t * t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">partition&nbsp;p&nbsp;s</code> returns a pair of sets <code class=\"code\">(s1,&nbsp;s2)</code>, where\n       <code class=\"code\">s1</code> is the set of all the elements of <code class=\"code\">s</code> that satisfy the\n       predicate <code class=\"code\">p</code>, and <code class=\"code\">s2</code> is the set of all the elements of\n       <code class=\"code\">s</code> that do not satisfy <code class=\"code\">p</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "cardinal", "t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the number of elements of a set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "elements", "t -> elt list",
              "\n<div class=\"info-desc\">\n<p>Return the list of all elements of the given set.\n       The returned list is sorted in increasing order with respect\n       to the ordering <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>, where <code class=\"code\"><span class=\"constructor\">Ord</span></code> is the argument\n       given to <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "min_elt", "t -> elt",
              "\n<div class=\"info-desc\">\n<p>Return the smallest element of the given set\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or raise\n       <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the set is empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "min_elt_opt", "t -> elt option",
              "\n<div class=\"info-desc\">\n<p>Return the smallest element of the given set\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or <code class=\"code\"><span class=\"constructor\">None</span></code>\n       if the set is empty.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "max_elt", "t -> elt",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Set.S.html#VALmin_elt\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">S</span>.min_elt</code></a>, but returns the largest element of the\n       given set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "max_elt_opt", "t -> elt option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Set.S.html#VALmin_elt_opt\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">S</span>.min_elt_opt</code></a>, but returns the largest element of the\n        given set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "choose", "t -> elt",
              "\n<div class=\"info-desc\">\n<p>Return one element of the given set, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if\n       the set is empty. Which element is chosen is unspecified,\n       but equal elements will be chosen for equal sets.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "choose_opt", "t -> elt option",
              "\n<div class=\"info-desc\">\n<p>Return one element of the given set, or <code class=\"code\"><span class=\"constructor\">None</span></code> if\n        the set is empty. Which element is chosen is unspecified,\n        but equal elements will be chosen for equal sets.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "split", "elt -> t -> t * bool * t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">split&nbsp;x&nbsp;s</code> returns a triple <code class=\"code\">(l,&nbsp;present,&nbsp;r)</code>, where\n          <code class=\"code\">l</code> is the set of elements of <code class=\"code\">s</code> that are\n          strictly less than <code class=\"code\">x</code>;\n          <code class=\"code\">r</code> is the set of elements of <code class=\"code\">s</code> that are\n          strictly greater than <code class=\"code\">x</code>;\n          <code class=\"code\">present</code> is <code class=\"code\"><span class=\"keyword\">false</span></code> if <code class=\"code\">s</code> contains no element equal to <code class=\"code\">x</code>,\n          or <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">s</code> contains an element equal to <code class=\"code\">x</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find", "elt -> t -> elt",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;x&nbsp;s</code> returns the element of <code class=\"code\">s</code> equal to <code class=\"code\">x</code> (according\n        to <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element\n        exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_opt", "elt -> t -> elt option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_opt&nbsp;x&nbsp;s</code> returns the element of <code class=\"code\">s</code> equal to <code class=\"code\">x</code> (according\n        to <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>), or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element\n        exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_first", "( elt -> bool) -> t -> elt",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_first&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns the lowest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that <code class=\"code\">f&nbsp;e</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element exists.</p>\n\n<p>For example, <code class=\"code\">find_first&nbsp;(<span class=\"keyword\">fun</span>&nbsp;e&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;<span class=\"constructor\">Ord</span>.compare&nbsp;e&nbsp;x&nbsp;&gt;=&nbsp;0)&nbsp;s</code> will return\n       the first element <code class=\"code\">e</code> of <code class=\"code\">s</code> where <code class=\"code\"><span class=\"constructor\">Ord</span>.compare&nbsp;e&nbsp;x&nbsp;&gt;=&nbsp;0</code> (intuitively:\n       <code class=\"code\">e&nbsp;&gt;=&nbsp;x</code>), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">x</code> is greater than any element of\n       <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_first_opt", "( elt -> bool) -> t -> elt option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_first_opt&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns an option containing the lowest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that\n       <code class=\"code\">f&nbsp;e</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_last", "( elt -> bool) -> t -> elt",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_last&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns the highest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that <code class=\"code\">f&nbsp;e</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_last_opt", "( elt -> bool) -> t -> elt option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_last_opt&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns an option containing the highest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that\n       <code class=\"code\">f&nbsp;e</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_list", "elt list -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">of_list&nbsp;l</code> creates a set from a list of elements.\n        This is usually more efficient than folding <code class=\"code\">add</code> over the list,\n        except perhaps for lists with many duplicated elements.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq_from", "elt -> t -> elt Seq.t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">to_seq_from&nbsp;x&nbsp;s</code> iterates on a subset of the elements of <code class=\"code\">s</code>\n        in ascending order, from <code class=\"code\">x</code> or above.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq", "t -> elt Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the whole set, in ascending order</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_seq", "elt Seq.t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Add the given elements to the set, in order.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "elt Seq.t -> t",
              "\n<div class=\"info-desc\">\n<p>Build a set from the given bindings</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "MoreLabels.Hashtbl.HashedType",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the hashtable keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p>The equality predicate used to compare keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "hash", "t -> int",
              "\n<div class=\"info-desc\">\n<p>A hashing function on keys. It must be such that if two keys are\n          equal according to <code class=\"code\">equal</code>, then they have identical hash values\n          as computed by <code class=\"code\">hash</code>.\n          Examples: suitable (<code class=\"code\">equal</code>, <code class=\"code\">hash</code>) pairs for arbitrary key\n          types include</p>\n<ul>\n<li>        (<code class=\"code\">(=)</code>, <a href=\"Hashtbl.html#VALhash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash</code></a>) for comparing objects by structure\n              (provided objects do not contain floats)</li>\n<li>        (<code class=\"code\">(<span class=\"keyword\">fun</span>&nbsp;x&nbsp;y&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;compare&nbsp;x&nbsp;y&nbsp;=&nbsp;0)</code>, <a href=\"Hashtbl.html#VALhash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash</code></a>)\n              for comparing objects by structure\n              and handling <a href=\"Pervasives.html#VALnan\"><code class=\"code\">nan</code></a> correctly</li>\n<li>        (<code class=\"code\">(==)</code>, <a href=\"Hashtbl.html#VALhash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash</code></a>) for comparing objects by physical\n              equality (e.g. for mutable or cyclic objects).</li>\n</ul>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "MoreLabels.Hashtbl",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [ "('a, 'b)", "t = ('a, 'b) Hashtbl.t", null, null ]
          ],
          [
            "Function",
            [ "create", "?random:bool -> int -> ('a, 'b) t", null ]
          ],
          [ "Function", [ "clear", "('a, 'b) t -> unit", null ] ],
          [ "Function", [ "reset", "('a, 'b) t -> unit", null ] ],
          [ "Function", [ "copy", "('a, 'b) t -> ('a, 'b) t", null ] ],
          [
            "Function",
            [ "add", "('a, 'b) t -> key:'a -> data:'b -> unit", null ]
          ],
          [ "Function", [ "find", "('a, 'b) t -> 'a -> 'b", null ] ],
          [
            "Function",
            [ "find_opt", "('a, 'b) t -> 'a -> 'b option", null ]
          ],
          [ "Function", [ "find_all", "('a, 'b) t -> 'a -> 'b list", null ] ],
          [ "Function", [ "mem", "('a, 'b) t -> 'a -> bool", null ] ],
          [ "Function", [ "remove", "('a, 'b) t -> 'a -> unit", null ] ],
          [
            "Function",
            [ "replace", "('a, 'b) t -> key:'a -> data:'b -> unit", null ]
          ],
          [
            "Function",
            [
              "iter", "f:(key:'a -> data:'b -> unit) -> ('a, 'b) t -> unit",
              null
            ]
          ],
          [
            "Function",
            [
              "filter_map_inplace",
              "f:(key:'a -> data:'b -> 'b option) -> ('a, 'b) t -> unit",
              null
            ]
          ],
          [
            "Function",
            [
              "fold",
              "f:(key:'a -> data:'b -> 'c -> 'c) -> ('a, 'b) t -> init:'c -> 'c",
              null
            ]
          ],
          [ "Function", [ "length", "('a, 'b) t -> int", null ] ],
          [ "Function", [ "randomize", "unit -> unit", null ] ],
          [ "Function", [ "is_randomized", "unit -> bool", null ] ],
          [
            "Typevariant",
            [ "statistics", "= Hashtbl.statistics", null, null ]
          ],
          [ "Function", [ "stats", "('a, 'b) t -> statistics", null ] ],
          [ "Function", [ "to_seq", "('a, 'b) t -> ('a * 'b) Seq.t", null ] ],
          [ "Function", [ "to_seq_keys", "('a, 'b) t -> 'a Seq.t", null ] ],
          [ "Function", [ "to_seq_values", "('a, 'b) t -> 'b Seq.t", null ] ],
          [
            "Function",
            [ "add_seq", "('a, 'b) t -> ('a * 'b) Seq.t -> unit", null ]
          ],
          [
            "Function",
            [ "replace_seq", "('a, 'b) t -> ('a * 'b) Seq.t -> unit", null ]
          ],
          [ "Function", [ "of_seq", "('a * 'b) Seq.t -> ('a, 'b) t", null ] ],
          [ "Moduletype", [ "HashedType", null ] ],
          [ "Moduletype", [ "SeededHashedType", null ] ],
          [ "Moduletype", [ "S", null ] ],
          [ "Moduletype", [ "SeededS", null ] ],
          [ "Module", [ "Make", null ] ],
          [ "Module", [ "MakeSeeded", null ] ],
          [ "Function", [ "hash", "'a -> int", null ] ],
          [ "Function", [ "seeded_hash", "int -> 'a -> int", null ] ],
          [ "Function", [ "hash_param", "int -> int -> 'a -> int", null ] ],
          [
            "Function",
            [ "seeded_hash_param", "int -> int -> int -> 'a -> int", null ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "MoreLabels.Hashtbl.Make",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "key", null, null, null ] ],
          [ "Typevariant", [ "'a", "t", null, null ] ],
          [ "Function", [ "create", "int -> 'a t", null ] ],
          [ "Function", [ "clear", "'a t -> unit", null ] ],
          [ "Function", [ "reset", "'a t -> unit", null ] ],
          [ "Function", [ "copy", "'a t -> 'a t", null ] ],
          [
            "Function",
            [ "add", "'a t -> key: key -> data:'a -> unit", null ]
          ],
          [ "Function", [ "remove", "'a t -> key -> unit", null ] ],
          [ "Function", [ "find", "'a t -> key -> 'a", null ] ],
          [ "Function", [ "find_opt", "'a t -> key -> 'a option", null ] ],
          [ "Function", [ "find_all", "'a t -> key -> 'a list", null ] ],
          [
            "Function",
            [ "replace", "'a t -> key: key -> data:'a -> unit", null ]
          ],
          [ "Function", [ "mem", "'a t -> key -> bool", null ] ],
          [
            "Function",
            [
              "iter", "f:(key: key -> data:'a -> unit) -> 'a t -> unit", null
            ]
          ],
          [
            "Function",
            [
              "filter_map_inplace",
              "f:(key: key -> data:'a -> 'a option) -> 'a t -> unit", null
            ]
          ],
          [
            "Function",
            [
              "fold",
              "f:(key: key -> data:'a -> 'b -> 'b) -> 'a t -> init:'b -> 'b",
              null
            ]
          ],
          [ "Function", [ "length", "'a t -> int", null ] ],
          [
            "Function",
            [ "stats", "'a t -> MoreLabels.Hashtbl.statistics", null ]
          ],
          [ "Function", [ "to_seq", "'a t -> ( key * 'a) Seq.t", null ] ],
          [ "Function", [ "to_seq_keys", "'a t -> key Seq.t", null ] ],
          [ "Function", [ "to_seq_values", "'a t -> 'a Seq.t", null ] ],
          [
            "Function",
            [ "add_seq", "'a t -> ( key * 'a) Seq.t -> unit", null ]
          ],
          [
            "Function",
            [ "replace_seq", "'a t -> ( key * 'a) Seq.t -> unit", null ]
          ],
          [ "Function", [ "of_seq", "( key * 'a) Seq.t -> 'a t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMake\"><span class=\"keyword\">module</span> Make</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">H</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"MoreLabels.Hashtbl.HashedType.html\">HashedType</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"MoreLabels.Hashtbl.S.html\">S</a></code><code class=\"type\"> \n    with type key = H.t\n     and type 'a t = 'a <a href=\"Hashtbl.Make.html\">Hashtbl.Make</a>(H).t</code></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>H</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"MoreLabels.Hashtbl.HashedType.html\">HashedType</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "MoreLabels.Hashtbl.MakeSeeded",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "key", null, null, null ] ],
          [ "Typevariant", [ "'a", "t", null, null ] ],
          [ "Function", [ "create", "?random:bool -> int -> 'a t", null ] ],
          [ "Function", [ "clear", "'a t -> unit", null ] ],
          [ "Function", [ "reset", "'a t -> unit", null ] ],
          [ "Function", [ "copy", "'a t -> 'a t", null ] ],
          [
            "Function",
            [ "add", "'a t -> key: key -> data:'a -> unit", null ]
          ],
          [ "Function", [ "remove", "'a t -> key -> unit", null ] ],
          [ "Function", [ "find", "'a t -> key -> 'a", null ] ],
          [ "Function", [ "find_opt", "'a t -> key -> 'a option", null ] ],
          [ "Function", [ "find_all", "'a t -> key -> 'a list", null ] ],
          [
            "Function",
            [ "replace", "'a t -> key: key -> data:'a -> unit", null ]
          ],
          [ "Function", [ "mem", "'a t -> key -> bool", null ] ],
          [
            "Function",
            [
              "iter", "f:(key: key -> data:'a -> unit) -> 'a t -> unit", null
            ]
          ],
          [
            "Function",
            [
              "filter_map_inplace",
              "f:(key: key -> data:'a -> 'a option) -> 'a t -> unit", null
            ]
          ],
          [
            "Function",
            [
              "fold",
              "f:(key: key -> data:'a -> 'b -> 'b) -> 'a t -> init:'b -> 'b",
              null
            ]
          ],
          [ "Function", [ "length", "'a t -> int", null ] ],
          [
            "Function",
            [ "stats", "'a t -> MoreLabels.Hashtbl.statistics", null ]
          ],
          [ "Function", [ "to_seq", "'a t -> ( key * 'a) Seq.t", null ] ],
          [ "Function", [ "to_seq_keys", "'a t -> key Seq.t", null ] ],
          [ "Function", [ "to_seq_values", "'a t -> 'a Seq.t", null ] ],
          [
            "Function",
            [ "add_seq", "'a t -> ( key * 'a) Seq.t -> unit", null ]
          ],
          [
            "Function",
            [ "replace_seq", "'a t -> ( key * 'a) Seq.t -> unit", null ]
          ],
          [ "Function", [ "of_seq", "( key * 'a) Seq.t -> 'a t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMakeSeeded\"><span class=\"keyword\">module</span> MakeSeeded</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">H</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"MoreLabels.Hashtbl.SeededHashedType.html\">SeededHashedType</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"MoreLabels.Hashtbl.SeededS.html\">SeededS</a></code><code class=\"type\"> \n    with type key = H.t\n     and type 'a t = 'a <a href=\"Hashtbl.MakeSeeded.html\">Hashtbl.MakeSeeded</a>(H).t</code></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>H</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"MoreLabels.Hashtbl.SeededHashedType.html\">SeededHashedType</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "MoreLabels.Hashtbl.S",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "key", null, null, null ] ],
          [ "Typevariant", [ "'a", "t", null, null ] ],
          [ "Function", [ "create", "int -> 'a t", null ] ],
          [ "Function", [ "clear", "'a t -> unit", null ] ],
          [ "Function", [ "reset", "'a t -> unit", null ] ],
          [ "Function", [ "copy", "'a t -> 'a t", null ] ],
          [
            "Function",
            [ "add", "'a t -> key: key -> data:'a -> unit", null ]
          ],
          [ "Function", [ "remove", "'a t -> key -> unit", null ] ],
          [ "Function", [ "find", "'a t -> key -> 'a", null ] ],
          [ "Function", [ "find_opt", "'a t -> key -> 'a option", null ] ],
          [ "Function", [ "find_all", "'a t -> key -> 'a list", null ] ],
          [
            "Function",
            [ "replace", "'a t -> key: key -> data:'a -> unit", null ]
          ],
          [ "Function", [ "mem", "'a t -> key -> bool", null ] ],
          [
            "Function",
            [
              "iter", "f:(key: key -> data:'a -> unit) -> 'a t -> unit", null
            ]
          ],
          [
            "Function",
            [
              "filter_map_inplace",
              "f:(key: key -> data:'a -> 'a option) -> 'a t -> unit", null
            ]
          ],
          [
            "Function",
            [
              "fold",
              "f:(key: key -> data:'a -> 'b -> 'b) -> 'a t -> init:'b -> 'b",
              null
            ]
          ],
          [ "Function", [ "length", "'a t -> int", null ] ],
          [
            "Function",
            [ "stats", "'a t -> MoreLabels.Hashtbl.statistics", null ]
          ],
          [ "Function", [ "to_seq", "'a t -> ( key * 'a) Seq.t", null ] ],
          [ "Function", [ "to_seq_keys", "'a t -> key Seq.t", null ] ],
          [ "Function", [ "to_seq_values", "'a t -> 'a Seq.t", null ] ],
          [
            "Function",
            [ "add_seq", "'a t -> ( key * 'a) Seq.t -> unit", null ]
          ],
          [
            "Function",
            [ "replace_seq", "'a t -> ( key * 'a) Seq.t -> unit", null ]
          ],
          [ "Function", [ "of_seq", "( key * 'a) Seq.t -> 'a t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "MoreLabels.Hashtbl.SeededHashedType",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the hashtable keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p>The equality predicate used to compare keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "hash", "int -> t -> int",
              "\n<div class=\"info-desc\">\n<p>A seeded hashing function on keys.  The first argument is\n          the seed.  It must be the case that if <code class=\"code\">equal&nbsp;x&nbsp;y</code> is true,\n          then <code class=\"code\">hash&nbsp;seed&nbsp;x&nbsp;=&nbsp;hash&nbsp;seed&nbsp;y</code> for any value of <code class=\"code\">seed</code>.\n          A suitable choice for <code class=\"code\">hash</code> is the function <a href=\"Hashtbl.html#VALseeded_hash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.seeded_hash</code></a>\n          below.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "MoreLabels.Hashtbl.SeededS",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "key", null, null, null ] ],
          [ "Typevariant", [ "'a", "t", null, null ] ],
          [ "Function", [ "create", "?random:bool -> int -> 'a t", null ] ],
          [ "Function", [ "clear", "'a t -> unit", null ] ],
          [ "Function", [ "reset", "'a t -> unit", null ] ],
          [ "Function", [ "copy", "'a t -> 'a t", null ] ],
          [
            "Function",
            [ "add", "'a t -> key: key -> data:'a -> unit", null ]
          ],
          [ "Function", [ "remove", "'a t -> key -> unit", null ] ],
          [ "Function", [ "find", "'a t -> key -> 'a", null ] ],
          [ "Function", [ "find_opt", "'a t -> key -> 'a option", null ] ],
          [ "Function", [ "find_all", "'a t -> key -> 'a list", null ] ],
          [
            "Function",
            [ "replace", "'a t -> key: key -> data:'a -> unit", null ]
          ],
          [ "Function", [ "mem", "'a t -> key -> bool", null ] ],
          [
            "Function",
            [
              "iter", "f:(key: key -> data:'a -> unit) -> 'a t -> unit", null
            ]
          ],
          [
            "Function",
            [
              "filter_map_inplace",
              "f:(key: key -> data:'a -> 'a option) -> 'a t -> unit", null
            ]
          ],
          [
            "Function",
            [
              "fold",
              "f:(key: key -> data:'a -> 'b -> 'b) -> 'a t -> init:'b -> 'b",
              null
            ]
          ],
          [ "Function", [ "length", "'a t -> int", null ] ],
          [
            "Function",
            [ "stats", "'a t -> MoreLabels.Hashtbl.statistics", null ]
          ],
          [ "Function", [ "to_seq", "'a t -> ( key * 'a) Seq.t", null ] ],
          [ "Function", [ "to_seq_keys", "'a t -> key Seq.t", null ] ],
          [ "Function", [ "to_seq_values", "'a t -> 'a Seq.t", null ] ],
          [
            "Function",
            [ "add_seq", "'a t -> ( key * 'a) Seq.t -> unit", null ]
          ],
          [
            "Function",
            [ "replace_seq", "'a t -> ( key * 'a) Seq.t -> unit", null ]
          ],
          [ "Function", [ "of_seq", "( key * 'a) Seq.t -> 'a t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "MoreLabels",
    "module_info":
      "\n<p>Extra labeled libraries.</p>\n\n<p>This meta-module provides labelized version of the <a href=\"Hashtbl.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span></code></a>,\n   <a href=\"Map.html\"><code class=\"code\"><span class=\"constructor\">Map</span></code></a> and <a href=\"Set.html\"><code class=\"code\"><span class=\"constructor\">Set</span></code></a> modules.</p>\n\n<p>They only differ by their labels. They are provided to help\n   porting from previous versions of OCaml.\n   The contents of this module are subject to change.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Module", [ "Hashtbl", null ] ],
          [ "Module", [ "Map", null ] ],
          [ "Module", [ "Set", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "MoreLabels.Map",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Moduletype", [ "OrderedType", null ] ],
          [ "Moduletype", [ "S", null ] ],
          [ "Module", [ "Make", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "MoreLabels.Map.Make",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "key", null, null, null ] ],
          [ "Typevariant", [ "+'a", "t", null, null ] ],
          [ "Function", [ "empty", "'a t", null ] ],
          [ "Function", [ "is_empty", "'a t -> bool", null ] ],
          [ "Function", [ "mem", "key -> 'a t -> bool", null ] ],
          [
            "Function",
            [ "add", "key: key -> data:'a -> 'a t -> 'a t", null ]
          ],
          [
            "Function",
            [
              "update",
              "key: key -> f:('a option -> 'a option) -> 'a t -> 'a t", null
            ]
          ],
          [ "Function", [ "singleton", "key -> 'a -> 'a t", null ] ],
          [ "Function", [ "remove", "key -> 'a t -> 'a t", null ] ],
          [
            "Function",
            [
              "merge",
              "f:( key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t",
              null
            ]
          ],
          [
            "Function",
            [
              "union",
              "f:( key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t",
              null
            ]
          ],
          [
            "Function",
            [
              "compare", "cmp:('a -> 'a -> int) -> 'a t -> 'a t -> int", null
            ]
          ],
          [
            "Function",
            [
              "equal", "cmp:('a -> 'a -> bool) -> 'a t -> 'a t -> bool", null
            ]
          ],
          [
            "Function",
            [
              "iter", "f:(key: key -> data:'a -> unit) -> 'a t -> unit", null
            ]
          ],
          [
            "Function",
            [
              "fold",
              "f:(key: key -> data:'a -> 'b -> 'b) -> 'a t -> init:'b -> 'b",
              null
            ]
          ],
          [
            "Function",
            [ "for_all", "f:( key -> 'a -> bool) -> 'a t -> bool", null ]
          ],
          [
            "Function",
            [ "exists", "f:( key -> 'a -> bool) -> 'a t -> bool", null ]
          ],
          [
            "Function",
            [ "filter", "f:( key -> 'a -> bool) -> 'a t -> 'a t", null ]
          ],
          [
            "Function",
            [
              "partition", "f:( key -> 'a -> bool) -> 'a t -> 'a t * 'a t",
              null
            ]
          ],
          [ "Function", [ "cardinal", "'a t -> int", null ] ],
          [ "Function", [ "bindings", "'a t -> ( key * 'a) list", null ] ],
          [ "Function", [ "min_binding", "'a t -> key * 'a", null ] ],
          [
            "Function",
            [ "min_binding_opt", "'a t -> ( key * 'a) option", null ]
          ],
          [ "Function", [ "max_binding", "'a t -> key * 'a", null ] ],
          [
            "Function",
            [ "max_binding_opt", "'a t -> ( key * 'a) option", null ]
          ],
          [ "Function", [ "choose", "'a t -> key * 'a", null ] ],
          [
            "Function",
            [ "choose_opt", "'a t -> ( key * 'a) option", null ]
          ],
          [
            "Function",
            [ "split", "key -> 'a t -> 'a t * 'a option * 'a t", null ]
          ],
          [ "Function", [ "find", "key -> 'a t -> 'a", null ] ],
          [ "Function", [ "find_opt", "key -> 'a t -> 'a option", null ] ],
          [
            "Function",
            [ "find_first", "f:( key -> bool) -> 'a t -> key * 'a", null ]
          ],
          [
            "Function",
            [
              "find_first_opt",
              "f:( key -> bool) -> 'a t -> ( key * 'a) option", null
            ]
          ],
          [
            "Function",
            [ "find_last", "f:( key -> bool) -> 'a t -> key * 'a", null ]
          ],
          [
            "Function",
            [
              "find_last_opt",
              "f:( key -> bool) -> 'a t -> ( key * 'a) option", null
            ]
          ],
          [ "Function", [ "map", "f:('a -> 'b) -> 'a t -> 'b t", null ] ],
          [
            "Function",
            [ "mapi", "f:( key -> 'a -> 'b) -> 'a t -> 'b t", null ]
          ],
          [ "Function", [ "to_seq", "'a t -> ( key * 'a) Seq.t", null ] ],
          [
            "Function",
            [ "to_seq_from", "key -> 'a t -> ( key * 'a) Seq.t", null ]
          ],
          [
            "Function",
            [ "add_seq", "( key * 'a) Seq.t -> 'a t -> 'a t", null ]
          ],
          [ "Function", [ "of_seq", "( key * 'a) Seq.t -> 'a t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMake\"><span class=\"keyword\">module</span> Make</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">Ord</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"MoreLabels.Map.OrderedType.html\">OrderedType</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"MoreLabels.Map.S.html\">S</a></code><code class=\"type\"> \n    with type key = Ord.t\n     and type 'a t = 'a <a href=\"Map.Make.html\">Map.Make</a>(Ord).t</code></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>Ord</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"MoreLabels.Map.OrderedType.html\">OrderedType</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "MoreLabels.Map.OrderedType",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the map keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>A total ordering function over the keys.\n          This is a two-argument function <code class=\"code\">f</code> such that\n          <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is zero if the keys <code class=\"code\">e1</code> and <code class=\"code\">e2</code> are equal,\n          <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is strictly negative if <code class=\"code\">e1</code> is smaller than <code class=\"code\">e2</code>,\n          and <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is strictly positive if <code class=\"code\">e1</code> is greater than <code class=\"code\">e2</code>.\n          Example: a suitable ordering function is the generic structural\n          comparison function <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "MoreLabels.Map.S",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "key", null, null, null ] ],
          [ "Typevariant", [ "+'a", "t", null, null ] ],
          [ "Function", [ "empty", "'a t", null ] ],
          [ "Function", [ "is_empty", "'a t -> bool", null ] ],
          [ "Function", [ "mem", "key -> 'a t -> bool", null ] ],
          [
            "Function",
            [ "add", "key: key -> data:'a -> 'a t -> 'a t", null ]
          ],
          [
            "Function",
            [
              "update",
              "key: key -> f:('a option -> 'a option) -> 'a t -> 'a t", null
            ]
          ],
          [ "Function", [ "singleton", "key -> 'a -> 'a t", null ] ],
          [ "Function", [ "remove", "key -> 'a t -> 'a t", null ] ],
          [
            "Function",
            [
              "merge",
              "f:( key -> 'a option -> 'b option -> 'c option) -> 'a t -> 'b t -> 'c t",
              null
            ]
          ],
          [
            "Function",
            [
              "union",
              "f:( key -> 'a -> 'a -> 'a option) -> 'a t -> 'a t -> 'a t",
              null
            ]
          ],
          [
            "Function",
            [
              "compare", "cmp:('a -> 'a -> int) -> 'a t -> 'a t -> int", null
            ]
          ],
          [
            "Function",
            [
              "equal", "cmp:('a -> 'a -> bool) -> 'a t -> 'a t -> bool", null
            ]
          ],
          [
            "Function",
            [
              "iter", "f:(key: key -> data:'a -> unit) -> 'a t -> unit", null
            ]
          ],
          [
            "Function",
            [
              "fold",
              "f:(key: key -> data:'a -> 'b -> 'b) -> 'a t -> init:'b -> 'b",
              null
            ]
          ],
          [
            "Function",
            [ "for_all", "f:( key -> 'a -> bool) -> 'a t -> bool", null ]
          ],
          [
            "Function",
            [ "exists", "f:( key -> 'a -> bool) -> 'a t -> bool", null ]
          ],
          [
            "Function",
            [ "filter", "f:( key -> 'a -> bool) -> 'a t -> 'a t", null ]
          ],
          [
            "Function",
            [
              "partition", "f:( key -> 'a -> bool) -> 'a t -> 'a t * 'a t",
              null
            ]
          ],
          [ "Function", [ "cardinal", "'a t -> int", null ] ],
          [ "Function", [ "bindings", "'a t -> ( key * 'a) list", null ] ],
          [ "Function", [ "min_binding", "'a t -> key * 'a", null ] ],
          [
            "Function",
            [ "min_binding_opt", "'a t -> ( key * 'a) option", null ]
          ],
          [ "Function", [ "max_binding", "'a t -> key * 'a", null ] ],
          [
            "Function",
            [ "max_binding_opt", "'a t -> ( key * 'a) option", null ]
          ],
          [ "Function", [ "choose", "'a t -> key * 'a", null ] ],
          [
            "Function",
            [ "choose_opt", "'a t -> ( key * 'a) option", null ]
          ],
          [
            "Function",
            [ "split", "key -> 'a t -> 'a t * 'a option * 'a t", null ]
          ],
          [ "Function", [ "find", "key -> 'a t -> 'a", null ] ],
          [ "Function", [ "find_opt", "key -> 'a t -> 'a option", null ] ],
          [
            "Function",
            [ "find_first", "f:( key -> bool) -> 'a t -> key * 'a", null ]
          ],
          [
            "Function",
            [
              "find_first_opt",
              "f:( key -> bool) -> 'a t -> ( key * 'a) option", null
            ]
          ],
          [
            "Function",
            [ "find_last", "f:( key -> bool) -> 'a t -> key * 'a", null ]
          ],
          [
            "Function",
            [
              "find_last_opt",
              "f:( key -> bool) -> 'a t -> ( key * 'a) option", null
            ]
          ],
          [ "Function", [ "map", "f:('a -> 'b) -> 'a t -> 'b t", null ] ],
          [
            "Function",
            [ "mapi", "f:( key -> 'a -> 'b) -> 'a t -> 'b t", null ]
          ],
          [ "Function", [ "to_seq", "'a t -> ( key * 'a) Seq.t", null ] ],
          [
            "Function",
            [ "to_seq_from", "key -> 'a t -> ( key * 'a) Seq.t", null ]
          ],
          [
            "Function",
            [ "add_seq", "( key * 'a) Seq.t -> 'a t -> 'a t", null ]
          ],
          [ "Function", [ "of_seq", "( key * 'a) Seq.t -> 'a t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "MoreLabels.Set",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Moduletype", [ "OrderedType", null ] ],
          [ "Moduletype", [ "S", null ] ],
          [ "Module", [ "Make", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "MoreLabels.Set.Make",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "elt", null, null, null ] ],
          [ "Typevariant", [ "t", null, null, null ] ],
          [ "Function", [ "empty", "t", null ] ],
          [ "Function", [ "is_empty", "t -> bool", null ] ],
          [ "Function", [ "mem", "elt -> t -> bool", null ] ],
          [ "Function", [ "add", "elt -> t -> t", null ] ],
          [ "Function", [ "singleton", "elt -> t", null ] ],
          [ "Function", [ "remove", "elt -> t -> t", null ] ],
          [ "Function", [ "union", "t -> t -> t", null ] ],
          [ "Function", [ "inter", "t -> t -> t", null ] ],
          [ "Function", [ "diff", "t -> t -> t", null ] ],
          [ "Function", [ "compare", "t -> t -> int", null ] ],
          [ "Function", [ "equal", "t -> t -> bool", null ] ],
          [ "Function", [ "subset", "t -> t -> bool", null ] ],
          [ "Function", [ "iter", "f:( elt -> unit) -> t -> unit", null ] ],
          [ "Function", [ "map", "f:( elt -> elt ) -> t -> t", null ] ],
          [
            "Function",
            [ "fold", "f:( elt -> 'a -> 'a) -> t -> init:'a -> 'a", null ]
          ],
          [
            "Function",
            [ "for_all", "f:( elt -> bool) -> t -> bool", null ]
          ],
          [ "Function", [ "exists", "f:( elt -> bool) -> t -> bool", null ] ],
          [ "Function", [ "filter", "f:( elt -> bool) -> t -> t", null ] ],
          [
            "Function",
            [ "partition", "f:( elt -> bool) -> t -> t * t", null ]
          ],
          [ "Function", [ "cardinal", "t -> int", null ] ],
          [ "Function", [ "elements", "t -> elt list", null ] ],
          [ "Function", [ "min_elt", "t -> elt", null ] ],
          [ "Function", [ "min_elt_opt", "t -> elt option", null ] ],
          [ "Function", [ "max_elt", "t -> elt", null ] ],
          [ "Function", [ "max_elt_opt", "t -> elt option", null ] ],
          [ "Function", [ "choose", "t -> elt", null ] ],
          [ "Function", [ "choose_opt", "t -> elt option", null ] ],
          [ "Function", [ "split", "elt -> t -> t * bool * t", null ] ],
          [ "Function", [ "find", "elt -> t -> elt", null ] ],
          [ "Function", [ "find_opt", "elt -> t -> elt option", null ] ],
          [
            "Function",
            [ "find_first", "f:( elt -> bool) -> t -> elt", null ]
          ],
          [
            "Function",
            [ "find_first_opt", "f:( elt -> bool) -> t -> elt option", null ]
          ],
          [
            "Function",
            [ "find_last", "f:( elt -> bool) -> t -> elt", null ]
          ],
          [
            "Function",
            [ "find_last_opt", "f:( elt -> bool) -> t -> elt option", null ]
          ],
          [ "Function", [ "of_list", "elt list -> t", null ] ],
          [ "Function", [ "to_seq_from", "elt -> t -> elt Seq.t", null ] ],
          [ "Function", [ "to_seq", "t -> elt Seq.t", null ] ],
          [ "Function", [ "add_seq", "elt Seq.t -> t -> t", null ] ],
          [ "Function", [ "of_seq", "elt Seq.t -> t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMake\"><span class=\"keyword\">module</span> Make</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">Ord</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"MoreLabels.Set.OrderedType.html\">OrderedType</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"MoreLabels.Set.S.html\">S</a></code><code class=\"type\"> \n    with type elt = Ord.t\n     and type t = <a href=\"Set.Make.html\">Set.Make</a>(Ord).t</code></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>Ord</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"MoreLabels.Set.OrderedType.html\">OrderedType</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "MoreLabels.Set.OrderedType",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the set elements.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>A total ordering function over the set elements.\n          This is a two-argument function <code class=\"code\">f</code> such that\n          <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is zero if the elements <code class=\"code\">e1</code> and <code class=\"code\">e2</code> are equal,\n          <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is strictly negative if <code class=\"code\">e1</code> is smaller than <code class=\"code\">e2</code>,\n          and <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is strictly positive if <code class=\"code\">e1</code> is greater than <code class=\"code\">e2</code>.\n          Example: a suitable ordering function is the generic structural\n          comparison function <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "MoreLabels.Set.S",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "elt", null, null, null ] ],
          [ "Typevariant", [ "t", null, null, null ] ],
          [ "Function", [ "empty", "t", null ] ],
          [ "Function", [ "is_empty", "t -> bool", null ] ],
          [ "Function", [ "mem", "elt -> t -> bool", null ] ],
          [ "Function", [ "add", "elt -> t -> t", null ] ],
          [ "Function", [ "singleton", "elt -> t", null ] ],
          [ "Function", [ "remove", "elt -> t -> t", null ] ],
          [ "Function", [ "union", "t -> t -> t", null ] ],
          [ "Function", [ "inter", "t -> t -> t", null ] ],
          [ "Function", [ "diff", "t -> t -> t", null ] ],
          [ "Function", [ "compare", "t -> t -> int", null ] ],
          [ "Function", [ "equal", "t -> t -> bool", null ] ],
          [ "Function", [ "subset", "t -> t -> bool", null ] ],
          [ "Function", [ "iter", "f:( elt -> unit) -> t -> unit", null ] ],
          [ "Function", [ "map", "f:( elt -> elt ) -> t -> t", null ] ],
          [
            "Function",
            [ "fold", "f:( elt -> 'a -> 'a) -> t -> init:'a -> 'a", null ]
          ],
          [
            "Function",
            [ "for_all", "f:( elt -> bool) -> t -> bool", null ]
          ],
          [ "Function", [ "exists", "f:( elt -> bool) -> t -> bool", null ] ],
          [ "Function", [ "filter", "f:( elt -> bool) -> t -> t", null ] ],
          [
            "Function",
            [ "partition", "f:( elt -> bool) -> t -> t * t", null ]
          ],
          [ "Function", [ "cardinal", "t -> int", null ] ],
          [ "Function", [ "elements", "t -> elt list", null ] ],
          [ "Function", [ "min_elt", "t -> elt", null ] ],
          [ "Function", [ "min_elt_opt", "t -> elt option", null ] ],
          [ "Function", [ "max_elt", "t -> elt", null ] ],
          [ "Function", [ "max_elt_opt", "t -> elt option", null ] ],
          [ "Function", [ "choose", "t -> elt", null ] ],
          [ "Function", [ "choose_opt", "t -> elt option", null ] ],
          [ "Function", [ "split", "elt -> t -> t * bool * t", null ] ],
          [ "Function", [ "find", "elt -> t -> elt", null ] ],
          [ "Function", [ "find_opt", "elt -> t -> elt option", null ] ],
          [
            "Function",
            [ "find_first", "f:( elt -> bool) -> t -> elt", null ]
          ],
          [
            "Function",
            [ "find_first_opt", "f:( elt -> bool) -> t -> elt option", null ]
          ],
          [
            "Function",
            [ "find_last", "f:( elt -> bool) -> t -> elt", null ]
          ],
          [
            "Function",
            [ "find_last_opt", "f:( elt -> bool) -> t -> elt option", null ]
          ],
          [ "Function", [ "of_list", "elt list -> t", null ] ],
          [ "Function", [ "to_seq_from", "elt -> t -> elt Seq.t", null ] ],
          [ "Function", [ "to_seq", "t -> elt Seq.t", null ] ],
          [ "Function", [ "add_seq", "elt Seq.t -> t -> t", null ] ],
          [ "Function", [ "of_seq", "elt Seq.t -> t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Mutex",
    "module_info":
      "\n<p>Locks for mutual exclusion.</p>\n\n<p>Mutexes (mutual-exclusion locks) are used to implement critical sections\n   and protect shared mutable data structures against concurrent accesses.\n   The typical use is (if <code class=\"code\">m</code> is the mutex associated with the data structure\n   <code class=\"code\"><span class=\"constructor\">D</span></code>):</p>\n<pre class=\"codepre\"><code class=\"code\">     <span class=\"constructor\">Mutex</span>.lock m;\n     <span class=\"comment\">(* Critical section that operates over D *)</span>;\n     <span class=\"constructor\">Mutex</span>.unlock m\n   </code></pre>",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of mutexes.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "unit -> t",
              "\n<div class=\"info-desc\">\n<p>Return a new mutex.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lock", "t -> unit",
              "\n<div class=\"info-desc\">\n<p>Lock the given mutex. Only one thread can have the mutex locked\n   at any time. A thread that attempts to lock a mutex already locked\n   by another thread will suspend until the other thread unlocks\n   the mutex.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "try_lock", "t -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Mutex.html#VALlock\"><code class=\"code\"><span class=\"constructor\">Mutex</span>.lock</code></a>, but does not suspend the calling thread if\n   the mutex is already locked: just return <code class=\"code\"><span class=\"keyword\">false</span></code> immediately\n   in that case. If the mutex is unlocked, lock it and\n   return <code class=\"code\"><span class=\"keyword\">true</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unlock", "t -> unit",
              "\n<div class=\"info-desc\">\n<p>Unlock the given mutex. Other threads suspended trying to lock\n   the mutex will restart.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Nativeint",
    "module_info":
      "\n<p>Processor-native integers.</p>\n\n<p>This module provides operations on the type <code class=\"code\">nativeint</code> of\n   signed 32-bit integers (on 32-bit platforms) or\n   signed 64-bit integers (on 64-bit platforms).\n   This integer type has exactly the same width as that of a\n   pointer type in the C compiler.  All arithmetic operations over\n   <code class=\"code\">nativeint</code> are taken modulo 2<sup class=\"superscript\">32</sup> or 2<sup class=\"superscript\">64</sup> depending\n   on the word size of the architecture.</p>\n\n<p>Performance notice: values of type <code class=\"code\">nativeint</code> occupy more memory\n   space than values of type <code class=\"code\">int</code>, and arithmetic operations on\n   <code class=\"code\">nativeint</code> are generally slower than those on <code class=\"code\">int</code>.  Use <code class=\"code\">nativeint</code>\n   only when the application requires the extra bit of precision\n   over the <code class=\"code\">int</code> type.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "zero", "nativeint",
              "\n<div class=\"info-desc\">\n<p>The native integer 0.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "one", "nativeint",
              "\n<div class=\"info-desc\">\n<p>The native integer 1.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "minus_one", "nativeint",
              "\n<div class=\"info-desc\">\n<p>The native integer -1.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "neg", "nativeint -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Unary negation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "nativeint -> nativeint -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Addition.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub", "nativeint -> nativeint -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Subtraction.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mul", "nativeint -> nativeint -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Multiplication.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "div", "nativeint -> nativeint -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Integer division.  Raise <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code> if the second\n   argument is zero.  This division rounds the real quotient of\n   its arguments towards zero, as specified for <a href=\"Pervasives.html#VAL(/)\"><code class=\"code\">(/)</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rem", "nativeint -> nativeint -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Integer remainder.  If <code class=\"code\">y</code> is not zero, the result\n   of <code class=\"code\"><span class=\"constructor\">Nativeint</span>.rem&nbsp;x&nbsp;y</code> satisfies the following properties:\n   <code class=\"code\"><span class=\"constructor\">Nativeint</span>.zero&nbsp;&lt;=&nbsp;<span class=\"constructor\">Nativeint</span>.rem&nbsp;x&nbsp;y&nbsp;&lt;&nbsp;<span class=\"constructor\">Nativeint</span>.abs&nbsp;y</code> and\n   <code class=\"code\">x&nbsp;=&nbsp;<span class=\"constructor\">Nativeint</span>.add&nbsp;(<span class=\"constructor\">Nativeint</span>.mul&nbsp;(<span class=\"constructor\">Nativeint</span>.div&nbsp;x&nbsp;y)&nbsp;y)<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span class=\"constructor\">Nativeint</span>.rem&nbsp;x&nbsp;y)</code>.\n   If <code class=\"code\">y&nbsp;=&nbsp;0</code>, <code class=\"code\"><span class=\"constructor\">Nativeint</span>.rem&nbsp;x&nbsp;y</code> raises <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "succ", "nativeint -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Successor.\n   <code class=\"code\"><span class=\"constructor\">Nativeint</span>.succ&nbsp;x</code> is <code class=\"code\"><span class=\"constructor\">Nativeint</span>.add&nbsp;x&nbsp;<span class=\"constructor\">Nativeint</span>.one</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pred", "nativeint -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Predecessor.\n   <code class=\"code\"><span class=\"constructor\">Nativeint</span>.pred&nbsp;x</code> is <code class=\"code\"><span class=\"constructor\">Nativeint</span>.sub&nbsp;x&nbsp;<span class=\"constructor\">Nativeint</span>.one</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "abs", "nativeint -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Return the absolute value of its argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "size", "int",
              "\n<div class=\"info-desc\">\n<p>The size in bits of a native integer.  This is equal to <code class=\"code\">32</code>\n   on a 32-bit platform and to <code class=\"code\">64</code> on a 64-bit platform.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "max_int", "nativeint",
              "\n<div class=\"info-desc\">\n<p>The greatest representable native integer,\n   either 2<sup class=\"superscript\">31</sup> - 1 on a 32-bit platform,\n   or 2<sup class=\"superscript\">63</sup> - 1 on a 64-bit platform.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "min_int", "nativeint",
              "\n<div class=\"info-desc\">\n<p>The smallest representable native integer,\n   either -2<sup class=\"superscript\">31</sup> on a 32-bit platform,\n   or -2<sup class=\"superscript\">63</sup> on a 64-bit platform.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "logand", "nativeint -> nativeint -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Bitwise logical and.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "logor", "nativeint -> nativeint -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Bitwise logical or.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "logxor", "nativeint -> nativeint -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Bitwise logical exclusive or.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lognot", "nativeint -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Bitwise logical negation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "shift_left", "nativeint -> int -> nativeint",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Nativeint</span>.shift_left&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;bitsize</code>,\n   where <code class=\"code\">bitsize</code> is <code class=\"code\">32</code> on a 32-bit platform and\n   <code class=\"code\">64</code> on a 64-bit platform.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "shift_right", "nativeint -> int -> nativeint",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Nativeint</span>.shift_right&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.\n   This is an arithmetic shift: the sign bit of <code class=\"code\">x</code> is replicated\n   and inserted in the vacated bits.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;bitsize</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "shift_right_logical", "nativeint -> int -> nativeint",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Nativeint</span>.shift_right_logical&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right\n   by <code class=\"code\">y</code> bits.\n   This is a logical shift: zeroes are inserted in the vacated bits\n   regardless of the sign of <code class=\"code\">x</code>.\n   The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;bitsize</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_int", "int -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Convert the given integer (type <code class=\"code\">int</code>) to a native integer\n   (type <code class=\"code\">nativeint</code>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_int", "nativeint -> int",
              "\n<div class=\"info-desc\">\n<p>Convert the given native integer (type <code class=\"code\">nativeint</code>) to an\n   integer (type <code class=\"code\">int</code>).  The high-order bit is lost during\n   the conversion.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_float", "float -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Convert the given floating-point number to a native integer,\n   discarding the fractional part (truncate towards 0).\n   The result of the conversion is undefined if, after truncation,\n   the number is outside the range\n   [<a href=\"Nativeint.html#VALmin_int\"><code class=\"code\"><span class=\"constructor\">Nativeint</span>.min_int</code></a>, <a href=\"Nativeint.html#VALmax_int\"><code class=\"code\"><span class=\"constructor\">Nativeint</span>.max_int</code></a>].</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_float", "nativeint -> float",
              "\n<div class=\"info-desc\">\n<p>Convert the given native integer to a floating-point number.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_int32", "int32 -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Convert the given 32-bit integer (type <code class=\"code\">int32</code>)\n   to a native integer.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_int32", "nativeint -> int32",
              "\n<div class=\"info-desc\">\n<p>Convert the given native integer to a\n   32-bit integer (type <code class=\"code\">int32</code>).  On 64-bit platforms,\n   the 64-bit native integer is taken modulo 2<sup class=\"superscript\">32</sup>,\n   i.e. the top 32 bits are lost.  On 32-bit platforms,\n   the conversion is exact.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_string", "string -> nativeint",
              "\n<div class=\"info-desc\">\n<p>Convert the given string to a native integer.\n   The string is read in decimal (by default, or if the string \n   begins with <code class=\"code\">0u</code>) or in hexadecimal, octal or binary if the\n   string begins with <code class=\"code\">0x</code>, <code class=\"code\">0o</code> or <code class=\"code\">0b</code> respectively.</p>\n\n<p>The <code class=\"code\">0u</code> prefix reads the input as an unsigned integer in the range\n   <code class=\"code\">[0,&nbsp;2*<span class=\"constructor\">Nativeint</span>.max_int+1]</code>.  If the input exceeds <a href=\"Nativeint.html#VALmax_int\"><code class=\"code\"><span class=\"constructor\">Nativeint</span>.max_int</code></a>\n   it is converted to the signed integer\n   <code class=\"code\"><span class=\"constructor\">Int64</span>.min_int&nbsp;+&nbsp;input&nbsp;-&nbsp;<span class=\"constructor\">Nativeint</span>.max_int&nbsp;-&nbsp;1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"Nativeint.of_string\"</span></code> if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type <code class=\"code\">nativeint</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_string_opt", "string -> nativeint option",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">of_string</code>, but return <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_string", "nativeint -> string",
              "\n<div class=\"info-desc\">\n<p>Return the string representation of its argument, in decimal.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", "= nativeint", null,
              "\n<div class=\"info-desc\">\n<p>An alias for the type of native integers.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>The comparison function for native integers, with the same specification as\n    <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>, this function <code class=\"code\">compare</code>\n    allows the module <code class=\"code\"><span class=\"constructor\">Nativeint</span></code> to be passed as argument to the functors\n    <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p>The equal function for native ints.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Numbers.Float",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [ "Module", [ "T", null ] ],
          [ "Include", "Identifiable.Thing" ],
          [ "Module", [ "Set", null ] ],
          [ "Module", [ "Map", null ] ],
          [ "Module", [ "Tbl", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Numbers",
    "module_info":
      "\n<p>Modules about numbers, some of which satisfy <a href=\"Identifiable.S.html\"><code class=\"code\"><span class=\"constructor\">Identifiable</span>.<span class=\"constructor\">S</span></code></a>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Module", [ "Int", null ] ],
          [ "Module", [ "Int8", null ] ],
          [ "Module", [ "Int16", null ] ],
          [ "Module", [ "Float", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Numbers.Int",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Include", "Identifiable.S" ],
          [
            "Function",
            [
              "zero_to_n", "int -> Set.t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">zero_to_n&nbsp;n</code> is the set of numbers {0, ..., n} (inclusive).</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Numbers.Int16",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [ "Function", [ "of_int_exn", "int -> t", null ] ],
          [ "Function", [ "of_int64_exn", "Int64.t -> t", null ] ],
          [ "Function", [ "to_int", "t -> int", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Numbers.Int8",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [ "Function", [ "zero", "t", null ] ],
          [ "Function", [ "one", "t", null ] ],
          [ "Function", [ "of_int_exn", "int -> t", null ] ],
          [ "Function", [ "to_int", "t -> int", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Obj.Ephemeron",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": "<p>Ephemeron with arbitrary arity and untyped</p>",
        "elements": [
          [
            "Typevariant",
            [
              "obj_t", "= Obj.t", null,
              "\n<div class=\"info-desc\">\n<p>alias for <a href=\"Obj.html#TYPEt\"><code class=\"code\"><span class=\"constructor\">Obj</span>.t</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>an ephemeron cf <a href=\"Ephemeron.html\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span></code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "int -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">create&nbsp;n</code> returns an ephemeron with <code class=\"code\">n</code> keys.\n      All the keys and the data are initially empty</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "length", "t -> int",
              "\n<div class=\"info-desc\">\n<p>return the number of keys</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_key", "t -> int -> obj_t option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_key_copy", "t -> int -> obj_t option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_key_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key_copy</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_key", "t -> int -> obj_t -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unset_key", "t -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALunset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "check_key", "t -> int -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcheck_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit_key", "t -> int -> t -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALblit_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_data", "t -> obj_t option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_data_copy", "t -> obj_t option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_data_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data_copy</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_data", "t -> obj_t -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_data</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unset_data", "t -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALunset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_data</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "check_data", "t -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcheck_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_data</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit_data", "t -> t -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALblit_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_data</code></a></p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Obj",
    "module_info":
      "\n<p>Operations on internal representations of values.</p>\n\n<p>Not for the casual user.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [ "Function", [ "repr", "'a -> t", null ] ],
          [ "Function", [ "obj", "t -> 'a", null ] ],
          [ "Function", [ "magic", "'a -> 'b", null ] ],
          [ "Function", [ "is_block", "t -> bool", null ] ],
          [ "Function", [ "is_int", "t -> bool", null ] ],
          [ "Function", [ "tag", "t -> int", null ] ],
          [ "Function", [ "size", "t -> int", null ] ],
          [
            "Function",
            [
              "reachable_words", "t -> int",
              "\n<div class=\"info-desc\">\n<p>Computes the total size (in words, including the headers) of all\n     heap blocks accessible from the argument.  Statically\n     allocated blocks are excluded.</p>\n\n<p>@Since 4.04</p>\n</div>\n"
            ]
          ],
          [ "Function", [ "field", "t -> int -> t", null ] ],
          [
            "Function",
            [
              "set_field", "t -> int -> t -> unit",
              "\n<div class=\"info-desc\">\n<p>When using flambda:</p>\n\n<p><code class=\"code\">set_field</code> MUST NOT be called on immutable blocks.  (Blocks allocated\n    in C stubs, or with <code class=\"code\">new_block</code> below, are always considered mutable.)</p>\n\n<p>The same goes for <code class=\"code\">set_double_field</code> and <code class=\"code\">set_tag</code>.  However, for\n    <code class=\"code\">set_tag</code>, in the case of immutable blocks where the middle-end optimizers\n    never see code that discriminates on their tag (for example records), the\n    operation should be safe.  Such uses are nonetheless discouraged.</p>\n\n<p>For experts only:\n    <code class=\"code\">set_field</code> et al can be made safe by first wrapping the block in\n    <a href=\"Sys.html#VALopaque_identity\"><code class=\"code\"><span class=\"constructor\">Sys</span>.opaque_identity</code></a>, so any information about its contents will not\n    be propagated.</p>\n</div>\n"
            ]
          ],
          [ "Function", [ "set_tag", "t -> int -> unit", null ] ],
          [ "Function", [ "double_field", "t -> int -> float", null ] ],
          [
            "Function",
            [ "set_double_field", "t -> int -> float -> unit", null ]
          ],
          [ "Function", [ "new_block", "int -> int -> t", null ] ],
          [ "Function", [ "dup", "t -> t", null ] ],
          [ "Function", [ "truncate", "t -> int -> unit", null ] ],
          [ "Function", [ "add_offset", "t -> Int32.t -> t", null ] ],
          [
            "Function",
            [ "first_non_constant_constructor_tag", "int", null ]
          ],
          [
            "Function",
            [ "last_non_constant_constructor_tag", "int", null ]
          ],
          [ "Function", [ "lazy_tag", "int", null ] ],
          [ "Function", [ "closure_tag", "int", null ] ],
          [ "Function", [ "object_tag", "int", null ] ],
          [ "Function", [ "infix_tag", "int", null ] ],
          [ "Function", [ "forward_tag", "int", null ] ],
          [ "Function", [ "no_scan_tag", "int", null ] ],
          [ "Function", [ "abstract_tag", "int", null ] ],
          [ "Function", [ "string_tag", "int", null ] ],
          [ "Function", [ "double_tag", "int", null ] ],
          [ "Function", [ "double_array_tag", "int", null ] ],
          [ "Function", [ "custom_tag", "int", null ] ],
          [ "Function", [ "final_tag", "int", null ] ],
          [ "Function", [ "int_tag", "int", null ] ],
          [ "Function", [ "out_of_heap_tag", "int", null ] ],
          [ "Function", [ "unaligned_tag", "int", null ] ],
          [
            "Function",
            [ "extension_constructor", "'a -> extension_constructor", null ]
          ],
          [
            "Function",
            [ "extension_name", "extension_constructor -> string", null ]
          ],
          [
            "Function",
            [
              "extension_id", "extension_constructor -> int",
              "<p>The following two functions are deprecated.  Use module <a href=\"Marshal.html\"><code class=\"code\"><span class=\"constructor\">Marshal</span></code></a>\n    instead.</p>"
            ]
          ],
          [ "Function", [ "marshal", "t -> bytes", null ] ],
          [ "Function", [ "unmarshal", "bytes -> int -> t * int", null ] ],
          [ "Module", [ "Ephemeron", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Oo",
    "module_info": "\n<p>Operations on objects</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "copy", "(< .. > as 'a) -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Oo</span>.copy&nbsp;o</code> returns a copy of object <code class=\"code\">o</code>, that is a fresh\n   object with the same methods and instance variables as <code class=\"code\">o</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "id", "< .. > -> int",
              "\n<div class=\"info-desc\">\n<p>Return an integer identifying this object, unique for\n    the current execution of the program. The generic comparison\n    and hashing functions are based on this integer. When an object\n    is obtained by unmarshaling, the id is refreshed, and thus\n    different from the original object. As a consequence, the internal\n    invariants of data structures such as hash table or sets containing\n    objects are broken after unmarshaling the data structures.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Parse",
    "module_info": "\n<p>Entry points in the parser</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "implementation", "Lexing.lexbuf -> Parsetree.structure", null
            ]
          ],
          [
            "Function",
            [ "interface", "Lexing.lexbuf -> Parsetree.signature", null ]
          ],
          [
            "Function",
            [
              "toplevel_phrase",
              "Lexing.lexbuf -> Parsetree.toplevel_phrase", null
            ]
          ],
          [
            "Function",
            [
              "use_file", "Lexing.lexbuf -> Parsetree.toplevel_phrase list",
              null
            ]
          ],
          [
            "Function",
            [ "core_type", "Lexing.lexbuf -> Parsetree.core_type", null ]
          ],
          [
            "Function",
            [ "expression", "Lexing.lexbuf -> Parsetree.expression", null ]
          ],
          [
            "Function",
            [ "pattern", "Lexing.lexbuf -> Parsetree.pattern", null ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Parser",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "token", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.AMPERAMPER\"><span class=\"constructor\">AMPERAMPER</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.AMPERSAND\"><span class=\"constructor\">AMPERSAND</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.AND\"><span class=\"constructor\">AND</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.AS\"><span class=\"constructor\">AS</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.ASSERT\"><span class=\"constructor\">ASSERT</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.BACKQUOTE\"><span class=\"constructor\">BACKQUOTE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.BANG\"><span class=\"constructor\">BANG</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.BAR\"><span class=\"constructor\">BAR</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.BARBAR\"><span class=\"constructor\">BARBAR</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.BARRBRACKET\"><span class=\"constructor\">BARRBRACKET</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.BEGIN\"><span class=\"constructor\">BEGIN</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.CHAR\"><span class=\"constructor\">CHAR</span></span> <span class=\"keyword\">of</span> <code class=\"type\">char</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.CLASS\"><span class=\"constructor\">CLASS</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.COLON\"><span class=\"constructor\">COLON</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.COLONCOLON\"><span class=\"constructor\">COLONCOLON</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.COLONEQUAL\"><span class=\"constructor\">COLONEQUAL</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.COLONGREATER\"><span class=\"constructor\">COLONGREATER</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.COMMA\"><span class=\"constructor\">COMMA</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.CONSTRAINT\"><span class=\"constructor\">CONSTRAINT</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.DO\"><span class=\"constructor\">DO</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.DONE\"><span class=\"constructor\">DONE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.DOT\"><span class=\"constructor\">DOT</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.DOTDOT\"><span class=\"constructor\">DOTDOT</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.DOWNTO\"><span class=\"constructor\">DOWNTO</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.ELSE\"><span class=\"constructor\">ELSE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.END\"><span class=\"constructor\">END</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.EOF\"><span class=\"constructor\">EOF</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.EQUAL\"><span class=\"constructor\">EQUAL</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.EXCEPTION\"><span class=\"constructor\">EXCEPTION</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.EXTERNAL\"><span class=\"constructor\">EXTERNAL</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.FALSE\"><span class=\"constructor\">FALSE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.FLOAT\"><span class=\"constructor\">FLOAT</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(string * char option)</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.FOR\"><span class=\"constructor\">FOR</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.FUN\"><span class=\"constructor\">FUN</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.FUNCTION\"><span class=\"constructor\">FUNCTION</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.FUNCTOR\"><span class=\"constructor\">FUNCTOR</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.GREATER\"><span class=\"constructor\">GREATER</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.GREATERRBRACE\"><span class=\"constructor\">GREATERRBRACE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.GREATERRBRACKET\"><span class=\"constructor\">GREATERRBRACKET</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.IF\"><span class=\"constructor\">IF</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.IN\"><span class=\"constructor\">IN</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.INCLUDE\"><span class=\"constructor\">INCLUDE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.INFIXOP0\"><span class=\"constructor\">INFIXOP0</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.INFIXOP1\"><span class=\"constructor\">INFIXOP1</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.INFIXOP2\"><span class=\"constructor\">INFIXOP2</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.INFIXOP3\"><span class=\"constructor\">INFIXOP3</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.INFIXOP4\"><span class=\"constructor\">INFIXOP4</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.DOTOP\"><span class=\"constructor\">DOTOP</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.INHERIT\"><span class=\"constructor\">INHERIT</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.INITIALIZER\"><span class=\"constructor\">INITIALIZER</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.INT\"><span class=\"constructor\">INT</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(string * char option)</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LABEL\"><span class=\"constructor\">LABEL</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LAZY\"><span class=\"constructor\">LAZY</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LBRACE\"><span class=\"constructor\">LBRACE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LBRACELESS\"><span class=\"constructor\">LBRACELESS</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LBRACKET\"><span class=\"constructor\">LBRACKET</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LBRACKETBAR\"><span class=\"constructor\">LBRACKETBAR</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LBRACKETLESS\"><span class=\"constructor\">LBRACKETLESS</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LBRACKETGREATER\"><span class=\"constructor\">LBRACKETGREATER</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LBRACKETPERCENT\"><span class=\"constructor\">LBRACKETPERCENT</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LBRACKETPERCENTPERCENT\"><span class=\"constructor\">LBRACKETPERCENTPERCENT</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LESS\"><span class=\"constructor\">LESS</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LESSMINUS\"><span class=\"constructor\">LESSMINUS</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LET\"><span class=\"constructor\">LET</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LIDENT\"><span class=\"constructor\">LIDENT</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LPAREN\"><span class=\"constructor\">LPAREN</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LBRACKETAT\"><span class=\"constructor\">LBRACKETAT</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LBRACKETATAT\"><span class=\"constructor\">LBRACKETATAT</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.LBRACKETATATAT\"><span class=\"constructor\">LBRACKETATATAT</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.MATCH\"><span class=\"constructor\">MATCH</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.METHOD\"><span class=\"constructor\">METHOD</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.MINUS\"><span class=\"constructor\">MINUS</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.MINUSDOT\"><span class=\"constructor\">MINUSDOT</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.MINUSGREATER\"><span class=\"constructor\">MINUSGREATER</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.MODULE\"><span class=\"constructor\">MODULE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.MUTABLE\"><span class=\"constructor\">MUTABLE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.NEW\"><span class=\"constructor\">NEW</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.NONREC\"><span class=\"constructor\">NONREC</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.OBJECT\"><span class=\"constructor\">OBJECT</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.OF\"><span class=\"constructor\">OF</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.OPEN\"><span class=\"constructor\">OPEN</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.OPTLABEL\"><span class=\"constructor\">OPTLABEL</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.OR\"><span class=\"constructor\">OR</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.PERCENT\"><span class=\"constructor\">PERCENT</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.PLUS\"><span class=\"constructor\">PLUS</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.PLUSDOT\"><span class=\"constructor\">PLUSDOT</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.PLUSEQ\"><span class=\"constructor\">PLUSEQ</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.PREFIXOP\"><span class=\"constructor\">PREFIXOP</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.PRIVATE\"><span class=\"constructor\">PRIVATE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.QUESTION\"><span class=\"constructor\">QUESTION</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.QUOTE\"><span class=\"constructor\">QUOTE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.RBRACE\"><span class=\"constructor\">RBRACE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.RBRACKET\"><span class=\"constructor\">RBRACKET</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.REC\"><span class=\"constructor\">REC</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.RPAREN\"><span class=\"constructor\">RPAREN</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.SEMI\"><span class=\"constructor\">SEMI</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.SEMISEMI\"><span class=\"constructor\">SEMISEMI</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.HASH\"><span class=\"constructor\">HASH</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.HASHOP\"><span class=\"constructor\">HASHOP</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.SIG\"><span class=\"constructor\">SIG</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.STAR\"><span class=\"constructor\">STAR</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.STRING\"><span class=\"constructor\">STRING</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(string * string option)</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.STRUCT\"><span class=\"constructor\">STRUCT</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.THEN\"><span class=\"constructor\">THEN</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.TILDE\"><span class=\"constructor\">TILDE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.TO\"><span class=\"constructor\">TO</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.TRUE\"><span class=\"constructor\">TRUE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.TRY\"><span class=\"constructor\">TRY</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.TYPE\"><span class=\"constructor\">TYPE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.UIDENT\"><span class=\"constructor\">UIDENT</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.UNDERSCORE\"><span class=\"constructor\">UNDERSCORE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.VAL\"><span class=\"constructor\">VAL</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.VIRTUAL\"><span class=\"constructor\">VIRTUAL</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.WHEN\"><span class=\"constructor\">WHEN</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.WHILE\"><span class=\"constructor\">WHILE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.WITH\"><span class=\"constructor\">WITH</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.COMMENT\"><span class=\"constructor\">COMMENT</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(string * <a href=\"Location.html#TYPEt\">Location.t</a>)</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.DOCSTRING\"><span class=\"constructor\">DOCSTRING</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Docstrings.html#TYPEdocstring\">Docstrings.docstring</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoken.EOL\"><span class=\"constructor\">EOL</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "implementation",
              "( Lexing.lexbuf -> token ) -> Lexing.lexbuf -> Parsetree.structure",
              null
            ]
          ],
          [
            "Function",
            [
              "interface",
              "( Lexing.lexbuf -> token ) -> Lexing.lexbuf -> Parsetree.signature",
              null
            ]
          ],
          [
            "Function",
            [
              "toplevel_phrase",
              "( Lexing.lexbuf -> token ) -> Lexing.lexbuf -> Parsetree.toplevel_phrase",
              null
            ]
          ],
          [
            "Function",
            [
              "use_file",
              "( Lexing.lexbuf -> token ) -> Lexing.lexbuf -> Parsetree.toplevel_phrase list",
              null
            ]
          ],
          [
            "Function",
            [
              "parse_core_type",
              "( Lexing.lexbuf -> token ) -> Lexing.lexbuf -> Parsetree.core_type",
              null
            ]
          ],
          [
            "Function",
            [
              "parse_expression",
              "( Lexing.lexbuf -> token ) -> Lexing.lexbuf -> Parsetree.expression",
              null
            ]
          ],
          [
            "Function",
            [
              "parse_pattern",
              "( Lexing.lexbuf -> token ) -> Lexing.lexbuf -> Parsetree.pattern",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Parsetree",
    "module_info": "\n<p>Abstract syntax tree produced by parsing</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "constant", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstant.Pconst_integer\"><span class=\"constructor\">Pconst_integer</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * char option</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstant.Pconst_char\"><span class=\"constructor\">Pconst_char</span></span> <span class=\"keyword\">of</span> <code class=\"type\">char</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstant.Pconst_string\"><span class=\"constructor\">Pconst_string</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * string option</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstant.Pconst_float\"><span class=\"constructor\">Pconst_float</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * char option</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Extension points",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [ "attribute", "= string Asttypes.loc * payload", null, null ]
          ],
          [
            "Typevariant",
            [ "extension", "= string Asttypes.loc * payload", null, null ]
          ],
          [ "Typevariant", [ "attributes", "= attribute list", null, null ] ],
          [
            "Typevariant",
            [
              "payload", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpayload.PStr\"><span class=\"constructor\">PStr</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEstructure\">structure</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpayload.PSig\"><span class=\"constructor\">PSig</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEsignature\">signature</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpayload.PTyp\"><span class=\"constructor\">PTyp</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">core_type</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpayload.PPat\"><span class=\"constructor\">PPat</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">pattern</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a> option</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Core language",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "core_type", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcore_type.ptyp_desc\">ptyp_desc</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type_desc\">core_type_desc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcore_type.ptyp_loc\">ptyp_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcore_type.ptyp_attributes\">ptyp_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "core_type_desc", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcore_type_desc.Ptyp_any\"><span class=\"constructor\">Ptyp_any</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcore_type_desc.Ptyp_var\"><span class=\"constructor\">Ptyp_var</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcore_type_desc.Ptyp_arrow\"><span class=\"constructor\">Ptyp_arrow</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcore_type_desc.Ptyp_tuple\"><span class=\"constructor\">Ptyp_tuple</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">core_type</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcore_type_desc.Ptyp_constr\"><span class=\"constructor\">Ptyp_constr</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcore_type_desc.Ptyp_object\"><span class=\"constructor\">Ptyp_object</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEobject_field\">object_field</a> list * <a href=\"Asttypes.html#TYPEclosed_flag\">Asttypes.closed_flag</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcore_type_desc.Ptyp_class\"><span class=\"constructor\">Ptyp_class</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcore_type_desc.Ptyp_alias\"><span class=\"constructor\">Ptyp_alias</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">core_type</a> * string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcore_type_desc.Ptyp_variant\"><span class=\"constructor\">Ptyp_variant</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPErow_field\">row_field</a> list * <a href=\"Asttypes.html#TYPEclosed_flag\">Asttypes.closed_flag</a> * <a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> list option</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcore_type_desc.Ptyp_poly\"><span class=\"constructor\">Ptyp_poly</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> list * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcore_type_desc.Ptyp_package\"><span class=\"constructor\">Ptyp_package</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEpackage_type\">package_type</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcore_type_desc.Ptyp_extension\"><span class=\"constructor\">Ptyp_extension</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEextension\">extension</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "package_type",
              "= Longident.t Asttypes.loc * ( Longident.t Asttypes.loc * core_type ) list",
              null, null
            ]
          ],
          [
            "Typevariant",
            [
              "row_field", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTrow_field.Rtag\"><span class=\"constructor\">Rtag</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEattributes\">attributes</a> * bool<br>        * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTrow_field.Rinherit\"><span class=\"constructor\">Rinherit</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">core_type</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "object_field", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTobject_field.Otag\"><span class=\"constructor\">Otag</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEattributes\">attributes</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTobject_field.Oinherit\"><span class=\"constructor\">Oinherit</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">core_type</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "pattern", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern.ppat_desc\">ppat_desc</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEpattern_desc\">pattern_desc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern.ppat_loc\">ppat_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern.ppat_attributes\">ppat_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "pattern_desc", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_any\"><span class=\"constructor\">Ppat_any</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_var\"><span class=\"constructor\">Ppat_var</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_alias\"><span class=\"constructor\">Ppat_alias</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">pattern</a> * string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_constant\"><span class=\"constructor\">Ppat_constant</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEconstant\">constant</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_interval\"><span class=\"constructor\">Ppat_interval</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEconstant\">constant</a> * <a href=\"Parsetree.html#TYPEconstant\">constant</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_tuple\"><span class=\"constructor\">Ppat_tuple</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">pattern</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_construct\"><span class=\"constructor\">Ppat_construct</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEpattern\">pattern</a> option</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_variant\"><span class=\"constructor\">Ppat_variant</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> * <a href=\"Parsetree.html#TYPEpattern\">pattern</a> option</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_record\"><span class=\"constructor\">Ppat_record</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(<a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEpattern\">pattern</a>) list * <a href=\"Asttypes.html#TYPEclosed_flag\">Asttypes.closed_flag</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_array\"><span class=\"constructor\">Ppat_array</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">pattern</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_or\"><span class=\"constructor\">Ppat_or</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">pattern</a> * <a href=\"Parsetree.html#TYPEpattern\">pattern</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_constraint\"><span class=\"constructor\">Ppat_constraint</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">pattern</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_type\"><span class=\"constructor\">Ppat_type</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_lazy\"><span class=\"constructor\">Ppat_lazy</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">pattern</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_unpack\"><span class=\"constructor\">Ppat_unpack</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_exception\"><span class=\"constructor\">Ppat_exception</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">pattern</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_extension\"><span class=\"constructor\">Ppat_extension</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEextension\">extension</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpattern_desc.Ppat_open\"><span class=\"constructor\">Ppat_open</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEpattern\">pattern</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "expression", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression.pexp_desc\">pexp_desc</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression_desc\">expression_desc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression.pexp_loc\">pexp_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression.pexp_attributes\">pexp_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "expression_desc", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_ident\"><span class=\"constructor\">Pexp_ident</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_constant\"><span class=\"constructor\">Pexp_constant</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEconstant\">constant</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_let\"><span class=\"constructor\">Pexp_let</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPErec_flag\">Asttypes.rec_flag</a> * <a href=\"Parsetree.html#TYPEvalue_binding\">value_binding</a> list * <a href=\"Parsetree.html#TYPEexpression\">expression</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_function\"><span class=\"constructor\">Pexp_function</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEcase\">case</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_fun\"><span class=\"constructor\">Pexp_fun</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a> option * <a href=\"Parsetree.html#TYPEpattern\">pattern</a><br>        * <a href=\"Parsetree.html#TYPEexpression\">expression</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_apply\"><span class=\"constructor\">Pexp_apply</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a> * (<a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a>) list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_match\"><span class=\"constructor\">Pexp_match</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a> * <a href=\"Parsetree.html#TYPEcase\">case</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_try\"><span class=\"constructor\">Pexp_try</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a> * <a href=\"Parsetree.html#TYPEcase\">case</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_tuple\"><span class=\"constructor\">Pexp_tuple</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_construct\"><span class=\"constructor\">Pexp_construct</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a> option</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_variant\"><span class=\"constructor\">Pexp_variant</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a> option</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_record\"><span class=\"constructor\">Pexp_record</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(<a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a>) list<br>        * <a href=\"Parsetree.html#TYPEexpression\">expression</a> option</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_field\"><span class=\"constructor\">Pexp_field</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a> * <a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_setfield\"><span class=\"constructor\">Pexp_setfield</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a> * <a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_array\"><span class=\"constructor\">Pexp_array</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_ifthenelse\"><span class=\"constructor\">Pexp_ifthenelse</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a> option</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_sequence\"><span class=\"constructor\">Pexp_sequence</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_while\"><span class=\"constructor\">Pexp_while</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_for\"><span class=\"constructor\">Pexp_for</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">pattern</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a><br>        * <a href=\"Asttypes.html#TYPEdirection_flag\">Asttypes.direction_flag</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_constraint\"><span class=\"constructor\">Pexp_constraint</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_coerce\"><span class=\"constructor\">Pexp_coerce</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a> option * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_send\"><span class=\"constructor\">Pexp_send</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a> * <a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_new\"><span class=\"constructor\">Pexp_new</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_setinstvar\"><span class=\"constructor\">Pexp_setinstvar</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_override\"><span class=\"constructor\">Pexp_override</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(<a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a>) list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_letmodule\"><span class=\"constructor\">Pexp_letmodule</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEmodule_expr\">module_expr</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_letexception\"><span class=\"constructor\">Pexp_letexception</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEextension_constructor\">extension_constructor</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_assert\"><span class=\"constructor\">Pexp_assert</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_lazy\"><span class=\"constructor\">Pexp_lazy</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_poly\"><span class=\"constructor\">Pexp_poly</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a> option</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_object\"><span class=\"constructor\">Pexp_object</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEclass_structure\">class_structure</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_newtype\"><span class=\"constructor\">Pexp_newtype</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_pack\"><span class=\"constructor\">Pexp_pack</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_expr\">module_expr</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_open\"><span class=\"constructor\">Pexp_open</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPEoverride_flag\">Asttypes.override_flag</a> * <a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_extension\"><span class=\"constructor\">Pexp_extension</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEextension\">extension</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTexpression_desc.Pexp_unreachable\"><span class=\"constructor\">Pexp_unreachable</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "case", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcase.pc_lhs\">pc_lhs</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">pattern</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcase.pc_guard\">pc_guard</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a> option</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcase.pc_rhs\">pc_rhs</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "value_description", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTvalue_description.pval_name\">pval_name</span>&nbsp;: <code class=\"type\">string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTvalue_description.pval_type\">pval_type</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">core_type</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTvalue_description.pval_prim\">pval_prim</span>&nbsp;: <code class=\"type\">string list</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTvalue_description.pval_attributes\">pval_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTvalue_description.pval_loc\">pval_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "type_declaration", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtype_declaration.ptype_name\">ptype_name</span>&nbsp;: <code class=\"type\">string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtype_declaration.ptype_params\">ptype_params</span>&nbsp;: <code class=\"type\">(<a href=\"Parsetree.html#TYPEcore_type\">core_type</a> * <a href=\"Asttypes.html#TYPEvariance\">Asttypes.variance</a>) list</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtype_declaration.ptype_cstrs\">ptype_cstrs</span>&nbsp;: <code class=\"type\">(<a href=\"Parsetree.html#TYPEcore_type\">core_type</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a> * <a href=\"Location.html#TYPEt\">Location.t</a>) list</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtype_declaration.ptype_kind\">ptype_kind</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEtype_kind\">type_kind</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtype_declaration.ptype_private\">ptype_private</span>&nbsp;: <code class=\"type\"><a href=\"Asttypes.html#TYPEprivate_flag\">Asttypes.private_flag</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtype_declaration.ptype_manifest\">ptype_manifest</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">core_type</a> option</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtype_declaration.ptype_attributes\">ptype_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtype_declaration.ptype_loc\">ptype_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "type_kind", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtype_kind.Ptype_abstract\"><span class=\"constructor\">Ptype_abstract</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtype_kind.Ptype_variant\"><span class=\"constructor\">Ptype_variant</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEconstructor_declaration\">constructor_declaration</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtype_kind.Ptype_record\"><span class=\"constructor\">Ptype_record</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPElabel_declaration\">label_declaration</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtype_kind.Ptype_open\"><span class=\"constructor\">Ptype_open</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "label_declaration", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlabel_declaration.pld_name\">pld_name</span>&nbsp;: <code class=\"type\">string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlabel_declaration.pld_mutable\">pld_mutable</span>&nbsp;: <code class=\"type\"><a href=\"Asttypes.html#TYPEmutable_flag\">Asttypes.mutable_flag</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlabel_declaration.pld_type\">pld_type</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">core_type</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlabel_declaration.pld_loc\">pld_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlabel_declaration.pld_attributes\">pld_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "constructor_declaration", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstructor_declaration.pcd_name\">pcd_name</span>&nbsp;: <code class=\"type\">string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstructor_declaration.pcd_args\">pcd_args</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEconstructor_arguments\">constructor_arguments</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstructor_declaration.pcd_res\">pcd_res</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">core_type</a> option</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstructor_declaration.pcd_loc\">pcd_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstructor_declaration.pcd_attributes\">pcd_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "constructor_arguments", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstructor_arguments.Pcstr_tuple\"><span class=\"constructor\">Pcstr_tuple</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">core_type</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTconstructor_arguments.Pcstr_record\"><span class=\"constructor\">Pcstr_record</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPElabel_declaration\">label_declaration</a> list</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "type_extension", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtype_extension.ptyext_path\">ptyext_path</span>&nbsp;: <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtype_extension.ptyext_params\">ptyext_params</span>&nbsp;: <code class=\"type\">(<a href=\"Parsetree.html#TYPEcore_type\">core_type</a> * <a href=\"Asttypes.html#TYPEvariance\">Asttypes.variance</a>) list</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtype_extension.ptyext_constructors\">ptyext_constructors</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEextension_constructor\">extension_constructor</a> list</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtype_extension.ptyext_private\">ptyext_private</span>&nbsp;: <code class=\"type\"><a href=\"Asttypes.html#TYPEprivate_flag\">Asttypes.private_flag</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtype_extension.ptyext_attributes\">ptyext_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "extension_constructor", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTextension_constructor.pext_name\">pext_name</span>&nbsp;: <code class=\"type\">string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTextension_constructor.pext_kind\">pext_kind</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEextension_constructor_kind\">extension_constructor_kind</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTextension_constructor.pext_loc\">pext_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTextension_constructor.pext_attributes\">pext_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "extension_constructor_kind", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTextension_constructor_kind.Pext_decl\"><span class=\"constructor\">Pext_decl</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEconstructor_arguments\">constructor_arguments</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a> option</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTextension_constructor_kind.Pext_rebind\"><span class=\"constructor\">Pext_rebind</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Class language",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "class_type", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_type.pcty_desc\">pcty_desc</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEclass_type_desc\">class_type_desc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_type.pcty_loc\">pcty_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_type.pcty_attributes\">pcty_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "class_type_desc", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_type_desc.Pcty_constr\"><span class=\"constructor\">Pcty_constr</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_type_desc.Pcty_signature\"><span class=\"constructor\">Pcty_signature</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEclass_signature\">class_signature</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_type_desc.Pcty_arrow\"><span class=\"constructor\">Pcty_arrow</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a> * <a href=\"Parsetree.html#TYPEclass_type\">class_type</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_type_desc.Pcty_extension\"><span class=\"constructor\">Pcty_extension</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEextension\">extension</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_type_desc.Pcty_open\"><span class=\"constructor\">Pcty_open</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPEoverride_flag\">Asttypes.override_flag</a> * <a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEclass_type\">class_type</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "class_signature", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_signature.pcsig_self\">pcsig_self</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">core_type</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_signature.pcsig_fields\">pcsig_fields</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEclass_type_field\">class_type_field</a> list</code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "class_type_field", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_type_field.pctf_desc\">pctf_desc</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEclass_type_field_desc\">class_type_field_desc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_type_field.pctf_loc\">pctf_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_type_field.pctf_attributes\">pctf_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "class_type_field_desc", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_type_field_desc.Pctf_inherit\"><span class=\"constructor\">Pctf_inherit</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEclass_type\">class_type</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_type_field_desc.Pctf_val\"><span class=\"constructor\">Pctf_val</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(<a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Asttypes.html#TYPEmutable_flag\">Asttypes.mutable_flag</a> *<br>      <a href=\"Asttypes.html#TYPEvirtual_flag\">Asttypes.virtual_flag</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a>)</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_type_field_desc.Pctf_method\"><span class=\"constructor\">Pctf_method</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(<a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Asttypes.html#TYPEprivate_flag\">Asttypes.private_flag</a> *<br>      <a href=\"Asttypes.html#TYPEvirtual_flag\">Asttypes.virtual_flag</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a>)</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_type_field_desc.Pctf_constraint\"><span class=\"constructor\">Pctf_constraint</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(<a href=\"Parsetree.html#TYPEcore_type\">core_type</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a>)</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_type_field_desc.Pctf_attribute\"><span class=\"constructor\">Pctf_attribute</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEattribute\">attribute</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_type_field_desc.Pctf_extension\"><span class=\"constructor\">Pctf_extension</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEextension\">extension</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "'a", "class_infos = {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_infos.pci_virt\">pci_virt</span>&nbsp;: <code class=\"type\"><a href=\"Asttypes.html#TYPEvirtual_flag\">Asttypes.virtual_flag</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_infos.pci_params\">pci_params</span>&nbsp;: <code class=\"type\">(<a href=\"Parsetree.html#TYPEcore_type\">core_type</a> * <a href=\"Asttypes.html#TYPEvariance\">Asttypes.variance</a>) list</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_infos.pci_name\">pci_name</span>&nbsp;: <code class=\"type\">string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_infos.pci_expr\">pci_expr</span>&nbsp;: <code class=\"type\">'a</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_infos.pci_loc\">pci_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_infos.pci_attributes\">pci_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [ "class_description", "= class_type class_infos", null, null ]
          ],
          [
            "Typevariant",
            [
              "class_type_declaration", "= class_type class_infos", null,
              null
            ]
          ],
          [
            "Typevariant",
            [
              "class_expr", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_expr.pcl_desc\">pcl_desc</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEclass_expr_desc\">class_expr_desc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_expr.pcl_loc\">pcl_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_expr.pcl_attributes\">pcl_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "class_expr_desc", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_expr_desc.Pcl_constr\"><span class=\"constructor\">Pcl_constr</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_expr_desc.Pcl_structure\"><span class=\"constructor\">Pcl_structure</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEclass_structure\">class_structure</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_expr_desc.Pcl_fun\"><span class=\"constructor\">Pcl_fun</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a> option * <a href=\"Parsetree.html#TYPEpattern\">pattern</a><br>        * <a href=\"Parsetree.html#TYPEclass_expr\">class_expr</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_expr_desc.Pcl_apply\"><span class=\"constructor\">Pcl_apply</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEclass_expr\">class_expr</a> * (<a href=\"Asttypes.html#TYPEarg_label\">Asttypes.arg_label</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a>) list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_expr_desc.Pcl_let\"><span class=\"constructor\">Pcl_let</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPErec_flag\">Asttypes.rec_flag</a> * <a href=\"Parsetree.html#TYPEvalue_binding\">value_binding</a> list * <a href=\"Parsetree.html#TYPEclass_expr\">class_expr</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_expr_desc.Pcl_constraint\"><span class=\"constructor\">Pcl_constraint</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEclass_expr\">class_expr</a> * <a href=\"Parsetree.html#TYPEclass_type\">class_type</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_expr_desc.Pcl_extension\"><span class=\"constructor\">Pcl_extension</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEextension\">extension</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_expr_desc.Pcl_open\"><span class=\"constructor\">Pcl_open</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPEoverride_flag\">Asttypes.override_flag</a> * <a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEclass_expr\">class_expr</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "class_structure", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_structure.pcstr_self\">pcstr_self</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">pattern</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_structure.pcstr_fields\">pcstr_fields</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEclass_field\">class_field</a> list</code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "class_field", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_field.pcf_desc\">pcf_desc</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEclass_field_desc\">class_field_desc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_field.pcf_loc\">pcf_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_field.pcf_attributes\">pcf_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "class_field_desc", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_field_desc.Pcf_inherit\"><span class=\"constructor\">Pcf_inherit</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPEoverride_flag\">Asttypes.override_flag</a> * <a href=\"Parsetree.html#TYPEclass_expr\">class_expr</a> * string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> option</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_field_desc.Pcf_val\"><span class=\"constructor\">Pcf_val</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(<a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Asttypes.html#TYPEmutable_flag\">Asttypes.mutable_flag</a> *<br>      <a href=\"Parsetree.html#TYPEclass_field_kind\">class_field_kind</a>)</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_field_desc.Pcf_method\"><span class=\"constructor\">Pcf_method</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(<a href=\"Asttypes.html#TYPElabel\">Asttypes.label</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Asttypes.html#TYPEprivate_flag\">Asttypes.private_flag</a> *<br>      <a href=\"Parsetree.html#TYPEclass_field_kind\">class_field_kind</a>)</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_field_desc.Pcf_constraint\"><span class=\"constructor\">Pcf_constraint</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(<a href=\"Parsetree.html#TYPEcore_type\">core_type</a> * <a href=\"Parsetree.html#TYPEcore_type\">core_type</a>)</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_field_desc.Pcf_initializer\"><span class=\"constructor\">Pcf_initializer</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_field_desc.Pcf_attribute\"><span class=\"constructor\">Pcf_attribute</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEattribute\">attribute</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_field_desc.Pcf_extension\"><span class=\"constructor\">Pcf_extension</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEextension\">extension</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "class_field_kind", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_field_kind.Cfk_virtual\"><span class=\"constructor\">Cfk_virtual</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEcore_type\">core_type</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTclass_field_kind.Cfk_concrete\"><span class=\"constructor\">Cfk_concrete</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPEoverride_flag\">Asttypes.override_flag</a> * <a href=\"Parsetree.html#TYPEexpression\">expression</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [ "class_declaration", "= class_expr class_infos", null, null ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Module language",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "module_type", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_type.pmty_desc\">pmty_desc</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_type_desc\">module_type_desc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_type.pmty_loc\">pmty_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_type.pmty_attributes\">pmty_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "module_type_desc", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_type_desc.Pmty_ident\"><span class=\"constructor\">Pmty_ident</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_type_desc.Pmty_signature\"><span class=\"constructor\">Pmty_signature</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEsignature\">signature</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_type_desc.Pmty_functor\"><span class=\"constructor\">Pmty_functor</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEmodule_type\">module_type</a> option * <a href=\"Parsetree.html#TYPEmodule_type\">module_type</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_type_desc.Pmty_with\"><span class=\"constructor\">Pmty_with</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_type\">module_type</a> * <a href=\"Parsetree.html#TYPEwith_constraint\">with_constraint</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_type_desc.Pmty_typeof\"><span class=\"constructor\">Pmty_typeof</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_expr\">module_expr</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_type_desc.Pmty_extension\"><span class=\"constructor\">Pmty_extension</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEextension\">extension</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_type_desc.Pmty_alias\"><span class=\"constructor\">Pmty_alias</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [ "signature", "= signature_item list", null, null ]
          ],
          [
            "Typevariant",
            [
              "signature_item", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignature_item.psig_desc\">psig_desc</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEsignature_item_desc\">signature_item_desc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignature_item.psig_loc\">psig_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "signature_item_desc", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignature_item_desc.Psig_value\"><span class=\"constructor\">Psig_value</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEvalue_description\">value_description</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignature_item_desc.Psig_type\"><span class=\"constructor\">Psig_type</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPErec_flag\">Asttypes.rec_flag</a> * <a href=\"Parsetree.html#TYPEtype_declaration\">type_declaration</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignature_item_desc.Psig_typext\"><span class=\"constructor\">Psig_typext</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEtype_extension\">type_extension</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignature_item_desc.Psig_exception\"><span class=\"constructor\">Psig_exception</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEextension_constructor\">extension_constructor</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignature_item_desc.Psig_module\"><span class=\"constructor\">Psig_module</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_declaration\">module_declaration</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignature_item_desc.Psig_recmodule\"><span class=\"constructor\">Psig_recmodule</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_declaration\">module_declaration</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignature_item_desc.Psig_modtype\"><span class=\"constructor\">Psig_modtype</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_type_declaration\">module_type_declaration</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignature_item_desc.Psig_open\"><span class=\"constructor\">Psig_open</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEopen_description\">open_description</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignature_item_desc.Psig_include\"><span class=\"constructor\">Psig_include</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEinclude_description\">include_description</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignature_item_desc.Psig_class\"><span class=\"constructor\">Psig_class</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEclass_description\">class_description</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignature_item_desc.Psig_class_type\"><span class=\"constructor\">Psig_class_type</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEclass_type_declaration\">class_type_declaration</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignature_item_desc.Psig_attribute\"><span class=\"constructor\">Psig_attribute</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEattribute\">attribute</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignature_item_desc.Psig_extension\"><span class=\"constructor\">Psig_extension</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEextension\">extension</a> * <a href=\"Parsetree.html#TYPEattributes\">attributes</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "module_declaration", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_declaration.pmd_name\">pmd_name</span>&nbsp;: <code class=\"type\">string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_declaration.pmd_type\">pmd_type</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_type\">module_type</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_declaration.pmd_attributes\">pmd_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_declaration.pmd_loc\">pmd_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "module_type_declaration", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_type_declaration.pmtd_name\">pmtd_name</span>&nbsp;: <code class=\"type\">string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_type_declaration.pmtd_type\">pmtd_type</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_type\">module_type</a> option</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_type_declaration.pmtd_attributes\">pmtd_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_type_declaration.pmtd_loc\">pmtd_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "open_description", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_description.popen_lid\">popen_lid</span>&nbsp;: <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_description.popen_override\">popen_override</span>&nbsp;: <code class=\"type\"><a href=\"Asttypes.html#TYPEoverride_flag\">Asttypes.override_flag</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_description.popen_loc\">popen_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_description.popen_attributes\">popen_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "'a", "include_infos = {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinclude_infos.pincl_mod\">pincl_mod</span>&nbsp;: <code class=\"type\">'a</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinclude_infos.pincl_loc\">pincl_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinclude_infos.pincl_attributes\">pincl_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "include_description", "= module_type include_infos", null,
              null
            ]
          ],
          [
            "Typevariant",
            [
              "include_declaration", "= module_expr include_infos", null,
              null
            ]
          ],
          [
            "Typevariant",
            [
              "with_constraint", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTwith_constraint.Pwith_type\"><span class=\"constructor\">Pwith_type</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEtype_declaration\">type_declaration</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTwith_constraint.Pwith_module\"><span class=\"constructor\">Pwith_module</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTwith_constraint.Pwith_typesubst\"><span class=\"constructor\">Pwith_typesubst</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEtype_declaration\">type_declaration</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTwith_constraint.Pwith_modsubst\"><span class=\"constructor\">Pwith_modsubst</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "module_expr", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_expr.pmod_desc\">pmod_desc</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_expr_desc\">module_expr_desc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_expr.pmod_loc\">pmod_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_expr.pmod_attributes\">pmod_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "module_expr_desc", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_expr_desc.Pmod_ident\"><span class=\"constructor\">Pmod_ident</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_expr_desc.Pmod_structure\"><span class=\"constructor\">Pmod_structure</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEstructure\">structure</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_expr_desc.Pmod_functor\"><span class=\"constructor\">Pmod_functor</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a> * <a href=\"Parsetree.html#TYPEmodule_type\">module_type</a> option * <a href=\"Parsetree.html#TYPEmodule_expr\">module_expr</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_expr_desc.Pmod_apply\"><span class=\"constructor\">Pmod_apply</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_expr\">module_expr</a> * <a href=\"Parsetree.html#TYPEmodule_expr\">module_expr</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_expr_desc.Pmod_constraint\"><span class=\"constructor\">Pmod_constraint</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_expr\">module_expr</a> * <a href=\"Parsetree.html#TYPEmodule_type\">module_type</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_expr_desc.Pmod_unpack\"><span class=\"constructor\">Pmod_unpack</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_expr_desc.Pmod_extension\"><span class=\"constructor\">Pmod_extension</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEextension\">extension</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [ "structure", "= structure_item list", null, null ]
          ],
          [
            "Typevariant",
            [
              "structure_item", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstructure_item.pstr_desc\">pstr_desc</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEstructure_item_desc\">structure_item_desc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstructure_item.pstr_loc\">pstr_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "structure_item_desc", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstructure_item_desc.Pstr_eval\"><span class=\"constructor\">Pstr_eval</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a> * <a href=\"Parsetree.html#TYPEattributes\">attributes</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstructure_item_desc.Pstr_value\"><span class=\"constructor\">Pstr_value</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPErec_flag\">Asttypes.rec_flag</a> * <a href=\"Parsetree.html#TYPEvalue_binding\">value_binding</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstructure_item_desc.Pstr_primitive\"><span class=\"constructor\">Pstr_primitive</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEvalue_description\">value_description</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstructure_item_desc.Pstr_type\"><span class=\"constructor\">Pstr_type</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Asttypes.html#TYPErec_flag\">Asttypes.rec_flag</a> * <a href=\"Parsetree.html#TYPEtype_declaration\">type_declaration</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstructure_item_desc.Pstr_typext\"><span class=\"constructor\">Pstr_typext</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEtype_extension\">type_extension</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstructure_item_desc.Pstr_exception\"><span class=\"constructor\">Pstr_exception</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEextension_constructor\">extension_constructor</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstructure_item_desc.Pstr_module\"><span class=\"constructor\">Pstr_module</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_binding\">module_binding</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstructure_item_desc.Pstr_recmodule\"><span class=\"constructor\">Pstr_recmodule</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_binding\">module_binding</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstructure_item_desc.Pstr_modtype\"><span class=\"constructor\">Pstr_modtype</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_type_declaration\">module_type_declaration</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstructure_item_desc.Pstr_open\"><span class=\"constructor\">Pstr_open</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEopen_description\">open_description</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstructure_item_desc.Pstr_class\"><span class=\"constructor\">Pstr_class</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEclass_declaration\">class_declaration</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstructure_item_desc.Pstr_class_type\"><span class=\"constructor\">Pstr_class_type</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEclass_type_declaration\">class_type_declaration</a> list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstructure_item_desc.Pstr_include\"><span class=\"constructor\">Pstr_include</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEinclude_declaration\">include_declaration</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstructure_item_desc.Pstr_attribute\"><span class=\"constructor\">Pstr_attribute</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEattribute\">attribute</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstructure_item_desc.Pstr_extension\"><span class=\"constructor\">Pstr_extension</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEextension\">extension</a> * <a href=\"Parsetree.html#TYPEattributes\">attributes</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "value_binding", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTvalue_binding.pvb_pat\">pvb_pat</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEpattern\">pattern</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTvalue_binding.pvb_expr\">pvb_expr</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEexpression\">expression</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTvalue_binding.pvb_attributes\">pvb_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTvalue_binding.pvb_loc\">pvb_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "module_binding", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_binding.pmb_name\">pmb_name</span>&nbsp;: <code class=\"type\">string <a href=\"Asttypes.html#TYPEloc\">Asttypes.loc</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_binding.pmb_expr\">pmb_expr</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEmodule_expr\">module_expr</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_binding.pmb_attributes\">pmb_attributes</span>&nbsp;: <code class=\"type\"><a href=\"Parsetree.html#TYPEattributes\">attributes</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmodule_binding.pmb_loc\">pmb_loc</span>&nbsp;: <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Toplevel",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "toplevel_phrase", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoplevel_phrase.Ptop_def\"><span class=\"constructor\">Ptop_def</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEstructure\">structure</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtoplevel_phrase.Ptop_dir\"><span class=\"constructor\">Ptop_dir</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * <a href=\"Parsetree.html#TYPEdirective_argument\">directive_argument</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "directive_argument", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTdirective_argument.Pdir_none\"><span class=\"constructor\">Pdir_none</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTdirective_argument.Pdir_string\"><span class=\"constructor\">Pdir_string</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTdirective_argument.Pdir_int\"><span class=\"constructor\">Pdir_int</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * char option</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTdirective_argument.Pdir_ident\"><span class=\"constructor\">Pdir_ident</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTdirective_argument.Pdir_bool\"><span class=\"constructor\">Pdir_bool</span></span> <span class=\"keyword\">of</span> <code class=\"type\">bool</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Parsing",
    "module_info":
      "\n<p>The run-time library for parsers generated by <code class=\"code\">ocamlyacc</code>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "symbol_start", "unit -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">symbol_start</code> and <a href=\"Parsing.html#VALsymbol_end\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_end</code></a> are to be called in the\n   action part of a grammar rule only. They return the offset of the\n   string that matches the left-hand side of the rule: <code class=\"code\">symbol_start()</code>\n   returns the offset of the first character; <code class=\"code\">symbol_end()</code> returns the\n   offset after the last character. The first character in a file is at\n   offset 0.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "symbol_end", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Parsing.html#VALsymbol_start\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_start</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rhs_start", "int -> int",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Parsing.html#VALsymbol_start\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_start</code></a> and <a href=\"Parsing.html#VALsymbol_end\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_end</code></a>, but\n   return the offset of the string matching the <code class=\"code\">n</code>th item on the\n   right-hand side of the rule, where <code class=\"code\">n</code> is the integer parameter\n   to <code class=\"code\">rhs_start</code> and <code class=\"code\">rhs_end</code>. <code class=\"code\">n</code> is 1 for the leftmost item.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rhs_end", "int -> int",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Parsing.html#VALrhs_start\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.rhs_start</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "symbol_start_pos", "unit -> Lexing.position",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">symbol_start</code>, but return a <code class=\"code\">position</code> instead of an offset.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "symbol_end_pos", "unit -> Lexing.position",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">symbol_end</code>, but return a <code class=\"code\">position</code> instead of an offset.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rhs_start_pos", "int -> Lexing.position",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">rhs_start</code>, but return a <code class=\"code\">position</code> instead of an offset.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rhs_end_pos", "int -> Lexing.position",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">rhs_end</code>, but return a <code class=\"code\">position</code> instead of an offset.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "clear_parser", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Empty the parser stack. Call it just after a parsing function\n   has returned, to remove all pointers from the parser stack\n   to structures that were built by semantic actions during parsing.\n   This is optional, but lowers the memory requirements of the\n   programs.</p>\n</div>\n"
            ]
          ],
          [
            "Exception",
            [
              "Parse_error", null,
              "\n<div class=\"info-desc\">\n<p>Raised when a parser encounters a syntax error.\n   Can also be raised from the action part of a grammar rule,\n   to initiate error recovery.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_trace", "bool -> bool",
              "\n<div class=\"info-desc\">\n<p>Control debugging support for <code class=\"code\">ocamlyacc</code>-generated parsers.\n    After <code class=\"code\"><span class=\"constructor\">Parsing</span>.set_trace&nbsp;<span class=\"keyword\">true</span></code>, the pushdown automaton that\n    executes the parsers prints a trace of its actions (reading a token,\n    shifting a state, reducing by a rule) on standard output.\n    <code class=\"code\"><span class=\"constructor\">Parsing</span>.set_trace&nbsp;<span class=\"keyword\">false</span></code> turns this debugging trace off.\n    The boolean returned is the previous state of the trace flag.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Pervasives",
    "module_info":
      "\n<p>Pervasive operations.</p>\n\n<p>This module provides the basic operations over the built-in types\n    (numbers, booleans, byte sequences, strings, exceptions, references,\n    lists, arrays, input-output channels, ...).</p>\n\n<p>This module is included in the toplevel <code class=\"code\"><span class=\"constructor\">Stdlib</span></code> module.</p>\n",
    "sections": [
      {
        "section_name": "Exceptions",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "raise", "exn -> 'a",
              "\n<div class=\"info-desc\">\n<p>Raise the given exception value</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "raise_notrace", "exn -> 'a",
              "\n<div class=\"info-desc\">\n<p>A faster version <code class=\"code\">raise</code> which does not record the backtrace.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "invalid_arg", "string -> 'a",
              "\n<div class=\"info-desc\">\n<p>Raise exception <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> with the given string.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "failwith", "string -> 'a",
              "\n<div class=\"info-desc\">\n<p>Raise exception <code class=\"code\"><span class=\"constructor\">Failure</span></code> with the given string.</p>\n</div>\n"
            ]
          ],
          [
            "Exception",
            [
              "Exit", null,
              "\n<div class=\"info-desc\">\n<p>The <code class=\"code\"><span class=\"constructor\">Exit</span></code> exception is not raised by any library function.  It is\n    provided for use in your programs.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Comparisons",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "(=)", "'a -> 'a -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">e1&nbsp;=&nbsp;e2</code> tests for structural equality of <code class=\"code\">e1</code> and <code class=\"code\">e2</code>.\n   Mutable structures (e.g. references and arrays) are equal\n   if and only if their current contents are structurally equal,\n   even if the two mutable objects are not the same physical object.\n   Equality between functional values raises <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code>.\n   Equality between cyclic data structures may not terminate.\n   Left-associative operator at precedence level 4/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(<>)", "'a -> 'a -> bool",
              "\n<div class=\"info-desc\">\n<p>Negation of <a href=\"Pervasives.html#VAL(=)\"><code class=\"code\">(=)</code></a>.\n    Left-associative operator at precedence level 4/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(<)", "'a -> 'a -> bool",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Pervasives.html#VAL(>=)\"><code class=\"code\">(&gt;=)</code></a>.\n    Left-associative operator at precedence level 4/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(>)", "'a -> 'a -> bool",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Pervasives.html#VAL(>=)\"><code class=\"code\">(&gt;=)</code></a>.\n    Left-associative operator at precedence level 4/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(<=)", "'a -> 'a -> bool",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Pervasives.html#VAL(>=)\"><code class=\"code\">(&gt;=)</code></a>.\n    Left-associative operator at precedence level 4/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(>=)", "'a -> 'a -> bool",
              "\n<div class=\"info-desc\">\n<p>Structural ordering functions. These functions coincide with\n   the usual orderings over integers, characters, strings, byte sequences\n   and floating-point numbers, and extend them to a\n   total ordering over all types.\n   The ordering is compatible with <code class=\"code\">(&nbsp;=&nbsp;)</code>. As in the case\n   of <code class=\"code\">(&nbsp;=&nbsp;)</code>, mutable structures are compared by contents.\n   Comparison between functional values raises <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code>.\n   Comparison between cyclic structures may not terminate.\n   Left-associative operator at precedence level 4/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "'a -> 'a -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">compare&nbsp;x&nbsp;y</code> returns <code class=\"code\">0</code> if <code class=\"code\">x</code> is equal to <code class=\"code\">y</code>,\n   a negative integer if <code class=\"code\">x</code> is less than <code class=\"code\">y</code>, and a positive integer\n   if <code class=\"code\">x</code> is greater than <code class=\"code\">y</code>.  The ordering implemented by <code class=\"code\">compare</code>\n   is compatible with the comparison predicates <code class=\"code\">=</code>, <code class=\"code\">&lt;</code> and <code class=\"code\">&gt;</code>\n   defined above,  with one difference on the treatment of the float value\n   <a href=\"Pervasives.html#VALnan\"><code class=\"code\">nan</code></a>.  Namely, the comparison predicates treat <code class=\"code\">nan</code>\n   as different from any other float value, including itself;\n   while <code class=\"code\">compare</code> treats <code class=\"code\">nan</code> as equal to itself and less than any\n   other float value.  This treatment of <code class=\"code\">nan</code> ensures that <code class=\"code\">compare</code>\n   defines a total ordering relation.</p>\n\n<p><code class=\"code\">compare</code> applied to functional values may raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code>.\n   <code class=\"code\">compare</code> applied to cyclic structures may not terminate.</p>\n\n<p>The <code class=\"code\">compare</code> function can be used as the comparison function\n   required by the <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a> functors, as well as\n   the <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a> and <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a> functions.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "min", "'a -> 'a -> 'a",
              "\n<div class=\"info-desc\">\n<p>Return the smaller of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value <code class=\"code\">nan</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "max", "'a -> 'a -> 'a",
              "\n<div class=\"info-desc\">\n<p>Return the greater of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value <code class=\"code\">nan</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(==)", "'a -> 'a -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">e1&nbsp;==&nbsp;e2</code> tests for physical equality of <code class=\"code\">e1</code> and <code class=\"code\">e2</code>.\n   On mutable types such as references, arrays, byte sequences, records with\n   mutable fields and objects with mutable instance variables,\n   <code class=\"code\">e1&nbsp;==&nbsp;e2</code> is true if and only if physical modification of <code class=\"code\">e1</code>\n   also affects <code class=\"code\">e2</code>.\n   On non-mutable types, the behavior of <code class=\"code\">(&nbsp;==&nbsp;)</code> is\n   implementation-dependent; however, it is guaranteed that\n   <code class=\"code\">e1&nbsp;==&nbsp;e2</code> implies <code class=\"code\">compare&nbsp;e1&nbsp;e2&nbsp;=&nbsp;0</code>.\n   Left-associative operator at precedence level 4/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(!=)", "'a -> 'a -> bool",
              "\n<div class=\"info-desc\">\n<p>Negation of <a href=\"Pervasives.html#VAL(==)\"><code class=\"code\">(==)</code></a>.\n    Left-associative operator at precedence level 4/11.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Boolean operations",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "not", "bool -> bool",
              "\n<div class=\"info-desc\">\n<p>The boolean negation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(&&)", "bool -> bool -> bool",
              "\n<div class=\"info-desc\">\n<p>The boolean 'and'. Evaluation is sequential, left-to-right:\n   in <code class=\"code\">e1&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;e2</code>, <code class=\"code\">e1</code> is evaluated first, and if it returns <code class=\"code\"><span class=\"keyword\">false</span></code>,\n   <code class=\"code\">e2</code> is not evaluated at all.\n   Right-associative operator at precedence level 3/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(&)", "bool -> bool -> bool",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><a href=\"Pervasives.html#VAL(&amp;&amp;)\"><code class=\"code\">(<span class=\"keywordsign\">&amp;&amp;</span>)</code></a> should be used instead.\n    Right-associative operator at precedence level 3/11.</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(||)", "bool -> bool -> bool",
              "\n<div class=\"info-desc\">\n<p>The boolean 'or'. Evaluation is sequential, left-to-right:\n   in <code class=\"code\">e1&nbsp;<span class=\"keywordsign\">||</span>&nbsp;e2</code>, <code class=\"code\">e1</code> is evaluated first, and if it returns <code class=\"code\"><span class=\"keyword\">true</span></code>,\n   <code class=\"code\">e2</code> is not evaluated at all.\n   Right-associative operator at precedence level 2/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(or)", "bool -> bool -> bool",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><a href=\"Pervasives.html#VAL(||)\"><code class=\"code\">(<span class=\"keywordsign\">||</span>)</code></a> should be used instead.\n    Right-associative operator at precedence level 2/11.</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Debugging",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "__LOC__", "string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">__LOC__</code> returns the location at which this expression appears in\n    the file currently being parsed by the compiler, with the standard\n    error format of OCaml: \"File %S, line %d, characters %d-%d\".</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "__FILE__", "string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">__FILE__</code> returns the name of the file currently being\n    parsed by the compiler.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "__LINE__", "int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">__LINE__</code> returns the line number at which this expression\n    appears in the file currently being parsed by the compiler.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "__MODULE__", "string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">__MODULE__</code> returns the module name of the file being\n    parsed by the compiler.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "__POS__", "string * int * int * int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">__POS__</code> returns a tuple <code class=\"code\">(file,lnum,cnum,enum)</code>, corresponding\n    to the location at which this expression appears in the file\n    currently being parsed by the compiler. <code class=\"code\">file</code> is the current\n    filename, <code class=\"code\">lnum</code> the line number, <code class=\"code\">cnum</code> the character position in\n    the line and <code class=\"code\">enum</code> the last character position in the line.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "__LOC_OF__", "'a -> string * 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">__LOC_OF__&nbsp;expr</code> returns a pair <code class=\"code\">(loc,&nbsp;expr)</code> where <code class=\"code\">loc</code> is the\n    location of <code class=\"code\">expr</code> in the file currently being parsed by the\n    compiler, with the standard error format of OCaml: \"File %S, line\n    %d, characters %d-%d\".</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "__LINE_OF__", "'a -> int * 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">__LINE_OF__&nbsp;expr</code> returns a pair <code class=\"code\">(line,&nbsp;expr)</code>, where <code class=\"code\">line</code> is the\n    line number at which the expression <code class=\"code\">expr</code> appears in the file\n    currently being parsed by the compiler.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "__POS_OF__", "'a -> (string * int * int * int) * 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">__POS_OF__&nbsp;expr</code> returns a pair <code class=\"code\">(loc,expr)</code>, where <code class=\"code\">loc</code> is a\n    tuple <code class=\"code\">(file,lnum,cnum,enum)</code> corresponding to the location at\n    which the expression <code class=\"code\">expr</code> appears in the file currently being\n    parsed by the compiler. <code class=\"code\">file</code> is the current filename, <code class=\"code\">lnum</code> the\n    line number, <code class=\"code\">cnum</code> the character position in the line and <code class=\"code\">enum</code>\n    the last character position in the line.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Composition operators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "(|>)", "'a -> ('a -> 'b) -> 'b",
              "\n<div class=\"info-desc\">\n<p>Reverse-application operator: <code class=\"code\">x&nbsp;|&gt;&nbsp;f&nbsp;|&gt;&nbsp;g</code> is exactly equivalent\n to <code class=\"code\">g&nbsp;(f&nbsp;(x))</code>.\n Left-associative operator at precedence level 4/11.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "(@@)", "('a -> 'b) -> 'a -> 'b",
              "\n<div class=\"info-desc\">\n<p>Application operator: <code class=\"code\">g&nbsp;@@&nbsp;f&nbsp;@@&nbsp;x</code> is exactly equivalent to\n <code class=\"code\">g&nbsp;(f&nbsp;(x))</code>.\n Right-associative operator at precedence level 5/11.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Integer arithmetic",
        "section_info":
          "<p>Integers are <code class=\"code\"><span class=\"constructor\">Sys</span>.int_size</code> bits wide.\n    All operations are taken modulo 2<sup class=\"superscript\"><code class=\"code\"><span class=\"constructor\">Sys</span>.int_size</code></sup>.\n    They do not fail on overflow.</p>",
        "elements": [
          [
            "Function",
            [
              "(~-)", "int -> int",
              "\n<div class=\"info-desc\">\n<p>Unary negation. You can also write <code class=\"code\">-&nbsp;e</code> instead of <code class=\"code\"><span class=\"keywordsign\">~-</span>&nbsp;e</code>.\n    Unary operator at precedence level 9/11 for <code class=\"code\">-&nbsp;e</code>\n    and 11/11 for <code class=\"code\"><span class=\"keywordsign\">~-</span>&nbsp;e</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(~+)", "int -> int",
              "\n<div class=\"info-desc\">\n<p>Unary addition. You can also write <code class=\"code\">+&nbsp;e</code> instead of <code class=\"code\"><span class=\"keywordsign\">~+</span>&nbsp;e</code>.\n    Unary operator at precedence level 9/11 for <code class=\"code\">+&nbsp;e</code>\n    and 11/11 for <code class=\"code\"><span class=\"keywordsign\">~+</span>&nbsp;e</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "succ", "int -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">succ&nbsp;x</code> is <code class=\"code\">x&nbsp;+&nbsp;1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pred", "int -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pred&nbsp;x</code> is <code class=\"code\">x&nbsp;-&nbsp;1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(+)", "int -> int -> int",
              "\n<div class=\"info-desc\">\n<p>Integer addition.\n    Left-associative operator at precedence level 6/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(-)", "int -> int -> int",
              "\n<div class=\"info-desc\">\n<p>Integer subtraction.\n    Left-associative operator at precedence level 6/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "( * )", "int -> int -> int",
              "\n<div class=\"info-desc\">\n<p>Integer multiplication.\n    Left-associative operator at precedence level 7/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(/)", "int -> int -> int",
              "\n<div class=\"info-desc\">\n<p>Integer division.\n   Raise <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code> if the second argument is 0.\n   Integer division rounds the real quotient of its arguments towards zero.\n   More precisely, if <code class=\"code\">x&nbsp;&gt;=&nbsp;0</code> and <code class=\"code\">y&nbsp;&gt;&nbsp;0</code>, <code class=\"code\">x&nbsp;/&nbsp;y</code> is the greatest integer\n   less than or equal to the real quotient of <code class=\"code\">x</code> by <code class=\"code\">y</code>.  Moreover,\n   <code class=\"code\">(-&nbsp;x)&nbsp;/&nbsp;y&nbsp;=&nbsp;x&nbsp;/&nbsp;(-&nbsp;y)&nbsp;=&nbsp;-&nbsp;(x&nbsp;/&nbsp;y)</code>.\n   Left-associative operator at precedence level 7/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(mod)", "int -> int -> int",
              "\n<div class=\"info-desc\">\n<p>Integer remainder.  If <code class=\"code\">y</code> is not zero, the result\n   of <code class=\"code\">x&nbsp;<span class=\"keyword\">mod</span>&nbsp;y</code> satisfies the following properties:\n   <code class=\"code\">x&nbsp;=&nbsp;(x&nbsp;/&nbsp;y)&nbsp;*&nbsp;y&nbsp;+&nbsp;x&nbsp;<span class=\"keyword\">mod</span>&nbsp;y</code> and\n   <code class=\"code\">abs(x&nbsp;<span class=\"keyword\">mod</span>&nbsp;y)&nbsp;&lt;=&nbsp;abs(y)&nbsp;-&nbsp;1</code>.\n   If <code class=\"code\">y&nbsp;=&nbsp;0</code>, <code class=\"code\">x&nbsp;<span class=\"keyword\">mod</span>&nbsp;y</code> raises <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code>.\n   Note that <code class=\"code\">x&nbsp;<span class=\"keyword\">mod</span>&nbsp;y</code> is negative only if <code class=\"code\">x&nbsp;&lt;&nbsp;0</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code> if <code class=\"code\">y</code> is zero.\n   Left-associative operator at precedence level 7/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "abs", "int -> int",
              "\n<div class=\"info-desc\">\n<p>Return the absolute value of the argument.  Note that this may be\n  negative if the argument is <code class=\"code\">min_int</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "max_int", "int",
              "\n<div class=\"info-desc\">\n<p>The greatest representable integer.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "min_int", "int",
              "\n<div class=\"info-desc\">\n<p>The smallest representable integer.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": [
          {
            "section_name": "Bitwise operations",
            "section_info": null,
            "elements": [
              [
                "Function",
                [
                  "(land)", "int -> int -> int",
                  "\n<div class=\"info-desc\">\n<p>Bitwise logical and.\n    Left-associative operator at precedence level 7/11.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "(lor)", "int -> int -> int",
                  "\n<div class=\"info-desc\">\n<p>Bitwise logical or.\n    Left-associative operator at precedence level 7/11.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "(lxor)", "int -> int -> int",
                  "\n<div class=\"info-desc\">\n<p>Bitwise logical exclusive or.\n    Left-associative operator at precedence level 7/11.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "lnot", "int -> int",
                  "\n<div class=\"info-desc\">\n<p>Bitwise logical negation.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "(lsl)", "int -> int -> int",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">n&nbsp;<span class=\"keyword\">lsl</span>&nbsp;m</code> shifts <code class=\"code\">n</code> to the left by <code class=\"code\">m</code> bits.\n    The result is unspecified if <code class=\"code\">m&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">m&nbsp;&gt;&nbsp;<span class=\"constructor\">Sys</span>.int_size</code>.\n    Right-associative operator at precedence level 8/11.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "(lsr)", "int -> int -> int",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">n&nbsp;<span class=\"keyword\">lsr</span>&nbsp;m</code> shifts <code class=\"code\">n</code> to the right by <code class=\"code\">m</code> bits.\n    This is a logical shift: zeroes are inserted regardless of\n    the sign of <code class=\"code\">n</code>.\n    The result is unspecified if <code class=\"code\">m&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">m&nbsp;&gt;&nbsp;<span class=\"constructor\">Sys</span>.int_size</code>.\n    Right-associative operator at precedence level 8/11.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "(asr)", "int -> int -> int",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">n&nbsp;<span class=\"keyword\">asr</span>&nbsp;m</code> shifts <code class=\"code\">n</code> to the right by <code class=\"code\">m</code> bits.\n    This is an arithmetic shift: the sign bit of <code class=\"code\">n</code> is replicated.\n    The result is unspecified if <code class=\"code\">m&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">m&nbsp;&gt;&nbsp;<span class=\"constructor\">Sys</span>.int_size</code>.\n    Right-associative operator at precedence level 8/11.</p>\n</div>\n"
                ]
              ]
            ],
            "sub_sections": []
          }
        ]
      },
      {
        "section_name": "Floating-point arithmetic",
        "section_info":
          "<p>OCaml's floating-point numbers follow the\n   IEEE 754 standard, using double precision (64 bits) numbers.\n   Floating-point operations never raise an exception on overflow,\n   underflow, division by zero, etc.  Instead, special IEEE numbers\n   are returned as appropriate, such as <code class=\"code\">infinity</code> for <code class=\"code\">1.0&nbsp;/.&nbsp;0.0</code>,\n   <code class=\"code\">neg_infinity</code> for <code class=\"code\">-1.0&nbsp;/.&nbsp;0.0</code>, and <code class=\"code\">nan</code> ('not a number')\n   for <code class=\"code\">0.0&nbsp;/.&nbsp;0.0</code>.  These special numbers then propagate through\n   floating-point computations as expected: for instance,\n   <code class=\"code\">1.0&nbsp;/.&nbsp;infinity</code> is <code class=\"code\">0.0</code>, and any arithmetic operation with <code class=\"code\">nan</code>\n   as argument returns <code class=\"code\">nan</code> as result.</p>",
        "elements": [
          [
            "Function",
            [
              "(~-.)", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Unary negation. You can also write <code class=\"code\">-.&nbsp;e</code> instead of <code class=\"code\"><span class=\"keywordsign\">~-.</span>&nbsp;e</code>.\n    Unary operator at precedence level 9/11 for <code class=\"code\">-.&nbsp;e</code>\n    and 11/11 for <code class=\"code\"><span class=\"keywordsign\">~-.</span>&nbsp;e</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(~+.)", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Unary addition. You can also write <code class=\"code\">+.&nbsp;e</code> instead of <code class=\"code\"><span class=\"keywordsign\">~+.</span>&nbsp;e</code>.\n    Unary operator at precedence level 9/11 for <code class=\"code\">+.&nbsp;e</code>\n    and 11/11 for <code class=\"code\"><span class=\"keywordsign\">~+.</span>&nbsp;e</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "(+.)", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p>Floating-point addition.\n    Left-associative operator at precedence level 6/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(-.)", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p>Floating-point subtraction.\n    Left-associative operator at precedence level 6/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "( *. )", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p>Floating-point multiplication.\n    Left-associative operator at precedence level 7/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(/.)", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p>Floating-point division.\n    Left-associative operator at precedence level 7/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "( ** )", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p>Exponentiation.\n    Right-associative operator at precedence level 8/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sqrt", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Square root.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "exp", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Exponential.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "log", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Natural logarithm.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "log10", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Base 10 logarithm.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "expm1", "float -> float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">expm1&nbsp;x</code> computes <code class=\"code\">exp&nbsp;x&nbsp;-.&nbsp;1.0</code>, giving numerically-accurate results\n    even if <code class=\"code\">x</code> is close to <code class=\"code\">0.0</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "log1p", "float -> float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">log1p&nbsp;x</code> computes <code class=\"code\">log(1.0&nbsp;+.&nbsp;x)</code> (natural logarithm),\n    giving numerically-accurate results even if <code class=\"code\">x</code> is close to <code class=\"code\">0.0</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "cos", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Cosine.  Argument is in radians.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sin", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Sine.  Argument is in radians.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "tan", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Tangent.  Argument is in radians.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "acos", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Arc cosine.  The argument must fall within the range <code class=\"code\">[-1.0,&nbsp;1.0]</code>.\n    Result is in radians and is between <code class=\"code\">0.0</code> and <code class=\"code\">pi</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "asin", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Arc sine.  The argument must fall within the range <code class=\"code\">[-1.0,&nbsp;1.0]</code>.\n    Result is in radians and is between <code class=\"code\">-pi/2</code> and <code class=\"code\">pi/2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "atan", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Arc tangent.\n    Result is in radians and is between <code class=\"code\">-pi/2</code> and <code class=\"code\">pi/2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "atan2", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">atan2&nbsp;y&nbsp;x</code> returns the arc tangent of <code class=\"code\">y&nbsp;/.&nbsp;x</code>.  The signs of <code class=\"code\">x</code>\n    and <code class=\"code\">y</code> are used to determine the quadrant of the result.\n    Result is in radians and is between <code class=\"code\">-pi</code> and <code class=\"code\">pi</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "hypot", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">hypot&nbsp;x&nbsp;y</code> returns <code class=\"code\">sqrt(x&nbsp;*.&nbsp;x&nbsp;+&nbsp;y&nbsp;*.&nbsp;y)</code>, that is, the length\n  of the hypotenuse of a right-angled triangle with sides of length\n  <code class=\"code\">x</code> and <code class=\"code\">y</code>, or, equivalently, the distance of the point <code class=\"code\">(x,y)</code>\n  to origin.  If one of <code class=\"code\">x</code> or <code class=\"code\">y</code> is infinite, returns <code class=\"code\">infinity</code>\n  even if the other is <code class=\"code\">nan</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "cosh", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Hyperbolic cosine.  Argument is in radians.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sinh", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Hyperbolic sine.  Argument is in radians.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "tanh", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Hyperbolic tangent.  Argument is in radians.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "ceil", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Round above to an integer value.\n    <code class=\"code\">ceil&nbsp;f</code> returns the least integer value greater than or equal to <code class=\"code\">f</code>.\n    The result is returned as a float.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "floor", "float -> float",
              "\n<div class=\"info-desc\">\n<p>Round below to an integer value.\n    <code class=\"code\">floor&nbsp;f</code> returns the greatest integer value less than or\n    equal to <code class=\"code\">f</code>.\n    The result is returned as a float.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "abs_float", "float -> float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">abs_float&nbsp;f</code> returns the absolute value of <code class=\"code\">f</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "copysign", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">copysign&nbsp;x&nbsp;y</code> returns a float whose absolute value is that of <code class=\"code\">x</code>\n  and whose sign is that of <code class=\"code\">y</code>.  If <code class=\"code\">x</code> is <code class=\"code\">nan</code>, returns <code class=\"code\">nan</code>.\n  If <code class=\"code\">y</code> is <code class=\"code\">nan</code>, returns either <code class=\"code\">x</code> or <code class=\"code\">-.&nbsp;x</code>, but it is not\n  specified which.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "mod_float", "float -> float -> float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mod_float&nbsp;a&nbsp;b</code> returns the remainder of <code class=\"code\">a</code> with respect to\n   <code class=\"code\">b</code>.  The returned value is <code class=\"code\">a&nbsp;-.&nbsp;n&nbsp;*.&nbsp;b</code>, where <code class=\"code\">n</code>\n   is the quotient <code class=\"code\">a&nbsp;/.&nbsp;b</code> rounded towards zero to an integer.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "frexp", "float -> float * int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">frexp&nbsp;f</code> returns the pair of the significant\n   and the exponent of <code class=\"code\">f</code>.  When <code class=\"code\">f</code> is zero, the\n   significant <code class=\"code\">x</code> and the exponent <code class=\"code\">n</code> of <code class=\"code\">f</code> are equal to\n   zero.  When <code class=\"code\">f</code> is non-zero, they are defined by\n   <code class=\"code\">f&nbsp;=&nbsp;x&nbsp;*.&nbsp;2&nbsp;**&nbsp;n</code> and <code class=\"code\">0.5&nbsp;&lt;=&nbsp;x&nbsp;&lt;&nbsp;1.0</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "ldexp", "float -> int -> float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">ldexp&nbsp;x&nbsp;n</code> returns <code class=\"code\">x&nbsp;*.&nbsp;2&nbsp;**&nbsp;n</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "modf", "float -> float * float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">modf&nbsp;f</code> returns the pair of the fractional and integral\n   part of <code class=\"code\">f</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "float", "int -> float",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Pervasives.html#VALfloat_of_int\"><code class=\"code\">float_of_int</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "float_of_int", "int -> float",
              "\n<div class=\"info-desc\">\n<p>Convert an integer to floating-point.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "truncate", "float -> int",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Pervasives.html#VALint_of_float\"><code class=\"code\">int_of_float</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "int_of_float", "float -> int",
              "\n<div class=\"info-desc\">\n<p>Truncate the given floating-point number to an integer.\n   The result is unspecified if the argument is <code class=\"code\">nan</code> or falls outside the\n   range of representable integers.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "infinity", "float",
              "\n<div class=\"info-desc\">\n<p>Positive infinity.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "neg_infinity", "float",
              "\n<div class=\"info-desc\">\n<p>Negative infinity.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "nan", "float",
              "\n<div class=\"info-desc\">\n<p>A special floating-point value denoting the result of an\n   undefined operation such as <code class=\"code\">0.0&nbsp;/.&nbsp;0.0</code>.  Stands for\n   'not a number'.  Any floating-point operation with <code class=\"code\">nan</code> as\n   argument returns <code class=\"code\">nan</code> as result.  As for floating-point comparisons,\n   <code class=\"code\">=</code>, <code class=\"code\">&lt;</code>, <code class=\"code\">&lt;=</code>, <code class=\"code\">&gt;</code> and <code class=\"code\">&gt;=</code> return <code class=\"code\"><span class=\"keyword\">false</span></code> and <code class=\"code\">&lt;&gt;</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code>\n   if one or both of their arguments is <code class=\"code\">nan</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "max_float", "float",
              "\n<div class=\"info-desc\">\n<p>The largest positive finite value of type <code class=\"code\">float</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "min_float", "float",
              "\n<div class=\"info-desc\">\n<p>The smallest positive, non-zero, non-denormalized value of type <code class=\"code\">float</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "epsilon_float", "float",
              "\n<div class=\"info-desc\">\n<p>The difference between <code class=\"code\">1.0</code> and the smallest exactly representable\n    floating-point number greater than <code class=\"code\">1.0</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "fpclass", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfpclass.FP_normal\"><span class=\"constructor\">FP_normal</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Normal number, none of the below</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfpclass.FP_subnormal\"><span class=\"constructor\">FP_subnormal</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number very close to 0.0, has reduced precision</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfpclass.FP_zero\"><span class=\"constructor\">FP_zero</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number is 0.0 or -0.0</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfpclass.FP_infinite\"><span class=\"constructor\">FP_infinite</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number is positive or negative infinity</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfpclass.FP_nan\"><span class=\"constructor\">FP_nan</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Not a number: result of an undefined operation</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The five classes of floating-point numbers, as determined by\n   the <a href=\"Pervasives.html#VALclassify_float\"><code class=\"code\">classify_float</code></a> function.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "classify_float", "float -> fpclass",
              "\n<div class=\"info-desc\">\n<p>Return the class of the given floating-point number:\n   normal, subnormal, zero, infinite, or not a number.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "String operations",
        "section_info":
          "<p>More string operations are provided in module <a href=\"String.html\"><code class=\"code\"><span class=\"constructor\">String</span></code></a>.</p>",
        "elements": [
          [
            "Function",
            [
              "(^)", "string -> string -> string",
              "\n<div class=\"info-desc\">\n<p>String concatenation.\n    Right-associative operator at precedence level 5/11.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Character operations",
        "section_info":
          "<p>More character operations are provided in module <a href=\"Char.html\"><code class=\"code\"><span class=\"constructor\">Char</span></code></a>.</p>",
        "elements": [
          [
            "Function",
            [
              "int_of_char", "char -> int",
              "\n<div class=\"info-desc\">\n<p>Return the ASCII code of the argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "char_of_int", "int -> char",
              "\n<div class=\"info-desc\">\n<p>Return the character with the given ASCII code.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"char_of_int\"</span></code> if the argument is\n   outside the range 0--255.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Unit operations",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "ignore", "'a -> unit",
              "\n<div class=\"info-desc\">\n<p>Discard the value of its argument and return <code class=\"code\">()</code>.\n   For instance, <code class=\"code\">ignore(f&nbsp;x)</code> discards the result of\n   the side-effecting function <code class=\"code\">f</code>.  It is equivalent to\n   <code class=\"code\">f&nbsp;x;&nbsp;()</code>, except that the latter may generate a\n   compiler warning; writing <code class=\"code\">ignore(f&nbsp;x)</code> instead\n   avoids the warning.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "String conversion functions",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "string_of_bool", "bool -> string",
              "\n<div class=\"info-desc\">\n<p>Return the string representation of a boolean. As the returned values\n   may be shared, the user should not modify them directly.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "bool_of_string", "string -> bool",
              "\n<div class=\"info-desc\">\n<p>Convert the given string to a boolean.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"bool_of_string\"</span></code> if the string is not\n   <code class=\"code\"><span class=\"string\">\"true\"</span></code> or <code class=\"code\"><span class=\"string\">\"false\"</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "bool_of_string_opt", "string -> bool option",
              "\n<div class=\"info-desc\">\n<p>Convert the given string to a boolean.\n    Return <code class=\"code\"><span class=\"constructor\">None</span></code> if the string is not\n    <code class=\"code\"><span class=\"string\">\"true\"</span></code> or <code class=\"code\"><span class=\"string\">\"false\"</span></code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "string_of_int", "int -> string",
              "\n<div class=\"info-desc\">\n<p>Return the string representation of an integer, in decimal.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "int_of_string", "string -> int",
              "\n<div class=\"info-desc\">\n<p>Convert the given string to an integer.\n   The string is read in decimal (by default, or if the string\n   begins with <code class=\"code\">0u</code>), in hexadecimal (if it begins with <code class=\"code\">0x</code> or\n   <code class=\"code\">0<span class=\"constructor\">X</span></code>), in octal (if it begins with <code class=\"code\">0o</code> or <code class=\"code\">0<span class=\"constructor\">O</span></code>), or in binary\n   (if it begins with <code class=\"code\">0b</code> or <code class=\"code\">0<span class=\"constructor\">B</span></code>).</p>\n\n<p>The <code class=\"code\">0u</code> prefix reads the input as an unsigned integer in the range\n   <code class=\"code\">[0,&nbsp;2*max_int+1]</code>.  If the input exceeds <a href=\"Pervasives.html#VALmax_int\"><code class=\"code\">max_int</code></a>\n   it is converted to the signed integer\n   <code class=\"code\">min_int&nbsp;+&nbsp;input&nbsp;-&nbsp;max_int&nbsp;-&nbsp;1</code>.</p>\n\n<p>The <code class=\"code\">_</code> (underscore) character can appear anywhere in the string\n   and is ignored.\n   Raise <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"int_of_string\"</span></code> if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type <code class=\"code\">int</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "int_of_string_opt", "string -> int option",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">int_of_string</code>, but returns <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "string_of_float", "float -> string",
              "\n<div class=\"info-desc\">\n<p>Return the string representation of a floating-point number.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "float_of_string", "string -> float",
              "\n<div class=\"info-desc\">\n<p>Convert the given string to a float.  The string is read in decimal\n   (by default) or in hexadecimal (marked by <code class=\"code\">0x</code> or <code class=\"code\">0<span class=\"constructor\">X</span></code>).\n   The format of decimal floating-point numbers is\n   <code class=\"code\">&nbsp;[-]&nbsp;dd.ddd&nbsp;(e<span class=\"keywordsign\">|</span><span class=\"constructor\">E</span>)&nbsp;[+|-]&nbsp;dd&nbsp;</code>, where <code class=\"code\">d</code> stands for a decimal digit.\n   The format of hexadecimal floating-point numbers is\n   <code class=\"code\">&nbsp;[-]&nbsp;0(x<span class=\"keywordsign\">|</span><span class=\"constructor\">X</span>)&nbsp;hh.hhh&nbsp;(p<span class=\"keywordsign\">|</span><span class=\"constructor\">P</span>)&nbsp;[+|-]&nbsp;dd&nbsp;</code>, where <code class=\"code\">h</code> stands for an\n   hexadecimal digit and <code class=\"code\">d</code> for a decimal digit.\n   In both cases, at least one of the integer and fractional parts must be\n   given; the exponent part is optional.\n   The <code class=\"code\">_</code> (underscore) character can appear anywhere in the string\n   and is ignored.\n   Depending on the execution platforms, other representations of\n   floating-point numbers can be accepted, but should not be relied upon.\n   Raise <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"float_of_string\"</span></code> if the given string is not a valid\n   representation of a float.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "float_of_string_opt", "string -> float option",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">float_of_string</code>, but returns <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Pair operations",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "fst", "'a * 'b -> 'a",
              "\n<div class=\"info-desc\">\n<p>Return the first component of a pair.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "snd", "'a * 'b -> 'b",
              "\n<div class=\"info-desc\">\n<p>Return the second component of a pair.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "List operations",
        "section_info":
          "<p>More list operations are provided in module <a href=\"List.html\"><code class=\"code\"><span class=\"constructor\">List</span></code></a>.</p>",
        "elements": [
          [
            "Function",
            [
              "(@)", "'a list -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>List concatenation.  Not tail-recursive (length of the first argument).\n    Right-associative operator at precedence level 5/11.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Input/output",
        "section_info":
          "<p>Note: all input/output functions can raise <code class=\"code\"><span class=\"constructor\">Sys_error</span></code> when the system\n    calls they invoke fail.</p>",
        "elements": [
          [
            "Typevariant",
            [
              "in_channel", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of input channel.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "out_channel", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of output channel.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stdin", "in_channel",
              "\n<div class=\"info-desc\">\n<p>The standard input for the process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stdout", "out_channel",
              "\n<div class=\"info-desc\">\n<p>The standard output for the process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stderr", "out_channel",
              "\n<div class=\"info-desc\">\n<p>The standard error output for the process.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": [
          {
            "section_name": "Output functions on standard output",
            "section_info": null,
            "elements": [
              [
                "Function",
                [
                  "print_char", "char -> unit",
                  "\n<div class=\"info-desc\">\n<p>Print a character on standard output.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "print_string", "string -> unit",
                  "\n<div class=\"info-desc\">\n<p>Print a string on standard output.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "print_bytes", "bytes -> unit",
                  "\n<div class=\"info-desc\">\n<p>Print a byte sequence on standard output.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "print_int", "int -> unit",
                  "\n<div class=\"info-desc\">\n<p>Print an integer, in decimal, on standard output.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "print_float", "float -> unit",
                  "\n<div class=\"info-desc\">\n<p>Print a floating-point number, in decimal, on standard output.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "print_endline", "string -> unit",
                  "\n<div class=\"info-desc\">\n<p>Print a string, followed by a newline character, on\n   standard output and flush standard output.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "print_newline", "unit -> unit",
                  "\n<div class=\"info-desc\">\n<p>Print a newline character on standard output, and flush\n   standard output. This can be used to simulate line\n   buffering of standard output.</p>\n</div>\n"
                ]
              ]
            ],
            "sub_sections": []
          },
          {
            "section_name": "Output functions on standard error",
            "section_info": null,
            "elements": [
              [
                "Function",
                [
                  "prerr_char", "char -> unit",
                  "\n<div class=\"info-desc\">\n<p>Print a character on standard error.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "prerr_string", "string -> unit",
                  "\n<div class=\"info-desc\">\n<p>Print a string on standard error.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "prerr_bytes", "bytes -> unit",
                  "\n<div class=\"info-desc\">\n<p>Print a byte sequence on standard error.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "prerr_int", "int -> unit",
                  "\n<div class=\"info-desc\">\n<p>Print an integer, in decimal, on standard error.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "prerr_float", "float -> unit",
                  "\n<div class=\"info-desc\">\n<p>Print a floating-point number, in decimal, on standard error.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "prerr_endline", "string -> unit",
                  "\n<div class=\"info-desc\">\n<p>Print a string, followed by a newline character on standard\n   error and flush standard error.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "prerr_newline", "unit -> unit",
                  "\n<div class=\"info-desc\">\n<p>Print a newline character on standard error, and flush\n   standard error.</p>\n</div>\n"
                ]
              ]
            ],
            "sub_sections": []
          },
          {
            "section_name": "Input functions on standard input",
            "section_info": null,
            "elements": [
              [
                "Function",
                [
                  "read_line", "unit -> string",
                  "\n<div class=\"info-desc\">\n<p>Flush standard output, then read characters from standard input\n   until a newline character is encountered. Return the string of\n   all characters read, without the newline character at the end.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "read_int", "unit -> int",
                  "\n<div class=\"info-desc\">\n<p>Flush standard output, then read one line from standard input\n   and convert it to an integer. Raise <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"int_of_string\"</span></code>\n   if the line read is not a valid representation of an integer.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "read_int_opt", "unit -> int option",
                  "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">read_int_opt</code>, but returns <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "read_float", "unit -> float",
                  "\n<div class=\"info-desc\">\n<p>Flush standard output, then read one line from standard input\n   and convert it to a floating-point number.\n   The result is unspecified if the line read is not a valid\n   representation of a floating-point number.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "read_float_opt", "unit -> float option",
                  "\n<div class=\"info-desc\">\n<p>Flush standard output, then read one line from standard input\n    and convert it to a floating-point number.\n    Returns <code class=\"code\"><span class=\"constructor\">None</span></code> if the line read is not a valid\n    representation of a floating-point number.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
                ]
              ]
            ],
            "sub_sections": []
          },
          {
            "section_name": "General output functions",
            "section_info": null,
            "elements": [
              [
                "Typevariant",
                [
                  "open_flag", "=",
                  "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.Open_rdonly\"><span class=\"constructor\">Open_rdonly</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>open for reading.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.Open_wronly\"><span class=\"constructor\">Open_wronly</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>open for writing.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.Open_append\"><span class=\"constructor\">Open_append</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>open for appending: always write at end of file.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.Open_creat\"><span class=\"constructor\">Open_creat</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>create the file if it does not exist.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.Open_trunc\"><span class=\"constructor\">Open_trunc</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>empty the file if it already exists.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.Open_excl\"><span class=\"constructor\">Open_excl</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>fail if Open_creat and the file already exists.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.Open_binary\"><span class=\"constructor\">Open_binary</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>open in binary mode (no conversion).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.Open_text\"><span class=\"constructor\">Open_text</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>open in text mode (may perform conversions).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.Open_nonblock\"><span class=\"constructor\">Open_nonblock</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>open in non-blocking mode.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
                  "\n<div class=\"info-desc\">\n<p>Opening modes for <a href=\"Pervasives.html#VALopen_out_gen\"><code class=\"code\">open_out_gen</code></a> and\n  <a href=\"Pervasives.html#VALopen_in_gen\"><code class=\"code\">open_in_gen</code></a>.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "open_out", "string -> out_channel",
                  "\n<div class=\"info-desc\">\n<p>Open the named file for writing, and return a new output channel\n   on that file, positioned at the beginning of the file. The\n   file is truncated to zero length if it already exists. It\n   is created if it does not already exists.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "open_out_bin", "string -> out_channel",
                  "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Pervasives.html#VALopen_out\"><code class=\"code\">open_out</code></a>, but the file is opened in binary mode,\n   so that no translation takes place during writes. On operating\n   systems that do not distinguish between text mode and binary\n   mode, this function behaves like <a href=\"Pervasives.html#VALopen_out\"><code class=\"code\">open_out</code></a>.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "open_out_gen",
                  "open_flag list -> int -> string -> out_channel",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">open_out_gen&nbsp;mode&nbsp;perm&nbsp;filename</code> opens the named file for writing,\n   as described above. The extra argument <code class=\"code\">mode</code>\n   specifies the opening mode. The extra argument <code class=\"code\">perm</code> specifies\n   the file permissions, in case the file must be created.\n   <a href=\"Pervasives.html#VALopen_out\"><code class=\"code\">open_out</code></a> and <a href=\"Pervasives.html#VALopen_out_bin\"><code class=\"code\">open_out_bin</code></a> are special\n   cases of this function.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "flush", "out_channel -> unit",
                  "\n<div class=\"info-desc\">\n<p>Flush the buffer associated with the given output channel,\n   performing all pending writes on that channel.\n   Interactive programs must be careful about flushing standard\n   output and standard error at the right time.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "flush_all", "unit -> unit",
                  "\n<div class=\"info-desc\">\n<p>Flush all open output channels; ignore errors.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "output_char", "out_channel -> char -> unit",
                  "\n<div class=\"info-desc\">\n<p>Write the character on the given output channel.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "output_string", "out_channel -> string -> unit",
                  "\n<div class=\"info-desc\">\n<p>Write the string on the given output channel.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "output_bytes", "out_channel -> bytes -> unit",
                  "\n<div class=\"info-desc\">\n<p>Write the byte sequence on the given output channel.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "output", "out_channel -> bytes -> int -> int -> unit",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">output&nbsp;oc&nbsp;buf&nbsp;pos&nbsp;len</code> writes <code class=\"code\">len</code> characters from byte sequence <code class=\"code\">buf</code>,\n   starting at offset <code class=\"code\">pos</code>, to the given output channel <code class=\"code\">oc</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"output\"</span></code> if <code class=\"code\">pos</code> and <code class=\"code\">len</code> do not\n   designate a valid range of <code class=\"code\">buf</code>.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "output_substring",
                  "out_channel -> string -> int -> int -> unit",
                  "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">output</code> but take a string as argument instead of\n   a byte sequence.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "output_byte", "out_channel -> int -> unit",
                  "\n<div class=\"info-desc\">\n<p>Write one 8-bit integer (as the single character with that code)\n   on the given output channel. The given integer is taken modulo\n   256.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "output_binary_int", "out_channel -> int -> unit",
                  "\n<div class=\"info-desc\">\n<p>Write one integer in binary format (4 bytes, big-endian)\n   on the given output channel.\n   The given integer is taken modulo 2<sup class=\"superscript\">32</sup>.\n   The only reliable way to read it back is through the\n   <a href=\"Pervasives.html#VALinput_binary_int\"><code class=\"code\">input_binary_int</code></a> function. The format is compatible across\n   all machines for a given version of OCaml.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "output_value", "out_channel -> 'a -> unit",
                  "\n<div class=\"info-desc\">\n<p>Write the representation of a structured value of any type\n   to a channel. Circularities and sharing inside the value\n   are detected and preserved. The object can be read back,\n   by the function <a href=\"Pervasives.html#VALinput_value\"><code class=\"code\">input_value</code></a>. See the description of module\n   <a href=\"Marshal.html\"><code class=\"code\"><span class=\"constructor\">Marshal</span></code></a> for more information. <a href=\"Pervasives.html#VALoutput_value\"><code class=\"code\">output_value</code></a> is equivalent\n   to <a href=\"Marshal.html#VALto_channel\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.to_channel</code></a> with an empty list of flags.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "seek_out", "out_channel -> int -> unit",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">seek_out&nbsp;chan&nbsp;pos</code> sets the current writing position to <code class=\"code\">pos</code>\n   for channel <code class=\"code\">chan</code>. This works only for regular files. On\n   files of other kinds (such as terminals, pipes and sockets),\n   the behavior is unspecified.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "pos_out", "out_channel -> int",
                  "\n<div class=\"info-desc\">\n<p>Return the current writing position for the given channel.  Does\n    not work on channels opened with the <code class=\"code\"><span class=\"constructor\">Open_append</span></code> flag (returns\n    unspecified results).</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "out_channel_length", "out_channel -> int",
                  "\n<div class=\"info-desc\">\n<p>Return the size (number of characters) of the regular file\n   on which the given channel is opened.  If the channel is opened\n    on a file that is not a regular file, the result is meaningless.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "close_out", "out_channel -> unit",
                  "\n<div class=\"info-desc\">\n<p>Close the given channel, flushing all buffered write operations.\n   Output functions raise a <code class=\"code\"><span class=\"constructor\">Sys_error</span></code> exception when they are\n   applied to a closed output channel, except <code class=\"code\">close_out</code> and <code class=\"code\">flush</code>,\n   which do nothing when applied to an already closed channel.\n   Note that <code class=\"code\">close_out</code> may raise <code class=\"code\"><span class=\"constructor\">Sys_error</span></code> if the operating\n   system signals an error when flushing or closing.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "close_out_noerr", "out_channel -> unit",
                  "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">close_out</code>, but ignore all errors.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "set_binary_mode_out", "out_channel -> bool -> unit",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">set_binary_mode_out&nbsp;oc&nbsp;<span class=\"keyword\">true</span></code> sets the channel <code class=\"code\">oc</code> to binary\n   mode: no translations take place during output.\n   <code class=\"code\">set_binary_mode_out&nbsp;oc&nbsp;<span class=\"keyword\">false</span></code> sets the channel <code class=\"code\">oc</code> to text\n   mode: depending on the operating system, some translations\n   may take place during output.  For instance, under Windows,\n   end-of-lines will be translated from <code class=\"code\">\\n</code> to <code class=\"code\">\\r\\n</code>.\n   This function has no effect under operating systems that\n   do not distinguish between text mode and binary mode.</p>\n</div>\n"
                ]
              ]
            ],
            "sub_sections": []
          },
          {
            "section_name": "General input functions",
            "section_info": null,
            "elements": [
              [
                "Function",
                [
                  "open_in", "string -> in_channel",
                  "\n<div class=\"info-desc\">\n<p>Open the named file for reading, and return a new input channel\n   on that file, positioned at the beginning of the file.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "open_in_bin", "string -> in_channel",
                  "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Pervasives.html#VALopen_in\"><code class=\"code\">open_in</code></a>, but the file is opened in binary mode,\n   so that no translation takes place during reads. On operating\n   systems that do not distinguish between text mode and binary\n   mode, this function behaves like <a href=\"Pervasives.html#VALopen_in\"><code class=\"code\">open_in</code></a>.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "open_in_gen",
                  "open_flag list -> int -> string -> in_channel",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">open_in_gen&nbsp;mode&nbsp;perm&nbsp;filename</code> opens the named file for reading,\n   as described above. The extra arguments\n   <code class=\"code\">mode</code> and <code class=\"code\">perm</code> specify the opening mode and file permissions.\n   <a href=\"Pervasives.html#VALopen_in\"><code class=\"code\">open_in</code></a> and <a href=\"Pervasives.html#VALopen_in_bin\"><code class=\"code\">open_in_bin</code></a> are special\n   cases of this function.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "input_char", "in_channel -> char",
                  "\n<div class=\"info-desc\">\n<p>Read one character from the given input channel.\n   Raise <code class=\"code\"><span class=\"constructor\">End_of_file</span></code> if there are no more characters to read.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "input_line", "in_channel -> string",
                  "\n<div class=\"info-desc\">\n<p>Read characters from the given input channel, until a\n   newline character is encountered. Return the string of\n   all characters read, without the newline character at the end.\n   Raise <code class=\"code\"><span class=\"constructor\">End_of_file</span></code> if the end of the file is reached\n   at the beginning of line.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "input", "in_channel -> bytes -> int -> int -> int",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">input&nbsp;ic&nbsp;buf&nbsp;pos&nbsp;len</code> reads up to <code class=\"code\">len</code> characters from\n   the given channel <code class=\"code\">ic</code>, storing them in byte sequence <code class=\"code\">buf</code>, starting at\n   character number <code class=\"code\">pos</code>.\n   It returns the actual number of characters read, between 0 and\n   <code class=\"code\">len</code> (inclusive).\n   A return value of 0 means that the end of file was reached.\n   A return value between 0 and <code class=\"code\">len</code> exclusive means that\n   not all requested <code class=\"code\">len</code> characters were read, either because\n   no more characters were available at that time, or because\n   the implementation found it convenient to do a partial read;\n   <code class=\"code\">input</code> must be called again to read the remaining characters,\n   if desired.  (See also <a href=\"Pervasives.html#VALreally_input\"><code class=\"code\">really_input</code></a> for reading\n   exactly <code class=\"code\">len</code> characters.)\n   Exception <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"input\"</span></code> is raised if <code class=\"code\">pos</code> and <code class=\"code\">len</code>\n   do not designate a valid range of <code class=\"code\">buf</code>.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "really_input",
                  "in_channel -> bytes -> int -> int -> unit",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">really_input&nbsp;ic&nbsp;buf&nbsp;pos&nbsp;len</code> reads <code class=\"code\">len</code> characters from channel <code class=\"code\">ic</code>,\n   storing them in byte sequence <code class=\"code\">buf</code>, starting at character number <code class=\"code\">pos</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">End_of_file</span></code> if the end of file is reached before <code class=\"code\">len</code>\n   characters have been read.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"really_input\"</span></code> if\n   <code class=\"code\">pos</code> and <code class=\"code\">len</code> do not designate a valid range of <code class=\"code\">buf</code>.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "really_input_string", "in_channel -> int -> string",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">really_input_string&nbsp;ic&nbsp;len</code> reads <code class=\"code\">len</code> characters from channel <code class=\"code\">ic</code>\n   and returns them in a new string.\n   Raise <code class=\"code\"><span class=\"constructor\">End_of_file</span></code> if the end of file is reached before <code class=\"code\">len</code>\n   characters have been read.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "input_byte", "in_channel -> int",
                  "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Pervasives.html#VALinput_char\"><code class=\"code\">input_char</code></a>, but return the 8-bit integer representing\n   the character.\n   Raise <code class=\"code\"><span class=\"constructor\">End_of_file</span></code> if an end of file was reached.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "input_binary_int", "in_channel -> int",
                  "\n<div class=\"info-desc\">\n<p>Read an integer encoded in binary format (4 bytes, big-endian)\n   from the given input channel. See <a href=\"Pervasives.html#VALoutput_binary_int\"><code class=\"code\">output_binary_int</code></a>.\n   Raise <code class=\"code\"><span class=\"constructor\">End_of_file</span></code> if an end of file was reached while reading the\n   integer.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "input_value", "in_channel -> 'a",
                  "\n<div class=\"info-desc\">\n<p>Read the representation of a structured value, as produced\n   by <a href=\"Pervasives.html#VALoutput_value\"><code class=\"code\">output_value</code></a>, and return the corresponding value.\n   This function is identical to <a href=\"Marshal.html#VALfrom_channel\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.from_channel</code></a>;\n   see the description of module <a href=\"Marshal.html\"><code class=\"code\"><span class=\"constructor\">Marshal</span></code></a> for more information,\n   in particular concerning the lack of type safety.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "seek_in", "in_channel -> int -> unit",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">seek_in&nbsp;chan&nbsp;pos</code> sets the current reading position to <code class=\"code\">pos</code>\n   for channel <code class=\"code\">chan</code>. This works only for regular files. On\n   files of other kinds, the behavior is unspecified.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "pos_in", "in_channel -> int",
                  "\n<div class=\"info-desc\">\n<p>Return the current reading position for the given channel.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "in_channel_length", "in_channel -> int",
                  "\n<div class=\"info-desc\">\n<p>Return the size (number of characters) of the regular file\n    on which the given channel is opened.  If the channel is opened\n    on a file that is not a regular file, the result is meaningless.\n    The returned size does not take into account the end-of-line\n    translations that can be performed when reading from a channel\n    opened in text mode.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "close_in", "in_channel -> unit",
                  "\n<div class=\"info-desc\">\n<p>Close the given channel.  Input functions raise a <code class=\"code\"><span class=\"constructor\">Sys_error</span></code>\n  exception when they are applied to a closed input channel,\n  except <code class=\"code\">close_in</code>, which does nothing when applied to an already\n  closed channel.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "close_in_noerr", "in_channel -> unit",
                  "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">close_in</code>, but ignore all errors.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "set_binary_mode_in", "in_channel -> bool -> unit",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">set_binary_mode_in&nbsp;ic&nbsp;<span class=\"keyword\">true</span></code> sets the channel <code class=\"code\">ic</code> to binary\n   mode: no translations take place during input.\n   <code class=\"code\">set_binary_mode_out&nbsp;ic&nbsp;<span class=\"keyword\">false</span></code> sets the channel <code class=\"code\">ic</code> to text\n   mode: depending on the operating system, some translations\n   may take place during input.  For instance, under Windows,\n   end-of-lines will be translated from <code class=\"code\">\\r\\n</code> to <code class=\"code\">\\n</code>.\n   This function has no effect under operating systems that\n   do not distinguish between text mode and binary mode.</p>\n</div>\n"
                ]
              ]
            ],
            "sub_sections": []
          },
          {
            "section_name": "Operations on large files",
            "section_info": null,
            "elements": [
              [
                "Module",
                [ "LargeFile", "\n<p>Operations on large files.</p>\n\n" ]
              ]
            ],
            "sub_sections": []
          }
        ]
      },
      {
        "section_name": "References",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "'a", "ref = {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTref.contents\">contents</span>&nbsp;: <code class=\"type\">'a</code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The type of references (mutable indirection cells) containing\n   a value of type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "ref", "'a -> 'a ref",
              "\n<div class=\"info-desc\">\n<p>Return a fresh reference containing the given value.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(!)", "'a ref -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">!r</code> returns the current contents of reference <code class=\"code\">r</code>.\n   Equivalent to <code class=\"code\"><span class=\"keyword\">fun</span>&nbsp;r&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;r.contents</code>.\n   Unary operator at precedence level 11/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(:=)", "'a ref -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">r&nbsp;:=&nbsp;a</code> stores the value of <code class=\"code\">a</code> in reference <code class=\"code\">r</code>.\n   Equivalent to <code class=\"code\"><span class=\"keyword\">fun</span>&nbsp;r&nbsp;v&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;r.contents&nbsp;&lt;-&nbsp;v</code>.\n   Right-associative operator at precedence level 1/11.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "incr", "int ref -> unit",
              "\n<div class=\"info-desc\">\n<p>Increment the integer contained in the given reference.\n   Equivalent to <code class=\"code\"><span class=\"keyword\">fun</span>&nbsp;r&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;r&nbsp;:=&nbsp;succ&nbsp;!r</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "decr", "int ref -> unit",
              "\n<div class=\"info-desc\">\n<p>Decrement the integer contained in the given reference.\n   Equivalent to <code class=\"code\"><span class=\"keyword\">fun</span>&nbsp;r&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;r&nbsp;:=&nbsp;pred&nbsp;!r</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Result type",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "('a, 'b)", "result =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTresult.Ok\"><span class=\"constructor\">Ok</span></span> <span class=\"keyword\">of</span> <code class=\"type\">'a</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTresult.Error\"><span class=\"constructor\">Error</span></span> <span class=\"keyword\">of</span> <code class=\"type\">'b</code></code></td>\n\n</tr></tbody>",
              "\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Operations on format strings",
        "section_info":
          "<p>Format strings are character strings with special lexical conventions\n  that defines the functionality of formatted input/output functions. Format\n  strings are used to read data with formatted input functions from module\n  <a href=\"Scanf.html\"><code class=\"code\"><span class=\"constructor\">Scanf</span></code></a> and to print data with formatted output functions from modules\n  <a href=\"Printf.html\"><code class=\"code\"><span class=\"constructor\">Printf</span></code></a> and <a href=\"Format.html\"><code class=\"code\"><span class=\"constructor\">Format</span></code></a>.</p><p>Format strings are made of three kinds of entities:</p><ul>\n<li><em>conversions specifications</em>, introduced by the special character <code class=\"code\"><span class=\"string\">'%'</span></code>\n    followed by one or more characters specifying what kind of argument to\n    read or print,</li>\n<li><em>formatting indications</em>, introduced by the special character <code class=\"code\"><span class=\"string\">'@'</span></code>\n    followed by one or more characters specifying how to read or print the\n    argument,</li>\n<li><em>plain characters</em> that are regular characters with usual lexical\n    conventions. Plain characters specify string literals to be read in the\n    input or printed in the output.</li>\n</ul><p>There is an additional lexical rule to escape the special characters <code class=\"code\"><span class=\"string\">'%'</span></code>\n  and <code class=\"code\"><span class=\"string\">'@'</span></code> in format strings: if a special character follows a <code class=\"code\"><span class=\"string\">'%'</span></code>\n  character, it is treated as a plain character. In other words, <code class=\"code\"><span class=\"string\">\"%%\"</span></code> is\n  considered as a plain <code class=\"code\"><span class=\"string\">'%'</span></code> and <code class=\"code\"><span class=\"string\">\"%@\"</span></code> as a plain <code class=\"code\"><span class=\"string\">'@'</span></code>.</p><p>For more information about conversion specifications and formatting\n  indications available, read the documentation of modules <a href=\"Scanf.html\"><code class=\"code\"><span class=\"constructor\">Scanf</span></code></a>,\n  <a href=\"Printf.html\"><code class=\"code\"><span class=\"constructor\">Printf</span></code></a> and <a href=\"Format.html\"><code class=\"code\"><span class=\"constructor\">Format</span></code></a>.</p><p>Format strings have a general and highly polymorphic type\n    <code class=\"code\">(<span class=\"keywordsign\">'</span>a,&nbsp;<span class=\"keywordsign\">'</span>b,&nbsp;<span class=\"keywordsign\">'</span>c,&nbsp;<span class=\"keywordsign\">'</span>d,&nbsp;<span class=\"keywordsign\">'</span>e,&nbsp;<span class=\"keywordsign\">'</span>f)&nbsp;format6</code>.\n    The two simplified types, <code class=\"code\">format</code> and <code class=\"code\">format4</code> below are\n    included for backward compatibility with earlier releases of\n    OCaml.</p><p>The meaning of format string type parameters is as follows:</p><ul>\n<li><code class=\"code\"><span class=\"keywordsign\">'</span>a</code> is the type of the parameters of the format for formatted output\n      functions (<code class=\"code\">printf</code>-style functions);\n      <code class=\"code\"><span class=\"keywordsign\">'</span>a</code> is the type of the values read by the format for formatted input\n      functions (<code class=\"code\">scanf</code>-style functions).</li>\n</ul><ul>\n<li><code class=\"code\"><span class=\"keywordsign\">'</span>b</code> is the type of input source for formatted input functions and the\n      type of output target for formatted output functions.\n      For <code class=\"code\">printf</code>-style functions from module <a href=\"Printf.html\"><code class=\"code\"><span class=\"constructor\">Printf</span></code></a>, <code class=\"code\"><span class=\"keywordsign\">'</span>b</code> is typically\n      <code class=\"code\">out_channel</code>;\n      for <code class=\"code\">printf</code>-style functions from module <a href=\"Format.html\"><code class=\"code\"><span class=\"constructor\">Format</span></code></a>, <code class=\"code\"><span class=\"keywordsign\">'</span>b</code> is typically\n      <a href=\"Format.html#TYPEformatter\"><code class=\"code\"><span class=\"constructor\">Format</span>.formatter</code></a>;\n      for <code class=\"code\">scanf</code>-style functions from module <a href=\"Scanf.html\"><code class=\"code\"><span class=\"constructor\">Scanf</span></code></a>, <code class=\"code\"><span class=\"keywordsign\">'</span>b</code> is typically\n      <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a>.</li>\n</ul><p>Type argument <code class=\"code\"><span class=\"keywordsign\">'</span>b</code> is also the type of the first argument given to\n      user's defined printing functions for <code class=\"code\">%a</code> and <code class=\"code\">%t</code> conversions,\n      and user's defined reading functions for <code class=\"code\">%r</code> conversion.</p><ul>\n<li><code class=\"code\"><span class=\"keywordsign\">'</span>c</code> is the type of the result of the <code class=\"code\">%a</code> and <code class=\"code\">%t</code> printing\n      functions, and also the type of the argument transmitted to the\n      first argument of <code class=\"code\">kprintf</code>-style functions or to the\n      <code class=\"code\">kscanf</code>-style functions.</li>\n</ul><ul>\n<li><code class=\"code\"><span class=\"keywordsign\">'</span>d</code> is the type of parameters for the <code class=\"code\">scanf</code>-style functions.</li>\n</ul><ul>\n<li><code class=\"code\"><span class=\"keywordsign\">'</span>e</code> is the type of the receiver function for the <code class=\"code\">scanf</code>-style functions.</li>\n</ul><ul>\n<li><code class=\"code\"><span class=\"keywordsign\">'</span>f</code> is the final result type of a formatted input/output function\n      invocation: for the <code class=\"code\">printf</code>-style functions, it is typically <code class=\"code\">unit</code>;\n      for the <code class=\"code\">scanf</code>-style functions, it is typically the result type of the\n      receiver function.</li>\n</ul>",
        "elements": [
          [
            "Typevariant",
            [
              "('a, 'b, 'c, 'd, 'e, 'f)",
              "format6 = ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.format6",
              null, null
            ]
          ],
          [
            "Typevariant",
            [
              "('a, 'b, 'c, 'd)",
              "format4 = ('a, 'b, 'c, 'c, 'c, 'd) format6", null, null
            ]
          ],
          [
            "Typevariant",
            [
              "('a, 'b, 'c)", "format = ('a, 'b, 'c, 'c) format4", null, null
            ]
          ],
          [
            "Function",
            [
              "string_of_format",
              "('a, 'b, 'c, 'd, 'e, 'f) format6 -> string",
              "\n<div class=\"info-desc\">\n<p>Converts a format string into a string.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "format_of_string",
              "('a, 'b, 'c, 'd, 'e, 'f) format6 -> ('a, 'b, 'c, 'd, 'e, 'f) format6",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">format_of_string&nbsp;s</code> returns a format string read from the string\n    literal <code class=\"code\">s</code>.\n    Note: <code class=\"code\">format_of_string</code> can not convert a string argument that is not a\n    literal. If you need this functionality, use the more general\n    <a href=\"Scanf.html#VALformat_from_string\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.format_from_string</code></a> function.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "(^^)",
              "('a, 'b, 'c, 'd, 'e, 'f) format6 -> ('f, 'b, 'c, 'e, 'g, 'h) format6 -> ('a, 'b, 'c, 'd, 'g, 'h) format6",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">f1&nbsp;^^&nbsp;f2</code> catenates format strings <code class=\"code\">f1</code> and <code class=\"code\">f2</code>. The result is a\n  format string that behaves as the concatenation of format strings <code class=\"code\">f1</code> and\n  <code class=\"code\">f2</code>: in case of formatted output, it accepts arguments from <code class=\"code\">f1</code>, then\n  arguments from <code class=\"code\">f2</code>; in case of formatted input, it returns results from\n  <code class=\"code\">f1</code>, then results from <code class=\"code\">f2</code>.\n  Right-associative operator at precedence level 5/11.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Program termination",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "exit", "int -> 'a",
              "\n<div class=\"info-desc\">\n<p>Terminate the process, returning the given status code\n   to the operating system: usually 0 to indicate no errors,\n   and a small positive integer to indicate failure.\n   All open output channels are flushed with <code class=\"code\">flush_all</code>.\n   An implicit <code class=\"code\">exit&nbsp;0</code> is performed each time a program\n   terminates normally.  An implicit <code class=\"code\">exit&nbsp;2</code> is performed if the program\n   terminates early because of an uncaught exception.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "at_exit", "(unit -> unit) -> unit",
              "\n<div class=\"info-desc\">\n<p>Register the given function to be called at program termination\n   time. The functions registered with <code class=\"code\">at_exit</code> will be called when\n   the program does any of the following:</p>\n<ul>\n<li>executes <a href=\"Pervasives.html#VALexit\"><code class=\"code\">exit</code></a></li>\n<li>terminates, either normally or because of an uncaught\n     exception</li>\n<li>executes the C function <code class=\"code\">caml_shutdown</code>.\n   The functions are called in 'last in, first out' order: the\n   function most recently added with <code class=\"code\">at_exit</code> is called first.</li>\n</ul>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Pervasives.LargeFile",
    "module_info":
      "\n<p>Operations on large files.\n  This sub-module provides 64-bit variants of the channel functions\n  that manipulate file positions and file sizes.  By representing\n  positions and sizes by 64-bit integers (type <code class=\"code\">int64</code>) instead of\n  regular integers (type <code class=\"code\">int</code>), these alternate functions allow\n  operating on files whose sizes are greater than <code class=\"code\">max_int</code>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [ "seek_out", "out_channel -> int64 -> unit", null ]
          ],
          [ "Function", [ "pos_out", "out_channel -> int64", null ] ],
          [
            "Function",
            [ "out_channel_length", "out_channel -> int64", null ]
          ],
          [ "Function", [ "seek_in", "in_channel -> int64 -> unit", null ] ],
          [ "Function", [ "pos_in", "in_channel -> int64", null ] ],
          [
            "Function",
            [ "in_channel_length", "in_channel -> int64", null ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Pparse",
    "module_info":
      "\n<p>Driver for the parser, external preprocessors and ast plugin hooks</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "error", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.CannotRun\"><span class=\"constructor\">CannotRun</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.WrongMagic\"><span class=\"constructor\">WrongMagic</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Exception", [ "Error", "error", null ] ],
          [ "Function", [ "preprocess", "string -> string", null ] ],
          [ "Function", [ "remove_preprocessed", "string -> unit", null ] ],
          [
            "Typevariant",
            [
              "'a", "ast_kind =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTast_kind.Structure\"><span class=\"constructor\">Structure</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEstructure\">Parsetree.structure</a> <a href=\"Pparse.html#TYPEast_kind\">ast_kind</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTast_kind.Signature\"><span class=\"constructor\">Signature</span></span> <span class=\"keyword\">:</span> <code class=\"type\"><a href=\"Parsetree.html#TYPEsignature\">Parsetree.signature</a> <a href=\"Pparse.html#TYPEast_kind\">ast_kind</a></code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Function", [ "read_ast", "'a ast_kind -> string -> 'a", null ] ],
          [
            "Function",
            [ "write_ast", "'a ast_kind -> string -> 'a -> unit", null ]
          ],
          [
            "Function",
            [
              "file",
              "Format.formatter -> tool_name:string -> string -> ( Lexing.lexbuf -> 'a) -> 'a ast_kind -> 'a",
              null
            ]
          ],
          [
            "Function",
            [
              "apply_rewriters",
              "?restore:bool -> tool_name:string -> 'a ast_kind -> 'a -> 'a",
              "\n<div class=\"info-desc\">\n<p>If <code class=\"code\">restore&nbsp;=&nbsp;<span class=\"keyword\">true</span></code> (the default), cookies set by external\n      rewriters will be kept for later calls.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "apply_rewriters_str",
              "?restore:bool -> tool_name:string -> Parsetree.structure -> Parsetree.structure",
              null
            ]
          ],
          [
            "Function",
            [
              "apply_rewriters_sig",
              "?restore:bool -> tool_name:string -> Parsetree.signature -> Parsetree.signature",
              null
            ]
          ],
          [
            "Function",
            [ "report_error", "Format.formatter -> error -> unit", null ]
          ],
          [
            "Function",
            [
              "parse_implementation",
              "Format.formatter -> tool_name:string -> string -> Parsetree.structure",
              null
            ]
          ],
          [
            "Function",
            [
              "parse_interface",
              "Format.formatter -> tool_name:string -> string -> Parsetree.signature",
              null
            ]
          ],
          [
            "Function",
            [
              "call_external_preprocessor", "string -> string -> string",
              null
            ]
          ],
          [
            "Function",
            [
              "open_and_check_magic",
              "string -> string -> in_channel * bool", null
            ]
          ],
          [ "Module", [ "ImplementationHooks", null ] ],
          [ "Module", [ "InterfaceHooks", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Pparse.ImplementationHooks",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [
            "Function",
            [
              "add_hook", "string -> ( Misc.hook_info -> t -> t ) -> unit",
              null
            ]
          ],
          [ "Function", [ "apply_hooks", "Misc.hook_info -> t -> t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Pparse.InterfaceHooks",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [
            "Function",
            [
              "add_hook", "string -> ( Misc.hook_info -> t -> t ) -> unit",
              null
            ]
          ],
          [ "Function", [ "apply_hooks", "Misc.hook_info -> t -> t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Pprintast",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "space_formatter", "= (unit, Format.formatter , unit) format",
              null, null
            ]
          ],
          [
            "Function",
            [
              "toplevel_phrase",
              "Format.formatter -> Parsetree.toplevel_phrase -> unit", null
            ]
          ],
          [
            "Function",
            [
              "expression",
              "Format.formatter -> Parsetree.expression -> unit", null
            ]
          ],
          [
            "Function",
            [
              "string_of_expression", "Parsetree.expression -> string", null
            ]
          ],
          [
            "Function",
            [
              "top_phrase",
              "Format.formatter -> Parsetree.toplevel_phrase -> unit", null
            ]
          ],
          [
            "Function",
            [
              "core_type", "Format.formatter -> Parsetree.core_type -> unit",
              null
            ]
          ],
          [
            "Function",
            [
              "pattern", "Format.formatter -> Parsetree.pattern -> unit",
              null
            ]
          ],
          [
            "Function",
            [
              "signature", "Format.formatter -> Parsetree.signature -> unit",
              null
            ]
          ],
          [
            "Function",
            [
              "structure", "Format.formatter -> Parsetree.structure -> unit",
              null
            ]
          ],
          [
            "Function",
            [ "string_of_structure", "Parsetree.structure -> string", null ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Printast",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "interface",
              "Format.formatter -> Parsetree.signature_item list -> unit",
              null
            ]
          ],
          [
            "Function",
            [
              "implementation",
              "Format.formatter -> Parsetree.structure_item list -> unit",
              null
            ]
          ],
          [
            "Function",
            [
              "top_phrase",
              "Format.formatter -> Parsetree.toplevel_phrase -> unit", null
            ]
          ],
          [
            "Function",
            [
              "expression",
              "int -> Format.formatter -> Parsetree.expression -> unit", null
            ]
          ],
          [
            "Function",
            [
              "structure",
              "int -> Format.formatter -> Parsetree.structure -> unit", null
            ]
          ],
          [
            "Function",
            [
              "payload",
              "int -> Format.formatter -> Parsetree.payload -> unit", null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Printexc",
    "module_info":
      "\n<p>Facilities for printing exceptions and inspecting current call stack.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_string", "exn -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.to_string&nbsp;e</code> returns a string representation of\n   the exception <code class=\"code\">e</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "print", "('a -> 'b) -> 'a -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.print&nbsp;fn&nbsp;x</code> applies <code class=\"code\">fn</code> to <code class=\"code\">x</code> and returns the result.\n   If the evaluation of <code class=\"code\">fn&nbsp;x</code> raises any exception, the\n   name of the exception is printed on standard error output,\n   and the exception is raised again.\n   The typical use is to catch and report exceptions that\n   escape a function application.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "catch", "('a -> 'b) -> 'a -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.catch&nbsp;fn&nbsp;x</code> is similar to <a href=\"Printexc.html#VALprint\"><code class=\"code\"><span class=\"constructor\">Printexc</span>.print</code></a>, but\n   aborts the program with exit code 2 after printing the\n   uncaught exception.  This function is deprecated: the runtime\n   system is now able to print uncaught exceptions as precisely\n   as <code class=\"code\"><span class=\"constructor\">Printexc</span>.catch</code> does.  Moreover, calling <code class=\"code\"><span class=\"constructor\">Printexc</span>.catch</code>\n   makes it harder to track the location of the exception\n   using the debugger or the stack backtrace facility.\n   So, do not use <code class=\"code\"><span class=\"constructor\">Printexc</span>.catch</code> in new code.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "print_backtrace", "out_channel -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace&nbsp;oc</code> prints an exception backtrace\n    on the output channel <code class=\"code\">oc</code>.  The backtrace lists the program\n    locations where the most-recently raised exception was raised\n    and where it was propagated through function calls.</p>\n\n<p>If the call is not inside an exception handler, the returned\n    backtrace is unspecified. If the call is after some\n    exception-catching code (before in the handler, or in a when-guard\n    during the matching of the exception handler), the backtrace may\n    correspond to a later exception than the handled one.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "get_backtrace", "unit -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.get_backtrace&nbsp;()</code> returns a string containing the\n    same exception backtrace that <code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code> would\n    print. Same restriction usage than <a href=\"Printexc.html#VALprint_backtrace\"><code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "record_backtrace", "bool -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.record_backtrace&nbsp;b</code> turns recording of exception backtraces\n    on (if <code class=\"code\">b&nbsp;=&nbsp;<span class=\"keyword\">true</span></code>) or off (if <code class=\"code\">b&nbsp;=&nbsp;<span class=\"keyword\">false</span></code>).  Initially, backtraces\n    are not recorded, unless the <code class=\"code\">b</code> flag is given to the program\n    through the <code class=\"code\"><span class=\"constructor\">OCAMLRUNPARAM</span></code> variable.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "backtrace_status", "unit -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.backtrace_status()</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if exception\n    backtraces are currently recorded, <code class=\"code\"><span class=\"keyword\">false</span></code> if not.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "register_printer", "(exn -> string option) -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.register_printer&nbsp;fn</code> registers <code class=\"code\">fn</code> as an exception\n    printer.  The printer should return <code class=\"code\"><span class=\"constructor\">None</span></code> or raise an exception\n    if it does not know how to convert the passed exception, and <code class=\"code\"><span class=\"constructor\">Some</span><br>\n&nbsp;&nbsp;&nbsp;&nbsp;s</code> with <code class=\"code\">s</code> the resulting string if it can convert the passed\n    exception. Exceptions raised by the printer are ignored.</p>\n\n<p>When converting an exception into a string, the printers will be invoked\n    in the reverse order of their registrations, until a printer returns\n    a <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;s</code> value (if no such printer exists, the runtime will use a\n    generic printer).</p>\n\n<p>When using this mechanism, one should be aware that an exception backtrace\n    is attached to the thread that saw it raised, rather than to the exception\n    itself. Practically, it means that the code related to <code class=\"code\">fn</code> should not use\n    the backtrace if it has itself raised an exception before.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.11.2</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Raw backtraces",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "raw_backtrace", null, null,
              "\n<div class=\"info-desc\">\n<p>The abstract type <code class=\"code\">raw_backtrace</code> stores a backtrace in\n    a low-level format, instead of directly exposing them as string as\n    the <code class=\"code\">get_backtrace()</code> function does.</p>\n\n<p>This allows delaying the formatting of backtraces to when they are\n    actually printed, which may be useful if you record more\n    backtraces than you print.</p>\n\n<p>Raw backtraces cannot be marshalled. If you need marshalling, you\n    should use the array returned by the <code class=\"code\">backtrace_slots</code> function of\n    the next section.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "get_raw_backtrace", "unit -> raw_backtrace",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.get_raw_backtrace&nbsp;()</code> returns the same exception\n    backtrace that <code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code> would print, but in\n    a raw format. Same restriction usage than <a href=\"Printexc.html#VALprint_backtrace\"><code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "print_raw_backtrace", "out_channel -> raw_backtrace -> unit",
              "\n<div class=\"info-desc\">\n<p>Print a raw backtrace in the same format\n    <code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code> uses.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "raw_backtrace_to_string", "raw_backtrace -> string",
              "\n<div class=\"info-desc\">\n<p>Return a string from a raw backtrace, in the same format\n    <code class=\"code\"><span class=\"constructor\">Printexc</span>.get_backtrace</code> uses.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "raise_with_backtrace", "exn -> raw_backtrace -> 'a",
              "\n<div class=\"info-desc\">\n<p>Reraise the exception using the given raw_backtrace for the\n    origin of the exception</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Current call stack",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "get_callstack", "int -> raw_backtrace",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.get_callstack&nbsp;n</code> returns a description of the top of the\n    call stack on the current program point (for the current thread),\n    with at most <code class=\"code\">n</code> entries.  (Note: this function is not related to\n    exceptions at all, despite being part of the <code class=\"code\"><span class=\"constructor\">Printexc</span></code> module.)</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Uncaught exceptions",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "set_uncaught_exception_handler",
              "(exn -> raw_backtrace -> unit) -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.set_uncaught_exception_handler&nbsp;fn</code> registers <code class=\"code\">fn</code> as the handler\n    for uncaught exceptions. The default handler prints the exception and\n    backtrace on standard error output.</p>\n\n<p>Note that when <code class=\"code\">fn</code> is called all the functions registered with\n    <a href=\"Pervasives.html#VALat_exit\"><code class=\"code\">at_exit</code></a> have already been called. Because of this you must\n    make sure any output channel <code class=\"code\">fn</code> writes on is flushed.</p>\n\n<p>Also note that exceptions raised by user code in the interactive toplevel\n    are not passed to this function as they are caught by the toplevel itself.</p>\n\n<p>If <code class=\"code\">fn</code> raises an exception, both the exceptions passed to <code class=\"code\">fn</code> and raised\n    by <code class=\"code\">fn</code> will be printed with their respective backtrace.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Manipulation of backtrace information",
        "section_info":
          "<p>These functions are used to traverse the slots of a raw backtrace\n    and extract information from them in a programmer-friendly format.</p>",
        "elements": [
          [
            "Typevariant",
            [
              "backtrace_slot", null, null,
              "\n<div class=\"info-desc\">\n<p>The abstract type <code class=\"code\">backtrace_slot</code> represents a single slot of\n    a backtrace.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "backtrace_slots",
              "raw_backtrace -> backtrace_slot array option",
              "\n<div class=\"info-desc\">\n<p>Returns the slots of a raw backtrace, or <code class=\"code\"><span class=\"constructor\">None</span></code> if none of them\n    contain useful information.</p>\n\n<p>In the return array, the slot at index <code class=\"code\">0</code> corresponds to the most\n    recent function call, raise, or primitive <code class=\"code\">get_backtrace</code> call in\n    the trace.</p>\n\n<p>Some possible reasons for returning <code class=\"code\"><span class=\"constructor\">None</span></code> are as follow:</p>\n<ul>\n<li>none of the slots in the trace come from modules compiled with\n    debug information (<code class=\"code\">-g</code>)</li>\n<li>the program is a bytecode program that has not been linked with\n    debug information enabled (<code class=\"code\">ocamlc&nbsp;-g</code>)</li>\n</ul>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "location", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlocation.filename\">filename</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlocation.line_number\">line_number</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlocation.start_char\">start_char</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlocation.end_char\">end_char</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The type of location information found in backtraces. <code class=\"code\">start_char</code>\n    and <code class=\"code\">end_char</code> are positions relative to the beginning of the\n    line.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>\n"
            ]
          ],
          [ "Module", [ "Slot", "\n" ] ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Raw backtrace slots",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "raw_backtrace_slot", null, null,
              "\n<div class=\"info-desc\">\n<p>This type allows direct access to raw backtrace slots, without any\n    conversion in an OCaml-usable data-structure. Being\n    process-specific, they must absolutely not be marshalled, and are\n    unsafe to use for this reason (marshalling them may not fail, but\n    un-marshalling and using the result will result in\n    undefined behavior).</p>\n\n<p>Elements of this type can still be compared and hashed: when two\n    elements are equal, then they represent the same source location\n    (the converse is not necessarily true in presence of inlining,\n    for example).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "raw_backtrace_length", "raw_backtrace -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">raw_backtrace_length&nbsp;bckt</code> returns the number of slots in the\n    backtrace <code class=\"code\">bckt</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "get_raw_backtrace_slot",
              "raw_backtrace -> int -> raw_backtrace_slot",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">get_raw_backtrace_slot&nbsp;bckt&nbsp;pos</code> returns the slot in position <code class=\"code\">pos</code> in the\n    backtrace <code class=\"code\">bckt</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "convert_raw_backtrace_slot",
              "raw_backtrace_slot -> backtrace_slot",
              "\n<div class=\"info-desc\">\n<p>Extracts the user-friendly <code class=\"code\">backtrace_slot</code> from a low-level\n    <code class=\"code\">raw_backtrace_slot</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "get_raw_backtrace_next_slot",
              "raw_backtrace_slot -> raw_backtrace_slot option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">get_raw_backtrace_next_slot&nbsp;slot</code> returns the next slot inlined, if any.</p>\n\n<p>Sample code to iterate over all frames (inlined and non-inlined):</p>\n<pre class=\"codepre\"><code class=\"code\">      <span class=\"comment\">(* Iterate over inlined frames *)</span>\n      <span class=\"keyword\">let</span> <span class=\"keyword\">rec</span> iter_raw_backtrace_slot f slot =\n        f slot;\n        <span class=\"keyword\">match</span> get_raw_backtrace_next_slot slot <span class=\"keyword\">with</span>\n        <span class=\"keywordsign\">|</span> <span class=\"constructor\">None</span> <span class=\"keywordsign\">-&gt;</span> ()\n        <span class=\"keywordsign\">|</span> <span class=\"constructor\">Some</span> slot' <span class=\"keywordsign\">-&gt;</span> iter_raw_backtrace_slot f slot'\n\n      <span class=\"comment\">(* Iterate over stack frames *)</span>\n      <span class=\"keyword\">let</span> iter_raw_backtrace f bt =\n        <span class=\"keyword\">for</span> i = 0 <span class=\"keyword\">to</span> raw_backtrace_length bt - 1 <span class=\"keyword\">do</span>\n          iter_raw_backtrace_slot f (get_raw_backtrace_slot bt i)\n        <span class=\"keyword\">done</span>\n    </code></pre></div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.04.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Exception slots",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "exn_slot_id", "exn -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.exn_slot_id</code> returns an integer which uniquely identifies\n    the constructor used to create the exception value <code class=\"code\">exn</code>\n    (in the current runtime).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "exn_slot_name", "exn -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.exn_slot_name&nbsp;exn</code> returns the internal name of the constructor\n    used to create the exception value <code class=\"code\">exn</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Printexc.Slot",
    "module_info": "\n<li><b>Since</b> 4.02.0</li>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", "= Printexc.backtrace_slot", null, null ] ],
          [
            "Function",
            [
              "is_raise", "t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">is_raise&nbsp;slot</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> when <code class=\"code\">slot</code> refers to a raising\n      point in the code, and <code class=\"code\"><span class=\"keyword\">false</span></code> when it comes from a simple\n      function call.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "is_inline", "t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">is_inline&nbsp;slot</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> when <code class=\"code\">slot</code> refers to a call\n      that got inlined by the compiler, and <code class=\"code\"><span class=\"keyword\">false</span></code> when it comes from\n      any other context.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.04.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "location", "t -> Printexc.location option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">location&nbsp;slot</code> returns the location information of the slot,\n      if available, and <code class=\"code\"><span class=\"constructor\">None</span></code> otherwise.</p>\n\n<p>Some possible reasons for failing to return a location are as follow:</p>\n<ul>\n<li>the slot corresponds to a compiler-inserted raise</li>\n<li>the slot corresponds to a part of the program that has not been\n      compiled with debug information (<code class=\"code\">-g</code>)</li>\n</ul>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "format", "int -> t -> string option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">format&nbsp;pos&nbsp;slot</code> returns the string representation of <code class=\"code\">slot</code> as\n      <code class=\"code\">raw_backtrace_to_string</code> would format it, assuming it is the\n      <code class=\"code\">pos</code>-th element of the backtrace: the <code class=\"code\">0</code>-th element is\n      pretty-printed differently than the others.</p>\n\n<p>Whole-backtrace printing functions also skip some uninformative\n      slots; in that case, <code class=\"code\">format&nbsp;pos&nbsp;slot</code> returns <code class=\"code\"><span class=\"constructor\">None</span></code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Printf",
    "module_info": "\n<p>Formatted output functions.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "fprintf",
              "out_channel -> ('a, out_channel , unit) format -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">fprintf&nbsp;outchan&nbsp;format&nbsp;arg1&nbsp;...&nbsp;argN</code> formats the arguments\n   <code class=\"code\">arg1</code> to <code class=\"code\">argN</code> according to the format string <code class=\"code\">format</code>, and\n   outputs the resulting string on the channel <code class=\"code\">outchan</code>.</p>\n\n<p>The format string is a character string which contains two types of\n   objects: plain characters, which are simply copied to the output\n   channel, and conversion specifications, each of which causes\n   conversion and printing of arguments.</p>\n\n<p>Conversion specifications have the following form:</p>\n\n<p><code class=\"code\">%&nbsp;[flags]&nbsp;[width]&nbsp;[.precision]&nbsp;<span class=\"keyword\">type</span></code></p>\n\n<p>In short, a conversion specification consists in the <code class=\"code\">%</code> character,\n   followed by optional modifiers and a type which is made of one or\n   two characters.</p>\n\n<p>The types and their meanings are:</p>\n\n<ul>\n<li><code class=\"code\">d</code>, <code class=\"code\">i</code>: convert an integer argument to signed decimal.</li>\n<li><code class=\"code\">u</code>, <code class=\"code\">n</code>, <code class=\"code\">l</code>, <code class=\"code\"><span class=\"constructor\">L</span></code>, or <code class=\"code\"><span class=\"constructor\">N</span></code>: convert an integer argument to\n     unsigned decimal.  Warning: <code class=\"code\">n</code>, <code class=\"code\">l</code>, <code class=\"code\"><span class=\"constructor\">L</span></code>, and <code class=\"code\"><span class=\"constructor\">N</span></code> are\n     used for <code class=\"code\">scanf</code>, and should not be used for <code class=\"code\">printf</code>.</li>\n<li><code class=\"code\">x</code>: convert an integer argument to unsigned hexadecimal,\n     using lowercase letters.</li>\n<li><code class=\"code\"><span class=\"constructor\">X</span></code>: convert an integer argument to unsigned hexadecimal,\n     using uppercase letters.</li>\n<li><code class=\"code\">o</code>: convert an integer argument to unsigned octal.</li>\n<li><code class=\"code\">s</code>: insert a string argument.</li>\n<li><code class=\"code\"><span class=\"constructor\">S</span></code>: convert a string argument to OCaml syntax (double quotes, escapes).</li>\n<li><code class=\"code\">c</code>: insert a character argument.</li>\n<li><code class=\"code\"><span class=\"constructor\">C</span></code>: convert a character argument to OCaml syntax\n     (single quotes, escapes).</li>\n<li><code class=\"code\">f</code>: convert a floating-point argument to decimal notation,\n     in the style <code class=\"code\">dddd.ddd</code>.</li>\n<li><code class=\"code\"><span class=\"constructor\">F</span></code>: convert a floating-point argument to OCaml syntax (<code class=\"code\">dddd.</code>\n     or <code class=\"code\">dddd.ddd</code> or <code class=\"code\">d.ddd&nbsp;e+-dd</code>).</li>\n<li><code class=\"code\">e</code> or <code class=\"code\"><span class=\"constructor\">E</span></code>: convert a floating-point argument to decimal notation,\n     in the style <code class=\"code\">d.ddd&nbsp;e+-dd</code> (mantissa and exponent).</li>\n<li><code class=\"code\">g</code> or <code class=\"code\"><span class=\"constructor\">G</span></code>: convert a floating-point argument to decimal notation,\n     in style <code class=\"code\">f</code> or <code class=\"code\">e</code>, <code class=\"code\"><span class=\"constructor\">E</span></code> (whichever is more compact). Moreover,\n     any trailing zeros are removed from the fractional part of the result\n     and the decimal-point character is removed if there is no fractional\n     part remaining.</li>\n<li><code class=\"code\">h</code> or <code class=\"code\"><span class=\"constructor\">H</span></code>: convert a floating-point argument to hexadecimal notation,\n     in the style <code class=\"code\">0xh.hhhh&nbsp;e+-dd</code> (hexadecimal mantissa, exponent in\n     decimal and denotes a power of 2).</li>\n<li><code class=\"code\"><span class=\"constructor\">B</span></code>: convert a boolean argument to the string <code class=\"code\"><span class=\"keyword\">true</span></code> or <code class=\"code\"><span class=\"keyword\">false</span></code></li>\n<li><code class=\"code\">b</code>: convert a boolean argument (deprecated; do not use in new\n     programs).</li>\n<li><code class=\"code\">ld</code>, <code class=\"code\">li</code>, <code class=\"code\">lu</code>, <code class=\"code\">lx</code>, <code class=\"code\">lX</code>, <code class=\"code\">lo</code>: convert an <code class=\"code\">int32</code> argument to\n     the format specified by the second letter (decimal, hexadecimal, etc).</li>\n<li><code class=\"code\">nd</code>, <code class=\"code\">ni</code>, <code class=\"code\">nu</code>, <code class=\"code\">nx</code>, <code class=\"code\">nX</code>, <code class=\"code\">no</code>: convert a <code class=\"code\">nativeint</code> argument to\n     the format specified by the second letter.</li>\n<li><code class=\"code\"><span class=\"constructor\">Ld</span></code>, <code class=\"code\"><span class=\"constructor\">Li</span></code>, <code class=\"code\"><span class=\"constructor\">Lu</span></code>, <code class=\"code\"><span class=\"constructor\">Lx</span></code>, <code class=\"code\"><span class=\"constructor\">LX</span></code>, <code class=\"code\"><span class=\"constructor\">Lo</span></code>: convert an <code class=\"code\">int64</code> argument to\n     the format specified by the second letter.</li>\n<li><code class=\"code\">a</code>: user-defined printer. Take two arguments and apply the\n     first one to <code class=\"code\">outchan</code> (the current output channel) and to the\n     second argument. The first argument must therefore have type\n     <code class=\"code\">out_channel&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;<span class=\"keywordsign\">'</span>b&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;unit</code> and the second <code class=\"code\"><span class=\"keywordsign\">'</span>b</code>.\n     The output produced by the function is inserted in the output of\n     <code class=\"code\">fprintf</code> at the current point.</li>\n<li><code class=\"code\">t</code>: same as <code class=\"code\">%a</code>, but take only one argument (with type\n     <code class=\"code\">out_channel&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;unit</code>) and apply it to <code class=\"code\">outchan</code>.</li>\n<li><code class=\"code\">{&nbsp;fmt&nbsp;%}</code>: convert a format string argument to its type digest.\n     The argument must have the same type as the internal format string\n     <code class=\"code\">fmt</code>.</li>\n<li><code class=\"code\">(&nbsp;fmt&nbsp;%)</code>: format string substitution. Take a format string\n     argument and substitute it to the internal format string <code class=\"code\">fmt</code>\n     to print following arguments. The argument must have the same\n     type as the internal format string <code class=\"code\">fmt</code>.</li>\n<li><code class=\"code\">!</code>: take no argument and flush the output.</li>\n<li><code class=\"code\">%</code>: take no argument and output one <code class=\"code\">%</code> character.</li>\n<li><code class=\"code\">@</code>: take no argument and output one <code class=\"code\">@</code> character.</li>\n<li><code class=\"code\">,</code>: take no argument and output nothing: a no-op delimiter for\n     conversion specifications.</li>\n</ul>\n<p>The optional <code class=\"code\">flags</code> are:</p>\n<ul>\n<li><code class=\"code\">-</code>: left-justify the output (default is right justification).</li>\n<li><code class=\"code\">0</code>: for numerical conversions, pad with zeroes instead of spaces.</li>\n<li><code class=\"code\">+</code>: for signed numerical conversions, prefix number with a <code class=\"code\">+</code>\n     sign if positive.</li>\n<li>space: for signed numerical conversions, prefix number with a\n     space if positive.</li>\n<li><code class=\"code\"><span class=\"keywordsign\">#</span></code>: request an alternate formatting style for the hexadecimal\n     and octal integer types (<code class=\"code\">x</code>, <code class=\"code\"><span class=\"constructor\">X</span></code>, <code class=\"code\">o</code>, <code class=\"code\">lx</code>, <code class=\"code\">lX</code>, <code class=\"code\">lo</code>, <code class=\"code\"><span class=\"constructor\">Lx</span></code>,\n     <code class=\"code\"><span class=\"constructor\">LX</span></code>, <code class=\"code\"><span class=\"constructor\">Lo</span></code>).</li>\n</ul>\n<p>The optional <code class=\"code\">width</code> is an integer indicating the minimal\n   width of the result. For instance, <code class=\"code\">%6d</code> prints an integer,\n   prefixing it with spaces to fill at least 6 characters.</p>\n\n<p>The optional <code class=\"code\">precision</code> is a dot <code class=\"code\">.</code> followed by an integer\n   indicating how many digits follow the decimal point in the <code class=\"code\">%f</code>,\n   <code class=\"code\">%e</code>, and <code class=\"code\">%<span class=\"constructor\">E</span></code> conversions. For instance, <code class=\"code\">%.4f</code> prints a <code class=\"code\">float</code> with\n   4 fractional digits.</p>\n\n<p>The integer in a <code class=\"code\">width</code> or <code class=\"code\">precision</code> can also be specified as\n   <code class=\"code\">*</code>, in which case an extra integer argument is taken to specify\n   the corresponding <code class=\"code\">width</code> or <code class=\"code\">precision</code>. This integer argument\n   precedes immediately the argument to print.\n   For instance, <code class=\"code\">%.*f</code> prints a <code class=\"code\">float</code> with as many fractional\n   digits as the value of the argument given before the float.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "printf", "('a, out_channel , unit) format -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but output on <code class=\"code\">stdout</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "eprintf", "('a, out_channel , unit) format -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but output on <code class=\"code\">stderr</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sprintf", "('a, unit, string) format -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but instead of printing on an output channel,\n   return a string containing the result of formatting the arguments.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "bprintf", "Buffer.t -> ('a, Buffer.t , unit) format -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but instead of printing on an output channel,\n   append the formatted arguments to the given extensible buffer\n   (see module <a href=\"Buffer.html\"><code class=\"code\"><span class=\"constructor\">Buffer</span></code></a>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "ifprintf", "'b -> ('a, 'b, 'c, unit) format4 -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but does not print anything.\n    Useful to ignore some material when conditionally printing.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.10.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": null,
        "section_info":
          "<p>Formatted output functions with continuations.</p>",
        "elements": [
          [
            "Function",
            [
              "kfprintf",
              "( out_channel -> 'd) -> out_channel -> ('a, out_channel , unit, 'd) format4 -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">fprintf</code>, but instead of returning immediately,\n   passes the out channel to its first argument at the end of printing.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.09.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "ikfprintf",
              "('b -> 'd) -> 'b -> ('a, 'b, 'c, 'd) format4 -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">kfprintf</code> above, but does not print anything.\n   Useful to ignore some material when conditionally printing.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "ksprintf",
              "(string -> 'd) -> ('a, unit, string, 'd) format4 -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">sprintf</code> above, but instead of returning the string,\n   passes it to the first argument.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.09.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "kbprintf",
              "( Buffer.t -> 'd) -> Buffer.t -> ('a, Buffer.t , unit, 'd) format4 -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">bprintf</code>, but instead of returning immediately,\n   passes the buffer to its first argument at the end of printing.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.10.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": null,
        "section_info": "<p>Deprecated</p>",
        "elements": [
          [
            "Function",
            [
              "kprintf",
              "(string -> 'b) -> ('a, unit, string, 'b) format4 -> 'a",
              "\n<div class=\"info-desc\">\n<p>A deprecated synonym for <code class=\"code\">ksprintf</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Profile",
    "module_info": "\n<p>Compiler performance recording</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "file", "= string", null, null ] ],
          [
            "Function",
            [
              "reset", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>erase all recorded profile information</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "record_call",
              "?accumulate:bool -> string -> (unit -> 'a) -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">record_call&nbsp;pass&nbsp;f</code> calls <code class=\"code\">f</code> and records its profile information.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "record",
              "?accumulate:bool -> string -> ('a -> 'b) -> 'a -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">record&nbsp;pass&nbsp;f&nbsp;arg</code> records the profile information of <code class=\"code\">f&nbsp;arg</code></p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "column", "= [ `Abs_top_heap | `Alloc | `Time | `Top_heap ]",
              null, null
            ]
          ],
          [
            "Function",
            [
              "print", "Format.formatter -> column list -> unit",
              "\n<div class=\"info-desc\">\n<p>Prints the selected recorded profiling information to the formatter.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": null,
        "section_info": "<p>Command line flags</p>",
        "elements": [
          [ "Function", [ "options_doc", "string", null ] ],
          [
            "Function",
            [
              "all_columns", "column list",
              "<p>A few pass names that are needed in several places, and shared to\n    avoid typos.</p>"
            ]
          ],
          [ "Function", [ "generate", "string", null ] ],
          [ "Function", [ "transl", "string", null ] ],
          [ "Function", [ "typing", "string", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Queue",
    "module_info":
      "\n<p>First-in first-out queues.</p>\n\n<p>This module implements queues (FIFOs), with in-place modification.</p>\n\n<p><b>Warning</b> This module is not thread-safe: each <a href=\"Queue.html#TYPEt\"><code class=\"code\"><span class=\"constructor\">Queue</span>.t</code></a> value\n   must be protected from concurrent access (e.g. with a <code class=\"code\"><span class=\"constructor\">Mutex</span>.t</code>).\n   Failure to do so can lead to a crash.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "'a", "t", null,
              "\n<div class=\"info-desc\">\n<p>The type of queues containing elements of type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Exception",
            [
              "Empty", null,
              "\n<div class=\"info-desc\">\n<p>Raised when <a href=\"Queue.html#VALtake\"><code class=\"code\"><span class=\"constructor\">Queue</span>.take</code></a> or <a href=\"Queue.html#VALpeek\"><code class=\"code\"><span class=\"constructor\">Queue</span>.peek</code></a> is applied to an empty queue.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "unit -> 'a t",
              "\n<div class=\"info-desc\">\n<p>Return a new queue, initially empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "'a -> 'a t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add&nbsp;x&nbsp;q</code> adds the element <code class=\"code\">x</code> at the end of the queue <code class=\"code\">q</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "push", "'a -> 'a t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">push</code> is a synonym for <code class=\"code\">add</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "take", "'a t -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">take&nbsp;q</code> removes and returns the first element in queue <code class=\"code\">q</code>,\n   or raises <a href=\"Queue.html#EXCEPTIONEmpty\"><code class=\"code\"><span class=\"constructor\">Queue</span>.<span class=\"constructor\">Empty</span></code></a> if the queue is empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pop", "'a t -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pop</code> is a synonym for <code class=\"code\">take</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "peek", "'a t -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">peek&nbsp;q</code> returns the first element in queue <code class=\"code\">q</code>, without removing\n   it from the queue, or raises <a href=\"Queue.html#EXCEPTIONEmpty\"><code class=\"code\"><span class=\"constructor\">Queue</span>.<span class=\"constructor\">Empty</span></code></a> if the queue is empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "top", "'a t -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">top</code> is a synonym for <code class=\"code\">peek</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "clear", "'a t -> unit",
              "\n<div class=\"info-desc\">\n<p>Discard all elements from a queue.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "copy", "'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the given queue.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "is_empty", "'a t -> bool",
              "\n<div class=\"info-desc\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given queue is empty, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "length", "'a t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the number of elements in a queue.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "('a -> unit) -> 'a t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;q</code> applies <code class=\"code\">f</code> in turn to all elements of <code class=\"code\">q</code>,\n   from the least recently entered to the most recently entered.\n   The queue itself is unchanged.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold", "('b -> 'a -> 'b) -> 'b -> 'a t -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;accu&nbsp;q</code> is equivalent to <code class=\"code\"><span class=\"constructor\">List</span>.fold_left&nbsp;f&nbsp;accu&nbsp;l</code>,\n   where <code class=\"code\">l</code> is the list of <code class=\"code\">q</code>'s elements. The queue remains\n   unchanged.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "transfer", "'a t -> 'a t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">transfer&nbsp;q1&nbsp;q2</code> adds all of <code class=\"code\">q1</code>'s elements at the end of\n   the queue <code class=\"code\">q2</code>, then clears <code class=\"code\">q1</code>. It is equivalent to the\n   sequence <code class=\"code\">iter&nbsp;(<span class=\"keyword\">fun</span>&nbsp;x&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;add&nbsp;x&nbsp;q2)&nbsp;q1;&nbsp;clear&nbsp;q1</code>, but runs\n   in constant time.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "'a t -> 'a Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the queue, in front-to-back order.\n    The behavior is not defined if the queue is modified\n    during the iteration.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_seq", "'a t -> 'a Seq.t -> unit",
              "\n<div class=\"info-desc\">\n<p>Add the elements from the generator to the end of the queue</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "'a Seq.t -> 'a t",
              "\n<div class=\"info-desc\">\n<p>Create an array from the generator</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Random",
    "module_info": "\n<p>Pseudo-random number generators (PRNG).</p>\n",
    "sections": [
      {
        "section_name": "Basic functions",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "init", "int -> unit",
              "\n<div class=\"info-desc\">\n<p>Initialize the generator, using the argument as a seed.\n     The same seed will always yield the same sequence of numbers.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "full_init", "int array -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Random.html#VALinit\"><code class=\"code\"><span class=\"constructor\">Random</span>.init</code></a> but takes more data as seed.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "self_init", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Initialize the generator with a random seed chosen\n   in a system-dependent way.  If <code class=\"code\">/dev/urandom</code> is available on\n   the host machine, it is used to provide a highly random initial\n   seed.  Otherwise, a less random seed is computed from system\n   parameters (current time, process IDs).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "bits", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return 30 random bits in a nonnegative integer.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 3.12.0 </b> used a different algorithm (affects all the following\n                   functions)</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "int", "int -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.int&nbsp;bound</code> returns a random integer between 0 (inclusive)\n     and <code class=\"code\">bound</code> (exclusive).  <code class=\"code\">bound</code> must be greater than 0 and less\n     than 2<sup class=\"superscript\">30</sup>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "int32", "Int32.t -> Int32.t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.int32&nbsp;bound</code> returns a random integer between 0 (inclusive)\n     and <code class=\"code\">bound</code> (exclusive).  <code class=\"code\">bound</code> must be greater than 0.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "nativeint", "Nativeint.t -> Nativeint.t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.nativeint&nbsp;bound</code> returns a random integer between 0 (inclusive)\n     and <code class=\"code\">bound</code> (exclusive).  <code class=\"code\">bound</code> must be greater than 0.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "int64", "Int64.t -> Int64.t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.int64&nbsp;bound</code> returns a random integer between 0 (inclusive)\n     and <code class=\"code\">bound</code> (exclusive).  <code class=\"code\">bound</code> must be greater than 0.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "float", "float -> float",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.float&nbsp;bound</code> returns a random floating-point number\n   between 0 and <code class=\"code\">bound</code> (inclusive).  If <code class=\"code\">bound</code> is\n   negative, the result is negative or zero.  If <code class=\"code\">bound</code> is 0,\n   the result is 0.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "bool", "unit -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.bool&nbsp;()</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> or <code class=\"code\"><span class=\"keyword\">false</span></code> with probability 0.5 each.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Advanced functions",
        "section_info":
          "<p>The functions from module <a href=\"Random.State.html\"><code class=\"code\"><span class=\"constructor\">Random</span>.<span class=\"constructor\">State</span></code></a> manipulate the current state\n    of the random generator explicitly.\n    This allows using one or several deterministic PRNGs,\n    even in a multi-threaded program, without interference from\n    other parts of the program.</p>",
        "elements": [
          [ "Module", [ "State", null ] ],
          [
            "Function",
            [
              "get_state", "unit -> State.t",
              "\n<div class=\"info-desc\">\n<p>Return the current state of the generator used by the basic functions.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_state", "State.t -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the state of the generator used by the basic functions.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Random.State",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of PRNG states.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "make", "int array -> t",
              "\n<div class=\"info-desc\">\n<p>Create a new state and initialize it with the given seed.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "make_self_init", "unit -> t",
              "\n<div class=\"info-desc\">\n<p>Create a new state and initialize it with a system-dependent\n      low-entropy seed.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "copy", "t -> t",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the given state.</p>\n</div>\n"
            ]
          ],
          [ "Function", [ "bits", "t -> int", null ] ],
          [ "Function", [ "int", "t -> int -> int", null ] ],
          [ "Function", [ "int32", "t -> Int32.t -> Int32.t", null ] ],
          [
            "Function",
            [ "nativeint", "t -> Nativeint.t -> Nativeint.t", null ]
          ],
          [ "Function", [ "int64", "t -> Int64.t -> Int64.t", null ] ],
          [ "Function", [ "float", "t -> float -> float", null ] ],
          [
            "Function",
            [
              "bool", "t -> bool",
              "\n<div class=\"info-desc\">\n<p>These functions are the same as the basic functions, except that they\n      use (and update) the given PRNG state instead of the default one.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Scanf",
    "module_info": "\n<p>Formatted input functions.</p>\n",
    "sections": [
      {
        "section_name": "Introduction",
        "section_info": null,
        "elements": [],
        "sub_sections": [
          {
            "section_name": "Functional input with format strings",
            "section_info":
              "<p>The module <a href=\"Scanf.html\"><code class=\"code\"><span class=\"constructor\">Scanf</span></code></a> provides formatted input functions or <em>scanners</em>.</p><p>The formatted input functions can read from any kind of input, including\n    strings, files, or anything that can return characters. The more general\n    source of characters is named a <em>formatted input channel</em> (or <em>    scanning buffer</em>) and has type <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a>. The more general\n    formatted input function reads from any scanning buffer and is named\n    <code class=\"code\">bscanf</code>.</p><p>Generally speaking, the formatted input functions have 3 arguments:</p><ul>\n<li>the first argument is a source of characters for the input,</li>\n<li>the second argument is a format string that specifies the values to\n      read,</li>\n<li>the third argument is a <em>receiver function</em> that is applied to the\n      values read.</li>\n</ul><p>Hence, a typical call to the formatted input function <a href=\"Scanf.html#VALbscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf</code></a> is\n    <code class=\"code\">bscanf&nbsp;ic&nbsp;fmt&nbsp;f</code>, where:</p><ul>\n<li><code class=\"code\">ic</code> is a source of characters (typically a <em>    formatted input channel</em> with type <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a>),</li>\n</ul><ul>\n<li><code class=\"code\">fmt</code> is a format string (the same format strings as those used to print\n    material with module <a href=\"Printf.html\"><code class=\"code\"><span class=\"constructor\">Printf</span></code></a> or <a href=\"Format.html\"><code class=\"code\"><span class=\"constructor\">Format</span></code></a>),</li>\n</ul><ul>\n<li><code class=\"code\">f</code> is a function that has as many arguments as the number of values to\n    read in the input according to <code class=\"code\">fmt</code>.</li>\n</ul>",
            "elements": [],
            "sub_sections": []
          },
          {
            "section_name": "A simple example",
            "section_info":
              "<p>As suggested above, the expression <code class=\"code\">bscanf&nbsp;ic&nbsp;<span class=\"string\">\"%d\"</span>&nbsp;f</code> reads a decimal\n    integer <code class=\"code\">n</code> from the source of characters <code class=\"code\">ic</code> and returns <code class=\"code\">f&nbsp;n</code>.</p><p>For instance,</p><ul>\n<li>if we use <code class=\"code\">stdin</code> as the source of characters (<a href=\"Scanf.Scanning.html#VALstdin\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.stdin</code></a> is\n    the predefined formatted input channel that reads from standard input),</li>\n</ul><ul>\n<li>if we define the receiver <code class=\"code\">f</code> as <code class=\"code\"><span class=\"keyword\">let</span>&nbsp;f&nbsp;x&nbsp;=&nbsp;x&nbsp;+&nbsp;1</code>,</li>\n</ul><p>then <code class=\"code\">bscanf&nbsp;<span class=\"constructor\">Scanning</span>.stdin&nbsp;<span class=\"string\">\"%d\"</span>&nbsp;f</code> reads an integer <code class=\"code\">n</code> from the\n    standard input and returns <code class=\"code\">f&nbsp;n</code> (that is <code class=\"code\">n&nbsp;+&nbsp;1</code>). Thus, if we\n    evaluate <code class=\"code\">bscanf&nbsp;stdin&nbsp;<span class=\"string\">\"%d\"</span>&nbsp;f</code>, and then enter <code class=\"code\">41</code> at the\n    keyboard, the result we get is <code class=\"code\">42</code>.</p>",
            "elements": [],
            "sub_sections": []
          },
          {
            "section_name": "Formatted input as a functional feature",
            "section_info":
              "<p>The OCaml scanning facility is reminiscent of the corresponding C feature.\n    However, it is also largely different, simpler, and yet more powerful:\n    the formatted input functions are higher-order functionals and the\n    parameter passing mechanism is just the regular function application not\n    the variable assignment based mechanism which is typical for formatted\n    input in imperative languages; the OCaml format strings also feature\n    useful additions to easily define complex tokens; as expected within a\n    functional programming language, the formatted input functions also\n    support polymorphism, in particular arbitrary interaction with\n    polymorphic user-defined scanners. Furthermore, the OCaml formatted input\n    facility is fully type-checked at compile time.</p>",
            "elements": [],
            "sub_sections": []
          }
        ]
      },
      {
        "section_name": "Formatted input channel",
        "section_info": null,
        "elements": [ [ "Module", [ "Scanning", null ] ] ],
        "sub_sections": []
      },
      {
        "section_name": "Type of formatted input functions",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "('a, 'b, 'c, 'd)",
              "scanner = ('a, Scanning.in_channel , 'b, 'c, 'a -> 'd, 'd) format6 -> 'c",
              null,
              "\n<div class=\"info-desc\">\n<p>The type of formatted input scanners: <code class=\"code\">(<span class=\"keywordsign\">'</span>a,&nbsp;<span class=\"keywordsign\">'</span>b,&nbsp;<span class=\"keywordsign\">'</span>c,&nbsp;<span class=\"keywordsign\">'</span>d)&nbsp;scanner</code>\n    is the type of a formatted input function that reads from some\n    formatted input channel according to some format string; more\n    precisely, if <code class=\"code\">scan</code> is some formatted input function, then <code class=\"code\">scan<br>\n&nbsp;&nbsp;&nbsp;&nbsp;ic&nbsp;fmt&nbsp;f</code> applies <code class=\"code\">f</code> to all the arguments specified by format\n    string <code class=\"code\">fmt</code>, when <code class=\"code\">scan</code> has read those arguments from the\n    <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel <code class=\"code\">ic</code>.</p>\n\n<p>For instance, the <a href=\"Scanf.html#VALscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.scanf</code></a> function below has type\n    <code class=\"code\">(<span class=\"keywordsign\">'</span>a,&nbsp;<span class=\"keywordsign\">'</span>b,&nbsp;<span class=\"keywordsign\">'</span>c,&nbsp;<span class=\"keywordsign\">'</span>d)&nbsp;scanner</code>, since it is a formatted input function that\n    reads from <a href=\"Scanf.Scanning.html#VALstdin\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.stdin</code></a>: <code class=\"code\">scanf&nbsp;fmt&nbsp;f</code> applies <code class=\"code\">f</code> to the arguments\n    specified by <code class=\"code\">fmt</code>, reading those arguments from <a href=\"Pervasives.html#VALstdin\"><code class=\"code\">stdin</code></a> as\n    expected.</p>\n\n<p>If the format <code class=\"code\">fmt</code> has some <code class=\"code\">%r</code> indications, the corresponding\n    formatted input functions must be provided <em>before</em> receiver function\n    <code class=\"code\">f</code>. For instance, if <code class=\"code\">read_elem</code> is an input function for values of type\n    <code class=\"code\">t</code>, then <code class=\"code\">bscanf&nbsp;ic&nbsp;<span class=\"string\">\"%r;\"</span>&nbsp;read_elem&nbsp;f</code> reads a value <code class=\"code\">v</code> of type <code class=\"code\">t</code>\n    followed by a <code class=\"code\"><span class=\"string\">';'</span></code> character, and returns <code class=\"code\">f&nbsp;v</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.10.0</li>\n</ul>\n"
            ]
          ],
          [
            "Exception",
            [
              "Scan_failure", "string",
              "\n<div class=\"info-desc\">\n<p>When the input can not be read according to the format string\n    specification, formatted input functions typically raise exception\n    <code class=\"code\"><span class=\"constructor\">Scan_failure</span></code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "The general formatted input function",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "bscanf", "Scanning.in_channel -> ('a, 'b, 'c, 'd) scanner",
              "<p><code class=\"code\">bscanf&nbsp;ic&nbsp;fmt&nbsp;r1&nbsp;...&nbsp;rN&nbsp;f</code> reads characters from the\n    <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel <code class=\"code\">ic</code> and converts them to\n    values according to format string <code class=\"code\">fmt</code>.\n    As a final step, receiver function <code class=\"code\">f</code> is applied to the values read and\n    gives the result of the <code class=\"code\">bscanf</code> call.</p><p>For instance, if <code class=\"code\">f</code> is the function <code class=\"code\"><span class=\"keyword\">fun</span>&nbsp;s&nbsp;i&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;i&nbsp;+&nbsp;1</code>, then\n    <code class=\"code\"><span class=\"constructor\">Scanf</span>.sscanf&nbsp;<span class=\"string\">\"x=&nbsp;1\"</span>&nbsp;<span class=\"string\">\"%s&nbsp;=&nbsp;%i\"</span>&nbsp;f</code> returns <code class=\"code\">2</code>.</p><p>Arguments <code class=\"code\">r1</code> to <code class=\"code\">rN</code> are user-defined input functions that read the\n    argument corresponding to the <code class=\"code\">%r</code> conversions specified in the format\n    string.</p>"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Format string description",
        "section_info":
          "<p>The format string is a character string which contains three types of\n    objects:</p><ul>\n<li>plain characters, which are simply matched with the characters of the\n      input (with a special case for space and line feed, see <a href=\"Scanf.html#space\"><i>The space character in format strings</i></a>),</li>\n<li>conversion specifications, each of which causes reading and conversion of\n      one argument for the function <code class=\"code\">f</code> (see <a href=\"Scanf.html#conversion\"><i>Conversion specifications in format strings</i></a>),</li>\n<li>scanning indications to specify boundaries of tokens\n      (see scanning <a href=\"Scanf.html#indication\"><i>Scanning indications in format strings</i></a>).</li>\n</ul>",
        "elements": [],
        "sub_sections": [
          {
            "section_name": "The space character in format strings",
            "section_info":
              "<p>As mentioned above, a plain character in the format string is just\n    matched with the next character of the input; however, two characters are\n    special exceptions to this rule: the space character (<code class=\"code\"><span class=\"string\">'&nbsp;'</span></code> or ASCII code\n    32) and the line feed character (<code class=\"code\"><span class=\"string\">'\\n'</span></code> or ASCII code 10).\n    A space does not match a single space character, but any amount of\n    'whitespace' in the input. More precisely, a space inside the format\n    string matches <em>any number</em> of tab, space, line feed and carriage\n    return characters. Similarly, a line feed character in the format string\n    matches either a single line feed or a carriage return followed by a line\n    feed.</p><p>Matching <em>any</em> amount of whitespace, a space in the format string\n    also matches no amount of whitespace at all; hence, the call <code class=\"code\">bscanf&nbsp;ib<br>\n&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"string\">\"Price&nbsp;=&nbsp;%d&nbsp;$\"</span>&nbsp;(<span class=\"keyword\">fun</span>&nbsp;p&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;p)</code> succeeds and returns <code class=\"code\">1</code> when reading an\n    input with various whitespace in it, such as <code class=\"code\"><span class=\"constructor\">Price</span>&nbsp;=&nbsp;1&nbsp;$</code>,\n    <code class=\"code\"><span class=\"constructor\">Price</span>&nbsp;&nbsp;=&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;$</code>, or even <code class=\"code\"><span class=\"constructor\">Price</span>=1$</code>.</p>",
            "elements": [],
            "sub_sections": []
          },
          {
            "section_name": "Conversion specifications in format strings",
            "section_info":
              "<p>Conversion specifications consist in the <code class=\"code\">%</code> character, followed by\n    an optional flag, an optional field width, and followed by one or\n    two conversion characters.</p><p>The conversion characters and their meanings are:</p><ul>\n<li><code class=\"code\">d</code>: reads an optionally signed decimal integer (<code class=\"code\">0-9</code>+).</li>\n<li><code class=\"code\">i</code>: reads an optionally signed integer\n      (usual input conventions for decimal (<code class=\"code\">0-9</code>+), hexadecimal\n       (<code class=\"code\">0x[0-9a-f]+</code> and <code class=\"code\">0<span class=\"constructor\">X</span>[0-9<span class=\"constructor\">A</span>-<span class=\"constructor\">F</span>]+</code>), octal (<code class=\"code\">0o[0-7]+</code>), and binary\n       (<code class=\"code\">0b[0-1]+</code>) notations are understood).</li>\n<li><code class=\"code\">u</code>: reads an unsigned decimal integer.</li>\n<li><code class=\"code\">x</code> or <code class=\"code\"><span class=\"constructor\">X</span></code>: reads an unsigned hexadecimal integer (<code class=\"code\">[0-9a-fA-<span class=\"constructor\">F</span>]+</code>).</li>\n<li><code class=\"code\">o</code>: reads an unsigned octal integer (<code class=\"code\">[0-7]+</code>).</li>\n<li><code class=\"code\">s</code>: reads a string argument that spreads as much as possible, until the\n      following bounding condition holds: <ul>\n<li>a whitespace has been found (see <a href=\"Scanf.html#space\"><i>The space character in format strings</i></a>),</li>\n<li>a scanning indication (see scanning <a href=\"Scanf.html#indication\"><i>Scanning indications in format strings</i></a>) has been\n         encountered,</li>\n<li>the end-of-input has been reached.</li>\n</ul>\n\n      Hence, this conversion always succeeds: it returns an empty\n      string if the bounding condition holds when the scan begins.</li>\n<li><code class=\"code\"><span class=\"constructor\">S</span></code>: reads a delimited string argument (delimiters and special\n      escaped characters follow the lexical conventions of OCaml).</li>\n<li><code class=\"code\">c</code>: reads a single character. To test the current input character\n      without reading it, specify a null field width, i.e. use\n      specification <code class=\"code\">%0c</code>. Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code>, if the field width\n      specification is greater than 1.</li>\n<li><code class=\"code\"><span class=\"constructor\">C</span></code>: reads a single delimited character (delimiters and special\n      escaped characters follow the lexical conventions of OCaml).</li>\n<li><code class=\"code\">f</code>, <code class=\"code\">e</code>, <code class=\"code\"><span class=\"constructor\">E</span></code>, <code class=\"code\">g</code>, <code class=\"code\"><span class=\"constructor\">G</span></code>: reads an optionally signed\n      floating-point number in decimal notation, in the style <code class=\"code\">dddd.ddd<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e/<span class=\"constructor\">E</span>+-dd</code>.</li>\n<li><code class=\"code\">h</code>, <code class=\"code\"><span class=\"constructor\">H</span></code>: reads an optionally signed floating-point number\n      in hexadecimal notation.</li>\n<li><code class=\"code\"><span class=\"constructor\">F</span></code>: reads a floating point number according to the lexical\n      conventions of OCaml (hence the decimal point is mandatory if the\n      exponent part is not mentioned).</li>\n<li><code class=\"code\"><span class=\"constructor\">B</span></code>: reads a boolean argument (<code class=\"code\"><span class=\"keyword\">true</span></code> or <code class=\"code\"><span class=\"keyword\">false</span></code>).</li>\n<li><code class=\"code\">b</code>: reads a boolean argument (for backward compatibility; do not use\n      in new programs).</li>\n<li><code class=\"code\">ld</code>, <code class=\"code\">li</code>, <code class=\"code\">lu</code>, <code class=\"code\">lx</code>, <code class=\"code\">lX</code>, <code class=\"code\">lo</code>: reads an <code class=\"code\">int32</code> argument to\n      the format specified by the second letter for regular integers.</li>\n<li><code class=\"code\">nd</code>, <code class=\"code\">ni</code>, <code class=\"code\">nu</code>, <code class=\"code\">nx</code>, <code class=\"code\">nX</code>, <code class=\"code\">no</code>: reads a <code class=\"code\">nativeint</code> argument to\n      the format specified by the second letter for regular integers.</li>\n<li><code class=\"code\"><span class=\"constructor\">Ld</span></code>, <code class=\"code\"><span class=\"constructor\">Li</span></code>, <code class=\"code\"><span class=\"constructor\">Lu</span></code>, <code class=\"code\"><span class=\"constructor\">Lx</span></code>, <code class=\"code\"><span class=\"constructor\">LX</span></code>, <code class=\"code\"><span class=\"constructor\">Lo</span></code>: reads an <code class=\"code\">int64</code> argument to\n      the format specified by the second letter for regular integers.</li>\n<li><code class=\"code\">[&nbsp;range&nbsp;]</code>: reads characters that matches one of the characters\n      mentioned in the range of characters <code class=\"code\">range</code> (or not mentioned in\n      it, if the range starts with <code class=\"code\">^</code>). Reads a <code class=\"code\">string</code> that can be\n      empty, if the next input character does not match the range. The set of\n      characters from <code class=\"code\">c1</code> to <code class=\"code\">c2</code> (inclusively) is denoted by <code class=\"code\">c1-c2</code>.\n      Hence, <code class=\"code\">%[0-9]</code> returns a string representing a decimal number\n      or an empty string if no decimal digit is found; similarly,\n      <code class=\"code\">%[0-9a-f]</code> returns a string of hexadecimal digits.\n      If a closing bracket appears in a range, it must occur as the\n      first character of the range (or just after the <code class=\"code\">^</code> in case of\n      range negation); hence <code class=\"code\">[]]</code> matches a <code class=\"code\">]</code> character and\n      <code class=\"code\">[^]]</code> matches any character that is not <code class=\"code\">]</code>.\n      Use <code class=\"code\">%%</code> and <code class=\"code\">%@</code> to include a <code class=\"code\">%</code> or a <code class=\"code\">@</code> in a range.</li>\n<li><code class=\"code\">r</code>: user-defined reader. Takes the next <code class=\"code\">ri</code> formatted input\n      function and applies it to the scanning buffer <code class=\"code\">ib</code> to read the\n      next argument. The input function <code class=\"code\">ri</code> must therefore have type\n      <code class=\"code\"><span class=\"constructor\">Scanning</span>.in_channel&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;<span class=\"keywordsign\">'</span>a</code> and the argument read has type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.</li>\n<li><code class=\"code\">{&nbsp;fmt&nbsp;%}</code>: reads a format string argument. The format string\n      read must have the same type as the format string specification\n      <code class=\"code\">fmt</code>. For instance, <code class=\"code\"><span class=\"string\">\"%{&nbsp;%i&nbsp;%}\"</span></code> reads any format string that\n      can read a value of type <code class=\"code\">int</code>; hence, if <code class=\"code\">s</code> is the string\n      <code class=\"code\"><span class=\"string\">\"fmt:\\\"number&nbsp;is&nbsp;%u\\\"\"</span></code>, then <code class=\"code\"><span class=\"constructor\">Scanf</span>.sscanf&nbsp;s&nbsp;<span class=\"string\">\"fmt:&nbsp;%{%i%}\"</span></code>\n      succeeds and returns the format string <code class=\"code\"><span class=\"string\">\"number&nbsp;is&nbsp;%u\"</span></code>.</li>\n<li><code class=\"code\">(&nbsp;fmt&nbsp;%)</code>: scanning sub-format substitution.\n      Reads a format string <code class=\"code\">rf</code> in the input, then goes on scanning with\n      <code class=\"code\">rf</code> instead of scanning with <code class=\"code\">fmt</code>.\n      The format string <code class=\"code\">rf</code> must have the same type as the format string\n      specification <code class=\"code\">fmt</code> that it replaces.\n      For instance, <code class=\"code\"><span class=\"string\">\"%(&nbsp;%i&nbsp;%)\"</span></code> reads any format string that can read a value\n      of type <code class=\"code\">int</code>.\n      The conversion returns the format string read <code class=\"code\">rf</code>, and then a value\n      read using <code class=\"code\">rf</code>.\n      Hence, if <code class=\"code\">s</code> is the string <code class=\"code\"><span class=\"string\">\"\\\"%4d\\\"1234.00\"</span></code>, then\n      <code class=\"code\"><span class=\"constructor\">Scanf</span>.sscanf&nbsp;s&nbsp;<span class=\"string\">\"%(%i%)\"</span>&nbsp;(<span class=\"keyword\">fun</span>&nbsp;fmt&nbsp;i&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;fmt,&nbsp;i)</code> evaluates to\n      <code class=\"code\">(<span class=\"string\">\"%4d\"</span>,&nbsp;1234)</code>.\n      This behaviour is not mere format substitution, since the conversion\n      returns the format string read as additional argument. If you need\n      pure format substitution, use special flag <code class=\"code\">_</code> to discard the\n      extraneous argument: conversion <code class=\"code\">%_(&nbsp;fmt&nbsp;%)</code> reads a format string\n      <code class=\"code\">rf</code> and then behaves the same as format string <code class=\"code\">rf</code>.  Hence, if <code class=\"code\">s</code> is\n      the string <code class=\"code\"><span class=\"string\">\"\\\"%4d\\\"1234.00\"</span></code>, then <code class=\"code\"><span class=\"constructor\">Scanf</span>.sscanf&nbsp;s&nbsp;<span class=\"string\">\"%_(%i%)\"</span></code> is\n      simply equivalent to <code class=\"code\"><span class=\"constructor\">Scanf</span>.sscanf&nbsp;<span class=\"string\">\"1234.00\"</span>&nbsp;<span class=\"string\">\"%4d\"</span></code>.</li>\n<li><code class=\"code\">l</code>: returns the number of lines read so far.</li>\n<li><code class=\"code\">n</code>: returns the number of characters read so far.</li>\n<li><code class=\"code\"><span class=\"constructor\">N</span></code> or <code class=\"code\"><span class=\"constructor\">L</span></code>: returns the number of tokens read so far.</li>\n<li><code class=\"code\">!</code>: matches the end of input condition.</li>\n<li><code class=\"code\">%</code>: matches one <code class=\"code\">%</code> character in the input.</li>\n<li><code class=\"code\">@</code>: matches one <code class=\"code\">@</code> character in the input.</li>\n<li><code class=\"code\">,</code>: does nothing.</li>\n</ul><p>Following the <code class=\"code\">%</code> character that introduces a conversion, there may be\n    the special flag <code class=\"code\">_</code>: the conversion that follows occurs as usual,\n    but the resulting value is discarded.\n    For instance, if <code class=\"code\">f</code> is the function <code class=\"code\"><span class=\"keyword\">fun</span>&nbsp;i&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;i&nbsp;+&nbsp;1</code>, and <code class=\"code\">s</code> is the\n    string <code class=\"code\"><span class=\"string\">\"x&nbsp;=&nbsp;1\"</span></code>, then <code class=\"code\"><span class=\"constructor\">Scanf</span>.sscanf&nbsp;s&nbsp;<span class=\"string\">\"%_s&nbsp;=&nbsp;%i\"</span>&nbsp;f</code> returns <code class=\"code\">2</code>.</p><p>The field width is composed of an optional integer literal\n    indicating the maximal width of the token to read.\n    For instance, <code class=\"code\">%6d</code> reads an integer, having at most 6 decimal digits;\n    <code class=\"code\">%4f</code> reads a float with at most 4 characters; and <code class=\"code\">%8[\\000-\\255]</code>\n    returns the next 8 characters (or all the characters still available,\n    if fewer than 8 characters are available in the input).</p><p>Notes:</p><ul>\n<li>as mentioned above, a <code class=\"code\">%s</code> conversion always succeeds, even if there is\n      nothing to read in the input: in this case, it simply returns <code class=\"code\"><span class=\"string\">\"\"</span></code>.</li>\n</ul><ul>\n<li>in addition to the relevant digits, <code class=\"code\"><span class=\"string\">'_'</span></code> characters may appear\n    inside numbers (this is reminiscent to the usual OCaml lexical\n    conventions). If stricter scanning is desired, use the range\n    conversion facility instead of the number conversions.</li>\n</ul><ul>\n<li>the <code class=\"code\">scanf</code> facility is not intended for heavy duty lexical\n    analysis and parsing. If it appears not expressive enough for your\n    needs, several alternative exists: regular expressions (module\n    <a href=\"Str.html\"><code class=\"code\"><span class=\"constructor\">Str</span></code></a>), stream parsers, <code class=\"code\">ocamllex</code>-generated lexers,\n    <code class=\"code\">ocamlyacc</code>-generated parsers.</li>\n</ul>",
            "elements": [],
            "sub_sections": []
          },
          {
            "section_name": "Scanning indications in format strings",
            "section_info":
              "<p>Scanning indications appear just after the string conversions <code class=\"code\">%s</code>\n    and <code class=\"code\">%[&nbsp;range&nbsp;]</code> to delimit the end of the token. A scanning\n    indication is introduced by a <code class=\"code\">@</code> character, followed by some\n    plain character <code class=\"code\">c</code>. It means that the string token should end\n    just before the next matching <code class=\"code\">c</code> (which is skipped). If no <code class=\"code\">c</code>\n    character is encountered, the string token spreads as much as\n    possible. For instance, <code class=\"code\"><span class=\"string\">\"%s@\\t\"</span></code> reads a string up to the next\n    tab character or to the end of input. If a <code class=\"code\">@</code> character appears\n    anywhere else in the format string, it is treated as a plain character.</p><p>Note:</p><ul>\n<li>As usual in format strings, <code class=\"code\">%</code> and <code class=\"code\">@</code> characters must be escaped\n    using <code class=\"code\">%%</code> and <code class=\"code\">%@</code>; this rule still holds within range specifications\n    and scanning indications.\n    For instance, format <code class=\"code\"><span class=\"string\">\"%s@%%\"</span></code> reads a string up to the next <code class=\"code\">%</code>\n    character, and format <code class=\"code\"><span class=\"string\">\"%s@%@\"</span></code> reads a string up to the next <code class=\"code\">@</code>.</li>\n<li>The scanning indications introduce slight differences in the syntax of\n    <a href=\"Scanf.html\"><code class=\"code\"><span class=\"constructor\">Scanf</span></code></a> format strings, compared to those used for the <a href=\"Printf.html\"><code class=\"code\"><span class=\"constructor\">Printf</span></code></a>\n    module. However, the scanning indications are similar to those used in\n    the <a href=\"Format.html\"><code class=\"code\"><span class=\"constructor\">Format</span></code></a> module; hence, when producing formatted text to be scanned\n    by <a href=\"Scanf.html#VALbscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf</code></a>, it is wise to use printing functions from the\n    <a href=\"Format.html\"><code class=\"code\"><span class=\"constructor\">Format</span></code></a> module (or, if you need to use functions from <a href=\"Printf.html\"><code class=\"code\"><span class=\"constructor\">Printf</span></code></a>, banish\n    or carefully double check the format strings that contain <code class=\"code\"><span class=\"string\">'@'</span></code>\n    characters).</li>\n</ul>",
            "elements": [],
            "sub_sections": []
          },
          {
            "section_name": "Exceptions during scanning",
            "section_info":
              "<p>Scanners may raise the following exceptions when the input cannot be read\n    according to the format string:</p><ul>\n<li>Raise <a href=\"Scanf.html#EXCEPTIONScan_failure\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scan_failure</span></code></a> if the input does not match the format.</li>\n</ul><ul>\n<li>Raise <code class=\"code\"><span class=\"constructor\">Failure</span></code> if a conversion to a number is not possible.</li>\n</ul><ul>\n<li>Raise <code class=\"code\"><span class=\"constructor\">End_of_file</span></code> if the end of input is encountered while some more\n      characters are needed to read the current conversion specification.</li>\n</ul><ul>\n<li>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the format string is invalid.</li>\n</ul><p>Note:</p><ul>\n<li>as a consequence, scanning a <code class=\"code\">%s</code> conversion never raises exception\n    <code class=\"code\"><span class=\"constructor\">End_of_file</span></code>: if the end of input is reached the conversion succeeds and\n    simply returns the characters read so far, or <code class=\"code\"><span class=\"string\">\"\"</span></code> if none were ever read.</li>\n</ul>",
            "elements": [],
            "sub_sections": []
          }
        ]
      },
      {
        "section_name": "Specialised formatted input functions",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "sscanf", "string -> ('a, 'b, 'c, 'd) scanner",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Scanf.html#VALbscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf</code></a>, but reads from the given string.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "scanf", "('a, 'b, 'c, 'd) scanner",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Scanf.html#VALbscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf</code></a>, but reads from the predefined formatted input\n    channel <a href=\"Scanf.Scanning.html#VALstdin\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.stdin</code></a> that is connected to <a href=\"Pervasives.html#VALstdin\"><code class=\"code\">stdin</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "kscanf",
              "Scanning.in_channel -> ( Scanning.in_channel -> exn -> 'd) -> ('a, 'b, 'c, 'd) scanner",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Scanf.html#VALbscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf</code></a>, but takes an additional function argument\n    <code class=\"code\">ef</code> that is called in case of error: if the scanning process or\n    some conversion fails, the scanning function aborts and calls the\n    error handling function <code class=\"code\">ef</code> with the formatted input channel and the\n    exception that aborted the scanning process as arguments.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "ksscanf",
              "string -> ( Scanning.in_channel -> exn -> 'd) -> ('a, 'b, 'c, 'd) scanner",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Scanf.html#VALkscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.kscanf</code></a> but reads from the given string.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Reading format strings from input",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "bscanf_format",
              "Scanning.in_channel -> ('a, 'b, 'c, 'd, 'e, 'f) format6 -> (('a, 'b, 'c, 'd, 'e, 'f) format6 -> 'g) -> 'g",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">bscanf_format&nbsp;ic&nbsp;fmt&nbsp;f</code> reads a format string token from the formatted\n    input channel <code class=\"code\">ic</code>, according to the given format string <code class=\"code\">fmt</code>, and\n    applies <code class=\"code\">f</code> to the resulting format string value.\n    Raise <a href=\"Scanf.html#EXCEPTIONScan_failure\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scan_failure</span></code></a> if the format string value read does not have the\n    same type as <code class=\"code\">fmt</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.09.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "sscanf_format",
              "string -> ('a, 'b, 'c, 'd, 'e, 'f) format6 -> (('a, 'b, 'c, 'd, 'e, 'f) format6 -> 'g) -> 'g",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Scanf.html#VALbscanf_format\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf_format</code></a>, but reads from the given string.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.09.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "format_from_string",
              "string -> ('a, 'b, 'c, 'd, 'e, 'f) format6 -> ('a, 'b, 'c, 'd, 'e, 'f) format6",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">format_from_string&nbsp;s&nbsp;fmt</code> converts a string argument to a format string,\n    according to the given format string <code class=\"code\">fmt</code>.\n    Raise <a href=\"Scanf.html#EXCEPTIONScan_failure\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scan_failure</span></code></a> if <code class=\"code\">s</code>, considered as a format string, does not\n    have the same type as <code class=\"code\">fmt</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.10.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "unescaped", "string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">unescaped&nbsp;s</code> return a copy of <code class=\"code\">s</code> with escape sequences (according to\n    the lexical conventions of OCaml) replaced by their corresponding special\n    characters.\n    More precisely, <code class=\"code\"><span class=\"constructor\">Scanf</span>.unescaped</code> has the following property:\n    for all string <code class=\"code\">s</code>, <code class=\"code\"><span class=\"constructor\">Scanf</span>.unescaped&nbsp;(<span class=\"constructor\">String</span>.escaped&nbsp;s)&nbsp;=&nbsp;s</code>.</p>\n\n<p>Always return a copy of the argument, even if there is no escape sequence\n    in the argument.\n    Raise <a href=\"Scanf.html#EXCEPTIONScan_failure\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scan_failure</span></code></a> if <code class=\"code\">s</code> is not properly escaped (i.e. <code class=\"code\">s</code> has invalid\n    escape sequences or special characters that are not properly escaped).\n    For instance, <code class=\"code\"><span class=\"constructor\">String</span>.unescaped&nbsp;<span class=\"string\">\"\\\"\"</span></code> will fail.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Deprecated",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "fscanf", "in_channel -> ('a, 'b, 'c, 'd) scanner",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><code class=\"code\"><span class=\"constructor\">Scanf</span>.fscanf</code> is error prone and deprecated since 4.03.0.\n\n    This function violates the following invariant of the <a href=\"Scanf.html\"><code class=\"code\"><span class=\"constructor\">Scanf</span></code></a> module:\n    To preserve scanning semantics, all scanning functions defined in <a href=\"Scanf.html\"><code class=\"code\"><span class=\"constructor\">Scanf</span></code></a>\n    must read from a user defined <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input\n    channel.\n\n    If you need to read from a <a href=\"Pervasives.html#TYPEin_channel\"><code class=\"code\">in_channel</code></a> input channel\n    <code class=\"code\">ic</code>, simply define a <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel as in\n    <code class=\"code\"><span class=\"keyword\">let</span>&nbsp;ib&nbsp;=&nbsp;<span class=\"constructor\">Scanning</span>.from_channel&nbsp;ic</code>,\n    then use <code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf&nbsp;ib</code> as usual.</div>\n"
            ]
          ],
          [
            "Function",
            [
              "kfscanf",
              "in_channel -> ( Scanning.in_channel -> exn -> 'd) -> ('a, 'b, 'c, 'd) scanner",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><code class=\"code\"><span class=\"constructor\">Scanf</span>.kfscanf</code> is error prone and deprecated since 4.03.0.</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Scanf.Scanning",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "in_channel", null, null,
              "\n<div class=\"info-desc\">\n<p>The notion of input channel for the <a href=\"Scanf.html\"><code class=\"code\"><span class=\"constructor\">Scanf</span></code></a> module:\n   those channels provide all the machinery necessary to read from any source\n   of characters, including a <a href=\"Pervasives.html#TYPEin_channel\"><code class=\"code\">in_channel</code></a> value.\n   A Scanf.Scanning.in_channel value is also called a <i>formatted input\n   channel</i> or equivalently a <i>scanning buffer</i>.\n   The type <a href=\"Scanf.Scanning.html#TYPEscanbuf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.scanbuf</code></a> below is an alias for <code class=\"code\"><span class=\"constructor\">Scanning</span>.in_channel</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "scanbuf", "= in_channel", null,
              "\n<div class=\"info-desc\">\n<p>The type of scanning buffers. A scanning buffer is the source from which a\n    formatted input function gets characters. The scanning buffer holds the\n    current state of the scan, plus a function to get the next char from the\n    input, and a token buffer to store the string matched so far.</p>\n\n<p>Note: a scanning action may often require to examine one character in\n    advance; when this 'lookahead' character does not belong to the token\n    read, it is stored back in the scanning buffer and becomes the next\n    character yet to be read.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stdin", "in_channel",
              "\n<div class=\"info-desc\">\n<p>The standard input notion for the <a href=\"Scanf.html\"><code class=\"code\"><span class=\"constructor\">Scanf</span></code></a> module.\n    <code class=\"code\"><span class=\"constructor\">Scanning</span>.stdin</code> is the <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel\n    attached to <a href=\"Pervasives.html#VALstdin\"><code class=\"code\">stdin</code></a>.</p>\n\n<p>Note: in the interactive system, when input is read from\n    <a href=\"Pervasives.html#VALstdin\"><code class=\"code\">stdin</code></a>, the newline character that triggers evaluation is\n    part of the input; thus, the scanning specifications must properly skip\n    this additional newline character (for instance, simply add a <code class=\"code\"><span class=\"string\">'\\n'</span></code> as\n    the last character of the format string).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "file_name", "= string", null,
              "\n<div class=\"info-desc\">\n<p>A convenient alias to designate a file name.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "open_in", "file_name -> in_channel",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Scanning</span>.open_in&nbsp;fname</code> returns a <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input\n    channel for bufferized reading in text mode from file <code class=\"code\">fname</code>.</p>\n\n<p>Note:\n    <code class=\"code\">open_in</code> returns a formatted input channel that efficiently reads\n    characters in large chunks; in contrast, <code class=\"code\">from_channel</code> below returns\n    formatted input channels that must read one character at a time, leading\n    to a much slower scanning rate.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "open_in_bin", "file_name -> in_channel",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Scanning</span>.open_in_bin&nbsp;fname</code> returns a <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted\n    input channel for bufferized reading in binary mode from file <code class=\"code\">fname</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "close_in", "in_channel -> unit",
              "\n<div class=\"info-desc\">\n<p>Closes the <a href=\"Pervasives.html#TYPEin_channel\"><code class=\"code\">in_channel</code></a> associated with the given\n  <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.12.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "from_file", "file_name -> in_channel",
              "\n<div class=\"info-desc\">\n<p>An alias for <a href=\"Scanf.Scanning.html#VALopen_in\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.open_in</code></a> above.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "from_file_bin", "string -> in_channel",
              "\n<div class=\"info-desc\">\n<p>An alias for <a href=\"Scanf.Scanning.html#VALopen_in_bin\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.open_in_bin</code></a> above.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "from_string", "string -> in_channel",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Scanning</span>.from_string&nbsp;s</code> returns a <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted\n    input channel which reads from the given string.\n    Reading starts from the first character in the string.\n    The end-of-input condition is set when the end of the string is reached.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "from_function", "(unit -> char) -> in_channel",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Scanning</span>.from_function&nbsp;f</code> returns a <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted\n    input channel with the given function as its reading method.</p>\n\n<p>When scanning needs one more character, the given function is called.</p>\n\n<p>When the function has no more character to provide, it <em>must</em> signal an\n    end-of-input condition by raising the exception <code class=\"code\"><span class=\"constructor\">End_of_file</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "from_channel", "in_channel -> in_channel",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Scanning</span>.from_channel&nbsp;ic</code> returns a <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted\n    input channel which reads from the regular <a href=\"Pervasives.html#TYPEin_channel\"><code class=\"code\">in_channel</code></a> input\n    channel <code class=\"code\">ic</code> argument.\n    Reading starts at current reading position of <code class=\"code\">ic</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "end_of_input", "in_channel -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Scanning</span>.end_of_input&nbsp;ic</code> tests the end-of-input condition of the given\n    <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "beginning_of_input", "in_channel -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Scanning</span>.beginning_of_input&nbsp;ic</code> tests the beginning of input condition\n    of the given <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "name_of_input", "in_channel -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Scanning</span>.name_of_input&nbsp;ic</code> returns the name of the character source\n    for the given <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.09.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "stdib", "in_channel",
              "\n<div class=\"info-desc\">\n<p>A deprecated alias for <a href=\"Scanf.Scanning.html#VALstdin\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.stdin</code></a>, the scanning buffer reading from\n    <a href=\"Pervasives.html#VALstdin\"><code class=\"code\">stdin</code></a>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Seq",
    "module_info":
      "\n<h2 id=\"1_FunctionalIterators\">Functional Iterators</h2>",
    "sections": [
      {
        "section_name": null,
        "section_info":
          "<p>The type <code class=\"code\"><span class=\"keywordsign\">'</span>a&nbsp;t</code> is a <b>delayed list</b>, i.e. a list where some evaluation\n    is needed to access the next element. This makes it possible to build\n    infinite sequences, to build sequences as we traverse them, and to transform\n    them in a lazy fashion rather than upfront.</p>",
        "elements": [
          [
            "Typevariant",
            [
              "'a", "t = unit -> 'a node", null,
              "\n<div class=\"info-desc\">\n<p>The type of delayed lists containing elements of type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.\n    Note that the concrete list node <code class=\"code\"><span class=\"keywordsign\">'</span>a&nbsp;node</code> is delayed under a closure,\n    not a <code class=\"code\"><span class=\"keyword\">lazy</span></code> block, which means it might be recomputed every time\n    we access it.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "'a", "node =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTnode.Nil\"><span class=\"constructor\">Nil</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTnode.Cons\"><span class=\"constructor\">Cons</span></span> <span class=\"keyword\">of</span> <code class=\"type\">'a * 'a <a href=\"Seq.html#TYPEt\">t</a></code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>A fully-evaluated list node, either empty or containing an element\n    and a delayed tail.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "empty", "'a t",
              "\n<div class=\"info-desc\">\n<p>The empty sequence, containing no elements.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "return", "'a -> 'a t",
              "\n<div class=\"info-desc\">\n<p>The singleton sequence containing only the given element.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "('a -> 'b) -> 'a t -> 'b t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">map&nbsp;f&nbsp;seq</code> returns a new sequence whose elements are the elements of\n    <code class=\"code\">seq</code>, transformed by <code class=\"code\">f</code>.\n    This transformation is lazy, it only applies when the result is traversed.</p>\n\n<p>If <code class=\"code\">seq&nbsp;=&nbsp;[1;2;3]</code>, then <code class=\"code\">map&nbsp;f&nbsp;seq&nbsp;=&nbsp;[f&nbsp;1;&nbsp;f&nbsp;2;&nbsp;f&nbsp;3]</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "filter", "('a -> bool) -> 'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p>Remove from the sequence the elements that do not satisfy the\n    given predicate.\n    This transformation is lazy, it only applies when the result is traversed.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "filter_map", "('a -> 'b option) -> 'a t -> 'b t",
              "\n<div class=\"info-desc\">\n<p>Apply the function to every element; if <code class=\"code\">f&nbsp;x&nbsp;=&nbsp;<span class=\"constructor\">None</span></code> then <code class=\"code\">x</code> is dropped;\n    if <code class=\"code\">f&nbsp;x&nbsp;=&nbsp;<span class=\"constructor\">Some</span>&nbsp;y</code> then <code class=\"code\">y</code> is returned.\n    This transformation is lazy, it only applies when the result is traversed.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "flat_map", "('a -> 'b t ) -> 'a t -> 'b t",
              "\n<div class=\"info-desc\">\n<p>Map each element to a subsequence, then return each element of this\n    sub-sequence in turn.\n    This transformation is lazy, it only applies when the result is traversed.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_left", "('a -> 'b -> 'a) -> 'a -> 'b t -> 'a",
              "\n<div class=\"info-desc\">\n<p>Traverse the sequence from left to right, combining each element with the\n    accumulator using the given function.\n    The traversal happens immediately and will not terminate on infinite sequences.</p>\n\n<p>Also see <a href=\"List.html#VALfold_left\"><code class=\"code\"><span class=\"constructor\">List</span>.fold_left</code></a></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "('a -> unit) -> 'a t -> unit",
              "\n<div class=\"info-desc\">\n<p>Iterate on the sequence, calling the (imperative) function on every element.\n    The traversal happens immediately and will not terminate on infinite sequences.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Set",
    "module_info":
      "\n<p>Sets over ordered types.</p>\n\n<p>This module implements the set data structure, given a total ordering\n   function over the set elements. All operations over sets\n   are purely applicative (no side-effects).\n   The implementation uses balanced binary trees, and is therefore\n   reasonably efficient: insertion and membership take time\n   logarithmic in the size of the set, for instance.</p>\n\n<p>The <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> functor constructs implementations for any type, given a\n   <code class=\"code\">compare</code> function.\n   For instance:</p>\n<pre class=\"codepre\"><code class=\"code\">     <span class=\"keyword\">module</span> <span class=\"constructor\">IntPairs</span> =\n       <span class=\"keyword\">struct</span>\n         <span class=\"keyword\">type</span> t = int * int\n         <span class=\"keyword\">let</span> compare (x0,y0) (x1,y1) =\n           <span class=\"keyword\">match</span> <span class=\"constructor\">Pervasives</span>.compare x0 x1 <span class=\"keyword\">with</span>\n               0 <span class=\"keywordsign\">-&gt;</span> <span class=\"constructor\">Pervasives</span>.compare y0 y1\n             <span class=\"keywordsign\">|</span> c <span class=\"keywordsign\">-&gt;</span> c\n       <span class=\"keyword\">end</span>\n\n     <span class=\"keyword\">module</span> <span class=\"constructor\">PairsSet</span> = <span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span>(<span class=\"constructor\">IntPairs</span>)\n\n     <span class=\"keyword\">let</span> m = <span class=\"constructor\">PairsSet</span>.(empty |&gt; add (2,3) |&gt; add (5,7) |&gt; add (11,13))\n   </code></pre>\n<p>This creates a new module <code class=\"code\"><span class=\"constructor\">PairsSet</span></code>, with a new type <code class=\"code\"><span class=\"constructor\">PairsSet</span>.t</code>\n   of sets of <code class=\"code\">int&nbsp;*&nbsp;int</code>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Moduletype",
            [
              "OrderedType",
              "\n<p>Input signature of the functor <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n\n"
            ]
          ],
          [
            "Moduletype",
            [
              "S",
              "\n<p>Output signature of the functor <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n\n"
            ]
          ],
          [
            "Module",
            [
              "Make",
              "\n<p>Functor building an implementation of the set structure\n   given a totally ordered type.</p>\n\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Set.Make",
    "module_info":
      "\n<div class=\"info-desc\">\n<p>Functor building an implementation of the set structure\n   given a totally ordered type.</p>\n</div>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "elt", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the set elements.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of sets.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "empty", "t",
              "\n<div class=\"info-desc\">\n<p>The empty set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "is_empty", "t -> bool",
              "\n<div class=\"info-desc\">\n<p>Test whether a set is empty or not.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mem", "elt -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;x&nbsp;s</code> tests whether <code class=\"code\">x</code> belongs to the set <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "elt -> t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add&nbsp;x&nbsp;s</code> returns a set containing all elements of <code class=\"code\">s</code>,\n       plus <code class=\"code\">x</code>. If <code class=\"code\">x</code> was already in <code class=\"code\">s</code>, <code class=\"code\">s</code> is returned unchanged\n       (the result of the function is then physically equal to <code class=\"code\">s</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "singleton", "elt -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">singleton&nbsp;x</code> returns the one-element set containing only <code class=\"code\">x</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "remove", "elt -> t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">remove&nbsp;x&nbsp;s</code> returns a set containing all elements of <code class=\"code\">s</code>,\n       except <code class=\"code\">x</code>. If <code class=\"code\">x</code> was not in <code class=\"code\">s</code>, <code class=\"code\">s</code> is returned unchanged\n       (the result of the function is then physically equal to <code class=\"code\">s</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "union", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Set union.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "inter", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Set intersection.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "diff", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Set difference.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>Total ordering between sets. Can be used as the ordering function\n       for doing sets of sets.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">equal&nbsp;s1&nbsp;s2</code> tests whether the sets <code class=\"code\">s1</code> and <code class=\"code\">s2</code> are\n       equal, that is, contain equal elements.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "subset", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">subset&nbsp;s1&nbsp;s2</code> tests whether the set <code class=\"code\">s1</code> is a subset of\n       the set <code class=\"code\">s2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "( elt -> unit) -> t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies <code class=\"code\">f</code> in turn to all elements of <code class=\"code\">s</code>.\n       The elements of <code class=\"code\">s</code> are presented to <code class=\"code\">f</code> in increasing order\n       with respect to the ordering over the type of the elements.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "( elt -> elt ) -> t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">map&nbsp;f&nbsp;s</code> is the set whose elements are <code class=\"code\">f&nbsp;a0</code>,<code class=\"code\">f&nbsp;a1</code>... <code class=\"code\">f<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aN</code>, where <code class=\"code\">a0</code>,<code class=\"code\">a1</code>...<code class=\"code\">aN</code> are the elements of <code class=\"code\">s</code>.</p>\n\n<p>The elements are passed to <code class=\"code\">f</code> in increasing order\n       with respect to the ordering over the type of the elements.</p>\n\n<p>If no element of <code class=\"code\">s</code> is changed by <code class=\"code\">f</code>, <code class=\"code\">s</code> is returned\n       unchanged. (If each output of <code class=\"code\">f</code> is physically equal to its\n       input, the returned set is physically equal to <code class=\"code\">s</code>.)</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.04.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "fold", "( elt -> 'a -> 'a) -> t -> 'a -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;s&nbsp;a</code> computes <code class=\"code\">(f&nbsp;xN&nbsp;...&nbsp;(f&nbsp;x2&nbsp;(f&nbsp;x1&nbsp;a))...)</code>,\n       where <code class=\"code\">x1&nbsp;...&nbsp;xN</code> are the elements of <code class=\"code\">s</code>, in increasing order.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "for_all", "( elt -> bool) -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;s</code> checks if all elements of the set\n       satisfy the predicate <code class=\"code\">p</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "exists", "( elt -> bool) -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;s</code> checks if at least one element of\n       the set satisfies the predicate <code class=\"code\">p</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "filter", "( elt -> bool) -> t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">filter&nbsp;p&nbsp;s</code> returns the set of all elements in <code class=\"code\">s</code>\n       that satisfy predicate <code class=\"code\">p</code>. If <code class=\"code\">p</code> satisfies every element in <code class=\"code\">s</code>,\n       <code class=\"code\">s</code> is returned unchanged (the result of the function is then\n       physically equal to <code class=\"code\">s</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "partition", "( elt -> bool) -> t -> t * t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">partition&nbsp;p&nbsp;s</code> returns a pair of sets <code class=\"code\">(s1,&nbsp;s2)</code>, where\n       <code class=\"code\">s1</code> is the set of all the elements of <code class=\"code\">s</code> that satisfy the\n       predicate <code class=\"code\">p</code>, and <code class=\"code\">s2</code> is the set of all the elements of\n       <code class=\"code\">s</code> that do not satisfy <code class=\"code\">p</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "cardinal", "t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the number of elements of a set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "elements", "t -> elt list",
              "\n<div class=\"info-desc\">\n<p>Return the list of all elements of the given set.\n       The returned list is sorted in increasing order with respect\n       to the ordering <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>, where <code class=\"code\"><span class=\"constructor\">Ord</span></code> is the argument\n       given to <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "min_elt", "t -> elt",
              "\n<div class=\"info-desc\">\n<p>Return the smallest element of the given set\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or raise\n       <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the set is empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "min_elt_opt", "t -> elt option",
              "\n<div class=\"info-desc\">\n<p>Return the smallest element of the given set\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or <code class=\"code\"><span class=\"constructor\">None</span></code>\n       if the set is empty.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "max_elt", "t -> elt",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Set.S.html#VALmin_elt\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">S</span>.min_elt</code></a>, but returns the largest element of the\n       given set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "max_elt_opt", "t -> elt option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Set.S.html#VALmin_elt_opt\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">S</span>.min_elt_opt</code></a>, but returns the largest element of the\n        given set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "choose", "t -> elt",
              "\n<div class=\"info-desc\">\n<p>Return one element of the given set, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if\n       the set is empty. Which element is chosen is unspecified,\n       but equal elements will be chosen for equal sets.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "choose_opt", "t -> elt option",
              "\n<div class=\"info-desc\">\n<p>Return one element of the given set, or <code class=\"code\"><span class=\"constructor\">None</span></code> if\n        the set is empty. Which element is chosen is unspecified,\n        but equal elements will be chosen for equal sets.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "split", "elt -> t -> t * bool * t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">split&nbsp;x&nbsp;s</code> returns a triple <code class=\"code\">(l,&nbsp;present,&nbsp;r)</code>, where\n          <code class=\"code\">l</code> is the set of elements of <code class=\"code\">s</code> that are\n          strictly less than <code class=\"code\">x</code>;\n          <code class=\"code\">r</code> is the set of elements of <code class=\"code\">s</code> that are\n          strictly greater than <code class=\"code\">x</code>;\n          <code class=\"code\">present</code> is <code class=\"code\"><span class=\"keyword\">false</span></code> if <code class=\"code\">s</code> contains no element equal to <code class=\"code\">x</code>,\n          or <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">s</code> contains an element equal to <code class=\"code\">x</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find", "elt -> t -> elt",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;x&nbsp;s</code> returns the element of <code class=\"code\">s</code> equal to <code class=\"code\">x</code> (according\n        to <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element\n        exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_opt", "elt -> t -> elt option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_opt&nbsp;x&nbsp;s</code> returns the element of <code class=\"code\">s</code> equal to <code class=\"code\">x</code> (according\n        to <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>), or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element\n        exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_first", "( elt -> bool) -> t -> elt",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_first&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns the lowest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that <code class=\"code\">f&nbsp;e</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element exists.</p>\n\n<p>For example, <code class=\"code\">find_first&nbsp;(<span class=\"keyword\">fun</span>&nbsp;e&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;<span class=\"constructor\">Ord</span>.compare&nbsp;e&nbsp;x&nbsp;&gt;=&nbsp;0)&nbsp;s</code> will return\n       the first element <code class=\"code\">e</code> of <code class=\"code\">s</code> where <code class=\"code\"><span class=\"constructor\">Ord</span>.compare&nbsp;e&nbsp;x&nbsp;&gt;=&nbsp;0</code> (intuitively:\n       <code class=\"code\">e&nbsp;&gt;=&nbsp;x</code>), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">x</code> is greater than any element of\n       <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_first_opt", "( elt -> bool) -> t -> elt option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_first_opt&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns an option containing the lowest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that\n       <code class=\"code\">f&nbsp;e</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_last", "( elt -> bool) -> t -> elt",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_last&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns the highest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that <code class=\"code\">f&nbsp;e</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_last_opt", "( elt -> bool) -> t -> elt option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_last_opt&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns an option containing the highest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that\n       <code class=\"code\">f&nbsp;e</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_list", "elt list -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">of_list&nbsp;l</code> creates a set from a list of elements.\n        This is usually more efficient than folding <code class=\"code\">add</code> over the list,\n        except perhaps for lists with many duplicated elements.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq_from", "elt -> t -> elt Seq.t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">to_seq_from&nbsp;x&nbsp;s</code> iterates on a subset of the elements of <code class=\"code\">s</code>\n        in ascending order, from <code class=\"code\">x</code> or above.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq", "t -> elt Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the whole set, in ascending order</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_seq", "elt Seq.t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Add the given elements to the set, in order.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "elt Seq.t -> t",
              "\n<div class=\"info-desc\">\n<p>Build a set from the given bindings</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMake\"><span class=\"keyword\">module</span> Make</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">Ord</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"Set.OrderedType.html\">OrderedType</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"Set.S.html\">S</a></code><code class=\"type\">  with type elt = Ord.t</code></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>Ord</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"Set.OrderedType.html\">OrderedType</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "Set.OrderedType",
    "module_info":
      "\n<p>Input signature of the functor <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the set elements.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>A total ordering function over the set elements.\n          This is a two-argument function <code class=\"code\">f</code> such that\n          <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is zero if the elements <code class=\"code\">e1</code> and <code class=\"code\">e2</code> are equal,\n          <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is strictly negative if <code class=\"code\">e1</code> is smaller than <code class=\"code\">e2</code>,\n          and <code class=\"code\">f&nbsp;e1&nbsp;e2</code> is strictly positive if <code class=\"code\">e1</code> is greater than <code class=\"code\">e2</code>.\n          Example: a suitable ordering function is the generic structural\n          comparison function <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Set.S",
    "module_info":
      "\n<p>Output signature of the functor <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "elt", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the set elements.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of sets.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "empty", "t",
              "\n<div class=\"info-desc\">\n<p>The empty set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "is_empty", "t -> bool",
              "\n<div class=\"info-desc\">\n<p>Test whether a set is empty or not.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mem", "elt -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;x&nbsp;s</code> tests whether <code class=\"code\">x</code> belongs to the set <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "elt -> t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add&nbsp;x&nbsp;s</code> returns a set containing all elements of <code class=\"code\">s</code>,\n       plus <code class=\"code\">x</code>. If <code class=\"code\">x</code> was already in <code class=\"code\">s</code>, <code class=\"code\">s</code> is returned unchanged\n       (the result of the function is then physically equal to <code class=\"code\">s</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "singleton", "elt -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">singleton&nbsp;x</code> returns the one-element set containing only <code class=\"code\">x</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "remove", "elt -> t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">remove&nbsp;x&nbsp;s</code> returns a set containing all elements of <code class=\"code\">s</code>,\n       except <code class=\"code\">x</code>. If <code class=\"code\">x</code> was not in <code class=\"code\">s</code>, <code class=\"code\">s</code> is returned unchanged\n       (the result of the function is then physically equal to <code class=\"code\">s</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "union", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Set union.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "inter", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Set intersection.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "diff", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Set difference.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>Total ordering between sets. Can be used as the ordering function\n       for doing sets of sets.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">equal&nbsp;s1&nbsp;s2</code> tests whether the sets <code class=\"code\">s1</code> and <code class=\"code\">s2</code> are\n       equal, that is, contain equal elements.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "subset", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">subset&nbsp;s1&nbsp;s2</code> tests whether the set <code class=\"code\">s1</code> is a subset of\n       the set <code class=\"code\">s2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "( elt -> unit) -> t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies <code class=\"code\">f</code> in turn to all elements of <code class=\"code\">s</code>.\n       The elements of <code class=\"code\">s</code> are presented to <code class=\"code\">f</code> in increasing order\n       with respect to the ordering over the type of the elements.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "( elt -> elt ) -> t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">map&nbsp;f&nbsp;s</code> is the set whose elements are <code class=\"code\">f&nbsp;a0</code>,<code class=\"code\">f&nbsp;a1</code>... <code class=\"code\">f<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aN</code>, where <code class=\"code\">a0</code>,<code class=\"code\">a1</code>...<code class=\"code\">aN</code> are the elements of <code class=\"code\">s</code>.</p>\n\n<p>The elements are passed to <code class=\"code\">f</code> in increasing order\n       with respect to the ordering over the type of the elements.</p>\n\n<p>If no element of <code class=\"code\">s</code> is changed by <code class=\"code\">f</code>, <code class=\"code\">s</code> is returned\n       unchanged. (If each output of <code class=\"code\">f</code> is physically equal to its\n       input, the returned set is physically equal to <code class=\"code\">s</code>.)</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.04.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "fold", "( elt -> 'a -> 'a) -> t -> 'a -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;s&nbsp;a</code> computes <code class=\"code\">(f&nbsp;xN&nbsp;...&nbsp;(f&nbsp;x2&nbsp;(f&nbsp;x1&nbsp;a))...)</code>,\n       where <code class=\"code\">x1&nbsp;...&nbsp;xN</code> are the elements of <code class=\"code\">s</code>, in increasing order.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "for_all", "( elt -> bool) -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;s</code> checks if all elements of the set\n       satisfy the predicate <code class=\"code\">p</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "exists", "( elt -> bool) -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;s</code> checks if at least one element of\n       the set satisfies the predicate <code class=\"code\">p</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "filter", "( elt -> bool) -> t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">filter&nbsp;p&nbsp;s</code> returns the set of all elements in <code class=\"code\">s</code>\n       that satisfy predicate <code class=\"code\">p</code>. If <code class=\"code\">p</code> satisfies every element in <code class=\"code\">s</code>,\n       <code class=\"code\">s</code> is returned unchanged (the result of the function is then\n       physically equal to <code class=\"code\">s</code>).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Before 4.03 </b> Physical equality was not ensured.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "partition", "( elt -> bool) -> t -> t * t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">partition&nbsp;p&nbsp;s</code> returns a pair of sets <code class=\"code\">(s1,&nbsp;s2)</code>, where\n       <code class=\"code\">s1</code> is the set of all the elements of <code class=\"code\">s</code> that satisfy the\n       predicate <code class=\"code\">p</code>, and <code class=\"code\">s2</code> is the set of all the elements of\n       <code class=\"code\">s</code> that do not satisfy <code class=\"code\">p</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "cardinal", "t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the number of elements of a set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "elements", "t -> elt list",
              "\n<div class=\"info-desc\">\n<p>Return the list of all elements of the given set.\n       The returned list is sorted in increasing order with respect\n       to the ordering <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>, where <code class=\"code\"><span class=\"constructor\">Ord</span></code> is the argument\n       given to <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "min_elt", "t -> elt",
              "\n<div class=\"info-desc\">\n<p>Return the smallest element of the given set\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or raise\n       <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the set is empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "min_elt_opt", "t -> elt option",
              "\n<div class=\"info-desc\">\n<p>Return the smallest element of the given set\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or <code class=\"code\"><span class=\"constructor\">None</span></code>\n       if the set is empty.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "max_elt", "t -> elt",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Set.S.html#VALmin_elt\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">S</span>.min_elt</code></a>, but returns the largest element of the\n       given set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "max_elt_opt", "t -> elt option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Set.S.html#VALmin_elt_opt\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">S</span>.min_elt_opt</code></a>, but returns the largest element of the\n        given set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "choose", "t -> elt",
              "\n<div class=\"info-desc\">\n<p>Return one element of the given set, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if\n       the set is empty. Which element is chosen is unspecified,\n       but equal elements will be chosen for equal sets.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "choose_opt", "t -> elt option",
              "\n<div class=\"info-desc\">\n<p>Return one element of the given set, or <code class=\"code\"><span class=\"constructor\">None</span></code> if\n        the set is empty. Which element is chosen is unspecified,\n        but equal elements will be chosen for equal sets.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "split", "elt -> t -> t * bool * t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">split&nbsp;x&nbsp;s</code> returns a triple <code class=\"code\">(l,&nbsp;present,&nbsp;r)</code>, where\n          <code class=\"code\">l</code> is the set of elements of <code class=\"code\">s</code> that are\n          strictly less than <code class=\"code\">x</code>;\n          <code class=\"code\">r</code> is the set of elements of <code class=\"code\">s</code> that are\n          strictly greater than <code class=\"code\">x</code>;\n          <code class=\"code\">present</code> is <code class=\"code\"><span class=\"keyword\">false</span></code> if <code class=\"code\">s</code> contains no element equal to <code class=\"code\">x</code>,\n          or <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">s</code> contains an element equal to <code class=\"code\">x</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find", "elt -> t -> elt",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;x&nbsp;s</code> returns the element of <code class=\"code\">s</code> equal to <code class=\"code\">x</code> (according\n        to <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element\n        exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_opt", "elt -> t -> elt option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_opt&nbsp;x&nbsp;s</code> returns the element of <code class=\"code\">s</code> equal to <code class=\"code\">x</code> (according\n        to <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>), or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element\n        exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_first", "( elt -> bool) -> t -> elt",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_first&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns the lowest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that <code class=\"code\">f&nbsp;e</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element exists.</p>\n\n<p>For example, <code class=\"code\">find_first&nbsp;(<span class=\"keyword\">fun</span>&nbsp;e&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;<span class=\"constructor\">Ord</span>.compare&nbsp;e&nbsp;x&nbsp;&gt;=&nbsp;0)&nbsp;s</code> will return\n       the first element <code class=\"code\">e</code> of <code class=\"code\">s</code> where <code class=\"code\"><span class=\"constructor\">Ord</span>.compare&nbsp;e&nbsp;x&nbsp;&gt;=&nbsp;0</code> (intuitively:\n       <code class=\"code\">e&nbsp;&gt;=&nbsp;x</code>), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">x</code> is greater than any element of\n       <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_first_opt", "( elt -> bool) -> t -> elt option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_first_opt&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns an option containing the lowest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that\n       <code class=\"code\">f&nbsp;e</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_last", "( elt -> bool) -> t -> elt",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_last&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns the highest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that <code class=\"code\">f&nbsp;e</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_last_opt", "( elt -> bool) -> t -> elt option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_last_opt&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns an option containing the highest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that\n       <code class=\"code\">f&nbsp;e</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element exists.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_list", "elt list -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">of_list&nbsp;l</code> creates a set from a list of elements.\n        This is usually more efficient than folding <code class=\"code\">add</code> over the list,\n        except perhaps for lists with many duplicated elements.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq_from", "elt -> t -> elt Seq.t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">to_seq_from&nbsp;x&nbsp;s</code> iterates on a subset of the elements of <code class=\"code\">s</code>\n        in ascending order, from <code class=\"code\">x</code> or above.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seq", "t -> elt Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the whole set, in ascending order</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_seq", "elt Seq.t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Add the given elements to the set, in order.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "elt Seq.t -> t",
              "\n<div class=\"info-desc\">\n<p>Build a set from the given bindings</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Simplif.Hooks",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [
            "Function",
            [
              "add_hook", "string -> ( Misc.hook_info -> t -> t ) -> unit",
              null
            ]
          ],
          [ "Function", [ "apply_hooks", "Misc.hook_info -> t -> t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Simplif",
    "module_info": "\n<p>Lambda simplification and lambda plugin hooks</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "simplify_lambda", "string -> Lambda.lambda -> Lambda.lambda",
              null
            ]
          ],
          [
            "Function",
            [
              "split_default_wrapper",
              "id:Ident.t -> kind:Lambda.function_kind -> params:Ident.t list -> body:Lambda.lambda -> attr:Lambda.function_attribute -> loc: Location.t -> (Ident.t * Lambda.lambda) list",
              null
            ]
          ],
          [
            "Function",
            [ "is_tail_native_heuristic", "(int -> bool) ref", null ]
          ],
          [ "Module", [ "Hooks", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Sort",
    "module_info":
      "\n<span class=\"warning\">Deprecated.</span>This module is obsolete and exists only for backward\n   compatibility.\n   The sorting functions in <a href=\"Array.html\"><code class=\"code\"><span class=\"constructor\">Array</span></code></a> and <a href=\"List.html\"><code class=\"code\"><span class=\"constructor\">List</span></code></a> should be used instead.\n   The new functions are faster and use less memory.",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "list", "('a -> 'a -> bool) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Sort a list in increasing order according to an ordering predicate.\n   The predicate should return <code class=\"code\"><span class=\"keyword\">true</span></code> if its first argument is\n   less than or equal to its second argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "array", "('a -> 'a -> bool) -> 'a array -> unit",
              "\n<div class=\"info-desc\">\n<p>Sort an array in increasing order according to an\n   ordering predicate.\n   The predicate should return <code class=\"code\"><span class=\"keyword\">true</span></code> if its first argument is\n   less than or equal to its second argument.\n   The array is sorted in place.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "merge", "('a -> 'a -> bool) -> 'a list -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Merge two lists according to the given predicate.\n   Assuming the two argument lists are sorted according to the\n   predicate, <code class=\"code\">merge</code> returns a sorted list containing the elements\n   from the two lists. The behavior is undefined if the two\n   argument lists were not sorted.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Spacetime",
    "module_info":
      "\n<p>Profiling of a program's space behaviour over time.\n    Currently only supported on x86-64 platforms running 64-bit code.</p>\n\n<p>To use the functions in this module you must:</p>\n<ul>\n<li>configure the compiler with \"-spacetime\";</li>\n<li>compile to native code.\n    Without these conditions being satisfied the functions in this module\n    will have no effect.</li>\n</ul>\n<p>Instead of manually taking profiling heap snapshots with this module it is\n    possible to use an automatic snapshot facility that writes profiling\n    information at fixed intervals to a file. To enable this, all that needs to\n    be done is to build the relevant program using a compiler configured with\n    -spacetime; and set the environment variable OCAML_SPACETIME_INTERVAL to an\n    integer number of milliseconds giving the interval between profiling heap\n    snapshots. This interval should not be made excessively small relative to\n    the running time of the program. A typical interval to start with might be\n    1/100 of the running time of the program.  The program must exit \"normally\"\n    (i.e. by calling <code class=\"code\">exit</code>, with whatever exit code, rather than being\n    abnormally terminated by a signal) so that the snapshot file is\n    correctly completed.</p>\n\n<p>When using the automatic snapshot mode the profiling output is written\n    to a file called \"spacetime-&lt;pid&gt;\" where &lt;pid&gt; is the process ID of the\n    program.  (If the program forks and continues executing then multiple\n    files may be produced with different pid numbers.)  The profiling output\n    is by default written to the current working directory when the program\n    starts.  This may be customised by setting the OCAML_SPACETIME_SNAPSHOT_DIR\n    environment variable to the name of the desired directory.</p>\n\n<p>If using automatic snapshots the presence of the\n    <code class=\"code\">save_event_for_automatic_snapshots</code> function, below, should be noted.</p>\n\n<p>The functions in this module are thread safe.</p>\n\n<p>For functions to decode the information recorded by the profiler,\n    see the Spacetime offline library in otherlibs/.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "enabled", "bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">enabled</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> if the compiler is configured with spacetime and <code class=\"code\"><span class=\"keyword\">false</span></code>\n    otherwise</p>\n</div>\n"
            ]
          ],
          [ "Module", [ "Series", null ] ],
          [ "Module", [ "Snapshot", null ] ],
          [
            "Function",
            [
              "save_event_for_automatic_snapshots",
              "event_name:string -> unit",
              "\n<div class=\"info-desc\">\n<p>Like <a href=\"Spacetime.Series.html#VALsave_event\"><code class=\"code\"><span class=\"constructor\">Spacetime</span>.<span class=\"constructor\">Series</span>.save_event</code></a>, but writes to the automatic snapshot file.\n    This function is a no-op if OCAML_SPACETIME_INTERVAL was not set.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Spacetime.Series",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>Type representing a file that will hold a series of heap snapshots\n      together with additional information required to interpret those\n      snapshots.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "path:string -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">create&nbsp;~path</code> creates a series file at <code class=\"code\">path</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "save_event", "?time:float -> t -> event_name:string -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">save_event</code> writes an event, which is an arbitrary string, into the\n      given series file.  This may be used for identifying particular points\n      during program execution when analysing the profile.\n      The optional <code class=\"code\">time</code> parameter is as for <a href=\"Spacetime.Snapshot.html#VALtake\"><code class=\"code\"><span class=\"constructor\">Spacetime</span>.<span class=\"constructor\">Snapshot</span>.take</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "save_and_close", "?time:float -> t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">save_and_close&nbsp;series</code> writes information into <code class=\"code\">series</code> required for\n      interpreting the snapshots that <code class=\"code\">series</code> contains and then closes the\n      <code class=\"code\">series</code> file. This function must be called to produce a valid series\n      file.\n      The optional <code class=\"code\">time</code> parameter is as for <a href=\"Spacetime.Snapshot.html#VALtake\"><code class=\"code\"><span class=\"constructor\">Spacetime</span>.<span class=\"constructor\">Snapshot</span>.take</code></a>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Spacetime.Snapshot",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "take", "?time:float -> Spacetime.Series.t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">take&nbsp;series</code> takes a snapshot of the profiling annotations on the values\n      in the minor and major heaps, together with GC stats, and write the\n      result to the <code class=\"code\">series</code> file.  This function triggers a minor GC but does\n      not allocate any memory itself.\n      If the optional <code class=\"code\">time</code> is specified, it will be used instead of the\n      result of <a href=\"Sys.html#VALtime\"><code class=\"code\"><span class=\"constructor\">Sys</span>.time</code></a> as the timestamp of the snapshot.  Such <code class=\"code\">time</code>s\n      should start from zero and be monotonically increasing.  This parameter\n      is intended to be used so that snapshots can be correlated against wall\n      clock time (which is not supported in the standard library) rather than\n      elapsed CPU time.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Stack",
    "module_info":
      "\n<p>Last-in first-out stacks.</p>\n\n<p>This module implements stacks (LIFOs), with in-place modification.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "'a", "t", null,
              "\n<div class=\"info-desc\">\n<p>The type of stacks containing elements of type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Exception",
            [
              "Empty", null,
              "\n<div class=\"info-desc\">\n<p>Raised when <a href=\"Stack.html#VALpop\"><code class=\"code\"><span class=\"constructor\">Stack</span>.pop</code></a> or <a href=\"Stack.html#VALtop\"><code class=\"code\"><span class=\"constructor\">Stack</span>.top</code></a> is applied to an empty stack.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "unit -> 'a t",
              "\n<div class=\"info-desc\">\n<p>Return a new stack, initially empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "push", "'a -> 'a t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">push&nbsp;x&nbsp;s</code> adds the element <code class=\"code\">x</code> at the top of stack <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pop", "'a t -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pop&nbsp;s</code> removes and returns the topmost element in stack <code class=\"code\">s</code>,\n   or raises <a href=\"Stack.html#EXCEPTIONEmpty\"><code class=\"code\"><span class=\"constructor\">Stack</span>.<span class=\"constructor\">Empty</span></code></a> if the stack is empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "top", "'a t -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">top&nbsp;s</code> returns the topmost element in stack <code class=\"code\">s</code>,\n   or raises <a href=\"Stack.html#EXCEPTIONEmpty\"><code class=\"code\"><span class=\"constructor\">Stack</span>.<span class=\"constructor\">Empty</span></code></a> if the stack is empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "clear", "'a t -> unit",
              "\n<div class=\"info-desc\">\n<p>Discard all elements from a stack.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "copy", "'a t -> 'a t",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the given stack.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "is_empty", "'a t -> bool",
              "\n<div class=\"info-desc\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given stack is empty, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "length", "'a t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the number of elements in a stack. Time complexity O(1)</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "('a -> unit) -> 'a t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies <code class=\"code\">f</code> in turn to all elements of <code class=\"code\">s</code>,\n   from the element at the top of the stack to the element at the\n   bottom of the stack. The stack itself is unchanged.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold", "('b -> 'a -> 'b) -> 'b -> 'a t -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;accu&nbsp;s</code> is <code class=\"code\">(f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;accu&nbsp;x1)&nbsp;x2)&nbsp;...)&nbsp;xn)</code>\n    where <code class=\"code\">x1</code> is the top of the stack, <code class=\"code\">x2</code> the second element,\n    and <code class=\"code\">xn</code> the bottom element. The stack is unchanged.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "'a t -> 'a Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the stack, top to bottom.\n    It is safe to modify the stack during iteration.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "add_seq", "'a t -> 'a Seq.t -> unit",
              "\n<div class=\"info-desc\">\n<p>Add the elements from the iterator on the top of the stack.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "'a Seq.t -> 'a t",
              "\n<div class=\"info-desc\">\n<p>Create a stack from the iterator</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "StdLabels.Array",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "length", "'a array -> int",
              "\n<div class=\"info-desc\">\n<p>Return the length (number of elements) of the given array.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get", "'a array -> int -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.get&nbsp;a&nbsp;n</code> returns the element number <code class=\"code\">n</code> of array <code class=\"code\">a</code>.\n   The first element has number 0.\n   The last element has number <code class=\"code\"><span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1</code>.\n   You can also write <code class=\"code\">a.(n)</code> instead of <code class=\"code\"><span class=\"constructor\">Array</span>.get&nbsp;a&nbsp;n</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"index&nbsp;out&nbsp;of&nbsp;bounds\"</span></code>\n   if <code class=\"code\">n</code> is outside the range 0 to <code class=\"code\">(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set", "'a array -> int -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.set&nbsp;a&nbsp;n&nbsp;x</code> modifies array <code class=\"code\">a</code> in place, replacing\n   element number <code class=\"code\">n</code> with <code class=\"code\">x</code>.\n   You can also write <code class=\"code\">a.(n)&nbsp;&lt;-&nbsp;x</code> instead of <code class=\"code\"><span class=\"constructor\">Array</span>.set&nbsp;a&nbsp;n&nbsp;x</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"index&nbsp;out&nbsp;of&nbsp;bounds\"</span></code>\n   if <code class=\"code\">n</code> is outside the range 0 to <code class=\"code\"><span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "make", "int -> 'a -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.make&nbsp;n&nbsp;x</code> returns a fresh array of length <code class=\"code\">n</code>,\n   initialized with <code class=\"code\">x</code>.\n   All the elements of this new array are initially\n   physically equal to <code class=\"code\">x</code> (in the sense of the <code class=\"code\">==</code> predicate).\n   Consequently, if <code class=\"code\">x</code> is mutable, it is shared among all elements\n   of the array, and modifying <code class=\"code\">x</code> through one of the array entries\n   will modify all other entries at the same time.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;<span class=\"constructor\">Sys</span>.max_array_length</code>.\n   If the value of <code class=\"code\">x</code> is a floating-point number, then the maximum\n   size is only <code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length&nbsp;/&nbsp;2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "int -> 'a -> 'a array",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><code class=\"code\"><span class=\"constructor\">Array</span>.create</code> is an alias for <a href=\"Array.html#VALmake\"><code class=\"code\"><span class=\"constructor\">Array</span>.make</code></a>.</div>\n"
            ]
          ],
          [
            "Function",
            [
              "init", "int -> f:(int -> 'a) -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.init&nbsp;n&nbsp;f</code> returns a fresh array of length <code class=\"code\">n</code>,\n   with element number <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.\n   In other terms, <code class=\"code\"><span class=\"constructor\">Array</span>.init&nbsp;n&nbsp;f</code> tabulates the results of <code class=\"code\">f</code>\n   applied to the integers <code class=\"code\">0</code> to <code class=\"code\">n-1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;<span class=\"constructor\">Sys</span>.max_array_length</code>.\n   If the return type of <code class=\"code\">f</code> is <code class=\"code\">float</code>, then the maximum\n   size is only <code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length&nbsp;/&nbsp;2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "make_matrix", "dimx:int -> dimy:int -> 'a -> 'a array array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.make_matrix&nbsp;dimx&nbsp;dimy&nbsp;e</code> returns a two-dimensional array\n   (an array of arrays) with first dimension <code class=\"code\">dimx</code> and\n   second dimension <code class=\"code\">dimy</code>. All the elements of this new matrix\n   are initially physically equal to <code class=\"code\">e</code>.\n   The element (<code class=\"code\">x,y</code>) of a matrix <code class=\"code\">m</code> is accessed\n   with the notation <code class=\"code\">m.(x).(y)</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">dimx</code> or <code class=\"code\">dimy</code> is negative or\n   greater than <a href=\"Sys.html#VALmax_array_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length</code></a>.\n   If the value of <code class=\"code\">e</code> is a floating-point number, then the maximum\n   size is only <code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length&nbsp;/&nbsp;2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create_matrix",
              "dimx:int -> dimy:int -> 'a -> 'a array array",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><code class=\"code\"><span class=\"constructor\">Array</span>.create_matrix</code> is an alias for\n   <a href=\"Array.html#VALmake_matrix\"><code class=\"code\"><span class=\"constructor\">Array</span>.make_matrix</code></a>.</div>\n"
            ]
          ],
          [
            "Function",
            [
              "append", "'a array -> 'a array -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.append&nbsp;v1&nbsp;v2</code> returns a fresh array containing the\n   concatenation of the arrays <code class=\"code\">v1</code> and <code class=\"code\">v2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "concat", "'a array list -> 'a array",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALappend\"><code class=\"code\"><span class=\"constructor\">Array</span>.append</code></a>, but concatenates a list of arrays.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub", "'a array -> pos:int -> len:int -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.sub&nbsp;a&nbsp;start&nbsp;len</code> returns a fresh array of length <code class=\"code\">len</code>,\n   containing the elements number <code class=\"code\">start</code> to <code class=\"code\">start&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>\n   of array <code class=\"code\">a</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Array.sub\"</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">a</code>; that is, if\n   <code class=\"code\">start&nbsp;&lt;&nbsp;0</code>, or <code class=\"code\">len&nbsp;&lt;&nbsp;0</code>, or <code class=\"code\">start&nbsp;+&nbsp;len&nbsp;&gt;&nbsp;<span class=\"constructor\">Array</span>.length&nbsp;a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "copy", "'a array -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.copy&nbsp;a</code> returns a copy of <code class=\"code\">a</code>, that is, a fresh array\n   containing the same elements as <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fill", "'a array -> pos:int -> len:int -> 'a -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fill&nbsp;a&nbsp;ofs&nbsp;len&nbsp;x</code> modifies the array <code class=\"code\">a</code> in place,\n   storing <code class=\"code\">x</code> in elements number <code class=\"code\">ofs</code> to <code class=\"code\">ofs&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Array.fill\"</span></code> if <code class=\"code\">ofs</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit",
              "src:'a array -> src_pos:int -> dst:'a array -> dst_pos:int -> len:int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.blit&nbsp;v1&nbsp;o1&nbsp;v2&nbsp;o2&nbsp;len</code> copies <code class=\"code\">len</code> elements\n   from array <code class=\"code\">v1</code>, starting at element number <code class=\"code\">o1</code>, to array <code class=\"code\">v2</code>,\n   starting at element number <code class=\"code\">o2</code>. It works correctly even if\n   <code class=\"code\">v1</code> and <code class=\"code\">v2</code> are the same array, and the source and\n   destination chunks overlap.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Array.blit\"</span></code> if <code class=\"code\">o1</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">v1</code>, or if <code class=\"code\">o2</code> and <code class=\"code\">len</code> do not\n   designate a valid subarray of <code class=\"code\">v2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_list", "'a array -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.to_list&nbsp;a</code> returns the list of all the elements of <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_list", "'a list -> 'a array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.of_list&nbsp;l</code> returns a fresh array containing the elements\n   of <code class=\"code\">l</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "f:('a -> unit) -> 'a array -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.iter&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> in turn to all\n   the elements of <code class=\"code\">a</code>.  It is equivalent to\n   <code class=\"code\">f&nbsp;a.(0);&nbsp;f&nbsp;a.(1);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1);&nbsp;()</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "f:('a -> 'b) -> 'a array -> 'b array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.map&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>,\n   and builds an array with the results returned by <code class=\"code\">f</code>:\n   <code class=\"code\">[|&nbsp;f&nbsp;a.(0);&nbsp;f&nbsp;a.(1);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;|]</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iteri", "f:(int -> 'a -> unit) -> 'a array -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Array</span>.iter</code></a>, but the\n   function is applied to the index of the element as first argument,\n   and the element itself as second argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mapi", "f:(int -> 'a -> 'b) -> 'a array -> 'b array",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Array</span>.map</code></a>, but the\n   function is applied to the index of the element as first argument,\n   and the element itself as second argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_left", "f:('a -> 'b -> 'a) -> init:'a -> 'b array -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_left&nbsp;f&nbsp;x&nbsp;a</code> computes\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;x&nbsp;a.(0))&nbsp;a.(1))&nbsp;...)&nbsp;a.(n-1)</code>,\n   where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_right",
              "f:('b -> 'a -> 'a) -> 'b array -> init:'a -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_right&nbsp;f&nbsp;a&nbsp;x</code> computes\n   <code class=\"code\">f&nbsp;a.(0)&nbsp;(f&nbsp;a.(1)&nbsp;(&nbsp;...&nbsp;(f&nbsp;a.(n-1)&nbsp;x)&nbsp;...))</code>,\n   where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators on two arrays",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "iter2",
              "f:('a -> 'b -> unit) -> 'a array -> 'b array -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.iter2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>\n   and <code class=\"code\">b</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the arrays are not the same size.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "map2",
              "f:('a -> 'b -> 'c) -> 'a array -> 'b array -> 'c array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.map2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>\n   and <code class=\"code\">b</code>, and builds an array with the results returned by <code class=\"code\">f</code>:\n   <code class=\"code\">[|&nbsp;f&nbsp;a.(0)&nbsp;b.(0);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;b.(<span class=\"constructor\">Array</span>.length&nbsp;b&nbsp;-&nbsp;1)|]</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the arrays are not the same size.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Array scanning",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "exists", "f:('a -> bool) -> 'a array -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.exists&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if at least one element of\n    the array satisfies the predicate <code class=\"code\">p</code>. That is, it returns\n    <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;...&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "for_all", "f:('a -> bool) -> 'a array -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.for_all&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if all elements of the array\n   satisfy the predicate <code class=\"code\">p</code>. That is, it returns\n   <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;...&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "mem", "'a -> set:'a array -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;x&nbsp;a</code> is true if and only if <code class=\"code\">x</code> is equal\n   to an element of <code class=\"code\">a</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "memq", "'a -> set:'a array -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALmem\"><code class=\"code\"><span class=\"constructor\">Array</span>.mem</code></a>, but uses physical equality instead of structural\n   equality to compare list elements.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "create_float", "int -> float array",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.create_float&nbsp;n</code> returns a fresh float array of length <code class=\"code\">n</code>,\n    with uninitialized data.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "make_float", "int -> float array",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span><code class=\"code\"><span class=\"constructor\">Array</span>.make_float</code> is an alias for\n    <a href=\"Array.html#VALcreate_float\"><code class=\"code\"><span class=\"constructor\">Array</span>.create_float</code></a>.</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Sorting",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "sort", "cmp:('a -> 'a -> int) -> 'a array -> unit",
              "\n<div class=\"info-desc\">\n<p>Sort an array in increasing order according to a comparison\n   function.  The comparison function must return 0 if its arguments\n   compare as equal, a positive integer if the first is greater,\n   and a negative integer if the first is smaller (see below for a\n   complete specification).  For example, <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a> is\n   a suitable comparison function, provided there are no floating-point\n   NaN values in the data.  After calling <code class=\"code\"><span class=\"constructor\">Array</span>.sort</code>, the\n   array is sorted in place in increasing order.\n   <code class=\"code\"><span class=\"constructor\">Array</span>.sort</code> is guaranteed to run in constant heap space\n   and (at most) logarithmic stack space.</p>\n\n<p>The current implementation uses Heap Sort.  It runs in constant\n   stack space.</p>\n\n<p>Specification of the comparison function:\n   Let <code class=\"code\">a</code> be the array and <code class=\"code\">cmp</code> the comparison function.  The following\n   must be true for all x, y, z in a :</p>\n<ul>\n<li>  <code class=\"code\">cmp&nbsp;x&nbsp;y</code> &gt; 0 if and only if <code class=\"code\">cmp&nbsp;y&nbsp;x</code> &lt; 0</li>\n<li>  if <code class=\"code\">cmp&nbsp;x&nbsp;y</code> &gt;= 0 and <code class=\"code\">cmp&nbsp;y&nbsp;z</code> &gt;= 0 then <code class=\"code\">cmp&nbsp;x&nbsp;z</code> &gt;= 0</li>\n</ul>\n<p>When <code class=\"code\"><span class=\"constructor\">Array</span>.sort</code> returns, <code class=\"code\">a</code> contains the same elements as before,\n   reordered in such a way that for all i and j valid indices of <code class=\"code\">a</code> :</p>\n<ul>\n<li>  <code class=\"code\">cmp&nbsp;a.(i)&nbsp;a.(j)</code> &gt;= 0 if and only if i &gt;= j</li>\n</ul>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stable_sort", "cmp:('a -> 'a -> int) -> 'a array -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a>, but the sorting algorithm is stable (i.e.\n   elements that compare equal are kept in their original order) and\n   not guaranteed to run in constant heap space.</p>\n\n<p>The current implementation uses Merge Sort. It uses <code class=\"code\">n/2</code>\n   words of heap space, where <code class=\"code\">n</code> is the length of the array.\n   It is usually faster than the current implementation of <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fast_sort", "cmp:('a -> 'a -> int) -> 'a array -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a> or <a href=\"Array.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">Array</span>.stable_sort</code></a>, whichever is\n    faster on typical input.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "'a array -> 'a Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the array, in increasing order</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seqi", "'a array -> (int * 'a) Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the array, in increasing order, yielding indices along elements</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "'a Seq.t -> 'a array",
              "\n<div class=\"info-desc\">\n<p>Create an array from the generator</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "StdLabels.Bytes",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "length", "bytes -> int",
              "\n<div class=\"info-desc\">\n<p>Return the length (number of bytes) of the argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get", "bytes -> int -> char",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">get&nbsp;s&nbsp;n</code> returns the byte at index <code class=\"code\">n</code> in argument <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is not a valid index in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set", "bytes -> int -> char -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">set&nbsp;s&nbsp;n&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing the byte at index <code class=\"code\">n</code>\n    with <code class=\"code\">c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is not a valid index in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "int -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">create&nbsp;n</code> returns a new byte sequence of length <code class=\"code\">n</code>. The\n    sequence is uninitialized and contains arbitrary bytes.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "make", "int -> char -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">make&nbsp;n&nbsp;c</code> returns a new byte sequence of length <code class=\"code\">n</code>, filled with\n    the byte <code class=\"code\">c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "init", "int -> f:(int -> char) -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">init&nbsp;n&nbsp;f</code> returns a fresh byte sequence of length <code class=\"code\">n</code>,\n    with character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "empty", "bytes",
              "\n<div class=\"info-desc\">\n<p>A byte sequence of size 0.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "copy", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a new byte sequence that contains the same bytes as the\n    argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_string", "string -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a new byte sequence that contains the same bytes as the\n    given string.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_string", "bytes -> string",
              "\n<div class=\"info-desc\">\n<p>Return a new string that contains the same bytes as the given byte\n    sequence.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub", "bytes -> pos:int -> len:int -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">sub&nbsp;s&nbsp;start&nbsp;len</code> returns a new byte sequence of length <code class=\"code\">len</code>,\n    containing the subsequence of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code>\n    and has length <code class=\"code\">len</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not designate a\n    valid range of <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub_string", "bytes -> pos:int -> len:int -> string",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">sub</code> but return a string instead of a byte sequence.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "extend", "bytes -> left:int -> right:int -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">extend&nbsp;s&nbsp;left&nbsp;right</code> returns a new byte sequence that contains\n    the bytes of <code class=\"code\">s</code>, with <code class=\"code\">left</code> uninitialized bytes prepended and\n    <code class=\"code\">right</code> uninitialized bytes appended to it. If <code class=\"code\">left</code> or <code class=\"code\">right</code>\n    is negative, then bytes are removed (instead of appended) from\n    the corresponding side of <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result length is negative or\n    longer than <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "fill", "bytes -> pos:int -> len:int -> char -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing <code class=\"code\">len</code>\n    characters with <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not designate a\n    valid range of <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit",
              "src:bytes -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from sequence\n    <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to sequence <code class=\"code\">dst</code>, starting at\n    index <code class=\"code\">dstoff</code>. It works correctly even if <code class=\"code\">src</code> and <code class=\"code\">dst</code> are the\n    same byte sequence, and the source and destination intervals\n    overlap.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">srcoff</code> and <code class=\"code\">len</code> do not\n    designate a valid range of <code class=\"code\">src</code>, or if <code class=\"code\">dstoff</code> and <code class=\"code\">len</code>\n    do not designate a valid range of <code class=\"code\">dst</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit_string",
              "src:string -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from string\n    <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to byte sequence <code class=\"code\">dst</code>,\n    starting at index <code class=\"code\">dstoff</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">srcoff</code> and <code class=\"code\">len</code> do not\n    designate a valid range of <code class=\"code\">src</code>, or if <code class=\"code\">dstoff</code> and <code class=\"code\">len</code>\n    do not designate a valid range of <code class=\"code\">dst</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "concat", "sep:bytes -> bytes list -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">concat&nbsp;sep&nbsp;sl</code> concatenates the list of byte sequences <code class=\"code\">sl</code>,\n    inserting the separator byte sequence <code class=\"code\">sep</code> between each, and\n    returns the result as a new byte sequence.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "cat", "bytes -> bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">cat&nbsp;s1&nbsp;s2</code> concatenates <code class=\"code\">s1</code> and <code class=\"code\">s2</code> and returns the result\n     as new byte sequence.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result is longer than\n    <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "f:(char -> unit) -> bytes -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code>.\n    It is equivalent to <code class=\"code\">f&nbsp;(get&nbsp;s&nbsp;0);&nbsp;f&nbsp;(get&nbsp;s&nbsp;1);&nbsp;...;&nbsp;f&nbsp;(get&nbsp;s<br>\n&nbsp;&nbsp;&nbsp;&nbsp;(length&nbsp;s&nbsp;-&nbsp;1));&nbsp;()</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iteri", "f:(int -> char -> unit) -> bytes -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Bytes.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.iter</code></a>, but the function is applied to the index of\n    the byte as first argument and the byte itself as second\n    argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "f:(char -> char) -> bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code> and\n    stores the resulting bytes in a new sequence that is returned as\n    the result.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mapi", "f:(int -> char -> char) -> bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its\n    index (in increasing index order) and stores the resulting bytes\n    in a new sequence that is returned as the result.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "trim", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, without leading and trailing\n    whitespace. The bytes regarded as whitespace are the ASCII\n    characters <code class=\"code\"><span class=\"string\">'&nbsp;'</span></code>, <code class=\"code\"><span class=\"string\">'\\012'</span></code>, <code class=\"code\"><span class=\"string\">'\\n'</span></code>, <code class=\"code\"><span class=\"string\">'\\r'</span></code>, and <code class=\"code\"><span class=\"string\">'\\t'</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "escaped", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with special characters represented\n    by escape sequences, following the lexical conventions of OCaml.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index", "bytes -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">index&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index_opt", "bytes -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">index_opt&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex", "bytes -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rindex&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_opt", "bytes -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "index_from", "bytes -> int -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the first occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.  <code class=\"code\"><span class=\"constructor\">Bytes</span>.index&nbsp;s&nbsp;c</code> is\n    equivalent to <code class=\"code\"><span class=\"constructor\">Bytes</span>.index_from&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.\n    Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index_from_opt", "bytes -> int -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">index_from&nbsp;_opts&nbsp;i&nbsp;c</code> returns the index of the first occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.\n    <code class=\"code\"><span class=\"constructor\">Bytes</span>.index_opt&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">Bytes</span>.index_from_opt&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_from", "bytes -> int -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.  <code class=\"code\">rindex&nbsp;s&nbsp;c</code> is equivalent\n    to <code class=\"code\">rindex_from&nbsp;s&nbsp;(<span class=\"constructor\">Bytes</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.\n    Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_from_opt", "bytes -> int -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence\n    of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not\n    occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.  <code class=\"code\">rindex_opt&nbsp;s&nbsp;c</code> is equivalent to\n    <code class=\"code\">rindex_from&nbsp;s&nbsp;(<span class=\"constructor\">Bytes</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "contains", "bytes -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">contains&nbsp;s&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "contains_from", "bytes -> int -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> after\n    position <code class=\"code\">start</code>.  <code class=\"code\">contains&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\">contains_from<br>\n&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rcontains_from", "bytes -> int -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> before\n    position <code class=\"code\">stop+1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">stop&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">stop+1</code> is not a valid\n    position in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uppercase", "bytes -> bytes",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lowercase", "bytes -> bytes",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "capitalize", "bytes -> bytes",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uncapitalize", "bytes -> bytes",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uppercase_ascii", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "lowercase_ascii", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "capitalize_ascii", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "uncapitalize_ascii", "bytes -> bytes",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", "= bytes", null,
              "\n<div class=\"info-desc\">\n<p>An alias for the type of byte sequences.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>The comparison function for byte sequences, with the same\n    specification as <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>,\n    this function <code class=\"code\">compare</code> allows the module <code class=\"code\"><span class=\"constructor\">Bytes</span></code> to be passed as\n    argument to the functors <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p>The equality function for byte sequences.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "t -> char Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the string, in increasing index order. Modifications of the\n    string during iteration will be reflected in the iterator.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seqi", "t -> (int * char) Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the string, in increasing order, yielding indices along chars</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "char Seq.t -> t",
              "\n<div class=\"info-desc\">\n<p>Create a string from the generator</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "StdLabels",
    "module_info":
      "\n<p>Standard labeled libraries.</p>\n\n<p>This meta-module provides labelized version of the <a href=\"Array.html\"><code class=\"code\"><span class=\"constructor\">Array</span></code></a>,\n   <a href=\"Bytes.html\"><code class=\"code\"><span class=\"constructor\">Bytes</span></code></a>, <a href=\"List.html\"><code class=\"code\"><span class=\"constructor\">List</span></code></a> and <a href=\"String.html\"><code class=\"code\"><span class=\"constructor\">String</span></code></a> modules.</p>\n\n<p>They only differ by their labels. Detailed interfaces can be found\n   in <code class=\"code\">arrayLabels.mli</code>, <code class=\"code\">bytesLabels.mli</code>, <code class=\"code\">listLabels.mli</code>\n   and <code class=\"code\">stringLabels.mli</code>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Module", [ "Array", null ] ],
          [ "Module", [ "Bytes", null ] ],
          [ "Module", [ "List", null ] ],
          [ "Module", [ "String", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "StdLabels.List",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "length", "'a list -> int",
              "\n<div class=\"info-desc\">\n<p>Return the length (number of elements) of the given list.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "hd", "'a list -> 'a",
              "\n<div class=\"info-desc\">\n<p>Return the first element of the given list. Raise\n   <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"hd\"</span></code> if the list is empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare_lengths", "'a list -> 'b list -> int",
              "\n<div class=\"info-desc\">\n<p>Compare the lengths of two lists. <code class=\"code\">compare_lengths&nbsp;l1&nbsp;l2</code> is\n   equivalent to <code class=\"code\">compare&nbsp;(length&nbsp;l1)&nbsp;(length&nbsp;l2)</code>, except that\n   the computation stops after itering on the shortest list.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "compare_length_with", "'a list -> len:int -> int",
              "\n<div class=\"info-desc\">\n<p>Compare the length of a list to an integer. <code class=\"code\">compare_length_with&nbsp;l&nbsp;n</code> is\n   equivalent to <code class=\"code\">compare&nbsp;(length&nbsp;l)&nbsp;n</code>, except that\n   the computation stops after at most <code class=\"code\">n</code> iterations on the list.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "cons", "'a -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">cons&nbsp;x&nbsp;xs</code> is <code class=\"code\">x&nbsp;::&nbsp;xs</code></p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "tl", "'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Return the given list without its first element. Raise\n   <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"tl\"</span></code> if the list is empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "nth", "'a list -> int -> 'a",
              "\n<div class=\"info-desc\">\n<p>Return the <code class=\"code\">n</code>-th element of the given list.\n   The first element (head of the list) is at position 0.\n   Raise <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"nth\"</span></code> if the list is too short.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"List.nth\"</span></code> if <code class=\"code\">n</code> is negative.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "nth_opt", "'a list -> int -> 'a option",
              "\n<div class=\"info-desc\">\n<p>Return the <code class=\"code\">n</code>-th element of the given list.\n    The first element (head of the list) is at position 0.\n    Return <code class=\"code\"><span class=\"constructor\">None</span></code> if the list is too short.\n    Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"List.nth\"</span></code> if <code class=\"code\">n</code> is negative.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rev", "'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>List reversal.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "init", "len:int -> f:(int -> 'a) -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.init&nbsp;len&nbsp;f</code> is <code class=\"code\">f&nbsp;0;&nbsp;f&nbsp;1;&nbsp;...;&nbsp;f&nbsp;(len-1)</code>, evaluated left to right.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n<li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">len&nbsp;&lt;&nbsp;0</code>.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "append", "'a list -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Catenate two lists.  Same function as the infix operator <code class=\"code\">@</code>.\n   Not tail-recursive (length of the first argument).  The <code class=\"code\">@</code>\n   operator is not tail-recursive either.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rev_append", "'a list -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_append&nbsp;l1&nbsp;l2</code> reverses <code class=\"code\">l1</code> and concatenates it with <code class=\"code\">l2</code>.\n   This is equivalent to <code class=\"code\">(</code><a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;l1)&nbsp;@&nbsp;l2</code>, but <code class=\"code\">rev_append</code> is\n   tail-recursive and more efficient.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "concat", "'a list list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Concatenate a list of lists.  The elements of the argument are all\n   concatenated together (in the same order) to give the result.\n   Not tail-recursive\n   (length of the argument + length of the longest sub-list).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "flatten", "'a list list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">concat</code>.  Not tail-recursive\n   (length of the argument + length of the longest sub-list).</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "iter", "f:('a -> unit) -> 'a list -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.iter&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> in turn to\n   <code class=\"code\">a1;&nbsp;...;&nbsp;an</code>. It is equivalent to\n   <code class=\"code\"><span class=\"keyword\">begin</span>&nbsp;f&nbsp;a1;&nbsp;f&nbsp;a2;&nbsp;...;&nbsp;f&nbsp;an;&nbsp;()&nbsp;<span class=\"keyword\">end</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iteri", "f:(int -> 'a -> unit) -> 'a list -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALiter\"><code class=\"code\"><span class=\"constructor\">List</span>.iter</code></a>, but the function is applied to the index of\n   the element as first argument (counting from 0), and the element\n   itself as second argument.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "f:('a -> 'b) -> 'a list -> 'b list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.map&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> to <code class=\"code\">a1,&nbsp;...,&nbsp;an</code>,\n   and builds the list <code class=\"code\">[f&nbsp;a1;&nbsp;...;&nbsp;f&nbsp;an]</code>\n   with the results returned by <code class=\"code\">f</code>.  Not tail-recursive.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mapi", "f:(int -> 'a -> 'b) -> 'a list -> 'b list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a>, but the function is applied to the index of\n   the element as first argument (counting from 0), and the element\n   itself as second argument.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rev_map", "f:('a -> 'b) -> 'a list -> 'b list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map&nbsp;f&nbsp;l</code> gives the same result as\n   <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a><code class=\"code\">&nbsp;f&nbsp;l)</code>, but is tail-recursive and\n   more efficient.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_left", "f:('a -> 'b -> 'a) -> init:'a -> 'b list -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1)&nbsp;b2)&nbsp;...)&nbsp;bn</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_right", "f:('a -> 'b -> 'b) -> 'a list -> init:'b -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;b</code> is\n   <code class=\"code\">f&nbsp;a1&nbsp;(f&nbsp;a2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;b)&nbsp;...))</code>.  Not tail-recursive.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators on two lists",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "iter2", "f:('a -> 'b -> unit) -> 'a list -> 'b list -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.iter2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> calls in turn\n   <code class=\"code\">f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "map2", "f:('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.map2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">[f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn]</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.  Not tail-recursive.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rev_map2",
              "f:('a -> 'b -> 'c) -> 'a list -> 'b list -> 'c list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map2&nbsp;f&nbsp;l1&nbsp;l2</code> gives the same result as\n   <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap2\"><code class=\"code\"><span class=\"constructor\">List</span>.map2</code></a><code class=\"code\">&nbsp;f&nbsp;l1&nbsp;l2)</code>, but is tail-recursive and\n   more efficient.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_left2",
              "f:('a -> 'b -> 'c -> 'a) -> init:'a -> 'b list -> 'c list -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left2&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;[c1;&nbsp;...;&nbsp;cn]</code> is\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1&nbsp;c1)&nbsp;b2&nbsp;c2)&nbsp;...)&nbsp;bn&nbsp;cn</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold_right2",
              "f:('a -> 'b -> 'c -> 'c) -> 'a list -> 'b list -> init:'c -> 'c",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;c</code> is\n   <code class=\"code\">f&nbsp;a1&nbsp;b1&nbsp;(f&nbsp;a2&nbsp;b2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;bn&nbsp;c)&nbsp;...))</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.  Not tail-recursive.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "List scanning",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "for_all", "f:('a -> bool) -> 'a list -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if all elements of the list\n   satisfy the predicate <code class=\"code\">p</code>. That is, it returns\n   <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;...&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "exists", "f:('a -> bool) -> 'a list -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if at least one element of\n   the list satisfies the predicate <code class=\"code\">p</code>. That is, it returns\n   <code class=\"code\">(p&nbsp;a1)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;a2)&nbsp;<span class=\"keywordsign\">||</span>&nbsp;...&nbsp;<span class=\"keywordsign\">||</span>&nbsp;(p&nbsp;an)</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "for_all2",
              "f:('a -> 'b -> bool) -> 'a list -> 'b list -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALfor_all\"><code class=\"code\"><span class=\"constructor\">List</span>.for_all</code></a>, but for a two-argument predicate.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "exists2",
              "f:('a -> 'b -> bool) -> 'a list -> 'b list -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALexists\"><code class=\"code\"><span class=\"constructor\">List</span>.exists</code></a>, but for a two-argument predicate.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists are determined\n   to have different lengths.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mem", "'a -> set:'a list -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;a&nbsp;l</code> is true if and only if <code class=\"code\">a</code> is equal\n   to an element of <code class=\"code\">l</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "memq", "'a -> set:'a list -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALmem\"><code class=\"code\"><span class=\"constructor\">List</span>.mem</code></a>, but uses physical equality instead of structural\n   equality to compare list elements.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "List searching",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "find", "f:('a -> bool) -> 'a list -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code>\n   that satisfies the predicate <code class=\"code\">p</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if there is no value that satisfies <code class=\"code\">p</code> in the\n   list <code class=\"code\">l</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find_opt", "f:('a -> bool) -> 'a list -> 'a option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code>\n   that satisfies the predicate <code class=\"code\">p</code>.\n   Returns <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no value that satisfies <code class=\"code\">p</code> in the\n   list <code class=\"code\">l</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "filter", "f:('a -> bool) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">filter&nbsp;p&nbsp;l</code> returns all the elements of the list <code class=\"code\">l</code>\n   that satisfy the predicate <code class=\"code\">p</code>.  The order of the elements\n   in the input list is preserved.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find_all", "f:('a -> bool) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_all</code> is another name for <a href=\"List.html#VALfilter\"><code class=\"code\"><span class=\"constructor\">List</span>.filter</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "partition", "f:('a -> bool) -> 'a list -> 'a list * 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">partition&nbsp;p&nbsp;l</code> returns a pair of lists <code class=\"code\">(l1,&nbsp;l2)</code>, where\n   <code class=\"code\">l1</code> is the list of all the elements of <code class=\"code\">l</code> that\n   satisfy the predicate <code class=\"code\">p</code>, and <code class=\"code\">l2</code> is the list of all the\n   elements of <code class=\"code\">l</code> that do not satisfy <code class=\"code\">p</code>.\n   The order of the elements in the input list is preserved.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Association lists",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "assoc", "'a -> ('a * 'b) list -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">assoc&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of\n   pairs <code class=\"code\">l</code>. That is,\n   <code class=\"code\">assoc&nbsp;a&nbsp;[&nbsp;...;&nbsp;(a,b);&nbsp;...]&nbsp;=&nbsp;b</code>\n   if <code class=\"code\">(a,b)</code> is the leftmost binding of <code class=\"code\">a</code> in list <code class=\"code\">l</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if there is no value associated with <code class=\"code\">a</code> in the\n   list <code class=\"code\">l</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "assoc_opt", "'a -> ('a * 'b) list -> 'b option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">assoc_opt&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of\n    pairs <code class=\"code\">l</code>. That is,\n    <code class=\"code\">assoc&nbsp;a&nbsp;[&nbsp;...;&nbsp;(a,b);&nbsp;...]&nbsp;=&nbsp;b</code>\n    if <code class=\"code\">(a,b)</code> is the leftmost binding of <code class=\"code\">a</code> in list <code class=\"code\">l</code>.\n    Returns <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no value associated with <code class=\"code\">a</code> in the\n    list <code class=\"code\">l</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "assq", "'a -> ('a * 'b) list -> 'b",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but uses physical equality instead of\n   structural equality to compare keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "assq_opt", "'a -> ('a * 'b) list -> 'b option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALassoc_opt\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc_opt</code></a>, but uses physical equality instead of\n   structural equality to compare keys.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "mem_assoc", "'a -> map:('a * 'b) list -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but simply return true if a binding exists,\n   and false if no bindings exist for the given key.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mem_assq", "'a -> map:('a * 'b) list -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALmem_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.mem_assoc</code></a>, but uses physical equality instead of\n   structural equality to compare keys.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "remove_assoc", "'a -> ('a * 'b) list -> ('a * 'b) list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">remove_assoc&nbsp;a&nbsp;l</code> returns the list of\n   pairs <code class=\"code\">l</code> without the first pair with key <code class=\"code\">a</code>, if any.\n   Not tail-recursive.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "remove_assq", "'a -> ('a * 'b) list -> ('a * 'b) list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALremove_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.remove_assoc</code></a>, but uses physical equality instead\n   of structural equality to compare keys.  Not tail-recursive.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Lists of pairs",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "split", "('a * 'b) list -> 'a list * 'b list",
              "\n<div class=\"info-desc\">\n<p>Transform a list of pairs into a pair of lists:\n   <code class=\"code\">split&nbsp;[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code> is <code class=\"code\">([a1;&nbsp;...;&nbsp;an],&nbsp;[b1;&nbsp;...;&nbsp;bn])</code>.\n   Not tail-recursive.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "combine", "'a list -> 'b list -> ('a * 'b) list",
              "\n<div class=\"info-desc\">\n<p>Transform a pair of lists into a list of pairs:\n   <code class=\"code\">combine&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the two lists\n   have different lengths.  Not tail-recursive.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Sorting",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "sort", "cmp:('a -> 'a -> int) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Sort a list in increasing order according to a comparison\n   function.  The comparison function must return 0 if its arguments\n   compare as equal, a positive integer if the first is greater,\n   and a negative integer if the first is smaller (see Array.sort for\n   a complete specification).  For example,\n   <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a> is a suitable comparison function.\n   The resulting list is sorted in increasing order.\n   <code class=\"code\"><span class=\"constructor\">List</span>.sort</code> is guaranteed to run in constant heap space\n   (in addition to the size of the result list) and logarithmic\n   stack space.</p>\n\n<p>The current implementation uses Merge Sort. It runs in constant\n   heap space and logarithmic stack space.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stable_sort", "cmp:('a -> 'a -> int) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but the sorting algorithm is guaranteed to\n   be stable (i.e. elements that compare equal are kept in their\n   original order) .</p>\n\n<p>The current implementation uses Merge Sort. It runs in constant\n   heap space and logarithmic stack space.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fast_sort", "cmp:('a -> 'a -> int) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a> or <a href=\"List.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">List</span>.stable_sort</code></a>, whichever is\n    faster on typical input.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sort_uniq", "cmp:('a -> 'a -> int) -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but also remove duplicates.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "merge",
              "cmp:('a -> 'a -> int) -> 'a list -> 'a list -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Merge two lists:\n    Assuming that <code class=\"code\">l1</code> and <code class=\"code\">l2</code> are sorted according to the\n    comparison function <code class=\"code\">cmp</code>, <code class=\"code\">merge&nbsp;cmp&nbsp;l1&nbsp;l2</code> will return a\n    sorted list containing all the elements of <code class=\"code\">l1</code> and <code class=\"code\">l2</code>.\n    If several elements compare equal, the elements of <code class=\"code\">l1</code> will be\n    before the elements of <code class=\"code\">l2</code>.\n    Not tail-recursive (sum of the lengths of the arguments).</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "'a list -> 'a Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the list</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "'a Seq.t -> 'a list",
              "\n<div class=\"info-desc\">\n<p>Create a list from the iterator</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "StdLabels.String",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "length", "string -> int",
              "\n<div class=\"info-desc\">\n<p>Return the length (number of characters) of the given string.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get", "string -> int -> char",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.get&nbsp;s&nbsp;n</code> returns the character at index <code class=\"code\">n</code> in string <code class=\"code\">s</code>.\n   You can also write <code class=\"code\">s.[n]</code> instead of <code class=\"code\"><span class=\"constructor\">String</span>.get&nbsp;s&nbsp;n</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> not a valid index in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set", "bytes -> int -> char -> unit",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"BytesLabels.html#VALset\"><code class=\"code\"><span class=\"constructor\">BytesLabels</span>.set</code></a>.</div>\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.set&nbsp;s&nbsp;n&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place,\n   replacing the byte at index <code class=\"code\">n</code> with <code class=\"code\">c</code>.\n   You can also write <code class=\"code\">s.[n]&nbsp;&lt;-&nbsp;c</code> instead of <code class=\"code\"><span class=\"constructor\">String</span>.set&nbsp;s&nbsp;n&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is not a valid index in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "int -> bytes",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"BytesLabels.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">BytesLabels</span>.create</code></a>.</div>\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.create&nbsp;n</code> returns a fresh byte sequence of length <code class=\"code\">n</code>.\n   The sequence is uninitialized and contains arbitrary bytes.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "make", "int -> char -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.make&nbsp;n&nbsp;c</code> returns a fresh string of length <code class=\"code\">n</code>,\n   filled with the character <code class=\"code\">c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "init", "int -> f:(int -> char) -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">init&nbsp;n&nbsp;f</code> returns a string of length <code class=\"code\">n</code>,\n    with character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "copy", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the given string.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub", "string -> pos:int -> len:int -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.sub&nbsp;s&nbsp;start&nbsp;len</code> returns a fresh string of length <code class=\"code\">len</code>,\n   containing the substring of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> and\n   has length <code class=\"code\">len</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not\n   designate a valid substring of <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fill", "bytes -> pos:int -> len:int -> char -> unit",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"BytesLabels.html#VALfill\"><code class=\"code\"><span class=\"constructor\">BytesLabels</span>.fill</code></a>.</div>\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place,\n   replacing <code class=\"code\">len</code> bytes by <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not\n   designate a valid substring of <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit",
              "src:string -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes\n   from the string <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>,\n   to byte sequence <code class=\"code\">dst</code>, starting at character number <code class=\"code\">dstoff</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">srcoff</code> and <code class=\"code\">len</code> do not\n   designate a valid range of <code class=\"code\">src</code>, or if <code class=\"code\">dstoff</code> and <code class=\"code\">len</code>\n   do not designate a valid range of <code class=\"code\">dst</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "concat", "sep:string -> string list -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.concat&nbsp;sep&nbsp;sl</code> concatenates the list of strings <code class=\"code\">sl</code>,\n   inserting the separator string <code class=\"code\">sep</code> between each.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "f:(char -> unit) -> string -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all\n   the characters of <code class=\"code\">s</code>.  It is equivalent to\n   <code class=\"code\">f&nbsp;s.[0];&nbsp;f&nbsp;s.[1];&nbsp;...;&nbsp;f&nbsp;s.[<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1];&nbsp;()</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iteri", "f:(int -> char -> unit) -> string -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"String.html#VALiter\"><code class=\"code\"><span class=\"constructor\">String</span>.iter</code></a>, but the\n   function is applied to the index of the element as first argument\n   (counting from 0), and the character itself as second argument.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "f:(char -> char) -> string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all\n   the characters of <code class=\"code\">s</code> and stores the results in a new string that\n   is returned.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "mapi", "f:(int -> char -> char) -> string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its\n    index (in increasing index order) and stores the results in a new\n    string that is returned.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "trim", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, without leading and trailing\n   whitespace.  The characters regarded as whitespace are: <code class=\"code\"><span class=\"string\">'&nbsp;'</span></code>,\n   <code class=\"code\"><span class=\"string\">'\\012'</span></code>, <code class=\"code\"><span class=\"string\">'\\n'</span></code>, <code class=\"code\"><span class=\"string\">'\\r'</span></code>, and <code class=\"code\"><span class=\"string\">'\\t'</span></code>.  If there is no leading nor\n   trailing whitespace character in the argument, return the original\n   string itself, not a copy.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "escaped", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with special characters\n   represented by escape sequences, following the lexical\n   conventions of OCaml.  If there is no special\n   character in the argument, return the original string itself,\n   not a copy. Its inverse function is Scanf.unescaped.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index", "string -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index&nbsp;s&nbsp;c</code> returns the index of the first\n   occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index_opt", "string -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_opt&nbsp;s&nbsp;c</code> returns the index of the first\n    occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or\n    <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex", "string -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex&nbsp;s&nbsp;c</code> returns the index of the last\n   occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_opt", "string -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence\n    of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in\n    <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "index_from", "string -> int -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>.\n   <code class=\"code\"><span class=\"constructor\">String</span>.index&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">String</span>.index_from&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index_from_opt", "string -> int -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n    first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>\n    or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_opt&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">String</span>.index_from_opt&nbsp;s&nbsp;0&nbsp;c</code>.\n    Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_from", "string -> int -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.\n   <code class=\"code\"><span class=\"constructor\">String</span>.rindex&nbsp;s&nbsp;c</code> is equivalent to\n   <code class=\"code\"><span class=\"constructor\">String</span>.rindex_from&nbsp;s&nbsp;(<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_from_opt", "string -> int -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>\n   or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_opt&nbsp;s&nbsp;c</code> is equivalent to\n   <code class=\"code\"><span class=\"constructor\">String</span>.rindex_from_opt&nbsp;s&nbsp;(<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "contains", "string -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.contains&nbsp;s&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in the string <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "contains_from", "string -> int -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in <code class=\"code\">s</code> after position <code class=\"code\">start</code>.\n   <code class=\"code\"><span class=\"constructor\">String</span>.contains&nbsp;s&nbsp;c</code> is equivalent to\n   <code class=\"code\"><span class=\"constructor\">String</span>.contains_from&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rcontains_from", "string -> int -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in <code class=\"code\">s</code> before position <code class=\"code\">stop+1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">stop&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">stop+1</code> is not a valid\n   position in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uppercase", "string -> string",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lowercase", "string -> string",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "capitalize", "string -> string",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uncapitalize", "string -> string",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uppercase_ascii", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "lowercase_ascii", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "capitalize_ascii", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "uncapitalize_ascii", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", "= string", null,
              "\n<div class=\"info-desc\">\n<p>An alias for the type of strings.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>The comparison function for strings, with the same specification as\n    <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>, this function <code class=\"code\">compare</code>\n    allows the module <code class=\"code\"><span class=\"constructor\">String</span></code> to be passed as argument to the functors\n    <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p>The equal function for strings.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "split_on_char", "sep:char -> string -> string list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.split_on_char&nbsp;sep&nbsp;s</code> returns the list of all (possibly empty)\n    substrings of <code class=\"code\">s</code> that are delimited by the <code class=\"code\">sep</code> character.</p>\n\n<p>The function's output is specified by the following invariants:</p>\n\n<ul>\n<li>The list is not empty.</li>\n<li>Concatenating its elements using <code class=\"code\">sep</code> as a separator returns a\n      string equal to the input (<code class=\"code\"><span class=\"constructor\">String</span>.concat&nbsp;(<span class=\"constructor\">String</span>.make&nbsp;1&nbsp;sep)<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span class=\"constructor\">String</span>.split_on_char&nbsp;sep&nbsp;s)&nbsp;=&nbsp;s</code>).</li>\n<li>No string in the result contains the <code class=\"code\">sep</code> character.</li>\n</ul>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "t -> char Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the string, in increasing index order. Modifications of the\n    string during iteration will be reflected in the iterator.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seqi", "t -> (int * char) Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the string, in increasing order, yielding indices along chars</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "char Seq.t -> t",
              "\n<div class=\"info-desc\">\n<p>Create a string from the generator</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Str",
    "module_info":
      "\n<p>Regular expressions and high-level string processing</p>\n",
    "sections": [
      {
        "section_name": "Regular expressions",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "regexp", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of compiled regular expressions.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "regexp", "string -> regexp",
              "\n<div class=\"info-desc\">\n<p>Compile a regular expression. The following constructs are\n    recognized:</p>\n<ul>\n<li><code class=\"code\">.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code> Matches any character except newline.</li>\n<li><code class=\"code\">*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code> (postfix) Matches the preceding expression zero, one or\n              several times</li>\n<li><code class=\"code\">+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code> (postfix) Matches the preceding expression one or\n              several times</li>\n<li><code class=\"code\">?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code> (postfix) Matches the preceding expression once or\n              not at all</li>\n<li><code class=\"code\">[..]&nbsp;&nbsp;</code> Character set. Ranges are denoted with <code class=\"code\">-</code>, as in <code class=\"code\">[a-z]</code>.\n              An initial <code class=\"code\">^</code>, as in <code class=\"code\">[^0-9]</code>, complements the set.\n              To include a <code class=\"code\">]</code> character in a set, make it the first\n              character of the set. To include a <code class=\"code\">-</code> character in a set,\n              make it the first or the last character of the set.</li>\n<li><code class=\"code\">^&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code> Matches at beginning of line: either at the beginning of\n              the matched string, or just after a '\\n' character.</li>\n<li><code class=\"code\">$&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code> Matches at end of line: either at the end of the matched\n              string, or just before a '\\n' character.</li>\n<li><code class=\"code\">\\|    </code> (infix) Alternative between two expressions.</li>\n<li><code class=\"code\">\\(..\\)</code> Grouping and naming of the enclosed expression.</li>\n<li><code class=\"code\">\\1    </code> The text matched by the first <code class=\"code\">\\(...\\)</code> expression\n     (<code class=\"code\">\\2</code> for the second expression, and so on up to <code class=\"code\">\\9</code>).</li>\n<li><code class=\"code\">\\b    </code> Matches word boundaries.</li>\n<li><code class=\"code\">\\     </code> Quotes special characters.  The special characters\n              are <code class=\"code\">$^\\.*+?[]</code>.</li>\n</ul>\n<p>Note: the argument to <code class=\"code\">regexp</code> is usually a string literal. In this\n   case, any backslash character in the regular expression must be\n   doubled to make it past the OCaml string parser. For example, the\n   following expression:</p>\n<pre class=\"codepre\"><code class=\"code\"> <span class=\"keyword\">let</span> r = <span class=\"constructor\">Str</span>.regexp <span class=\"string\">\"hello \\\\([A-Za-z]+\\\\)\"</span> <span class=\"keyword\">in</span>\n      <span class=\"constructor\">Str</span>.replace_first r <span class=\"string\">\"\\\\1\"</span> <span class=\"string\">\"hello world\"</span> </code></pre><p>returns the string <code class=\"code\"><span class=\"string\">\"world\"</span></code>.</p>\n\n<p>In particular, if you want a regular expression that matches a single\n   backslash character, you need to quote it in the argument to <code class=\"code\">regexp</code>\n   (according to the last item of the list above) by adding a second\n   backslash. Then you need to quote both backslashes (according to the\n   syntax of string constants in OCaml) by doubling them again, so you\n   need to write four backslash characters: <code class=\"code\"><span class=\"constructor\">Str</span>.regexp&nbsp;<span class=\"string\">\"\\\\\\\\\"</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "regexp_case_fold", "string -> regexp",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">regexp</code>, but the compiled expression will match text\n    in a case-insensitive way: uppercase and lowercase letters will\n    be considered equivalent.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "quote", "string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Str</span>.quote&nbsp;s</code> returns a regexp string that matches exactly\n   <code class=\"code\">s</code> and nothing else.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "regexp_string", "string -> regexp",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Str</span>.regexp_string&nbsp;s</code> returns a regular expression\n   that matches exactly <code class=\"code\">s</code> and nothing else.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "regexp_string_case_fold", "string -> regexp",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Str</span>.regexp_string_case_fold</code> is similar to <a href=\"Str.html#VALregexp_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.regexp_string</code></a>,\n   but the regexp matches in a case-insensitive way.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "String matching and searching",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "string_match", "regexp -> string -> int -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">string_match&nbsp;r&nbsp;s&nbsp;start</code> tests whether a substring of <code class=\"code\">s</code> that\n   starts at position <code class=\"code\">start</code> matches the regular expression <code class=\"code\">r</code>.\n   The first character of a string has position <code class=\"code\">0</code>, as usual.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "search_forward", "regexp -> string -> int -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">search_forward&nbsp;r&nbsp;s&nbsp;start</code> searches the string <code class=\"code\">s</code> for a substring\n   matching the regular expression <code class=\"code\">r</code>. The search starts at position\n   <code class=\"code\">start</code> and proceeds towards the end of the string.\n   Return the position of the first character of the matched\n   substring.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Not_found</code> if no substring matches.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "search_backward", "regexp -> string -> int -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">search_backward&nbsp;r&nbsp;s&nbsp;last</code> searches the string <code class=\"code\">s</code> for a\n  substring matching the regular expression <code class=\"code\">r</code>. The search first\n  considers substrings that start at position <code class=\"code\">last</code> and proceeds\n  towards the beginning of string. Return the position of the first\n  character of the matched substring.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Not_found</code> if no substring matches.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "string_partial_match", "regexp -> string -> int -> bool",
              "\n<div class=\"info-desc\">\n<p>Similar to <a href=\"Str.html#VALstring_match\"><code class=\"code\"><span class=\"constructor\">Str</span>.string_match</code></a>, but also returns true if\n   the argument string is a prefix of a string that matches.\n   This includes the case of a true complete match.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "matched_string", "string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">matched_string&nbsp;s</code> returns the substring of <code class=\"code\">s</code> that was matched\n   by the last call to one of the following matching or searching\n   functions:</p>\n<ul>\n<li><a href=\"Str.html#VALstring_match\"><code class=\"code\"><span class=\"constructor\">Str</span>.string_match</code></a></li>\n<li><a href=\"Str.html#VALsearch_forward\"><code class=\"code\"><span class=\"constructor\">Str</span>.search_forward</code></a></li>\n<li><a href=\"Str.html#VALsearch_backward\"><code class=\"code\"><span class=\"constructor\">Str</span>.search_backward</code></a></li>\n<li><a href=\"Str.html#VALstring_partial_match\"><code class=\"code\"><span class=\"constructor\">Str</span>.string_partial_match</code></a></li>\n<li><a href=\"Str.html#VALglobal_substitute\"><code class=\"code\"><span class=\"constructor\">Str</span>.global_substitute</code></a></li>\n<li><a href=\"Str.html#VALsubstitute_first\"><code class=\"code\"><span class=\"constructor\">Str</span>.substitute_first</code></a></li>\n</ul>\n<p>provided that none of the following functions was called inbetween:</p>\n<ul>\n<li><a href=\"Str.html#VALglobal_replace\"><code class=\"code\"><span class=\"constructor\">Str</span>.global_replace</code></a></li>\n<li><a href=\"Str.html#VALreplace_first\"><code class=\"code\"><span class=\"constructor\">Str</span>.replace_first</code></a></li>\n<li><a href=\"Str.html#VALsplit\"><code class=\"code\"><span class=\"constructor\">Str</span>.split</code></a></li>\n<li><a href=\"Str.html#VALbounded_split\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_split</code></a></li>\n<li><a href=\"Str.html#VALsplit_delim\"><code class=\"code\"><span class=\"constructor\">Str</span>.split_delim</code></a></li>\n<li><a href=\"Str.html#VALbounded_split_delim\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_split_delim</code></a></li>\n<li><a href=\"Str.html#VALfull_split\"><code class=\"code\"><span class=\"constructor\">Str</span>.full_split</code></a></li>\n<li><a href=\"Str.html#VALbounded_full_split\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_full_split</code></a></li>\n</ul>\n<p>Note: in the case of <code class=\"code\">global_substitute</code> and <code class=\"code\">substitute_first</code>,\n   a call to <code class=\"code\">matched_string</code> is only valid within the <code class=\"code\">subst</code> argument,\n   not after <code class=\"code\">global_substitute</code> or <code class=\"code\">substitute_first</code> returns.</p>\n\n<p>The user must make sure that the parameter <code class=\"code\">s</code> is the same string\n   that was passed to the matching or searching function.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "match_beginning", "unit -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">match_beginning()</code> returns the position of the first character\n   of the substring that was matched by the last call to a matching\n   or searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "match_end", "unit -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">match_end()</code> returns the position of the character following the\n   last character of the substring that was matched by the last call\n   to a matching or searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for\n   details).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "matched_group", "int -> string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">matched_group&nbsp;n&nbsp;s</code> returns the substring of <code class=\"code\">s</code> that was matched\n   by the <code class=\"code\">n</code>th group <code class=\"code\">\\(...\\)</code> of the regular expression that was\n   matched by the last call to a matching or searching function (see\n   <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details).\n   The user must make sure that the parameter <code class=\"code\">s</code> is the same string\n   that was passed to the matching or searching function.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Not_found</code> if the <code class=\"code\">n</code>th group\n   of the regular expression was not matched.  This can happen\n   with groups inside alternatives <code class=\"code\">\\|</code>, options <code class=\"code\">?</code>\n   or repetitions <code class=\"code\">*</code>.  For instance, the empty string will match\n   <code class=\"code\">\\(a\\)*</code>, but <code class=\"code\">matched_group&nbsp;1&nbsp;<span class=\"string\">\"\"</span></code> will raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>\n   because the first group itself was not matched.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "group_beginning", "int -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">group_beginning&nbsp;n</code> returns the position of the first character\n   of the substring that was matched by the <code class=\"code\">n</code>th group of\n   the regular expression that was matched by the last call to a\n   matching or searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b><ul><li><code>Not_found</code> if the <code class=\"code\">n</code>th group of the regular expression\n   was not matched.</li>\n<li><code>Invalid_argument</code> if there are fewer than <code class=\"code\">n</code> groups in\n   the regular expression.</li>\n</ul></li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "group_end", "int -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">group_end&nbsp;n</code> returns\n   the position of the character following the last character of\n   substring that was matched by the <code class=\"code\">n</code>th group of the regular\n   expression that was matched by the last call to a matching or\n   searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details).</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b><ul><li><code>Not_found</code> if the <code class=\"code\">n</code>th group of the regular expression\n   was not matched.</li>\n<li><code>Invalid_argument</code> if there are fewer than <code class=\"code\">n</code> groups in\n   the regular expression.</li>\n</ul></li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Replacement",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "global_replace", "regexp -> string -> string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">global_replace&nbsp;regexp&nbsp;templ&nbsp;s</code> returns a string identical to <code class=\"code\">s</code>,\n   except that all substrings of <code class=\"code\">s</code> that match <code class=\"code\">regexp</code> have been\n   replaced by <code class=\"code\">templ</code>. The replacement template <code class=\"code\">templ</code> can contain\n   <code class=\"code\">\\1</code>, <code class=\"code\">\\2</code>, etc; these sequences will be replaced by the text\n   matched by the corresponding group in the regular expression.\n   <code class=\"code\">\\0</code> stands for the text matched by the whole regular expression.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "replace_first", "regexp -> string -> string -> string",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Str.html#VALglobal_replace\"><code class=\"code\"><span class=\"constructor\">Str</span>.global_replace</code></a>, except that only the first substring\n   matching the regular expression is replaced.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "global_substitute",
              "regexp -> (string -> string) -> string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">global_substitute&nbsp;regexp&nbsp;subst&nbsp;s</code> returns a string identical\n   to <code class=\"code\">s</code>, except that all substrings of <code class=\"code\">s</code> that match <code class=\"code\">regexp</code>\n   have been replaced by the result of function <code class=\"code\">subst</code>. The\n   function <code class=\"code\">subst</code> is called once for each matching substring,\n   and receives <code class=\"code\">s</code> (the whole text) as argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "substitute_first",
              "regexp -> (string -> string) -> string -> string",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Str.html#VALglobal_substitute\"><code class=\"code\"><span class=\"constructor\">Str</span>.global_substitute</code></a>, except that only the first substring\n   matching the regular expression is replaced.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "replace_matched", "string -> string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">replace_matched&nbsp;repl&nbsp;s</code> returns the replacement text <code class=\"code\">repl</code>\n   in which <code class=\"code\">\\1</code>, <code class=\"code\">\\2</code>, etc. have been replaced by the text\n   matched by the corresponding groups in the regular expression\n   that was matched by the last call to a matching or searching\n   function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details).\n   <code class=\"code\">s</code> must be the same string that was passed to the matching or\n   searching function.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Splitting",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "split", "regexp -> string -> string list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">split&nbsp;r&nbsp;s</code> splits <code class=\"code\">s</code> into substrings, taking as delimiters\n   the substrings that match <code class=\"code\">r</code>, and returns the list of substrings.\n   For instance, <code class=\"code\">split&nbsp;(regexp&nbsp;<span class=\"string\">\"[&nbsp;\\t]+\"</span>)&nbsp;s</code> splits <code class=\"code\">s</code> into\n   blank-separated words.  An occurrence of the delimiter at the\n   beginning or at the end of the string is ignored.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "bounded_split", "regexp -> string -> int -> string list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Str.html#VALsplit\"><code class=\"code\"><span class=\"constructor\">Str</span>.split</code></a>, but splits into at most <code class=\"code\">n</code> substrings,\n   where <code class=\"code\">n</code> is the extra integer parameter.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "split_delim", "regexp -> string -> string list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Str.html#VALsplit\"><code class=\"code\"><span class=\"constructor\">Str</span>.split</code></a> but occurrences of the\n   delimiter at the beginning and at the end of the string are\n   recognized and returned as empty strings in the result.\n   For instance, <code class=\"code\">split_delim&nbsp;(regexp&nbsp;<span class=\"string\">\"&nbsp;\"</span>)&nbsp;<span class=\"string\">\"&nbsp;abc&nbsp;\"</span></code>\n   returns <code class=\"code\">[<span class=\"string\">\"\"</span>;&nbsp;<span class=\"string\">\"abc\"</span>;&nbsp;<span class=\"string\">\"\"</span>]</code>, while <code class=\"code\">split</code> with the same\n   arguments returns <code class=\"code\">[<span class=\"string\">\"abc\"</span>]</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "bounded_split_delim",
              "regexp -> string -> int -> string list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Str.html#VALbounded_split\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_split</code></a>, but occurrences of the\n   delimiter at the beginning and at the end of the string are\n   recognized and returned as empty strings in the result.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "split_result", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsplit_result.Text\"><span class=\"constructor\">Text</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsplit_result.Delim\"><span class=\"constructor\">Delim</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "full_split", "regexp -> string -> split_result list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Str.html#VALsplit_delim\"><code class=\"code\"><span class=\"constructor\">Str</span>.split_delim</code></a>, but returns\n   the delimiters as well as the substrings contained between\n   delimiters.  The former are tagged <code class=\"code\"><span class=\"constructor\">Delim</span></code> in the result list;\n   the latter are tagged <code class=\"code\"><span class=\"constructor\">Text</span></code>.  For instance,\n   <code class=\"code\">full_split&nbsp;(regexp&nbsp;<span class=\"string\">\"[{}]\"</span>)&nbsp;<span class=\"string\">\"{ab}\"</span></code> returns\n   <code class=\"code\">[<span class=\"constructor\">Delim</span>&nbsp;<span class=\"string\">\"{\"</span>;&nbsp;<span class=\"constructor\">Text</span>&nbsp;<span class=\"string\">\"ab\"</span>;&nbsp;<span class=\"constructor\">Delim</span>&nbsp;<span class=\"string\">\"}\"</span>]</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "bounded_full_split",
              "regexp -> string -> int -> split_result list",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Str.html#VALbounded_split_delim\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_split_delim</code></a>, but returns\n   the delimiters as well as the substrings contained between\n   delimiters.  The former are tagged <code class=\"code\"><span class=\"constructor\">Delim</span></code> in the result list;\n   the latter are tagged <code class=\"code\"><span class=\"constructor\">Text</span></code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Extracting substrings",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "string_before", "string -> int -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">string_before&nbsp;s&nbsp;n</code> returns the substring of all characters of <code class=\"code\">s</code>\n   that precede position <code class=\"code\">n</code> (excluding the character at\n   position <code class=\"code\">n</code>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "string_after", "string -> int -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">string_after&nbsp;s&nbsp;n</code> returns the substring of all characters of <code class=\"code\">s</code>\n   that follow position <code class=\"code\">n</code> (including the character at\n   position <code class=\"code\">n</code>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "first_chars", "string -> int -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">first_chars&nbsp;s&nbsp;n</code> returns the first <code class=\"code\">n</code> characters of <code class=\"code\">s</code>.\n   This is the same function as <a href=\"Str.html#VALstring_before\"><code class=\"code\"><span class=\"constructor\">Str</span>.string_before</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "last_chars", "string -> int -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">last_chars&nbsp;s&nbsp;n</code> returns the last <code class=\"code\">n</code> characters of <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Stream",
    "module_info": "\n<p>Streams and parsers.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "'a", "t", null,
              "\n<div class=\"info-desc\">\n<p>The type of streams holding values of type <code class=\"code\"><span class=\"keywordsign\">'</span>a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Exception",
            [
              "Failure", null,
              "\n<div class=\"info-desc\">\n<p>Raised by parsers when none of the first components of the stream\n   patterns is accepted.</p>\n</div>\n"
            ]
          ],
          [
            "Exception",
            [
              "Error", "string",
              "\n<div class=\"info-desc\">\n<p>Raised by parsers when the first component of a stream pattern is\n   accepted, but one of the following components is rejected.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Stream builders",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "from", "(int -> 'a option) -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Stream</span>.from&nbsp;f</code> returns a stream built from the function <code class=\"code\">f</code>.\n   To create a new stream element, the function <code class=\"code\">f</code> is called with\n   the current stream count. The user function <code class=\"code\">f</code> must return either\n   <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;&lt;value&gt;</code> for a value or <code class=\"code\"><span class=\"constructor\">None</span></code> to specify the end of the\n   stream.</p>\n\n<p>Do note that the indices passed to <code class=\"code\">f</code> may not start at <code class=\"code\">0</code> in the\n   general case. For example, <code class=\"code\">[&lt;&nbsp;<span class=\"keywordsign\">'</span>0;&nbsp;<span class=\"keywordsign\">'</span>1;&nbsp;<span class=\"constructor\">Stream</span>.from&nbsp;f&nbsp;&gt;]</code> would call\n   <code class=\"code\">f</code> the first time with count <code class=\"code\">2</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_list", "'a list -> 'a t",
              "\n<div class=\"info-desc\">\n<p>Return the stream holding the elements of the list in the same\n   order.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_string", "string -> char t",
              "\n<div class=\"info-desc\">\n<p>Return the stream of the characters of the string parameter.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_bytes", "bytes -> char t",
              "\n<div class=\"info-desc\">\n<p>Return the stream of the characters of the bytes parameter.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_channel", "in_channel -> char t",
              "\n<div class=\"info-desc\">\n<p>Return the stream of the characters read from the input channel.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Stream iterator",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "iter", "('a -> unit) -> 'a t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Stream</span>.iter&nbsp;f&nbsp;s</code> scans the whole stream s, applying function <code class=\"code\">f</code>\n   in turn to each stream element encountered.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Predefined parsers",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "next", "'a t -> 'a",
              "\n<div class=\"info-desc\">\n<p>Return the first element of the stream and remove it from the\n   stream. Raise <a href=\"Stream.html#EXCEPTIONFailure\"><code class=\"code\"><span class=\"constructor\">Stream</span>.<span class=\"constructor\">Failure</span></code></a> if the stream is empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "empty", "'a t -> unit",
              "\n<div class=\"info-desc\">\n<p>Return <code class=\"code\">()</code> if the stream is empty, else raise <a href=\"Stream.html#EXCEPTIONFailure\"><code class=\"code\"><span class=\"constructor\">Stream</span>.<span class=\"constructor\">Failure</span></code></a>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Useful functions",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "peek", "'a t -> 'a option",
              "\n<div class=\"info-desc\">\n<p>Return <code class=\"code\"><span class=\"constructor\">Some</span></code> of \"the first element\" of the stream, or <code class=\"code\"><span class=\"constructor\">None</span></code> if\n   the stream is empty.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "junk", "'a t -> unit",
              "\n<div class=\"info-desc\">\n<p>Remove the first element of the stream, possibly unfreezing\n   it before.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "count", "'a t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the current count of the stream elements, i.e. the number\n   of the stream elements discarded.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "npeek", "int -> 'a t -> 'a list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">npeek&nbsp;n</code> returns the list of the <code class=\"code\">n</code> first elements of\n   the stream, or all its remaining elements if less than <code class=\"code\">n</code>\n   elements are available.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "String",
    "module_info":
      "\n<p>String operations.</p>\n\n<p>A string is an immutable data structure that contains a\n  fixed-length sequence of (single-byte) characters. Each character\n  can be accessed in constant time through its index.</p>\n\n<p>Given a string <code class=\"code\">s</code> of length <code class=\"code\">l</code>, we can access each of the <code class=\"code\">l</code>\n  characters of <code class=\"code\">s</code> via its index in the sequence. Indexes start at\n  <code class=\"code\">0</code>, and we will call an index valid in <code class=\"code\">s</code> if it falls within the\n  range <code class=\"code\">[0...l-1]</code> (inclusive). A position is the point between two\n  characters or at the beginning or end of the string.  We call a\n  position valid in <code class=\"code\">s</code> if it falls within the range <code class=\"code\">[0...l]</code>\n  (inclusive). Note that the character at index <code class=\"code\">n</code> is between\n  positions <code class=\"code\">n</code> and <code class=\"code\">n+1</code>.</p>\n\n<p>Two parameters <code class=\"code\">start</code> and <code class=\"code\">len</code> are said to designate a valid\n  substring of <code class=\"code\">s</code> if <code class=\"code\">len&nbsp;&gt;=&nbsp;0</code> and <code class=\"code\">start</code> and <code class=\"code\">start+len</code> are\n  valid positions in <code class=\"code\">s</code>.</p>\n\n<p>OCaml strings used to be modifiable in place, for instance via the\n  <a href=\"String.html#VALset\"><code class=\"code\"><span class=\"constructor\">String</span>.set</code></a> and <a href=\"String.html#VALblit\"><code class=\"code\"><span class=\"constructor\">String</span>.blit</code></a> functions described below. This\n  usage is deprecated and only possible when the compiler is put in\n  \"unsafe-string\" mode by giving the <code class=\"code\">-unsafe-string</code> command-line\n  option (which is currently the default for reasons of backward\n  compatibility). This is done by making the types <code class=\"code\">string</code> and\n  <code class=\"code\">bytes</code> (see module <a href=\"Bytes.html\"><code class=\"code\"><span class=\"constructor\">Bytes</span></code></a>) interchangeable so that functions\n  expecting byte sequences can also accept strings as arguments and\n  modify them.</p>\n\n<p>All new code should avoid this feature and be compiled with the\n  <code class=\"code\">-safe-string</code> command-line option to enforce the separation between\n  the types <code class=\"code\">string</code> and <code class=\"code\">bytes</code>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "length", "string -> int",
              "\n<div class=\"info-desc\">\n<p>Return the length (number of characters) of the given string.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get", "string -> int -> char",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.get&nbsp;s&nbsp;n</code> returns the character at index <code class=\"code\">n</code> in string <code class=\"code\">s</code>.\n   You can also write <code class=\"code\">s.[n]</code> instead of <code class=\"code\"><span class=\"constructor\">String</span>.get&nbsp;s&nbsp;n</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> not a valid index in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set", "bytes -> int -> char -> unit",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"Bytes.html#VALset\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.set</code></a>.<code class=\"code\">&nbsp;</code></div>\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.set&nbsp;s&nbsp;n&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place,\n   replacing the byte at index <code class=\"code\">n</code> with <code class=\"code\">c</code>.\n   You can also write <code class=\"code\">s.[n]&nbsp;&lt;-&nbsp;c</code> instead of <code class=\"code\"><span class=\"constructor\">String</span>.set&nbsp;s&nbsp;n&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is not a valid index in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "int -> bytes",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"Bytes.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.create</code></a>.<code class=\"code\">&nbsp;</code></div>\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.create&nbsp;n</code> returns a fresh byte sequence of length <code class=\"code\">n</code>.\n   The sequence is uninitialized and contains arbitrary bytes.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "make", "int -> char -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.make&nbsp;n&nbsp;c</code> returns a fresh string of length <code class=\"code\">n</code>,\n   filled with the character <code class=\"code\">c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "init", "int -> (int -> char) -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.init&nbsp;n&nbsp;f</code> returns a string of length <code class=\"code\">n</code>, with character\n    <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code> (called in increasing\n    index order).</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "copy", "string -> string",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Because strings are immutable, it doesn't make much\n    sense to make identical copies of them.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the given string.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub", "string -> int -> int -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.sub&nbsp;s&nbsp;start&nbsp;len</code> returns a fresh string of length <code class=\"code\">len</code>,\n   containing the substring of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> and\n   has length <code class=\"code\">len</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not\n   designate a valid substring of <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fill", "bytes -> int -> int -> char -> unit",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"Bytes.html#VALfill\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.fill</code></a>.<code class=\"code\">&nbsp;</code></div>\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place,\n   replacing <code class=\"code\">len</code> bytes with <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not\n   designate a valid range of <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit", "string -> int -> bytes -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Bytes.html#VALblit_string\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.blit_string</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "concat", "string -> string list -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.concat&nbsp;sep&nbsp;sl</code> concatenates the list of strings <code class=\"code\">sl</code>,\n    inserting the separator string <code class=\"code\">sep</code> between each.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result is longer than\n    <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "(char -> unit) -> string -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all\n   the characters of <code class=\"code\">s</code>.  It is equivalent to\n   <code class=\"code\">f&nbsp;s.[0];&nbsp;f&nbsp;s.[1];&nbsp;...;&nbsp;f&nbsp;s.[<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1];&nbsp;()</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iteri", "(int -> char -> unit) -> string -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"String.html#VALiter\"><code class=\"code\"><span class=\"constructor\">String</span>.iter</code></a>, but the\n   function is applied to the index of the element as first argument\n   (counting from 0), and the character itself as second argument.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "(char -> char) -> string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the\n    characters of <code class=\"code\">s</code> (in increasing index order) and stores the\n    results in a new string that is returned.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "mapi", "(int -> char -> char) -> string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its\n    index (in increasing index order) and stores the results in a new\n    string that is returned.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "trim", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, without leading and trailing\n   whitespace.  The characters regarded as whitespace are: <code class=\"code\"><span class=\"string\">'&nbsp;'</span></code>,\n   <code class=\"code\"><span class=\"string\">'\\012'</span></code>, <code class=\"code\"><span class=\"string\">'\\n'</span></code>, <code class=\"code\"><span class=\"string\">'\\r'</span></code>, and <code class=\"code\"><span class=\"string\">'\\t'</span></code>.  If there is neither leading nor\n   trailing whitespace character in the argument, return the original\n   string itself, not a copy.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "escaped", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with special characters\n    represented by escape sequences, following the lexical\n    conventions of OCaml.\n    All characters outside the ASCII printable range (32..126) are\n    escaped, as well as backslash and double-quote.</p>\n\n<p>If there is no special character in the argument that needs\n    escaping, return the original string itself, not a copy.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if the result is longer than\n    <a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a> bytes.</p>\n\n<p>The function <a href=\"Scanf.html#VALunescaped\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.unescaped</code></a> is a left inverse of <code class=\"code\">escaped</code>,\n    i.e. <code class=\"code\"><span class=\"constructor\">Scanf</span>.unescaped&nbsp;(escaped&nbsp;s)&nbsp;=&nbsp;s</code> for any string <code class=\"code\">s</code> (unless\n    <code class=\"code\">escape&nbsp;s</code> fails).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index", "string -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index&nbsp;s&nbsp;c</code> returns the index of the first\n   occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index_opt", "string -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_opt&nbsp;s&nbsp;c</code> returns the index of the first\n    occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or\n    <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex", "string -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex&nbsp;s&nbsp;c</code> returns the index of the last\n   occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_opt", "string -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence\n    of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in\n    <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "index_from", "string -> int -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>.\n   <code class=\"code\"><span class=\"constructor\">String</span>.index&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">String</span>.index_from&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index_from_opt", "string -> int -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n    first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>\n    or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_opt&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">String</span>.index_from_opt&nbsp;s&nbsp;0&nbsp;c</code>.\n    Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_from", "string -> int -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.\n   <code class=\"code\"><span class=\"constructor\">String</span>.rindex&nbsp;s&nbsp;c</code> is equivalent to\n   <code class=\"code\"><span class=\"constructor\">String</span>.rindex_from&nbsp;s&nbsp;(<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_from_opt", "string -> int -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>\n   or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_opt&nbsp;s&nbsp;c</code> is equivalent to\n   <code class=\"code\"><span class=\"constructor\">String</span>.rindex_from_opt&nbsp;s&nbsp;(<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "contains", "string -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.contains&nbsp;s&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in the string <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "contains_from", "string -> int -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in <code class=\"code\">s</code> after position <code class=\"code\">start</code>.\n   <code class=\"code\"><span class=\"constructor\">String</span>.contains&nbsp;s&nbsp;c</code> is equivalent to\n   <code class=\"code\"><span class=\"constructor\">String</span>.contains_from&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rcontains_from", "string -> int -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in <code class=\"code\">s</code> before position <code class=\"code\">stop+1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">stop&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">stop+1</code> is not a valid\n   position in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uppercase", "string -> string",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lowercase", "string -> string",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "capitalize", "string -> string",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uncapitalize", "string -> string",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uppercase_ascii", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "lowercase_ascii", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "capitalize_ascii", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "uncapitalize_ascii", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", "= string", null,
              "\n<div class=\"info-desc\">\n<p>An alias for the type of strings.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>The comparison function for strings, with the same specification as\n    <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>, this function <code class=\"code\">compare</code>\n    allows the module <code class=\"code\"><span class=\"constructor\">String</span></code> to be passed as argument to the functors\n    <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p>The equal function for strings.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "split_on_char", "char -> string -> string list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.split_on_char&nbsp;sep&nbsp;s</code> returns the list of all (possibly empty)\n    substrings of <code class=\"code\">s</code> that are delimited by the <code class=\"code\">sep</code> character.</p>\n\n<p>The function's output is specified by the following invariants:</p>\n\n<ul>\n<li>The list is not empty.</li>\n<li>Concatenating its elements using <code class=\"code\">sep</code> as a separator returns a\n      string equal to the input (<code class=\"code\"><span class=\"constructor\">String</span>.concat&nbsp;(<span class=\"constructor\">String</span>.make&nbsp;1&nbsp;sep)<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span class=\"constructor\">String</span>.split_on_char&nbsp;sep&nbsp;s)&nbsp;=&nbsp;s</code>).</li>\n<li>No string in the result contains the <code class=\"code\">sep</code> character.</li>\n</ul>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.04.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "t -> char Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the string, in increasing index order. Modifications of the\n    string during iteration will be reflected in the iterator.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seqi", "t -> (int * char) Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the string, in increasing order, yielding indices along chars</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "char Seq.t -> t",
              "\n<div class=\"info-desc\">\n<p>Create a string from the generator</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "StringLabels",
    "module_info": "\n<p>String operations.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "length", "string -> int",
              "\n<div class=\"info-desc\">\n<p>Return the length (number of characters) of the given string.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get", "string -> int -> char",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.get&nbsp;s&nbsp;n</code> returns the character at index <code class=\"code\">n</code> in string <code class=\"code\">s</code>.\n   You can also write <code class=\"code\">s.[n]</code> instead of <code class=\"code\"><span class=\"constructor\">String</span>.get&nbsp;s&nbsp;n</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> not a valid index in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set", "bytes -> int -> char -> unit",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"BytesLabels.html#VALset\"><code class=\"code\"><span class=\"constructor\">BytesLabels</span>.set</code></a>.</div>\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.set&nbsp;s&nbsp;n&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place,\n   replacing the byte at index <code class=\"code\">n</code> with <code class=\"code\">c</code>.\n   You can also write <code class=\"code\">s.[n]&nbsp;&lt;-&nbsp;c</code> instead of <code class=\"code\"><span class=\"constructor\">String</span>.set&nbsp;s&nbsp;n&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n</code> is not a valid index in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "int -> bytes",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"BytesLabels.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">BytesLabels</span>.create</code></a>.</div>\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.create&nbsp;n</code> returns a fresh byte sequence of length <code class=\"code\">n</code>.\n   The sequence is uninitialized and contains arbitrary bytes.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "make", "int -> char -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.make&nbsp;n&nbsp;c</code> returns a fresh string of length <code class=\"code\">n</code>,\n   filled with the character <code class=\"code\">c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "init", "int -> f:(int -> char) -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">init&nbsp;n&nbsp;f</code> returns a string of length <code class=\"code\">n</code>,\n    with character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">n&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">n&nbsp;&gt;&nbsp;</code><a href=\"Sys.html#VALmax_string_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_string_length</code></a>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "copy", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the given string.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub", "string -> pos:int -> len:int -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.sub&nbsp;s&nbsp;start&nbsp;len</code> returns a fresh string of length <code class=\"code\">len</code>,\n   containing the substring of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> and\n   has length <code class=\"code\">len</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not\n   designate a valid substring of <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fill", "bytes -> pos:int -> len:int -> char -> unit",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>This is a deprecated alias of <a href=\"BytesLabels.html#VALfill\"><code class=\"code\"><span class=\"constructor\">BytesLabels</span>.fill</code></a>.</div>\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place,\n   replacing <code class=\"code\">len</code> bytes by <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> and <code class=\"code\">len</code> do not\n   designate a valid substring of <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit",
              "src:string -> src_pos:int -> dst:bytes -> dst_pos:int -> len:int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes\n   from the string <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>,\n   to byte sequence <code class=\"code\">dst</code>, starting at character number <code class=\"code\">dstoff</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">srcoff</code> and <code class=\"code\">len</code> do not\n   designate a valid range of <code class=\"code\">src</code>, or if <code class=\"code\">dstoff</code> and <code class=\"code\">len</code>\n   do not designate a valid range of <code class=\"code\">dst</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "concat", "sep:string -> string list -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.concat&nbsp;sep&nbsp;sl</code> concatenates the list of strings <code class=\"code\">sl</code>,\n   inserting the separator string <code class=\"code\">sep</code> between each.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "f:(char -> unit) -> string -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all\n   the characters of <code class=\"code\">s</code>.  It is equivalent to\n   <code class=\"code\">f&nbsp;s.[0];&nbsp;f&nbsp;s.[1];&nbsp;...;&nbsp;f&nbsp;s.[<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1];&nbsp;()</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iteri", "f:(int -> char -> unit) -> string -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"String.html#VALiter\"><code class=\"code\"><span class=\"constructor\">String</span>.iter</code></a>, but the\n   function is applied to the index of the element as first argument\n   (counting from 0), and the character itself as second argument.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "map", "f:(char -> char) -> string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all\n   the characters of <code class=\"code\">s</code> and stores the results in a new string that\n   is returned.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "mapi", "f:(int -> char -> char) -> string -> string",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its\n    index (in increasing index order) and stores the results in a new\n    string that is returned.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "trim", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, without leading and trailing\n   whitespace.  The characters regarded as whitespace are: <code class=\"code\"><span class=\"string\">'&nbsp;'</span></code>,\n   <code class=\"code\"><span class=\"string\">'\\012'</span></code>, <code class=\"code\"><span class=\"string\">'\\n'</span></code>, <code class=\"code\"><span class=\"string\">'\\r'</span></code>, and <code class=\"code\"><span class=\"string\">'\\t'</span></code>.  If there is no leading nor\n   trailing whitespace character in the argument, return the original\n   string itself, not a copy.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "escaped", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with special characters\n   represented by escape sequences, following the lexical\n   conventions of OCaml.  If there is no special\n   character in the argument, return the original string itself,\n   not a copy. Its inverse function is Scanf.unescaped.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index", "string -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index&nbsp;s&nbsp;c</code> returns the index of the first\n   occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index_opt", "string -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_opt&nbsp;s&nbsp;c</code> returns the index of the first\n    occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or\n    <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex", "string -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex&nbsp;s&nbsp;c</code> returns the index of the last\n   occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_opt", "string -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence\n    of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in\n    <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "index_from", "string -> int -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>.\n   <code class=\"code\"><span class=\"constructor\">String</span>.index&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">String</span>.index_from&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "index_from_opt", "string -> int -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n    first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>\n    or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_opt&nbsp;s&nbsp;c</code> is equivalent to <code class=\"code\"><span class=\"constructor\">String</span>.index_from_opt&nbsp;s&nbsp;0&nbsp;c</code>.\n    Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_from", "string -> int -> char -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.\n   <code class=\"code\"><span class=\"constructor\">String</span>.rindex&nbsp;s&nbsp;c</code> is equivalent to\n   <code class=\"code\"><span class=\"constructor\">String</span>.rindex_from&nbsp;s&nbsp;(<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.\n   Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rindex_from_opt", "string -> int -> char -> int option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>\n   or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_opt&nbsp;s&nbsp;c</code> is equivalent to\n   <code class=\"code\"><span class=\"constructor\">String</span>.rindex_from_opt&nbsp;s&nbsp;(<span class=\"constructor\">String</span>.length&nbsp;s&nbsp;-&nbsp;1)&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">i+1</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "contains", "string -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.contains&nbsp;s&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in the string <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "contains_from", "string -> int -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in <code class=\"code\">s</code> after position <code class=\"code\">start</code>.\n   <code class=\"code\"><span class=\"constructor\">String</span>.contains&nbsp;s&nbsp;c</code> is equivalent to\n   <code class=\"code\"><span class=\"constructor\">String</span>.contains_from&nbsp;s&nbsp;0&nbsp;c</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">start</code> is not a valid position in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rcontains_from", "string -> int -> char -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in <code class=\"code\">s</code> before position <code class=\"code\">stop+1</code>.</p>\n\n<p>Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> if <code class=\"code\">stop&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">stop+1</code> is not a valid\n   position in <code class=\"code\">s</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uppercase", "string -> string",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lowercase", "string -> string",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "capitalize", "string -> string",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uncapitalize", "string -> string",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Functions operating on Latin-1 character set are deprecated.</div>\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "uppercase_ascii", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "lowercase_ascii", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "capitalize_ascii", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "uncapitalize_ascii", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the US-ASCII character set.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", "= string", null,
              "\n<div class=\"info-desc\">\n<p>An alias for the type of strings.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>The comparison function for strings, with the same specification as\n    <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>, this function <code class=\"code\">compare</code>\n    allows the module <code class=\"code\"><span class=\"constructor\">String</span></code> to be passed as argument to the functors\n    <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p>The equal function for strings.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "split_on_char", "sep:char -> string -> string list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.split_on_char&nbsp;sep&nbsp;s</code> returns the list of all (possibly empty)\n    substrings of <code class=\"code\">s</code> that are delimited by the <code class=\"code\">sep</code> character.</p>\n\n<p>The function's output is specified by the following invariants:</p>\n\n<ul>\n<li>The list is not empty.</li>\n<li>Concatenating its elements using <code class=\"code\">sep</code> as a separator returns a\n      string equal to the input (<code class=\"code\"><span class=\"constructor\">String</span>.concat&nbsp;(<span class=\"constructor\">String</span>.make&nbsp;1&nbsp;sep)<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span class=\"constructor\">String</span>.split_on_char&nbsp;sep&nbsp;s)&nbsp;=&nbsp;s</code>).</li>\n<li>No string in the result contains the <code class=\"code\">sep</code> character.</li>\n</ul>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Iterators",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "to_seq", "t -> char Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the string, in increasing index order. Modifications of the\n    string during iteration will be reflected in the iterator.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_seqi", "t -> (int * char) Seq.t",
              "\n<div class=\"info-desc\">\n<p>Iterate on the string, in increasing order, yielding indices along chars</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "of_seq", "char Seq.t -> t",
              "\n<div class=\"info-desc\">\n<p>Create a string from the generator</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.07</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Strongly_connected_components",
    "module_info":
      "\n<p>Kosaraju's algorithm for strongly connected components.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Moduletype", [ "S", null ] ],
          [ "Module", [ "Make", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Strongly_connected_components.Make",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Module", [ "Id", null ] ],
          [
            "Typevariant",
            [
              "directed_graph", "= Id.Set.t Id.Map.t", null,
              "\n<div class=\"info-desc\">\n<p>If (a -&gt; set) belongs to the map, it means that there are edges\n      from <code class=\"code\">a</code> to every element of <code class=\"code\">set</code>.  It is assumed that no edge\n      points to a vertex not represented in the map.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "component", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcomponent.Has_loop\"><span class=\"constructor\">Has_loop</span></span> <span class=\"keyword\">of</span> <code class=\"type\">Id.t list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcomponent.No_loop\"><span class=\"constructor\">No_loop</span></span> <span class=\"keyword\">of</span> <code class=\"type\">Id.t</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "connected_components_sorted_from_roots_to_leaf",
              "directed_graph -> component array", null
            ]
          ],
          [
            "Function",
            [
              "component_graph",
              "directed_graph -> ( component * int list) array", null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMake\"><span class=\"keyword\">module</span> Make</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">Id</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"Identifiable.S.html\">Identifiable.S</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"Strongly_connected_components.S.html\">S</a></code><code class=\"type\">  with module Id := Id</code></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>Id</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"Identifiable.S.html\">Identifiable.S</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "Strongly_connected_components.S",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Module", [ "Id", null ] ],
          [
            "Typevariant",
            [
              "directed_graph", "= Id.Set.t Id.Map.t", null,
              "\n<div class=\"info-desc\">\n<p>If (a -&gt; set) belongs to the map, it means that there are edges\n      from <code class=\"code\">a</code> to every element of <code class=\"code\">set</code>.  It is assumed that no edge\n      points to a vertex not represented in the map.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "component", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcomponent.Has_loop\"><span class=\"constructor\">Has_loop</span></span> <span class=\"keyword\">of</span> <code class=\"type\">Id.t list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTcomponent.No_loop\"><span class=\"constructor\">No_loop</span></span> <span class=\"keyword\">of</span> <code class=\"type\">Id.t</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "connected_components_sorted_from_roots_to_leaf",
              "directed_graph -> component array", null
            ]
          ],
          [
            "Function",
            [
              "component_graph",
              "directed_graph -> ( component * int list) array", null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  },
  {
    "module_name": "Strongly_connected_components.S.Id",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [ "Module", [ "T", null ] ],
          [ "Include", "Identifiable.Thing" ],
          [ "Module", [ "Set", null ] ],
          [ "Module", [ "Map", null ] ],
          [ "Module", [ "Tbl", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Syntaxerr",
    "module_info": "\n<p>Auxiliary type for reporting syntax errors</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "error", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Unclosed\"><span class=\"constructor\">Unclosed</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a> * string * <a href=\"Location.html#TYPEt\">Location.t</a> * string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Expecting\"><span class=\"constructor\">Expecting</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a> * string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Not_expecting\"><span class=\"constructor\">Not_expecting</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a> * string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Applicative_path\"><span class=\"constructor\">Applicative_path</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Variable_in_scope\"><span class=\"constructor\">Variable_in_scope</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a> * string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Other\"><span class=\"constructor\">Other</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Ill_formed_ast\"><span class=\"constructor\">Ill_formed_ast</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a> * string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Invalid_package_type\"><span class=\"constructor\">Invalid_package_type</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Location.html#TYPEt\">Location.t</a> * string</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Exception", [ "Error", "error", null ] ],
          [ "Exception", [ "Escape_error", null, null ] ],
          [
            "Function",
            [
              "report_error", "Format.formatter -> error -> unit",
              "\n<div class=\"info-deprecated\">\n<span class=\"warning\">Deprecated.</span>Use <a href=\"Location.html#VALerror_of_exn\"><code class=\"code\"><span class=\"constructor\">Location</span>.error_of_exn</code></a>, <a href=\"Location.html#VALreport_error\"><code class=\"code\"><span class=\"constructor\">Location</span>.report_error</code></a>.</div>\n"
            ]
          ],
          [
            "Function",
            [ "location_of_error", "error -> Location.t", null ]
          ],
          [
            "Function",
            [ "ill_formed_ast", "Location.t -> string -> 'a", null ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Sys",
    "module_info":
      "\n<p>System interface.</p>\n\n<p>Every function in this module raises <code class=\"code\"><span class=\"constructor\">Sys_error</span></code> with an\n  informative message when the underlying system call signal\n  an error.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "argv", "string array",
              "\n<div class=\"info-desc\">\n<p>The command line arguments given to the process.\n   The first element is the command name used to invoke the program.\n   The following elements are the command-line arguments\n   given to the program.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "executable_name", "string",
              "\n<div class=\"info-desc\">\n<p>The name of the file containing the executable currently running.\n    This name may be absolute or relative to the current directory, depending\n    on the platform and whether the program was compiled to bytecode or a native\n    executable.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "file_exists", "string -> bool",
              "\n<div class=\"info-desc\">\n<p>Test if a file with the given name exists.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "is_directory", "string -> bool",
              "\n<div class=\"info-desc\">\n<p>Returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the given name refers to a directory,\n    <code class=\"code\"><span class=\"keyword\">false</span></code> if it refers to another kind of file.\n    Raise <code class=\"code\"><span class=\"constructor\">Sys_error</span></code> if no file exists with the given name.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 3.10.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "remove", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>Remove the given file name from the file system.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rename", "string -> string -> unit",
              "\n<div class=\"info-desc\">\n<p>Rename a file.  <code class=\"code\">rename&nbsp;oldpath&nbsp;newpath</code> renames the file\n    called <code class=\"code\">oldpath</code>, giving it <code class=\"code\">newpath</code> as its new name,\n    moving it between directories if needed.  If <code class=\"code\">newpath</code> already\n    exists, its contents will be replaced with those of <code class=\"code\">oldpath</code>.\n    Depending on the operating system, the metadata (permissions,\n    owner, etc) of <code class=\"code\">newpath</code> can either be preserved or be replaced by\n    those of <code class=\"code\">oldpath</code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06 concerning the \"replace existing file\" behavior</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "getenv", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return the value associated to a variable in the process\n   environment. Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the variable is unbound.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getenv_opt", "string -> string option",
              "\n<div class=\"info-desc\">\n<p>Return the value associated to a variable in the process\n    environment or <code class=\"code\"><span class=\"constructor\">None</span></code> if the variable is unbound.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "command", "string -> int",
              "\n<div class=\"info-desc\">\n<p>Execute the given shell command and return its exit code.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "time", "unit -> float",
              "\n<div class=\"info-desc\">\n<p>Return the processor time, in seconds, used by the program\n   since the beginning of execution.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "chdir", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>Change the current working directory of the process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getcwd", "unit -> string",
              "\n<div class=\"info-desc\">\n<p>Return the current working directory of the process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "readdir", "string -> string array",
              "\n<div class=\"info-desc\">\n<p>Return the names of all files present in the given directory.\n   Names denoting the current directory and the parent directory\n   (<code class=\"code\"><span class=\"string\">\".\"</span></code> and <code class=\"code\"><span class=\"string\">\"..\"</span></code> in Unix) are not returned.  Each string in the\n   result is a file name rather than a complete path.  There is no\n   guarantee that the name strings in the resulting array will appear\n   in any specific order; they are not, in particular, guaranteed to\n   appear in alphabetical order.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "interactive", "bool ref",
              "\n<div class=\"info-desc\">\n<p>This reference is initially set to <code class=\"code\"><span class=\"keyword\">false</span></code> in standalone\n   programs and to <code class=\"code\"><span class=\"keyword\">true</span></code> if the code is being executed under\n   the interactive toplevel system <code class=\"code\">ocaml</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "os_type", "string",
              "\n<div class=\"info-desc\">\n<p>Operating system currently executing the OCaml program. One of</p>\n<ul>\n<li> <code class=\"code\"><span class=\"string\">\"Unix\"</span></code> (for all Unix versions, including Linux and Mac OS X),</li>\n<li> <code class=\"code\"><span class=\"string\">\"Win32\"</span></code> (for MS-Windows, OCaml compiled with MSVC++ or Mingw),</li>\n<li> <code class=\"code\"><span class=\"string\">\"Cygwin\"</span></code> (for MS-Windows, OCaml compiled with Cygwin).</li>\n</ul>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "backend_type", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTbackend_type.Native\"><span class=\"constructor\">Native</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTbackend_type.Bytecode\"><span class=\"constructor\">Bytecode</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTbackend_type.Other\"><span class=\"constructor\">Other</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Currently, the official distribution only supports <code class=\"code\"><span class=\"constructor\">Native</span></code> and\n    <code class=\"code\"><span class=\"constructor\">Bytecode</span></code>, but it can be other backends with alternative\n    compilers, for example, javascript.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.04.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "backend_type", "backend_type",
              "\n<div class=\"info-desc\">\n<p>Backend type  currently executing the OCaml program.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.04.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "unix", "bool",
              "\n<div class=\"info-desc\">\n<p>True if <code class=\"code\"><span class=\"constructor\">Sys</span>.os_type&nbsp;=&nbsp;<span class=\"string\">\"Unix\"</span></code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "win32", "bool",
              "\n<div class=\"info-desc\">\n<p>True if <code class=\"code\"><span class=\"constructor\">Sys</span>.os_type&nbsp;=&nbsp;<span class=\"string\">\"Win32\"</span></code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "cygwin", "bool",
              "\n<div class=\"info-desc\">\n<p>True if <code class=\"code\"><span class=\"constructor\">Sys</span>.os_type&nbsp;=&nbsp;<span class=\"string\">\"Cygwin\"</span></code>.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.01.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "word_size", "int",
              "\n<div class=\"info-desc\">\n<p>Size of one word on the machine currently executing the OCaml\n    program, in bits: 32 or 64.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "int_size", "int",
              "\n<div class=\"info-desc\">\n<p>Size of <code class=\"code\">int</code>, in bits. It is 31 (resp. 63) when using OCaml on a\n    32-bit (resp. 64-bit) platform. It may differ for other implementations,\n    e.g. it can be 32 bits when compiling to JavaScript.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "big_endian", "bool",
              "\n<div class=\"info-desc\">\n<p>Whether the machine currently executing the Caml program is big-endian.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.00.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "max_string_length", "int",
              "\n<div class=\"info-desc\">\n<p>Maximum length of strings and byte sequences.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "max_array_length", "int",
              "\n<div class=\"info-desc\">\n<p>Maximum length of a normal array.  The maximum length of a float\n    array is <code class=\"code\">max_array_length/2</code> on 32-bit machines and\n    <code class=\"code\">max_array_length</code> on 64-bit machines.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "runtime_variant", "unit -> string",
              "\n<div class=\"info-desc\">\n<p>Return the name of the runtime variant the program is running on.\n    This is normally the argument given to <code class=\"code\">-runtime-variant</code> at compile\n    time, but for byte-code it can be changed after compilation.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "runtime_parameters", "unit -> string",
              "\n<div class=\"info-desc\">\n<p>Return the value of the runtime parameters, in the same format\n    as the contents of the <code class=\"code\"><span class=\"constructor\">OCAMLRUNPARAM</span></code> environment variable.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Signal handling",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "signal_behavior", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignal_behavior.Signal_default\"><span class=\"constructor\">Signal_default</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignal_behavior.Signal_ignore\"><span class=\"constructor\">Signal_ignore</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsignal_behavior.Signal_handle\"><span class=\"constructor\">Signal_handle</span></span> <span class=\"keyword\">of</span> <code class=\"type\">(int -&gt; unit)</code></code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>What to do when receiving a signal:</p>\n<ul>\n<li><code class=\"code\"><span class=\"constructor\">Signal_default</span></code>: take the default behavior\n     (usually: abort the program)</li>\n<li><code class=\"code\"><span class=\"constructor\">Signal_ignore</span></code>: ignore the signal</li>\n<li><code class=\"code\"><span class=\"constructor\">Signal_handle</span>&nbsp;f</code>: call function <code class=\"code\">f</code>, giving it the signal\n   number as argument.</li>\n</ul>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "signal", "int -> signal_behavior -> signal_behavior",
              "\n<div class=\"info-desc\">\n<p>Set the behavior of the system on receipt of a given signal.  The\n   first argument is the signal number.  Return the behavior\n   previously associated with the signal. If the signal number is\n   invalid (or not available on your system), an <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code>\n   exception is raised.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_signal", "int -> signal_behavior -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Sys.html#VALsignal\"><code class=\"code\"><span class=\"constructor\">Sys</span>.signal</code></a> but return value is ignored.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": [
          {
            "section_name": "Signal numbers for the standard POSIX signals.",
            "section_info": null,
            "elements": [
              [
                "Function",
                [
                  "sigabrt", "int",
                  "\n<div class=\"info-desc\">\n<p>Abnormal termination</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigalrm", "int",
                  "\n<div class=\"info-desc\">\n<p>Timeout</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigfpe", "int",
                  "\n<div class=\"info-desc\">\n<p>Arithmetic exception</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sighup", "int",
                  "\n<div class=\"info-desc\">\n<p>Hangup on controlling terminal</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigill", "int",
                  "\n<div class=\"info-desc\">\n<p>Invalid hardware instruction</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigint", "int",
                  "\n<div class=\"info-desc\">\n<p>Interactive interrupt (ctrl-C)</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigkill", "int",
                  "\n<div class=\"info-desc\">\n<p>Termination (cannot be ignored)</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigpipe", "int",
                  "\n<div class=\"info-desc\">\n<p>Broken pipe</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigquit", "int",
                  "\n<div class=\"info-desc\">\n<p>Interactive termination</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigsegv", "int",
                  "\n<div class=\"info-desc\">\n<p>Invalid memory reference</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigterm", "int",
                  "\n<div class=\"info-desc\">\n<p>Termination</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigusr1", "int",
                  "\n<div class=\"info-desc\">\n<p>Application-defined signal 1</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigusr2", "int",
                  "\n<div class=\"info-desc\">\n<p>Application-defined signal 2</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigchld", "int",
                  "\n<div class=\"info-desc\">\n<p>Child process terminated</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigcont", "int",
                  "\n<div class=\"info-desc\">\n<p>Continue</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigstop", "int",
                  "\n<div class=\"info-desc\">\n<p>Stop</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigtstp", "int",
                  "\n<div class=\"info-desc\">\n<p>Interactive stop</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigttin", "int",
                  "\n<div class=\"info-desc\">\n<p>Terminal read from background process</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigttou", "int",
                  "\n<div class=\"info-desc\">\n<p>Terminal write from background process</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigvtalrm", "int",
                  "\n<div class=\"info-desc\">\n<p>Timeout in virtual time</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigprof", "int",
                  "\n<div class=\"info-desc\">\n<p>Profiling interrupt</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigbus", "int",
                  "\n<div class=\"info-desc\">\n<p>Bus error</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigpoll", "int",
                  "\n<div class=\"info-desc\">\n<p>Pollable event</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigsys", "int",
                  "\n<div class=\"info-desc\">\n<p>Bad argument to routine</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigtrap", "int",
                  "\n<div class=\"info-desc\">\n<p>Trace/breakpoint trap</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigurg", "int",
                  "\n<div class=\"info-desc\">\n<p>Urgent condition on socket</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigxcpu", "int",
                  "\n<div class=\"info-desc\">\n<p>Timeout in cpu time</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "sigxfsz", "int",
                  "\n<div class=\"info-desc\">\n<p>File size limit exceeded</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03</li>\n</ul>\n"
                ]
              ],
              [
                "Exception",
                [
                  "Break", null,
                  "\n<div class=\"info-desc\">\n<p>Exception raised on interactive interrupt if <a href=\"Sys.html#VALcatch_break\"><code class=\"code\"><span class=\"constructor\">Sys</span>.catch_break</code></a>\n   is on.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "catch_break", "bool -> unit",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">catch_break</code> governs whether interactive interrupt (ctrl-C)\n   terminates the program or raises the <code class=\"code\"><span class=\"constructor\">Break</span></code> exception.\n   Call <code class=\"code\">catch_break&nbsp;<span class=\"keyword\">true</span></code> to enable raising <code class=\"code\"><span class=\"constructor\">Break</span></code>,\n   and <code class=\"code\">catch_break&nbsp;<span class=\"keyword\">false</span></code> to let the system\n   terminate the program on user interrupt.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "ocaml_version", "string",
                  "\n<div class=\"info-desc\">\n<p><code class=\"code\">ocaml_version</code> is the version of OCaml.\n    It is a string of the form <code class=\"code\"><span class=\"string\">\"major.minor[.patchlevel][+additional-info]\"</span></code>,\n    where <code class=\"code\">major</code>, <code class=\"code\">minor</code>, and <code class=\"code\">patchlevel</code> are integers, and\n    <code class=\"code\">additional-info</code> is an arbitrary string. The <code class=\"code\">[.patchlevel]</code> and\n    <code class=\"code\">[+additional-info]</code> parts may be absent.</p>\n</div>\n"
                ]
              ],
              [
                "Function",
                [
                  "enable_runtime_warnings", "bool -> unit",
                  "\n<div class=\"info-desc\">\n<p>Control whether the OCaml runtime system can emit warnings\n    on stderr.  Currently, the only supported warning is triggered\n    when a channel created by <code class=\"code\">open_*</code> functions is finalized without\n    being closed.  Runtime warnings are enabled by default.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
                ]
              ],
              [
                "Function",
                [
                  "runtime_warnings_enabled", "unit -> bool",
                  "\n<div class=\"info-desc\">\n<p>Return whether runtime warnings are currently enabled.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
                ]
              ]
            ],
            "sub_sections": []
          }
        ]
      },
      {
        "section_name": "Optimization",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "opaque_identity", "'a -> 'a",
              "\n<div class=\"info-desc\">\n<p>For the purposes of optimization, <code class=\"code\">opaque_identity</code> behaves like an\n    unknown (and thus possibly side-effecting) function.</p>\n\n<p>At runtime, <code class=\"code\">opaque_identity</code> disappears altogether.</p>\n\n<p>A typical use of this function is to prevent pure computations from being\n    optimized away in benchmarking loops.  For example:</p>\n<pre class=\"codepre\"><code class=\"code\">      <span class=\"keyword\">for</span> _round = 1 <span class=\"keyword\">to</span> 100_000 <span class=\"keyword\">do</span>\n        ignore (<span class=\"constructor\">Sys</span>.opaque_identity (my_pure_computation ()))\n      <span class=\"keyword\">done</span>\n    </code></pre></div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Targetint",
    "module_info":
      "\n<p>Target processor-native integers.</p>\n\n<p>This module provides operations on the type of\n   signed 32-bit integers (on 32-bit target platforms) or\n   signed 64-bit integers (on 64-bit target platforms).\n   This integer type has exactly the same width as that of a\n   pointer type in the C compiler.  All arithmetic operations over\n   are taken modulo 2<sup class=\"superscript\">32</sup> or 2<sup class=\"superscript\">64</sup> depending\n   on the word size of the target architecture.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of target integers.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "zero", "t",
              "\n<div class=\"info-desc\">\n<p>The target integer 0.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "one", "t",
              "\n<div class=\"info-desc\">\n<p>The target integer 1.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "minus_one", "t",
              "\n<div class=\"info-desc\">\n<p>The target integer -1.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "neg", "t -> t",
              "\n<div class=\"info-desc\">\n<p>Unary negation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Addition.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sub", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Subtraction.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mul", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Multiplication.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "div", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Integer division.  Raise <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code> if the second\n   argument is zero.  This division rounds the real quotient of\n   its arguments towards zero, as specified for <a href=\"Pervasives.html#VAL(/)\"><code class=\"code\">(/)</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rem", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Integer remainder.  If <code class=\"code\">y</code> is not zero, the result\n   of <code class=\"code\"><span class=\"constructor\">Targetint</span>.rem&nbsp;x&nbsp;y</code> satisfies the following properties:\n   <code class=\"code\"><span class=\"constructor\">Targetint</span>.zero&nbsp;&lt;=&nbsp;<span class=\"constructor\">Nativeint</span>.rem&nbsp;x&nbsp;y&nbsp;&lt;&nbsp;<span class=\"constructor\">Targetint</span>.abs&nbsp;y</code> and\n   <code class=\"code\">x&nbsp;=&nbsp;<span class=\"constructor\">Targetint</span>.add&nbsp;(<span class=\"constructor\">Targetint</span>.mul&nbsp;(<span class=\"constructor\">Targetint</span>.div&nbsp;x&nbsp;y)&nbsp;y)<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span class=\"constructor\">Targetint</span>.rem&nbsp;x&nbsp;y)</code>.\n   If <code class=\"code\">y&nbsp;=&nbsp;0</code>, <code class=\"code\"><span class=\"constructor\">Targetint</span>.rem&nbsp;x&nbsp;y</code> raises <code class=\"code\"><span class=\"constructor\">Division_by_zero</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "succ", "t -> t",
              "\n<div class=\"info-desc\">\n<p>Successor.\n   <code class=\"code\"><span class=\"constructor\">Targetint</span>.succ&nbsp;x</code> is <code class=\"code\"><span class=\"constructor\">Targetint</span>.add&nbsp;x&nbsp;<span class=\"constructor\">Targetint</span>.one</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pred", "t -> t",
              "\n<div class=\"info-desc\">\n<p>Predecessor.\n   <code class=\"code\"><span class=\"constructor\">Targetint</span>.pred&nbsp;x</code> is <code class=\"code\"><span class=\"constructor\">Targetint</span>.sub&nbsp;x&nbsp;<span class=\"constructor\">Targetint</span>.one</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "abs", "t -> t",
              "\n<div class=\"info-desc\">\n<p>Return the absolute value of its argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "size", "int",
              "\n<div class=\"info-desc\">\n<p>The size in bits of a target native integer.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "max_int", "t",
              "\n<div class=\"info-desc\">\n<p>The greatest representable target integer,\n    either 2<sup class=\"superscript\">31</sup> - 1 on a 32-bit platform,\n    or 2<sup class=\"superscript\">63</sup> - 1 on a 64-bit platform.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "min_int", "t",
              "\n<div class=\"info-desc\">\n<p>The smallest representable target integer,\n   either -2<sup class=\"superscript\">31</sup> on a 32-bit platform,\n   or -2<sup class=\"superscript\">63</sup> on a 64-bit platform.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "logand", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Bitwise logical and.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "logor", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Bitwise logical or.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "logxor", "t -> t -> t",
              "\n<div class=\"info-desc\">\n<p>Bitwise logical exclusive or.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lognot", "t -> t",
              "\n<div class=\"info-desc\">\n<p>Bitwise logical negation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "shift_left", "t -> int -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Targetint</span>.shift_left&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits.\n    The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;bitsize</code>,\n    where <code class=\"code\">bitsize</code> is <code class=\"code\">32</code> on a 32-bit platform and\n    <code class=\"code\">64</code> on a 64-bit platform.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "shift_right", "t -> int -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Targetint</span>.shift_right&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.\n    This is an arithmetic shift: the sign bit of <code class=\"code\">x</code> is replicated\n    and inserted in the vacated bits.\n    The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;bitsize</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "shift_right_logical", "t -> int -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Targetint</span>.shift_right_logical&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right\n    by <code class=\"code\">y</code> bits.\n    This is a logical shift: zeroes are inserted in the vacated bits\n    regardless of the sign of <code class=\"code\">x</code>.\n    The result is unspecified if <code class=\"code\">y&nbsp;&lt;&nbsp;0</code> or <code class=\"code\">y&nbsp;&gt;=&nbsp;bitsize</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_int", "int -> t",
              "\n<div class=\"info-desc\">\n<p>Convert the given integer (type <code class=\"code\">int</code>) to a target integer\n    (type <code class=\"code\">t</code>), module the target word size.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_int_exn", "int -> t",
              "\n<div class=\"info-desc\">\n<p>Convert the given integer (type <code class=\"code\">int</code>) to a target integer\n    (type <code class=\"code\">t</code>).  Raises a fatal error if the conversion is not exact.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_int", "t -> int",
              "\n<div class=\"info-desc\">\n<p>Convert the given target integer (type <code class=\"code\">t</code>) to an\n    integer (type <code class=\"code\">int</code>).  The high-order bit is lost during\n    the conversion.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_float", "float -> t",
              "\n<div class=\"info-desc\">\n<p>Convert the given floating-point number to a target integer,\n   discarding the fractional part (truncate towards 0).\n   The result of the conversion is undefined if, after truncation,\n   the number is outside the range\n   [<a href=\"Targetint.html#VALmin_int\"><code class=\"code\"><span class=\"constructor\">Targetint</span>.min_int</code></a>, <a href=\"Targetint.html#VALmax_int\"><code class=\"code\"><span class=\"constructor\">Targetint</span>.max_int</code></a>].</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_float", "t -> float",
              "\n<div class=\"info-desc\">\n<p>Convert the given target integer to a floating-point number.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_int32", "int32 -> t",
              "\n<div class=\"info-desc\">\n<p>Convert the given 32-bit integer (type <code class=\"code\">int32</code>)\n    to a target integer.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_int32", "t -> int32",
              "\n<div class=\"info-desc\">\n<p>Convert the given target integer to a\n    32-bit integer (type <code class=\"code\">int32</code>).  On 64-bit platforms,\n    the 64-bit native integer is taken modulo 2<sup class=\"superscript\">32</sup>,\n    i.e. the top 32 bits are lost.  On 32-bit platforms,\n    the conversion is exact.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_int64", "int64 -> t",
              "\n<div class=\"info-desc\">\n<p>Convert the given 64-bit integer (type <code class=\"code\">int64</code>)\n    to a target integer.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_int64", "t -> int64",
              "\n<div class=\"info-desc\">\n<p>Convert the given target integer to a\n    64-bit integer (type <code class=\"code\">int64</code>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_string", "string -> t",
              "\n<div class=\"info-desc\">\n<p>Convert the given string to a target integer.\n    The string is read in decimal (by default) or in hexadecimal,\n    octal or binary if the string begins with <code class=\"code\">0x</code>, <code class=\"code\">0o</code> or <code class=\"code\">0b</code>\n    respectively.\n    Raise <code class=\"code\"><span class=\"constructor\">Failure</span>&nbsp;<span class=\"string\">\"int_of_string\"</span></code> if the given string is not\n    a valid representation of an integer, or if the integer represented\n    exceeds the range of integers representable in type <code class=\"code\">nativeint</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_string", "t -> string",
              "\n<div class=\"info-desc\">\n<p>Return the string representation of its argument, in decimal.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p>The comparison function for target integers, with the same specification as\n    <a href=\"Pervasives.html#VALcompare\"><code class=\"code\">compare</code></a>.  Along with the type <code class=\"code\">t</code>, this function <code class=\"code\">compare</code>\n    allows the module <code class=\"code\"><span class=\"constructor\">Targetint</span></code> to be passed as argument to the functors\n    <a href=\"Set.Make.html\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">Make</span></code></a> and <a href=\"Map.Make.html\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p>The equal function for target ints.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "repr", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTrepr.Int32\"><span class=\"constructor\">Int32</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int32</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTrepr.Int64\"><span class=\"constructor\">Int64</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int64</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "repr", "t -> repr",
              "\n<div class=\"info-desc\">\n<p>The concrete representation of a native integer.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Tbl",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "('k, 'v)", "t", null, null ] ],
          [ "Function", [ "empty", "('k, 'v) t", null ] ],
          [
            "Function",
            [ "add", "'k -> 'v -> ('k, 'v) t -> ('k, 'v) t", null ]
          ],
          [ "Function", [ "find", "'k -> ('k, 'v) t -> 'v", null ] ],
          [
            "Function",
            [ "find_str", "string -> (string, 'v) t -> 'v", null ]
          ],
          [ "Function", [ "mem", "'k -> ('k, 'v) t -> bool", null ] ],
          [
            "Function",
            [ "remove", "'k -> ('k, 'v) t -> ('k, 'v) t", null ]
          ],
          [
            "Function",
            [ "iter", "('k -> 'v -> unit) -> ('k, 'v) t -> unit", null ]
          ],
          [
            "Function",
            [
              "map", "('k -> 'v1 -> 'v2) -> ('k, 'v1) t -> ('k, 'v2) t", null
            ]
          ],
          [
            "Function",
            [
              "fold",
              "('k -> 'v -> 'acc -> 'acc) -> ('k, 'v) t -> 'acc -> 'acc",
              null
            ]
          ],
          [
            "Function",
            [
              "print",
              "( Format.formatter -> 'k -> unit) -> ( Format.formatter -> 'v -> unit) -> Format.formatter -> ('k, 'v) t -> unit",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Terminfo",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "status", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstatus.Uninitialised\"><span class=\"constructor\">Uninitialised</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstatus.Bad_term\"><span class=\"constructor\">Bad_term</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstatus.Good_term\"><span class=\"constructor\">Good_term</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Function", [ "setup", "out_channel -> status", null ] ],
          [ "Function", [ "num_lines", "out_channel -> int", null ] ],
          [ "Function", [ "backup", "out_channel -> int -> unit", null ] ],
          [ "Function", [ "standout", "out_channel -> bool -> unit", null ] ],
          [ "Function", [ "resume", "out_channel -> int -> unit", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Thread",
    "module_info": "\n<p>Lightweight threads.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of thread handles.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Thread creation and termination",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "create", "('a -> 'b) -> 'a -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Thread</span>.create&nbsp;funct&nbsp;arg</code> creates a new thread of control,\n   in which the function application <code class=\"code\">funct&nbsp;arg</code>\n   is executed concurrently with the other threads of the program.\n   The application of <code class=\"code\"><span class=\"constructor\">Thread</span>.create</code>\n   returns the handle of the newly created thread.\n   The new thread terminates when the application <code class=\"code\">funct&nbsp;arg</code>\n   returns, either normally or by raising an uncaught exception.\n   In the latter case, the exception is printed on standard error,\n   but not propagated back to the parent thread. Similarly, the\n   result of the application <code class=\"code\">funct&nbsp;arg</code> is discarded and not\n   directly accessible to the parent thread.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "self", "unit -> t",
              "\n<div class=\"info-desc\">\n<p>Return the thread currently executing.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "id", "t -> int",
              "\n<div class=\"info-desc\">\n<p>Return the identifier of the given thread. A thread identifier\n   is an integer that identifies uniquely the thread.\n   It can be used to build data structures indexed by threads.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "exit", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Terminate prematurely the currently executing thread.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "kill", "t -> unit",
              "\n<div class=\"info-desc\">\n<p>Terminate prematurely the thread whose handle is given.\n   This functionality is available only with bytecode-level threads.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Suspending threads",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "delay", "float -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">delay&nbsp;d</code> suspends the execution of the calling thread for\n   <code class=\"code\">d</code> seconds. The other program threads continue to run during\n   this time.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "join", "t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">join&nbsp;th</code> suspends the execution of the calling thread\n   until the thread <code class=\"code\">th</code> has terminated.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "wait_read", "Unix.file_descr -> unit",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Thread.html#VALwait_write\"><code class=\"code\"><span class=\"constructor\">Thread</span>.wait_write</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "wait_write", "Unix.file_descr -> unit",
              "\n<div class=\"info-desc\">\n<p>Suspend the execution of the calling thread until at least\n   one character or EOF is available for reading (<a href=\"Thread.html#VALwait_read\"><code class=\"code\"><span class=\"constructor\">Thread</span>.wait_read</code></a>) or\n   one character can be written without blocking (<code class=\"code\">wait_write</code>)\n   on the given Unix file descriptor.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "wait_timed_read", "Unix.file_descr -> float -> bool",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Thread.html#VALwait_timed_write\"><code class=\"code\"><span class=\"constructor\">Thread</span>.wait_timed_write</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "wait_timed_write", "Unix.file_descr -> float -> bool",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Thread.html#VALwait_read\"><code class=\"code\"><span class=\"constructor\">Thread</span>.wait_read</code></a> and <a href=\"Thread.html#VALwait_write\"><code class=\"code\"><span class=\"constructor\">Thread</span>.wait_write</code></a>, but wait for at most\n   the amount of time given as second argument (in seconds).\n   Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the file descriptor is ready for input/output\n   and <code class=\"code\"><span class=\"keyword\">false</span></code> if the timeout expired.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "select",
              "Unix.file_descr list -> Unix.file_descr list -> Unix.file_descr list -> float -> Unix.file_descr list * Unix.file_descr list * Unix.file_descr list",
              "\n<div class=\"info-desc\">\n<p>Suspend the execution of the calling thread until input/output\n   becomes possible on the given Unix file descriptors.\n   The arguments and results have the same meaning as for\n   <a href=\"Unix.html#VALselect\"><code class=\"code\"><span class=\"constructor\">Unix</span>.select</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "wait_pid", "int -> int * Unix.process_status",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">wait_pid&nbsp;p</code> suspends the execution of the calling thread\n   until the Unix process specified by the process identifier <code class=\"code\">p</code>\n   terminates. A pid <code class=\"code\">p</code> of <code class=\"code\">-1</code> means wait for any child.\n   A pid of <code class=\"code\">0</code> means wait for any child in the same process group\n   as the current process. Negative pid arguments represent\n   process groups. Returns the pid of the child caught and\n   its termination status, as per <a href=\"Unix.html#VALwait\"><code class=\"code\"><span class=\"constructor\">Unix</span>.wait</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "wait_signal", "int list -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">wait_signal&nbsp;sigs</code> suspends the execution of the calling thread\n   until the process receives one of the signals specified in the\n   list <code class=\"code\">sigs</code>.  It then returns the number of the signal received.\n   Signal handlers attached to the signals in <code class=\"code\">sigs</code> will not\n   be invoked.  Do not call <code class=\"code\">wait_signal</code> concurrently\n   from several threads on the same signals.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "yield", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Re-schedule the calling thread without suspending it.\n   This function can be used to give scheduling hints,\n   telling the scheduler that now is a good time to\n   switch to other threads.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "ThreadUnix",
    "module_info":
      "\n<span class=\"warning\">Deprecated.</span>The functionality of this module has been merged back into\n   the <a href=\"Unix.html\"><code class=\"code\"><span class=\"constructor\">Unix</span></code></a> module.  Threaded programs can now call the functions\n   from module <a href=\"Unix.html\"><code class=\"code\"><span class=\"constructor\">Unix</span></code></a> directly, and still get the correct behavior\n   (block the calling thread, if required, but do not block all threads\n   in the process).",
    "sections": [
      {
        "section_name": "Process handling",
        "section_info": null,
        "elements": [
          [ "Function", [ "execv", "string -> string array -> unit", null ] ],
          [
            "Function",
            [
              "execve", "string -> string array -> string array -> unit",
              null
            ]
          ],
          [
            "Function",
            [ "execvp", "string -> string array -> unit", null ]
          ],
          [
            "Function",
            [ "wait", "unit -> int * Unix.process_status", null ]
          ],
          [
            "Function",
            [
              "waitpid",
              "Unix.wait_flag list -> int -> int * Unix.process_status", null
            ]
          ],
          [ "Function", [ "system", "string -> Unix.process_status", null ] ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Basic input/output",
        "section_info": null,
        "elements": [
          [
            "Function",
            [ "read", "Unix.file_descr -> bytes -> int -> int -> int", null ]
          ],
          [
            "Function",
            [
              "write", "Unix.file_descr -> bytes -> int -> int -> int", null
            ]
          ],
          [
            "Function",
            [
              "single_write",
              "Unix.file_descr -> bytes -> int -> int -> int", null
            ]
          ],
          [
            "Function",
            [
              "write_substring",
              "Unix.file_descr -> string -> int -> int -> int", null
            ]
          ],
          [
            "Function",
            [
              "single_write_substring",
              "Unix.file_descr -> string -> int -> int -> int", null
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Input/output with timeout",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "timed_read",
              "Unix.file_descr -> bytes -> int -> int -> float -> int",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"ThreadUnix.html#VALtimed_write\"><code class=\"code\"><span class=\"constructor\">ThreadUnix</span>.timed_write</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "timed_write",
              "Unix.file_descr -> bytes -> int -> int -> float -> int",
              "\n<div class=\"info-desc\">\n<p>Behave as <a href=\"ThreadUnix.html#VALread\"><code class=\"code\"><span class=\"constructor\">ThreadUnix</span>.read</code></a> and <a href=\"ThreadUnix.html#VALwrite\"><code class=\"code\"><span class=\"constructor\">ThreadUnix</span>.write</code></a>, except that\n   <code class=\"code\"><span class=\"constructor\">Unix_error</span>(<span class=\"constructor\">ETIMEDOUT</span>,_,_)</code> is raised if no data is\n   available for reading or ready for writing after <code class=\"code\">d</code> seconds.\n   The delay <code class=\"code\">d</code> is given in the fifth argument, in seconds.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "timed_write_substring",
              "Unix.file_descr -> string -> int -> int -> float -> int",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"ThreadUnix.html#VALtimed_write\"><code class=\"code\"><span class=\"constructor\">ThreadUnix</span>.timed_write</code></a>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Polling",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "select",
              "Unix.file_descr list -> Unix.file_descr list -> Unix.file_descr list -> float -> Unix.file_descr list * Unix.file_descr list * Unix.file_descr list",
              null
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Pipes and redirections",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "pipe",
              "?cloexec:bool -> unit -> Unix.file_descr * Unix.file_descr",
              null
            ]
          ],
          [ "Function", [ "open_process_in", "string -> in_channel", null ] ],
          [
            "Function",
            [ "open_process_out", "string -> out_channel", null ]
          ],
          [
            "Function",
            [ "open_process", "string -> in_channel * out_channel", null ]
          ],
          [
            "Function",
            [
              "open_process_full",
              "string -> string array -> in_channel * out_channel * in_channel",
              null
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Time",
        "section_info": null,
        "elements": [ [ "Function", [ "sleep", "int -> unit", null ] ] ],
        "sub_sections": []
      },
      {
        "section_name": "Sockets",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "socket",
              "?cloexec:bool -> Unix.socket_domain -> Unix.socket_type -> int -> Unix.file_descr",
              null
            ]
          ],
          [
            "Function",
            [
              "socketpair",
              "?cloexec:bool -> Unix.socket_domain -> Unix.socket_type -> int -> Unix.file_descr * Unix.file_descr",
              null
            ]
          ],
          [
            "Function",
            [
              "accept",
              "?cloexec:bool -> Unix.file_descr -> Unix.file_descr * Unix.sockaddr",
              null
            ]
          ],
          [
            "Function",
            [ "connect", "Unix.file_descr -> Unix.sockaddr -> unit", null ]
          ],
          [
            "Function",
            [
              "recv",
              "Unix.file_descr -> bytes -> int -> int -> Unix.msg_flag list -> int",
              null
            ]
          ],
          [
            "Function",
            [
              "recvfrom",
              "Unix.file_descr -> bytes -> int -> int -> Unix.msg_flag list -> int * Unix.sockaddr",
              null
            ]
          ],
          [
            "Function",
            [
              "send",
              "Unix.file_descr -> bytes -> int -> int -> Unix.msg_flag list -> int",
              null
            ]
          ],
          [
            "Function",
            [
              "send_substring",
              "Unix.file_descr -> string -> int -> int -> Unix.msg_flag list -> int",
              null
            ]
          ],
          [
            "Function",
            [
              "sendto",
              "Unix.file_descr -> bytes -> int -> int -> Unix.msg_flag list -> Unix.sockaddr -> int",
              null
            ]
          ],
          [
            "Function",
            [
              "sendto_substring",
              "Unix.file_descr -> string -> int -> int -> Unix.msg_flag list -> Unix.sockaddr -> int",
              null
            ]
          ],
          [
            "Function",
            [
              "open_connection", "Unix.sockaddr -> in_channel * out_channel",
              null
            ]
          ],
          [
            "Function",
            [
              "establish_server",
              "( in_channel -> out_channel -> unit) -> Unix.sockaddr -> unit",
              null
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Typemod",
    "module_info":
      "\n<p>Type-checking of the module language and typed ast plugin hooks</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "type_module",
              "Env.t -> Parsetree.module_expr -> Typedtree.module_expr", null
            ]
          ],
          [
            "Function",
            [
              "type_structure",
              "Env.t -> Parsetree.structure -> Location.t -> Typedtree.structure * Types.signature * Env.t",
              null
            ]
          ],
          [
            "Function",
            [
              "type_toplevel_phrase",
              "Env.t -> Parsetree.structure -> Typedtree.structure * Types.signature * Env.t",
              null
            ]
          ],
          [
            "Function",
            [
              "type_implementation",
              "string -> string -> string -> Env.t -> Parsetree.structure -> Typedtree.structure * Typedtree.module_coercion",
              null
            ]
          ],
          [
            "Function",
            [
              "type_interface",
              "string -> Env.t -> Parsetree.signature -> Typedtree.signature",
              null
            ]
          ],
          [
            "Function",
            [
              "transl_signature",
              "Env.t -> Parsetree.signature -> Typedtree.signature", null
            ]
          ],
          [
            "Function",
            [
              "check_nongen_schemes", "Env.t -> Types.signature -> unit",
              null
            ]
          ],
          [
            "Function",
            [
              "type_open_",
              "?used_slot:bool ref -> ?toplevel:bool -> Asttypes.override_flag -> Env.t -> Location.t -> Longident.t Asttypes.loc -> Path.t * Env.t",
              null
            ]
          ],
          [
            "Function",
            [
              "modtype_of_package",
              "Env.t -> Location.t -> Path.t -> Longident.t list -> Types.type_expr list -> Types.module_type",
              null
            ]
          ],
          [
            "Function",
            [
              "simplify_signature", "Types.signature -> Types.signature",
              null
            ]
          ],
          [
            "Function",
            [
              "path_of_module", "Typedtree.module_expr -> Path.t option",
              null
            ]
          ],
          [
            "Function",
            [
              "save_signature",
              "string -> Typedtree.signature -> string -> string -> Env.t -> Cmi_format.cmi_infos -> unit",
              null
            ]
          ],
          [
            "Function",
            [
              "package_units",
              "Env.t -> string list -> string -> string -> Typedtree.module_coercion",
              null
            ]
          ],
          [
            "Function",
            [
              "initial_env",
              "loc: Location.t -> safe_string:bool -> initially_opened_module:string option -> open_implicit_modules:string list -> Env.t",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "error", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Cannot_apply\"><span class=\"constructor\">Cannot_apply</span></span> <span class=\"keyword\">of</span> <code class=\"type\">Types.module_type</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Not_included\"><span class=\"constructor\">Not_included</span></span> <span class=\"keyword\">of</span> <code class=\"type\">Includemod.error list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Cannot_eliminate_dependency\"><span class=\"constructor\">Cannot_eliminate_dependency</span></span> <span class=\"keyword\">of</span> <code class=\"type\">Types.module_type</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Signature_expected\"><span class=\"constructor\">Signature_expected</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Structure_expected\"><span class=\"constructor\">Structure_expected</span></span> <span class=\"keyword\">of</span> <code class=\"type\">Types.module_type</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.With_no_component\"><span class=\"constructor\">With_no_component</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.With_mismatch\"><span class=\"constructor\">With_mismatch</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> * Includemod.error list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.With_makes_applicative_functor_ill_typed\"><span class=\"constructor\">With_makes_applicative_functor_ill_typed</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> * Path.t * Includemod.error list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.With_changes_module_alias\"><span class=\"constructor\">With_changes_module_alias</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> * Ident.t * Path.t</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.With_cannot_remove_constrained_type\"><span class=\"constructor\">With_cannot_remove_constrained_type</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Repeated_name\"><span class=\"constructor\">Repeated_name</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Non_generalizable\"><span class=\"constructor\">Non_generalizable</span></span> <span class=\"keyword\">of</span> <code class=\"type\">Types.type_expr</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Non_generalizable_class\"><span class=\"constructor\">Non_generalizable_class</span></span> <span class=\"keyword\">of</span> <code class=\"type\">Ident.t * Types.class_declaration</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Non_generalizable_module\"><span class=\"constructor\">Non_generalizable_module</span></span> <span class=\"keyword\">of</span> <code class=\"type\">Types.module_type</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Implementation_is_required\"><span class=\"constructor\">Implementation_is_required</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Interface_not_compiled\"><span class=\"constructor\">Interface_not_compiled</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Not_allowed_in_functor_body\"><span class=\"constructor\">Not_allowed_in_functor_body</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Not_a_packed_module\"><span class=\"constructor\">Not_a_packed_module</span></span> <span class=\"keyword\">of</span> <code class=\"type\">Types.type_expr</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Incomplete_packed_module\"><span class=\"constructor\">Incomplete_packed_module</span></span> <span class=\"keyword\">of</span> <code class=\"type\">Types.type_expr</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Scoping_pack\"><span class=\"constructor\">Scoping_pack</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Longident.html#TYPEt\">Longident.t</a> * Types.type_expr</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Recursive_module_require_explicit_type\"><span class=\"constructor\">Recursive_module_require_explicit_type</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Apply_generative\"><span class=\"constructor\">Apply_generative</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.Cannot_scrape_alias\"><span class=\"constructor\">Cannot_scrape_alias</span></span> <span class=\"keyword\">of</span> <code class=\"type\">Path.t</code></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Exception", [ "Error", "Location.t", null ] ],
          [ "Exception", [ "Error_forward", "Location.error", null ] ],
          [
            "Function",
            [
              "report_error", "Env.t -> Format.formatter -> error -> unit",
              null
            ]
          ],
          [ "Module", [ "ImplementationHooks", null ] ],
          [ "Module", [ "InterfaceHooks", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Typemod.ImplementationHooks",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [
            "Function",
            [
              "add_hook", "string -> ( Misc.hook_info -> t -> t ) -> unit",
              null
            ]
          ],
          [ "Function", [ "apply_hooks", "Misc.hook_info -> t -> t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Typemod.InterfaceHooks",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [ "Typevariant", [ "t", null, null, null ] ],
          [
            "Function",
            [
              "add_hook", "string -> ( Misc.hook_info -> t -> t ) -> unit",
              null
            ]
          ],
          [ "Function", [ "apply_hooks", "Misc.hook_info -> t -> t", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Uchar",
    "module_info": "\n<p>Unicode characters.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type for Unicode characters.</p>\n\n<p>A value of this type represents a Unicode\n    <a href=\"http://unicode.org/glossary/#unicode_scalar_value\">scalar\n    value</a> which is an integer in the ranges <code class=\"code\">0x0000</code>...<code class=\"code\">0xD7FF</code> or\n    <code class=\"code\">0xE000</code>...<code class=\"code\">0x10FFFF</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "min", "t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">min</code> is U+0000.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "max", "t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">max</code> is U+10FFFF.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "bom", "t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">bom</code> is U+FEFF, the\n    <a href=\"http://unicode.org/glossary/#byte_order_mark\">byte order mark</a> (BOM)\n    character.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rep", "t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rep</code> is U+FFFD, the\n    <a href=\"http://unicode.org/glossary/#replacement_character\">replacement</a>\n    character.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "succ", "t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">succ&nbsp;u</code> is the scalar value after <code class=\"code\">u</code> in the set of Unicode scalar\n    values.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">u</code> is <a href=\"Uchar.html#VALmax\"><code class=\"code\"><span class=\"constructor\">Uchar</span>.max</code></a>.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "pred", "t -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">pred&nbsp;u</code> is the scalar value before <code class=\"code\">u</code> in the set of Unicode scalar\n    values.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">u</code> is <a href=\"Uchar.html#VALmin\"><code class=\"code\"><span class=\"constructor\">Uchar</span>.min</code></a>.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "is_valid", "int -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">is_valid&nbsp;n</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">n</code> is a Unicode scalar value\n    (i.e. in the ranges <code class=\"code\">0x0000</code>...<code class=\"code\">0xD7FF</code> or <code class=\"code\">0xE000</code>...<code class=\"code\">0x10FFFF</code>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_int", "int -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">of_int&nbsp;i</code> is <code class=\"code\">i</code> as a Unicode character.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">i</code> does not satisfy <a href=\"Uchar.html#VALis_valid\"><code class=\"code\"><span class=\"constructor\">Uchar</span>.is_valid</code></a>.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "to_int", "t -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">to_int&nbsp;u</code> is <code class=\"code\">u</code> as an integer.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "is_char", "t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">is_char&nbsp;u</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">u</code> is a latin1 OCaml character.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "of_char", "char -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">of_char&nbsp;c</code> is <code class=\"code\">c</code> as a Unicode character.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "to_char", "t -> char",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">to_char&nbsp;u</code> is <code class=\"code\">u</code> as an OCaml latin1 character.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Invalid_argument</code> if <code class=\"code\">u</code> does not satisfy <a href=\"Uchar.html#VALis_char\"><code class=\"code\"><span class=\"constructor\">Uchar</span>.is_char</code></a>.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "equal", "t -> t -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">equal&nbsp;u&nbsp;u'</code> is <code class=\"code\">u&nbsp;=&nbsp;u'</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "compare", "t -> t -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">compare&nbsp;u&nbsp;u'</code> is <code class=\"code\"><span class=\"constructor\">Pervasives</span>.compare&nbsp;u&nbsp;u'</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "hash", "t -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">hash&nbsp;u</code> associates a non-negative integer to <code class=\"code\">u</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Unix",
    "module_info":
      "\n<p>Interface to the Unix system.</p>\n\n<p>Note: all the functions of this module (except <a href=\"Unix.html#VALerror_message\"><code class=\"code\"><span class=\"constructor\">Unix</span>.error_message</code></a> and\n    <a href=\"Unix.html#VALhandle_unix_error\"><code class=\"code\"><span class=\"constructor\">Unix</span>.handle_unix_error</code></a>) are liable to raise the <a href=\"Unix.html#EXCEPTIONUnix_error\"><code class=\"code\"><span class=\"constructor\">Unix</span>.<span class=\"constructor\">Unix_error</span></code></a>\n    exception whenever the underlying system call signals an error.</p>\n",
    "sections": [
      {
        "section_name": "Error report",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "error", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.E2BIG\"><span class=\"constructor\">E2BIG</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Argument list too long</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EACCES\"><span class=\"constructor\">EACCES</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Permission denied</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EAGAIN\"><span class=\"constructor\">EAGAIN</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Resource temporarily unavailable; try again</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EBADF\"><span class=\"constructor\">EBADF</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Bad file descriptor</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EBUSY\"><span class=\"constructor\">EBUSY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Resource unavailable</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ECHILD\"><span class=\"constructor\">ECHILD</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No child process</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EDEADLK\"><span class=\"constructor\">EDEADLK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Resource deadlock would occur</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EDOM\"><span class=\"constructor\">EDOM</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Domain error for math functions, etc.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EEXIST\"><span class=\"constructor\">EEXIST</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>File exists</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EFAULT\"><span class=\"constructor\">EFAULT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Bad address</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EFBIG\"><span class=\"constructor\">EFBIG</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>File too large</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EINTR\"><span class=\"constructor\">EINTR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Function interrupted by signal</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EINVAL\"><span class=\"constructor\">EINVAL</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Invalid argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EIO\"><span class=\"constructor\">EIO</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Hardware I/O error</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EISDIR\"><span class=\"constructor\">EISDIR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Is a directory</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EMFILE\"><span class=\"constructor\">EMFILE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Too many open files by the process</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EMLINK\"><span class=\"constructor\">EMLINK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Too many links</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENAMETOOLONG\"><span class=\"constructor\">ENAMETOOLONG</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Filename too long</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENFILE\"><span class=\"constructor\">ENFILE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Too many open files in the system</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENODEV\"><span class=\"constructor\">ENODEV</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No such device</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOENT\"><span class=\"constructor\">ENOENT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No such file or directory</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOEXEC\"><span class=\"constructor\">ENOEXEC</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Not an executable file</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOLCK\"><span class=\"constructor\">ENOLCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No locks available</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOMEM\"><span class=\"constructor\">ENOMEM</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Not enough memory</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOSPC\"><span class=\"constructor\">ENOSPC</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No space left on device</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOSYS\"><span class=\"constructor\">ENOSYS</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Function not supported</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOTDIR\"><span class=\"constructor\">ENOTDIR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Not a directory</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOTEMPTY\"><span class=\"constructor\">ENOTEMPTY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Directory not empty</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOTTY\"><span class=\"constructor\">ENOTTY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Inappropriate I/O control operation</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENXIO\"><span class=\"constructor\">ENXIO</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No such device or address</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EPERM\"><span class=\"constructor\">EPERM</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Operation not permitted</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EPIPE\"><span class=\"constructor\">EPIPE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Broken pipe</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ERANGE\"><span class=\"constructor\">ERANGE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Result too large</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EROFS\"><span class=\"constructor\">EROFS</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Read-only file system</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ESPIPE\"><span class=\"constructor\">ESPIPE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Invalid seek e.g. on a pipe</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ESRCH\"><span class=\"constructor\">ESRCH</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No such process</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EXDEV\"><span class=\"constructor\">EXDEV</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Invalid link</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EWOULDBLOCK\"><span class=\"constructor\">EWOULDBLOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Operation would block</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EINPROGRESS\"><span class=\"constructor\">EINPROGRESS</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Operation now in progress</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EALREADY\"><span class=\"constructor\">EALREADY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Operation already in progress</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOTSOCK\"><span class=\"constructor\">ENOTSOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Socket operation on non-socket</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EDESTADDRREQ\"><span class=\"constructor\">EDESTADDRREQ</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Destination address required</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EMSGSIZE\"><span class=\"constructor\">EMSGSIZE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Message too long</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EPROTOTYPE\"><span class=\"constructor\">EPROTOTYPE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Protocol wrong type for socket</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOPROTOOPT\"><span class=\"constructor\">ENOPROTOOPT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Protocol not available</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EPROTONOSUPPORT\"><span class=\"constructor\">EPROTONOSUPPORT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Protocol not supported</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ESOCKTNOSUPPORT\"><span class=\"constructor\">ESOCKTNOSUPPORT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Socket type not supported</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EOPNOTSUPP\"><span class=\"constructor\">EOPNOTSUPP</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Operation not supported on socket</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EPFNOSUPPORT\"><span class=\"constructor\">EPFNOSUPPORT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Protocol family not supported</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EAFNOSUPPORT\"><span class=\"constructor\">EAFNOSUPPORT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Address family not supported by protocol family</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EADDRINUSE\"><span class=\"constructor\">EADDRINUSE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Address already in use</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EADDRNOTAVAIL\"><span class=\"constructor\">EADDRNOTAVAIL</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Can't assign requested address</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENETDOWN\"><span class=\"constructor\">ENETDOWN</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Network is down</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENETUNREACH\"><span class=\"constructor\">ENETUNREACH</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Network is unreachable</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENETRESET\"><span class=\"constructor\">ENETRESET</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Network dropped connection on reset</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ECONNABORTED\"><span class=\"constructor\">ECONNABORTED</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Software caused connection abort</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ECONNRESET\"><span class=\"constructor\">ECONNRESET</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Connection reset by peer</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOBUFS\"><span class=\"constructor\">ENOBUFS</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No buffer space available</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EISCONN\"><span class=\"constructor\">EISCONN</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Socket is already connected</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOTCONN\"><span class=\"constructor\">ENOTCONN</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Socket is not connected</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ESHUTDOWN\"><span class=\"constructor\">ESHUTDOWN</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Can't send after socket shutdown</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ETOOMANYREFS\"><span class=\"constructor\">ETOOMANYREFS</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Too many references: can't splice</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ETIMEDOUT\"><span class=\"constructor\">ETIMEDOUT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Connection timed out</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ECONNREFUSED\"><span class=\"constructor\">ECONNREFUSED</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Connection refused</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EHOSTDOWN\"><span class=\"constructor\">EHOSTDOWN</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Host is down</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EHOSTUNREACH\"><span class=\"constructor\">EHOSTUNREACH</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No route to host</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ELOOP\"><span class=\"constructor\">ELOOP</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Too many levels of symbolic links</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EOVERFLOW\"><span class=\"constructor\">EOVERFLOW</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>File size or position not representable</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EUNKNOWNERR\"><span class=\"constructor\">EUNKNOWNERR</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Unknown error</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The type of error codes.\n   Errors defined in the POSIX standard\n   and additional errors from UNIX98 and BSD.\n   All other errors are mapped to EUNKNOWNERR.</p>\n</div>\n"
            ]
          ],
          [
            "Exception",
            [
              "Unix_error", "error",
              "\n<div class=\"info-desc\">\n<p>Raised by the system calls below when an error is encountered.\n   The first component is the error code; the second component\n   is the function name; the third component is the string parameter\n   to the function, if it has one, or the empty string otherwise.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "error_message", "error -> string",
              "\n<div class=\"info-desc\">\n<p>Return a string describing the given error code.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "handle_unix_error", "('a -> 'b) -> 'a -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">handle_unix_error&nbsp;f&nbsp;x</code> applies <code class=\"code\">f</code> to <code class=\"code\">x</code> and returns the result.\n   If the exception <a href=\"Unix.html#EXCEPTIONUnix_error\"><code class=\"code\"><span class=\"constructor\">Unix</span>.<span class=\"constructor\">Unix_error</span></code></a> is raised, it prints a message\n   describing the error and exits with code 2.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Access to the process environment",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "environment", "unit -> string array",
              "\n<div class=\"info-desc\">\n<p>Return the process environment, as an array of strings\n    with the format ``variable=value''.  The returned array\n    is empty if the process has special privileges.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unsafe_environment", "unit -> string array",
              "\n<div class=\"info-desc\">\n<p>Return the process environment, as an array of strings with the\n    format ``variable=value''.  Unlike <a href=\"Unix.html#VALenvironment\"><code class=\"code\"><span class=\"constructor\">Unix</span>.environment</code></a>, this function\n    returns a populated array even if the process has special\n    privileges.  See the documentation for <a href=\"Unix.html#VALunsafe_getenv\"><code class=\"code\"><span class=\"constructor\">Unix</span>.unsafe_getenv</code></a> for more\n    details.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "getenv", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return the value associated to a variable in the process\n   environment, unless the process has special privileges.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Not_found</code> if the variable is unbound or the process has\n   special privileges.\n\n   (This function is identical to <a href=\"Sys.html#VALgetenv\"><code class=\"code\"><span class=\"constructor\">Sys</span>.getenv</code></a>.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "unsafe_getenv", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return the value associated to a variable in the process\n   environment.</p>\n\n<p>Unlike <a href=\"Unix.html#VALgetenv\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getenv</code></a>, this function returns the value even if the\n   process has special privileges. It is considered unsafe because the\n   programmer of a setuid or setgid program must be careful to avoid\n   using maliciously crafted environment variables in the search path\n   for executables, the locations for temporary files or logs, and the\n   like.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n<li><b>Raises</b> <code>Not_found</code> if the variable is unbound.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "putenv", "string -> string -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Unix</span>.putenv&nbsp;name&nbsp;value</code> sets the value associated to a\n   variable in the process environment.\n   <code class=\"code\">name</code> is the name of the environment variable,\n   and <code class=\"code\">value</code> its new associated value.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Process handling",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "process_status", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprocess_status.WEXITED\"><span class=\"constructor\">WEXITED</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The process terminated normally by <code class=\"code\">exit</code>;\n           the argument is the return code.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprocess_status.WSIGNALED\"><span class=\"constructor\">WSIGNALED</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The process was killed by a signal;\n           the argument is the signal number.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprocess_status.WSTOPPED\"><span class=\"constructor\">WSTOPPED</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The process was stopped by a signal; the argument is the\n           signal number.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The termination status of a process.  See module <a href=\"Sys.html\"><code class=\"code\"><span class=\"constructor\">Sys</span></code></a> for the\n    definitions of the standard signal numbers.  Note that they are\n    not the numbers used by the OS.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "wait_flag", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTwait_flag.WNOHANG\"><span class=\"constructor\">WNOHANG</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Do not block if no child has\n               died yet, but immediately return with a pid equal to 0.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTwait_flag.WUNTRACED\"><span class=\"constructor\">WUNTRACED</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Report also the children that receive stop signals.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Flags for <a href=\"Unix.html#VALwaitpid\"><code class=\"code\"><span class=\"constructor\">Unix</span>.waitpid</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "execv", "string -> string array -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">execv&nbsp;prog&nbsp;args</code> execute the program in file <code class=\"code\">prog</code>, with\n   the arguments <code class=\"code\">args</code>, and the current process environment.\n   These <code class=\"code\">execv*</code> functions never return: on success, the current\n   program is replaced by the new one.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Unix.Unix_error</code> on failure.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "execve", "string -> string array -> string array -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALexecv\"><code class=\"code\"><span class=\"constructor\">Unix</span>.execv</code></a>, except that the third argument provides the\n   environment to the program executed.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "execvp", "string -> string array -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALexecv\"><code class=\"code\"><span class=\"constructor\">Unix</span>.execv</code></a>, except that\n   the program is searched in the path.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "execvpe", "string -> string array -> string array -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALexecve\"><code class=\"code\"><span class=\"constructor\">Unix</span>.execve</code></a>, except that\n   the program is searched in the path.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fork", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Fork a new process. The returned integer is 0 for the child\n   process, the pid of the child process for the parent process.</p>\n\n<p>On Windows: not implemented, use <a href=\"Unix.html#VALcreate_process\"><code class=\"code\"><span class=\"constructor\">Unix</span>.create_process</code></a> or threads.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "wait", "unit -> int * process_status",
              "\n<div class=\"info-desc\">\n<p>Wait until one of the children processes die, and return its pid\n   and termination status.</p>\n\n<p>On Windows: Not implemented, use <a href=\"Unix.html#VALwaitpid\"><code class=\"code\"><span class=\"constructor\">Unix</span>.waitpid</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "waitpid", "wait_flag list -> int -> int * process_status",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALwait\"><code class=\"code\"><span class=\"constructor\">Unix</span>.wait</code></a>, but waits for the child process whose pid is given.\n   A pid of <code class=\"code\">-1</code> means wait for any child.\n   A pid of <code class=\"code\">0</code> means wait for any child in the same process group\n   as the current process.\n   Negative pid arguments represent process groups.\n   The list of options indicates whether <code class=\"code\">waitpid</code> should return\n   immediately without waiting, and whether it should report stopped\n   children.</p>\n\n<p>On Windows, this function can only wait for a given PID, not any\n   child process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "system", "string -> process_status",
              "\n<div class=\"info-desc\">\n<p>Execute the given command, wait until it terminates, and return\n   its termination status. The string is interpreted by the shell\n   <code class=\"code\">/bin/sh</code> (or the command interpreter <code class=\"code\">cmd.exe</code> on Windows) and\n   therefore can contain redirections, quotes, variables, etc. The\n   result <code class=\"code\"><span class=\"constructor\">WEXITED</span>&nbsp;127</code> indicates that the shell couldn't be\n   executed.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getpid", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the pid of the process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getppid", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the pid of the parent process.\n   On Windows: not implemented (because it is meaningless).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "nice", "int -> int",
              "\n<div class=\"info-desc\">\n<p>Change the process priority. The integer argument is added to the\n   ``nice'' value. (Higher values of the ``nice'' value mean\n   lower priorities.) Return the new nice value.</p>\n\n<p>On Windows: not implemented.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Basic file input/output",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "file_descr", null, null,
              "\n<div class=\"info-desc\">\n<p>The abstract type of file descriptors.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stdin", "file_descr",
              "\n<div class=\"info-desc\">\n<p>File descriptor for standard input.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stdout", "file_descr",
              "\n<div class=\"info-desc\">\n<p>File descriptor for standard output.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stderr", "file_descr",
              "\n<div class=\"info-desc\">\n<p>File descriptor for standard error.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "open_flag", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_RDONLY\"><span class=\"constructor\">O_RDONLY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Open for reading</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_WRONLY\"><span class=\"constructor\">O_WRONLY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Open for writing</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_RDWR\"><span class=\"constructor\">O_RDWR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Open for reading and writing</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_NONBLOCK\"><span class=\"constructor\">O_NONBLOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Open in non-blocking mode</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_APPEND\"><span class=\"constructor\">O_APPEND</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Open for append</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_CREAT\"><span class=\"constructor\">O_CREAT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Create if nonexistent</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_TRUNC\"><span class=\"constructor\">O_TRUNC</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Truncate to 0 length if existing</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_EXCL\"><span class=\"constructor\">O_EXCL</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Fail if existing</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_NOCTTY\"><span class=\"constructor\">O_NOCTTY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Don't make this dev a controlling tty</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_DSYNC\"><span class=\"constructor\">O_DSYNC</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Writes complete as `Synchronised I/O data\n                                   integrity completion'</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_SYNC\"><span class=\"constructor\">O_SYNC</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Writes complete as `Synchronised I/O file\n                                   integrity completion'</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_RSYNC\"><span class=\"constructor\">O_RSYNC</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Reads complete as writes (depending on\n                                   O_SYNC/O_DSYNC)</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_SHARE_DELETE\"><span class=\"constructor\">O_SHARE_DELETE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Windows only: allow the file to be deleted\n                                   while still open</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_CLOEXEC\"><span class=\"constructor\">O_CLOEXEC</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Set the close-on-exec flag on the\n                                   descriptor returned by <a href=\"Unix.html#VALopenfile\"><code class=\"code\"><span class=\"constructor\">Unix</span>.openfile</code></a>.\n                                   See <a href=\"Unix.html#VALset_close_on_exec\"><code class=\"code\"><span class=\"constructor\">Unix</span>.set_close_on_exec</code></a> for more\n                                   information.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_KEEPEXEC\"><span class=\"constructor\">O_KEEPEXEC</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Clear the close-on-exec flag.\n                                    This is currently the default.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The flags to <a href=\"Unix.html#VALopenfile\"><code class=\"code\"><span class=\"constructor\">Unix</span>.openfile</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "file_perm", "= int", null,
              "\n<div class=\"info-desc\">\n<p>The type of file access rights, e.g. <code class=\"code\">0o640</code> is read and write for user,\n    read for group, none for others</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "openfile",
              "string -> open_flag list -> file_perm -> file_descr",
              "\n<div class=\"info-desc\">\n<p>Open the named file with the given flags. Third argument is the\n   permissions to give to the file if it is created (see\n   <a href=\"Unix.html#VALumask\"><code class=\"code\"><span class=\"constructor\">Unix</span>.umask</code></a>). Return a file descriptor on the named file.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "close", "file_descr -> unit",
              "\n<div class=\"info-desc\">\n<p>Close a file descriptor.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "read", "file_descr -> bytes -> int -> int -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">read&nbsp;fd&nbsp;buff&nbsp;ofs&nbsp;len</code> reads <code class=\"code\">len</code> bytes from descriptor <code class=\"code\">fd</code>,\n    storing them in byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code> in\n    <code class=\"code\">buff</code>. Return the number of bytes actually read.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "write", "file_descr -> bytes -> int -> int -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">write&nbsp;fd&nbsp;buff&nbsp;ofs&nbsp;len</code> writes <code class=\"code\">len</code> bytes to descriptor <code class=\"code\">fd</code>,\n    taking them from byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code>\n    in <code class=\"code\">buff</code>. Return the number of bytes actually written.  <code class=\"code\">write</code>\n    repeats the writing operation until all bytes have been written or\n    an error occurs.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "single_write", "file_descr -> bytes -> int -> int -> int",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">write</code>, but attempts to write only once.\n   Thus, if an error occurs, <code class=\"code\">single_write</code> guarantees that no data\n   has been written.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "write_substring", "file_descr -> string -> int -> int -> int",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">write</code>, but take the data from a string instead of a byte\n    sequence.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "single_write_substring",
              "file_descr -> string -> int -> int -> int",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">single_write</code>, but take the data from a string instead of\n    a byte sequence.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Interfacing with the standard input/output library",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "in_channel_of_descr", "file_descr -> in_channel",
              "\n<div class=\"info-desc\">\n<p>Create an input channel reading from the given descriptor.\n   The channel is initially in binary mode; use\n   <code class=\"code\">set_binary_mode_in&nbsp;ic&nbsp;<span class=\"keyword\">false</span></code> if text mode is desired.\n   Text mode is supported only if the descriptor refers to a file\n   or pipe, but is not supported if it refers to a socket.\n   On Windows, <code class=\"code\">set_binary_mode_in</code> always fails on channels created\n   with this function.</p>\n\n<p>Beware that channels are buffered so more characters may have been\n   read from the file descriptor than those accessed using channel functions.\n   Channels also keep a copy of the current position in the file.</p>\n\n<p>You need to explicitly close all channels created with this function.\n   Closing the channel also closes the underlying file descriptor (unless\n   it was already closed).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "out_channel_of_descr", "file_descr -> out_channel",
              "\n<div class=\"info-desc\">\n<p>Create an output channel writing on the given descriptor.\n   The channel is initially in binary mode; use\n   <code class=\"code\">set_binary_mode_out&nbsp;oc&nbsp;<span class=\"keyword\">false</span></code> if text mode is desired.\n   Text mode is supported only if the descriptor refers to a file\n   or pipe, but is not supported if it refers to a socket.\n   On Windows, <code class=\"code\">set_binary_mode_out</code> always fails on channels created\n   with this function.</p>\n\n<p>Beware that channels are buffered so you may have to <code class=\"code\">flush</code> them\n   to ensure that all data has been sent to the file descriptor.\n   Channels also keep a copy of the current position in the file.</p>\n\n<p>You need to explicitly close all channels created with this function.\n   Closing the channel flushes the data and closes the underlying file\n   descriptor (unless it has already been closed, in which case the\n   buffered data is lost).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "descr_of_in_channel", "in_channel -> file_descr",
              "\n<div class=\"info-desc\">\n<p>Return the descriptor corresponding to an input channel.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "descr_of_out_channel", "out_channel -> file_descr",
              "\n<div class=\"info-desc\">\n<p>Return the descriptor corresponding to an output channel.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Seeking and truncating",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "seek_command", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTseek_command.SEEK_SET\"><span class=\"constructor\">SEEK_SET</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>indicates positions relative to the beginning of the file</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTseek_command.SEEK_CUR\"><span class=\"constructor\">SEEK_CUR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>indicates positions relative to the current position</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTseek_command.SEEK_END\"><span class=\"constructor\">SEEK_END</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>indicates positions relative to the end of the file</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Positioning modes for <a href=\"Unix.html#VALlseek\"><code class=\"code\"><span class=\"constructor\">Unix</span>.lseek</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lseek", "file_descr -> int -> seek_command -> int",
              "\n<div class=\"info-desc\">\n<p>Set the current position for a file descriptor, and return the resulting\n    offset (from the beginning of the file).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "truncate", "string -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Truncates the named file to the given size.</p>\n\n<p>On Windows: not implemented.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "ftruncate", "file_descr -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Truncates the file corresponding to the given descriptor\n   to the given size.</p>\n\n<p>On Windows: not implemented.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "File status",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "file_kind", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfile_kind.S_REG\"><span class=\"constructor\">S_REG</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Regular file</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfile_kind.S_DIR\"><span class=\"constructor\">S_DIR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Directory</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfile_kind.S_CHR\"><span class=\"constructor\">S_CHR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Character device</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfile_kind.S_BLK\"><span class=\"constructor\">S_BLK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Block device</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfile_kind.S_LNK\"><span class=\"constructor\">S_LNK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Symbolic link</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfile_kind.S_FIFO\"><span class=\"constructor\">S_FIFO</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Named pipe</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfile_kind.S_SOCK\"><span class=\"constructor\">S_SOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Socket</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "stats", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_dev\">st_dev</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Device number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_ino\">st_ino</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Inode number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_kind\">st_kind</span>&nbsp;: <code class=\"type\"><a href=\"Unix.html#TYPEfile_kind\">file_kind</a></code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Kind of the file</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_perm\">st_perm</span>&nbsp;: <code class=\"type\"><a href=\"Unix.html#TYPEfile_perm\">file_perm</a></code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Access rights</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_nlink\">st_nlink</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of links</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_uid\">st_uid</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>User id of the owner</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_gid\">st_gid</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Group ID of the file's group</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_rdev\">st_rdev</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Device minor number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_size\">st_size</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Size in bytes</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_atime\">st_atime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Last access time</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_mtime\">st_mtime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Last modification time</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_ctime\">st_ctime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Last status change time</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The information returned by the <a href=\"Unix.html#VALstat\"><code class=\"code\"><span class=\"constructor\">Unix</span>.stat</code></a> calls.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stat", "string -> stats",
              "\n<div class=\"info-desc\">\n<p>Return the information for the named file.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lstat", "string -> stats",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALstat\"><code class=\"code\"><span class=\"constructor\">Unix</span>.stat</code></a>, but in case the file is a symbolic link,\n   return the information for the link itself.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fstat", "file_descr -> stats",
              "\n<div class=\"info-desc\">\n<p>Return the information for the file associated with the given\n   descriptor.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "isatty", "file_descr -> bool",
              "\n<div class=\"info-desc\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given file descriptor refers to a terminal or\n   console window, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "File operations on large files",
        "section_info": null,
        "elements": [
          [
            "Module",
            [ "LargeFile", "\n<p>File operations on large files.</p>\n\n" ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Mapping files into memory",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "map_file",
              "file_descr -> ?pos:int64 -> ('a, 'b) Bigarray.kind -> 'c Bigarray.layout -> bool -> int array -> ('a, 'b, 'c) Bigarray.Genarray.t",
              "\n<div class=\"info-desc\">\n<p>Memory mapping of a file as a big array.\n  <code class=\"code\">map_file&nbsp;fd&nbsp;kind&nbsp;layout&nbsp;shared&nbsp;dims</code>\n  returns a big array of kind <code class=\"code\">kind</code>, layout <code class=\"code\">layout</code>,\n  and dimensions as specified in <code class=\"code\">dims</code>.  The data contained in\n  this big array are the contents of the file referred to by\n  the file descriptor <code class=\"code\">fd</code> (as opened previously with\n  <code class=\"code\"><span class=\"constructor\">Unix</span>.openfile</code>, for example).  The optional <code class=\"code\">pos</code> parameter\n  is the byte offset in the file of the data being mapped;\n  it defaults to 0 (map from the beginning of the file).</p>\n\n<p>If <code class=\"code\">shared</code> is <code class=\"code\"><span class=\"keyword\">true</span></code>, all modifications performed on the array\n  are reflected in the file.  This requires that <code class=\"code\">fd</code> be opened\n  with write permissions.  If <code class=\"code\">shared</code> is <code class=\"code\"><span class=\"keyword\">false</span></code>, modifications\n  performed on the array are done in memory only, using\n  copy-on-write of the modified pages; the underlying file is not\n  affected.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">Genarray</span>.map_file</code> is much more efficient than reading\n  the whole file in a big array, modifying that big array,\n  and writing it afterwards.</p>\n\n<p>To adjust automatically the dimensions of the big array to\n  the actual size of the file, the major dimension (that is,\n  the first dimension for an array with C layout, and the last\n  dimension for an array with Fortran layout) can be given as\n  <code class=\"code\">-1</code>.  <code class=\"code\"><span class=\"constructor\">Genarray</span>.map_file</code> then determines the major dimension\n  from the size of the file.  The file must contain an integral\n  number of sub-arrays as determined by the non-major dimensions,\n  otherwise <code class=\"code\"><span class=\"constructor\">Failure</span></code> is raised.</p>\n\n<p>If all dimensions of the big array are given, the file size is\n  matched against the size of the big array.  If the file is larger\n  than the big array, only the initial portion of the file is\n  mapped to the big array.  If the file is smaller than the big\n  array, the file is automatically grown to the size of the big array.\n  This requires write permissions on <code class=\"code\">fd</code>.</p>\n\n<p>Array accesses are bounds-checked, but the bounds are determined by\n  the initial call to <code class=\"code\">map_file</code>. Therefore, you should make sure no\n  other process modifies the mapped file while you're accessing it,\n  or a SIGBUS signal may be raised. This happens, for instance, if the\n  file is shrunk.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> or <code class=\"code\"><span class=\"constructor\">Failure</span></code> may be raised in cases where argument\n  validation fails.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Operations on file names",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "unlink", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>Removes the named file.</p>\n\n<p>If the named file is a directory, raises:</p>\n<ul>\n<li><code class=\"code\"><span class=\"constructor\">EPERM</span></code> on POSIX compliant system</li>\n<li><code class=\"code\"><span class=\"constructor\">EISDIR</span></code> on Linux &gt;= 2.1.132</li>\n<li><code class=\"code\"><span class=\"constructor\">EACCESS</span></code> on Windows</li>\n</ul>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rename", "string -> string -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rename&nbsp;old&nbsp;<span class=\"keyword\">new</span></code> changes the name of a file from <code class=\"code\">old</code> to <code class=\"code\"><span class=\"keyword\">new</span></code>,\n    moving it between directories if needed.  If <code class=\"code\"><span class=\"keyword\">new</span></code> already\n    exists, its contents will be replaced with those of <code class=\"code\">old</code>.\n    Depending on the operating system, the metadata (permissions,\n    owner, etc) of <code class=\"code\"><span class=\"keyword\">new</span></code> can either be preserved or be replaced by\n    those of <code class=\"code\">old</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "link", "string -> string -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">link&nbsp;source&nbsp;dest</code> creates a hard link named <code class=\"code\">dest</code> to the file\n   named <code class=\"code\">source</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "File permissions and ownership",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "access_permission", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaccess_permission.R_OK\"><span class=\"constructor\">R_OK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Read permission</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaccess_permission.W_OK\"><span class=\"constructor\">W_OK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Write permission</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaccess_permission.X_OK\"><span class=\"constructor\">X_OK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Execution permission</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaccess_permission.F_OK\"><span class=\"constructor\">F_OK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>File exists</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Flags for the <a href=\"Unix.html#VALaccess\"><code class=\"code\"><span class=\"constructor\">Unix</span>.access</code></a> call.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "chmod", "string -> file_perm -> unit",
              "\n<div class=\"info-desc\">\n<p>Change the permissions of the named file.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fchmod", "file_descr -> file_perm -> unit",
              "\n<div class=\"info-desc\">\n<p>Change the permissions of an opened file.\n    On Windows: not implemented.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "chown", "string -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Change the owner uid and owner gid of the named file.\n    On Windows: not implemented (make no sense on a DOS file system).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fchown", "file_descr -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Change the owner uid and owner gid of an opened file.\n    On Windows: not implemented (make no sense on a DOS file system).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "umask", "int -> int",
              "\n<div class=\"info-desc\">\n<p>Set the process's file mode creation mask, and return the previous\n    mask.\n    On Windows: not implemented.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "access", "string -> access_permission list -> unit",
              "\n<div class=\"info-desc\">\n<p>Check that the process has the given permissions over the named file.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Unix_error</code> otherwise.\n\n   On Windows, execute permission <code class=\"code\"><span class=\"constructor\">X_OK</span></code>, cannot be tested, it just\n   tests for read permission instead.</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Operations on file descriptors",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "dup", "?cloexec:bool -> file_descr -> file_descr",
              "\n<div class=\"info-desc\">\n<p>Return a new file descriptor referencing the same file as\n   the given descriptor.\n   See <a href=\"Unix.html#VALset_close_on_exec\"><code class=\"code\"><span class=\"constructor\">Unix</span>.set_close_on_exec</code></a> for documentation on the <code class=\"code\">cloexec</code>\n   optional argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "dup2", "?cloexec:bool -> file_descr -> file_descr -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">dup2&nbsp;fd1&nbsp;fd2</code> duplicates <code class=\"code\">fd1</code> to <code class=\"code\">fd2</code>, closing <code class=\"code\">fd2</code> if already\n   opened.\n   See <a href=\"Unix.html#VALset_close_on_exec\"><code class=\"code\"><span class=\"constructor\">Unix</span>.set_close_on_exec</code></a> for documentation on the <code class=\"code\">cloexec</code>\n   optional argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_nonblock", "file_descr -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the ``non-blocking'' flag on the given descriptor.\n   When the non-blocking flag is set, reading on a descriptor\n   on which there is temporarily no data available raises the\n   <code class=\"code\"><span class=\"constructor\">EAGAIN</span></code> or <code class=\"code\"><span class=\"constructor\">EWOULDBLOCK</span></code> error instead of blocking;\n   writing on a descriptor on which there is temporarily no room\n   for writing also raises <code class=\"code\"><span class=\"constructor\">EAGAIN</span></code> or <code class=\"code\"><span class=\"constructor\">EWOULDBLOCK</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "clear_nonblock", "file_descr -> unit",
              "\n<div class=\"info-desc\">\n<p>Clear the ``non-blocking'' flag on the given descriptor.\n   See <a href=\"Unix.html#VALset_nonblock\"><code class=\"code\"><span class=\"constructor\">Unix</span>.set_nonblock</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_close_on_exec", "file_descr -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the ``close-on-exec'' flag on the given descriptor.\n   A descriptor with the close-on-exec flag is automatically\n   closed when the current process starts another program with\n   one of the <code class=\"code\">exec</code>, <code class=\"code\">create_process</code> and <code class=\"code\">open_process</code> functions.</p>\n\n<p>It is often a security hole to leak file descriptors opened on, say,\n   a private file to an external program: the program, then, gets access\n   to the private file and can do bad things with it.  Hence, it is\n   highly recommended to set all file descriptors ``close-on-exec'',\n   except in the very few cases where a file descriptor actually needs\n   to be transmitted to another program.</p>\n\n<p>The best way to set a file descriptor ``close-on-exec'' is to create\n   it in this state.  To this end, the <code class=\"code\">openfile</code> function has\n   <code class=\"code\"><span class=\"constructor\">O_CLOEXEC</span></code> and <code class=\"code\"><span class=\"constructor\">O_KEEPEXEC</span></code> flags to enforce ``close-on-exec'' mode\n   or ``keep-on-exec'' mode, respectively.  All other operations in\n   the Unix module that create file descriptors have an optional\n   argument <code class=\"code\">?cloexec:bool</code> to indicate whether the file descriptor\n   should be created in ``close-on-exec'' mode (by writing\n   <code class=\"code\">~cloexec:<span class=\"keyword\">true</span></code>) or in ``keep-on-exec'' mode (by writing\n   <code class=\"code\">~cloexec:<span class=\"keyword\">false</span></code>).  For historical reasons, the default file\n   descriptor creation mode is ``keep-on-exec'', if no <code class=\"code\">cloexec</code> optional\n   argument is given.  This is not a safe default, hence it is highly\n   recommended to pass explicit <code class=\"code\">cloexec</code> arguments to operations that\n   create file descriptors.</p>\n\n<p>The <code class=\"code\">cloexec</code> optional arguments and the <code class=\"code\"><span class=\"constructor\">O_KEEPEXEC</span></code> flag were introduced\n   in OCaml 4.05.  Earlier, the common practice was to create file descriptors\n   in the default, ``keep-on-exec'' mode, then call <code class=\"code\">set_close_on_exec</code>\n   on those freshly-created file descriptors.  This is not as safe as\n   creating the file descriptor in ``close-on-exec'' mode because, in\n   multithreaded programs, a window of vulnerability exists between the time\n   when the file descriptor is created and the time <code class=\"code\">set_close_on_exec</code>\n   completes.  If another thread spawns another program during this window,\n   the descriptor will leak, as it is still in the ``keep-on-exec'' mode.</p>\n\n<p>Regarding the atomicity guarantees given by <code class=\"code\">~cloexec:<span class=\"keyword\">true</span></code> or by\n   the use of the <code class=\"code\"><span class=\"constructor\">O_CLOEXEC</span></code> flag: on all platforms it is guaranteed\n   that a concurrently-executing Caml thread cannot leak the descriptor\n   by starting a new process.  On Linux, this guarantee extends to\n   concurrently-executing C threads.  As of Feb 2017, other operating\n   systems lack the necessary system calls and still expose a window\n   of vulnerability during which a C thread can see the newly-created\n   file descriptor in ``keep-on-exec'' mode.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "clear_close_on_exec", "file_descr -> unit",
              "\n<div class=\"info-desc\">\n<p>Clear the ``close-on-exec'' flag on the given descriptor.\n   See <a href=\"Unix.html#VALset_close_on_exec\"><code class=\"code\"><span class=\"constructor\">Unix</span>.set_close_on_exec</code></a>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Directories",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mkdir", "string -> file_perm -> unit",
              "\n<div class=\"info-desc\">\n<p>Create a directory with the given permissions (see <a href=\"Unix.html#VALumask\"><code class=\"code\"><span class=\"constructor\">Unix</span>.umask</code></a>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rmdir", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>Remove an empty directory.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "chdir", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>Change the process working directory.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getcwd", "unit -> string",
              "\n<div class=\"info-desc\">\n<p>Return the name of the current working directory.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "chroot", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>Change the process root directory.\n    On Windows: not implemented.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "dir_handle", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of descriptors over opened directories.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "opendir", "string -> dir_handle",
              "\n<div class=\"info-desc\">\n<p>Open a descriptor on a directory</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "readdir", "dir_handle -> string",
              "\n<div class=\"info-desc\">\n<p>Return the next entry in a directory.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>End_of_file</code> when the end of the directory has been reached.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rewinddir", "dir_handle -> unit",
              "\n<div class=\"info-desc\">\n<p>Reposition the descriptor to the beginning of the directory</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "closedir", "dir_handle -> unit",
              "\n<div class=\"info-desc\">\n<p>Close a directory descriptor.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Pipes and redirections",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "pipe", "?cloexec:bool -> unit -> file_descr * file_descr",
              "\n<div class=\"info-desc\">\n<p>Create a pipe. The first component of the result is opened\n   for reading, that's the exit to the pipe. The second component is\n   opened for writing, that's the entrance to the pipe.\n   See <a href=\"Unix.html#VALset_close_on_exec\"><code class=\"code\"><span class=\"constructor\">Unix</span>.set_close_on_exec</code></a> for documentation on the <code class=\"code\">cloexec</code>\n   optional argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mkfifo", "string -> file_perm -> unit",
              "\n<div class=\"info-desc\">\n<p>Create a named pipe with the given permissions (see <a href=\"Unix.html#VALumask\"><code class=\"code\"><span class=\"constructor\">Unix</span>.umask</code></a>).\n   On Windows: not implemented.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "High-level process and redirection management",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "create_process",
              "string -> string array -> file_descr -> file_descr -> file_descr -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">create_process&nbsp;prog&nbsp;args&nbsp;new_stdin&nbsp;new_stdout&nbsp;new_stderr</code>\n   forks a new process that executes the program\n   in file <code class=\"code\">prog</code>, with arguments <code class=\"code\">args</code>. The pid of the new\n   process is returned immediately; the new process executes\n   concurrently with the current process.\n   The standard input and outputs of the new process are connected\n   to the descriptors <code class=\"code\">new_stdin</code>, <code class=\"code\">new_stdout</code> and <code class=\"code\">new_stderr</code>.\n   Passing e.g. <code class=\"code\">stdout</code> for <code class=\"code\">new_stdout</code> prevents the redirection\n   and causes the new process to have the same standard output\n   as the current process.\n   The executable file <code class=\"code\">prog</code> is searched in the path.\n   The new process has the same environment as the current process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create_process_env",
              "string -> string array -> string array -> file_descr -> file_descr -> file_descr -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">create_process_env&nbsp;prog&nbsp;args&nbsp;env&nbsp;new_stdin&nbsp;new_stdout&nbsp;new_stderr</code>\n   works as <a href=\"Unix.html#VALcreate_process\"><code class=\"code\"><span class=\"constructor\">Unix</span>.create_process</code></a>, except that the extra argument\n   <code class=\"code\">env</code> specifies the environment passed to the program.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "open_process_in", "string -> in_channel",
              "\n<div class=\"info-desc\">\n<p>High-level pipe and process management. This function\n   runs the given command in parallel with the program.\n   The standard output of the command is redirected to a pipe,\n   which can be read via the returned input channel.\n   The command is interpreted by the shell <code class=\"code\">/bin/sh</code>\n   (or <code class=\"code\">cmd.exe</code> on Windows), cf. <code class=\"code\">system</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "open_process_out", "string -> out_channel",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALopen_process_in\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_in</code></a>, but redirect the standard input of\n   the command to a pipe.  Data written to the returned output channel\n   is sent to the standard input of the command.\n   Warning: writes on output channels are buffered, hence be careful\n   to call <a href=\"Pervasives.html#VALflush\"><code class=\"code\">flush</code></a> at the right times to ensure\n   correct synchronization.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "open_process", "string -> in_channel * out_channel",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALopen_process_out\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_out</code></a>, but redirects both the standard input\n   and standard output of the command to pipes connected to the two\n   returned channels.  The input channel is connected to the output\n   of the command, and the output channel to the input of the command.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "open_process_full",
              "string -> string array -> in_channel * out_channel * in_channel",
              "\n<div class=\"info-desc\">\n<p>Similar to <a href=\"Unix.html#VALopen_process\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process</code></a>, but the second argument specifies\n   the environment passed to the command.  The result is a triple\n   of channels connected respectively to the standard output, standard input,\n   and standard error of the command.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "close_process_in", "in_channel -> process_status",
              "\n<div class=\"info-desc\">\n<p>Close channels opened by <a href=\"Unix.html#VALopen_process_in\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_in</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "close_process_out", "out_channel -> process_status",
              "\n<div class=\"info-desc\">\n<p>Close channels opened by <a href=\"Unix.html#VALopen_process_out\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_out</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "close_process", "in_channel * out_channel -> process_status",
              "\n<div class=\"info-desc\">\n<p>Close channels opened by <a href=\"Unix.html#VALopen_process\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "close_process_full",
              "in_channel * out_channel * in_channel -> process_status",
              "\n<div class=\"info-desc\">\n<p>Close channels opened by <a href=\"Unix.html#VALopen_process_full\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_full</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Symbolic links",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "symlink", "?to_dir:bool -> string -> string -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">symlink&nbsp;?to_dir&nbsp;source&nbsp;dest</code> creates the file <code class=\"code\">dest</code> as a symbolic link\n   to the file <code class=\"code\">source</code>. On Windows, <code class=\"code\">~to_dir</code> indicates if the symbolic link\n   points to a directory or a file; if omitted, <code class=\"code\">symlink</code> examines <code class=\"code\">source</code>\n   using <code class=\"code\">stat</code> and picks appropriately, if <code class=\"code\">source</code> does not exist then <code class=\"code\"><span class=\"keyword\">false</span></code>\n   is assumed (for this reason, it is recommended that the <code class=\"code\">~to_dir</code> parameter\n   be specified in new code). On Unix, <code class=\"code\">~to_dir</code> is ignored.</p>\n\n<p>Windows symbolic links are available in Windows Vista onwards. There are some\n   important differences between Windows symlinks and their POSIX counterparts.</p>\n\n<p>Windows symbolic links come in two flavours: directory and regular, which\n   designate whether the symbolic link points to a directory or a file. The type\n   must be correct - a directory symlink which actually points to a file cannot\n   be selected with chdir and a file symlink which actually points to a\n   directory cannot be read or written (note that Cygwin's emulation layer\n   ignores this distinction).</p>\n\n<p>When symbolic links are created to existing targets, this distinction doesn't\n   matter and <code class=\"code\">symlink</code> will automatically create the correct kind of symbolic\n   link. The distinction matters when a symbolic link is created to a\n   non-existent target.</p>\n\n<p>The other caveat is that by default symbolic links are a privileged\n   operation. Administrators will always need to be running elevated (or with\n   UAC disabled) and by default normal user accounts need to be granted the\n   SeCreateSymbolicLinkPrivilege via Local Security Policy (secpol.msc) or via\n   Active Directory.</p>\n\n<p><a href=\"Unix.html#VALhas_symlink\"><code class=\"code\"><span class=\"constructor\">Unix</span>.has_symlink</code></a> can be used to check that a process is able to create symbolic\n   links.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "has_symlink", "unit -> bool",
              "\n<div class=\"info-desc\">\n<p>Returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the user is able to create symbolic links. On Windows,\n   this indicates that the user not only has the SeCreateSymbolicLinkPrivilege\n   but is also running elevated, if necessary. On other platforms, this is\n   simply indicates that the symlink system call is available.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "readlink", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Read the contents of a symbolic link.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Polling",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "select",
              "file_descr list -> file_descr list -> file_descr list -> float -> file_descr list * file_descr list * file_descr list",
              "\n<div class=\"info-desc\">\n<p>Wait until some input/output operations become possible on\n   some channels. The three list arguments are, respectively, a set\n   of descriptors to check for reading (first argument), for writing\n   (second argument), or for exceptional conditions (third argument).\n   The fourth argument is the maximal timeout, in seconds; a\n   negative fourth argument means no timeout (unbounded wait).\n   The result is composed of three sets of descriptors: those ready\n   for reading (first component), ready for writing (second component),\n   and over which an exceptional condition is pending (third\n   component).</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Locking",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "lock_command", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlock_command.F_ULOCK\"><span class=\"constructor\">F_ULOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Unlock a region</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlock_command.F_LOCK\"><span class=\"constructor\">F_LOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Lock a region for writing, and block if already locked</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlock_command.F_TLOCK\"><span class=\"constructor\">F_TLOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Lock a region for writing, or fail if already locked</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlock_command.F_TEST\"><span class=\"constructor\">F_TEST</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Test a region for other process locks</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlock_command.F_RLOCK\"><span class=\"constructor\">F_RLOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Lock a region for reading, and block if already locked</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlock_command.F_TRLOCK\"><span class=\"constructor\">F_TRLOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Lock a region for reading, or fail if already locked</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Commands for <a href=\"Unix.html#VALlockf\"><code class=\"code\"><span class=\"constructor\">Unix</span>.lockf</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lockf", "file_descr -> lock_command -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">lockf&nbsp;fd&nbsp;cmd&nbsp;size</code> puts a lock on a region of the file opened\n   as <code class=\"code\">fd</code>. The region starts at the current read/write position for\n   <code class=\"code\">fd</code> (as set by <a href=\"Unix.html#VALlseek\"><code class=\"code\"><span class=\"constructor\">Unix</span>.lseek</code></a>), and extends <code class=\"code\">size</code> bytes forward if\n   <code class=\"code\">size</code> is positive, <code class=\"code\">size</code> bytes backwards if <code class=\"code\">size</code> is negative,\n   or to the end of the file if <code class=\"code\">size</code> is zero.\n   A write lock prevents any other\n   process from acquiring a read or write lock on the region.\n   A read lock prevents any other\n   process from acquiring a write lock on the region, but lets\n   other processes acquire read locks on it.</p>\n\n<p>The <code class=\"code\"><span class=\"constructor\">F_LOCK</span></code> and <code class=\"code\"><span class=\"constructor\">F_TLOCK</span></code> commands attempts to put a write lock\n   on the specified region.\n   The <code class=\"code\"><span class=\"constructor\">F_RLOCK</span></code> and <code class=\"code\"><span class=\"constructor\">F_TRLOCK</span></code> commands attempts to put a read lock\n   on the specified region.\n   If one or several locks put by another process prevent the current process\n   from acquiring the lock, <code class=\"code\"><span class=\"constructor\">F_LOCK</span></code> and <code class=\"code\"><span class=\"constructor\">F_RLOCK</span></code> block until these locks\n   are removed, while <code class=\"code\"><span class=\"constructor\">F_TLOCK</span></code> and <code class=\"code\"><span class=\"constructor\">F_TRLOCK</span></code> fail immediately with an\n   exception.\n   The <code class=\"code\"><span class=\"constructor\">F_ULOCK</span></code> removes whatever locks the current process has on\n   the specified region.\n   Finally, the <code class=\"code\"><span class=\"constructor\">F_TEST</span></code> command tests whether a write lock can be\n   acquired on the specified region, without actually putting a lock.\n   It returns immediately if successful, or fails otherwise.</p>\n\n<p>What happens when a process tries to lock a region of a file that is\n   already locked by the same process depends on the OS.  On POSIX-compliant\n   systems, the second lock operation succeeds and may \"promote\" the older\n   lock from read lock to write lock.  On Windows, the second lock\n   operation will block or fail.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Signals",
        "section_info":
          "<p>Note: installation of signal handlers is performed via\n   the functions <a href=\"Sys.html#VALsignal\"><code class=\"code\"><span class=\"constructor\">Sys</span>.signal</code></a> and <a href=\"Sys.html#VALset_signal\"><code class=\"code\"><span class=\"constructor\">Sys</span>.set_signal</code></a>.</p>",
        "elements": [
          [
            "Function",
            [
              "kill", "int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">kill&nbsp;pid&nbsp;<span class=\"keyword\">sig</span></code> sends signal number <code class=\"code\"><span class=\"keyword\">sig</span></code> to the process\n   with id <code class=\"code\">pid</code>.  On Windows, only the <a href=\"Sys.html#VALsigkill\"><code class=\"code\"><span class=\"constructor\">Sys</span>.sigkill</code></a> signal\n   is emulated.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "sigprocmask_command", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsigprocmask_command.SIG_SETMASK\"><span class=\"constructor\">SIG_SETMASK</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsigprocmask_command.SIG_BLOCK\"><span class=\"constructor\">SIG_BLOCK</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsigprocmask_command.SIG_UNBLOCK\"><span class=\"constructor\">SIG_UNBLOCK</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "sigprocmask", "sigprocmask_command -> int list -> int list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">sigprocmask&nbsp;cmd&nbsp;sigs</code> changes the set of blocked signals.\n   If <code class=\"code\">cmd</code> is <code class=\"code\"><span class=\"constructor\">SIG_SETMASK</span></code>, blocked signals are set to those in\n   the list <code class=\"code\">sigs</code>.\n   If <code class=\"code\">cmd</code> is <code class=\"code\"><span class=\"constructor\">SIG_BLOCK</span></code>, the signals in <code class=\"code\">sigs</code> are added to\n   the set of blocked signals.\n   If <code class=\"code\">cmd</code> is <code class=\"code\"><span class=\"constructor\">SIG_UNBLOCK</span></code>, the signals in <code class=\"code\">sigs</code> are removed\n   from the set of blocked signals.\n   <code class=\"code\">sigprocmask</code> returns the set of previously blocked signals.</p>\n\n<p>On Windows: not implemented (no inter-process signals on Windows).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sigpending", "unit -> int list",
              "\n<div class=\"info-desc\">\n<p>Return the set of blocked signals that are currently pending.</p>\n\n<p>On Windows: not implemented (no inter-process signals on Windows).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sigsuspend", "int list -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">sigsuspend&nbsp;sigs</code> atomically sets the blocked signals to <code class=\"code\">sigs</code>\n   and waits for a non-ignored, non-blocked signal to be delivered.\n   On return, the blocked signals are reset to their initial value.</p>\n\n<p>On Windows: not implemented (no inter-process signals on Windows).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pause", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Wait until a non-ignored, non-blocked signal is delivered.</p>\n\n<p>On Windows: not implemented (no inter-process signals on Windows).</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Time functions",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "process_times", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprocess_times.tms_utime\">tms_utime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>User time for the process</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprocess_times.tms_stime\">tms_stime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>System time for the process</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprocess_times.tms_cutime\">tms_cutime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>User time for the children processes</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprocess_times.tms_cstime\">tms_cstime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>System time for the children processes</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The execution times (CPU times) of a process.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "tm", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_sec\">tm_sec</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Seconds 0..60</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_min\">tm_min</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Minutes 0..59</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_hour\">tm_hour</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Hours 0..23</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_mday\">tm_mday</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Day of month 1..31</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_mon\">tm_mon</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Month of year 0..11</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_year\">tm_year</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Year - 1900</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_wday\">tm_wday</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Day of week (Sunday is 0)</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_yday\">tm_yday</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Day of year 0..365</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_isdst\">tm_isdst</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Daylight time savings in effect</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The type representing wallclock time and calendar date.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "time", "unit -> float",
              "\n<div class=\"info-desc\">\n<p>Return the current time since 00:00:00 GMT, Jan. 1, 1970,\n   in seconds.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "gettimeofday", "unit -> float",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALtime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.time</code></a>, but with resolution better than 1 second.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "gmtime", "float -> tm",
              "\n<div class=\"info-desc\">\n<p>Convert a time in seconds, as returned by <a href=\"Unix.html#VALtime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.time</code></a>, into a date and\n   a time. Assumes UTC (Coordinated Universal Time), also known as GMT.\n   To perform the inverse conversion, set the TZ environment variable\n   to \"UTC\", use <a href=\"Unix.html#VALmktime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.mktime</code></a>, and then restore the original value of TZ.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "localtime", "float -> tm",
              "\n<div class=\"info-desc\">\n<p>Convert a time in seconds, as returned by <a href=\"Unix.html#VALtime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.time</code></a>, into a date and\n   a time. Assumes the local time zone.\n   The function performing the inverse conversion is <a href=\"Unix.html#VALmktime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.mktime</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mktime", "tm -> float * tm",
              "\n<div class=\"info-desc\">\n<p>Convert a date and time, specified by the <code class=\"code\">tm</code> argument, into\n   a time in seconds, as returned by <a href=\"Unix.html#VALtime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.time</code></a>.  The <code class=\"code\">tm_isdst</code>,\n   <code class=\"code\">tm_wday</code> and <code class=\"code\">tm_yday</code> fields of <code class=\"code\">tm</code> are ignored.  Also return a\n   normalized copy of the given <code class=\"code\">tm</code> record, with the <code class=\"code\">tm_wday</code>,\n   <code class=\"code\">tm_yday</code>, and <code class=\"code\">tm_isdst</code> fields recomputed from the other fields,\n   and the other fields normalized (so that, e.g., 40 October is\n   changed into 9 November).  The <code class=\"code\">tm</code> argument is interpreted in the\n   local time zone.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "alarm", "int -> int",
              "\n<div class=\"info-desc\">\n<p>Schedule a <code class=\"code\"><span class=\"constructor\">SIGALRM</span></code> signal after the given number of seconds.</p>\n\n<p>On Windows: not implemented.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sleep", "int -> unit",
              "\n<div class=\"info-desc\">\n<p>Stop execution for the given number of seconds.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sleepf", "float -> unit",
              "\n<div class=\"info-desc\">\n<p>Stop execution for the given number of seconds.  Like <code class=\"code\">sleep</code>,\n    but fractions of seconds are supported.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "times", "unit -> process_times",
              "\n<div class=\"info-desc\">\n<p>Return the execution times of the process.\n   On Windows, it is partially implemented, will not report timings\n   for child processes.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "utimes", "string -> float -> float -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the last access time (second arg) and last modification time\n   (third arg) for a file. Times are expressed in seconds from\n   00:00:00 GMT, Jan. 1, 1970.  If both times are <code class=\"code\">0.0</code>, the access\n   and last modification times are both set to the current time.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "interval_timer", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinterval_timer.ITIMER_REAL\"><span class=\"constructor\">ITIMER_REAL</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>decrements in real time, and sends the signal <code class=\"code\"><span class=\"constructor\">SIGALRM</span></code> when\n         expired.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinterval_timer.ITIMER_VIRTUAL\"><span class=\"constructor\">ITIMER_VIRTUAL</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>decrements in process virtual time, and sends <code class=\"code\"><span class=\"constructor\">SIGVTALRM</span></code>\n          when expired.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinterval_timer.ITIMER_PROF\"><span class=\"constructor\">ITIMER_PROF</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>(for profiling) decrements both when the process\n         is running and when the system is running on behalf of the\n         process; it sends <code class=\"code\"><span class=\"constructor\">SIGPROF</span></code> when expired.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The three kinds of interval timers.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "interval_timer_status", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinterval_timer_status.it_interval\">it_interval</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Period</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinterval_timer_status.it_value\">it_value</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Current value of the timer</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The type describing the status of an interval timer</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getitimer", "interval_timer -> interval_timer_status",
              "\n<div class=\"info-desc\">\n<p>Return the current status of the given interval timer.</p>\n\n<p>On Windows: not implemented.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setitimer",
              "interval_timer -> interval_timer_status -> interval_timer_status",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">setitimer&nbsp;t&nbsp;s</code> sets the interval timer <code class=\"code\">t</code> and returns\n   its previous status. The <code class=\"code\">s</code> argument is interpreted as follows:\n   <code class=\"code\">s.it_value</code>, if nonzero, is the time to the next timer expiration;\n   <code class=\"code\">s.it_interval</code>, if nonzero, specifies a value to\n   be used in reloading <code class=\"code\">it_value</code> when the timer expires.\n   Setting <code class=\"code\">s.it_value</code> to zero disables the timer.\n   Setting <code class=\"code\">s.it_interval</code> to zero causes the timer to be disabled\n   after its next expiration.</p>\n\n<p>On Windows: not implemented.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "User id, group id",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "getuid", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the user id of the user executing the process.\n   On Windows, always return <code class=\"code\">1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "geteuid", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the effective user id under which the process runs.\n   On Windows, always return <code class=\"code\">1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setuid", "int -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the real user id and effective user id for the process.\n   On Windows: not implemented.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getgid", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the group id of the user executing the process.\n   On Windows, always return <code class=\"code\">1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getegid", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the effective group id under which the process runs.\n   On Windows, always return <code class=\"code\">1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setgid", "int -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the real group id and effective group id for the process.\n   On Windows: not implemented.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getgroups", "unit -> int array",
              "\n<div class=\"info-desc\">\n<p>Return the list of groups to which the user executing the process\n   belongs.\n   On Windows, always return <code class=\"code\">[|1|]</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setgroups", "int array -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">setgroups&nbsp;groups</code> sets the supplementary group IDs for the\n    calling process. Appropriate privileges are required.\n    On Windows: not implemented.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "initgroups", "string -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">initgroups&nbsp;user&nbsp;group</code> initializes the group access list by\n    reading the group database /etc/group and using all groups of\n    which <code class=\"code\">user</code> is a member. The additional group <code class=\"code\">group</code> is also\n    added to the list.\n    On Windows: not implemented.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "passwd_entry", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpasswd_entry.pw_name\">pw_name</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpasswd_entry.pw_passwd\">pw_passwd</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpasswd_entry.pw_uid\">pw_uid</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpasswd_entry.pw_gid\">pw_gid</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpasswd_entry.pw_gecos\">pw_gecos</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpasswd_entry.pw_dir\">pw_dir</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpasswd_entry.pw_shell\">pw_shell</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Structure of entries in the <code class=\"code\">passwd</code> database.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "group_entry", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgroup_entry.gr_name\">gr_name</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgroup_entry.gr_passwd\">gr_passwd</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgroup_entry.gr_gid\">gr_gid</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgroup_entry.gr_mem\">gr_mem</span>&nbsp;: <code class=\"type\">string array</code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Structure of entries in the <code class=\"code\">groups</code> database.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getlogin", "unit -> string",
              "\n<div class=\"info-desc\">\n<p>Return the login name of the user executing the process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getpwnam", "string -> passwd_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">passwd</code> with the given name.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Not_found</code> if no such entry exist.\n\n   On Windows, always raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "getgrnam", "string -> group_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">group</code> with the given name.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Not_found</code> if no such entry exist.\n\n   On Windows, always raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "getpwuid", "int -> passwd_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">passwd</code> with the given user id.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Not_found</code> if no such entry exist.\n\n   On Windows, always raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "getgrgid", "int -> group_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">group</code> with the given group id.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Not_found</code> if no such entry exist.\n\n   On Windows, always raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Internet addresses",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "inet_addr", null, null,
              "\n<div class=\"info-desc\">\n<p>The abstract type of Internet addresses.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "inet_addr_of_string", "string -> inet_addr",
              "\n<div class=\"info-desc\">\n<p>Conversion from the printable representation of an Internet\n    address to its internal representation.  The argument string\n    consists of 4 numbers separated by periods (<code class=\"code\"><span class=\"constructor\">XXX</span>.<span class=\"constructor\">YYY</span>.<span class=\"constructor\">ZZZ</span>.<span class=\"constructor\">TTT</span></code>)\n    for IPv4 addresses, and up to 8 numbers separated by colons\n    for IPv6 addresses.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Failure</code> when given a string that does not match these formats.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "string_of_inet_addr", "inet_addr -> string",
              "\n<div class=\"info-desc\">\n<p>Return the printable representation of the given Internet address.\n    See <a href=\"Unix.html#VALinet_addr_of_string\"><code class=\"code\"><span class=\"constructor\">Unix</span>.inet_addr_of_string</code></a> for a description of the\n    printable representation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "inet_addr_any", "inet_addr",
              "\n<div class=\"info-desc\">\n<p>A special IPv4 address, for use only with <code class=\"code\">bind</code>, representing\n   all the Internet addresses that the host machine possesses.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "inet_addr_loopback", "inet_addr",
              "\n<div class=\"info-desc\">\n<p>A special IPv4 address representing the host machine (<code class=\"code\">127.0.0.1</code>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "inet6_addr_any", "inet_addr",
              "\n<div class=\"info-desc\">\n<p>A special IPv6 address, for use only with <code class=\"code\">bind</code>, representing\n   all the Internet addresses that the host machine possesses.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "inet6_addr_loopback", "inet_addr",
              "\n<div class=\"info-desc\">\n<p>A special IPv6 address representing the host machine (<code class=\"code\">::1</code>).</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Sockets",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "socket_domain", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_domain.PF_UNIX\"><span class=\"constructor\">PF_UNIX</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Unix domain</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_domain.PF_INET\"><span class=\"constructor\">PF_INET</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Internet domain (IPv4)</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_domain.PF_INET6\"><span class=\"constructor\">PF_INET6</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Internet domain (IPv6)</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The type of socket domains.  Not all platforms support\n    IPv6 sockets (type <code class=\"code\"><span class=\"constructor\">PF_INET6</span></code>).  Windows does not support\n    <code class=\"code\"><span class=\"constructor\">PF_UNIX</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "socket_type", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_type.SOCK_STREAM\"><span class=\"constructor\">SOCK_STREAM</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Stream socket</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_type.SOCK_DGRAM\"><span class=\"constructor\">SOCK_DGRAM</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Datagram socket</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_type.SOCK_RAW\"><span class=\"constructor\">SOCK_RAW</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Raw socket</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_type.SOCK_SEQPACKET\"><span class=\"constructor\">SOCK_SEQPACKET</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Sequenced packets socket</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The type of socket kinds, specifying the semantics of\n   communications.  <code class=\"code\"><span class=\"constructor\">SOCK_SEQPACKET</span></code> is included for completeness,\n   but is rarely supported by the OS, and needs system calls that\n   are not available in this library.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "sockaddr", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsockaddr.ADDR_UNIX\"><span class=\"constructor\">ADDR_UNIX</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsockaddr.ADDR_INET\"><span class=\"constructor\">ADDR_INET</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Unix.html#TYPEinet_addr\">inet_addr</a> * int</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The type of socket addresses. <code class=\"code\"><span class=\"constructor\">ADDR_UNIX</span>&nbsp;name</code> is a socket\n   address in the Unix domain; <code class=\"code\">name</code> is a file name in the file\n   system. <code class=\"code\"><span class=\"constructor\">ADDR_INET</span>(addr,port)</code> is a socket address in the Internet\n   domain; <code class=\"code\">addr</code> is the Internet address of the machine, and\n   <code class=\"code\">port</code> is the port number.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "socket",
              "?cloexec:bool -> socket_domain -> socket_type -> int -> file_descr",
              "\n<div class=\"info-desc\">\n<p>Create a new socket in the given domain, and with the\n   given kind. The third argument is the protocol type; 0 selects\n   the default protocol for that kind of sockets.\n   See <a href=\"Unix.html#VALset_close_on_exec\"><code class=\"code\"><span class=\"constructor\">Unix</span>.set_close_on_exec</code></a> for documentation on the <code class=\"code\">cloexec</code>\n   optional argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "domain_of_sockaddr", "sockaddr -> socket_domain",
              "\n<div class=\"info-desc\">\n<p>Return the socket domain adequate for the given socket address.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "socketpair",
              "?cloexec:bool -> socket_domain -> socket_type -> int -> file_descr * file_descr",
              "\n<div class=\"info-desc\">\n<p>Create a pair of unnamed sockets, connected together.\n   See <a href=\"Unix.html#VALset_close_on_exec\"><code class=\"code\"><span class=\"constructor\">Unix</span>.set_close_on_exec</code></a> for documentation on the <code class=\"code\">cloexec</code>\n   optional argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "accept",
              "?cloexec:bool -> file_descr -> file_descr * sockaddr",
              "\n<div class=\"info-desc\">\n<p>Accept connections on the given socket. The returned descriptor\n   is a socket connected to the client; the returned address is\n   the address of the connecting client.\n   See <a href=\"Unix.html#VALset_close_on_exec\"><code class=\"code\"><span class=\"constructor\">Unix</span>.set_close_on_exec</code></a> for documentation on the <code class=\"code\">cloexec</code>\n   optional argument.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "bind", "file_descr -> sockaddr -> unit",
              "\n<div class=\"info-desc\">\n<p>Bind a socket to an address.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "connect", "file_descr -> sockaddr -> unit",
              "\n<div class=\"info-desc\">\n<p>Connect a socket to an address.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "listen", "file_descr -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Set up a socket for receiving connection requests. The integer\n   argument is the maximal number of pending requests.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "shutdown_command", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTshutdown_command.SHUTDOWN_RECEIVE\"><span class=\"constructor\">SHUTDOWN_RECEIVE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Close for receiving</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTshutdown_command.SHUTDOWN_SEND\"><span class=\"constructor\">SHUTDOWN_SEND</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Close for sending</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTshutdown_command.SHUTDOWN_ALL\"><span class=\"constructor\">SHUTDOWN_ALL</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Close both</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The type of commands for <code class=\"code\">shutdown</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "shutdown", "file_descr -> shutdown_command -> unit",
              "\n<div class=\"info-desc\">\n<p>Shutdown a socket connection. <code class=\"code\"><span class=\"constructor\">SHUTDOWN_SEND</span></code> as second argument\n   causes reads on the other end of the connection to return\n   an end-of-file condition.\n   <code class=\"code\"><span class=\"constructor\">SHUTDOWN_RECEIVE</span></code> causes writes on the other end of the connection\n   to return a closed pipe condition (<code class=\"code\"><span class=\"constructor\">SIGPIPE</span></code> signal).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getsockname", "file_descr -> sockaddr",
              "\n<div class=\"info-desc\">\n<p>Return the address of the given socket.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getpeername", "file_descr -> sockaddr",
              "\n<div class=\"info-desc\">\n<p>Return the address of the host connected to the given socket.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "msg_flag", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmsg_flag.MSG_OOB\"><span class=\"constructor\">MSG_OOB</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmsg_flag.MSG_DONTROUTE\"><span class=\"constructor\">MSG_DONTROUTE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmsg_flag.MSG_PEEK\"><span class=\"constructor\">MSG_PEEK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The flags for <a href=\"Unix.html#VALrecv\"><code class=\"code\"><span class=\"constructor\">Unix</span>.recv</code></a>,  <a href=\"Unix.html#VALrecvfrom\"><code class=\"code\"><span class=\"constructor\">Unix</span>.recvfrom</code></a>,\n   <a href=\"Unix.html#VALsend\"><code class=\"code\"><span class=\"constructor\">Unix</span>.send</code></a> and <a href=\"Unix.html#VALsendto\"><code class=\"code\"><span class=\"constructor\">Unix</span>.sendto</code></a>.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "recv",
              "file_descr -> bytes -> int -> int -> msg_flag list -> int",
              "\n<div class=\"info-desc\">\n<p>Receive data from a connected socket.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "recvfrom",
              "file_descr -> bytes -> int -> int -> msg_flag list -> int * sockaddr",
              "\n<div class=\"info-desc\">\n<p>Receive data from an unconnected socket.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "send",
              "file_descr -> bytes -> int -> int -> msg_flag list -> int",
              "\n<div class=\"info-desc\">\n<p>Send data over a connected socket.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "send_substring",
              "file_descr -> string -> int -> int -> msg_flag list -> int",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">send</code>, but take the data from a string instead of a byte\n    sequence.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "sendto",
              "file_descr -> bytes -> int -> int -> msg_flag list -> sockaddr -> int",
              "\n<div class=\"info-desc\">\n<p>Send data over an unconnected socket.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sendto_substring",
              "file_descr -> string -> int -> int -> msg_flag list -> sockaddr -> int",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">sendto</code>, but take the data from a string instead of a\n    byte sequence.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Socket options",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "socket_bool_option", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.SO_DEBUG\"><span class=\"constructor\">SO_DEBUG</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Record debugging information</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.SO_BROADCAST\"><span class=\"constructor\">SO_BROADCAST</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Permit sending of broadcast messages</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.SO_REUSEADDR\"><span class=\"constructor\">SO_REUSEADDR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Allow reuse of local addresses for bind</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.SO_KEEPALIVE\"><span class=\"constructor\">SO_KEEPALIVE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Keep connection active</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.SO_DONTROUTE\"><span class=\"constructor\">SO_DONTROUTE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Bypass the standard routing algorithms</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.SO_OOBINLINE\"><span class=\"constructor\">SO_OOBINLINE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Leave out-of-band data in line</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.SO_ACCEPTCONN\"><span class=\"constructor\">SO_ACCEPTCONN</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Report whether socket listening is enabled</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.TCP_NODELAY\"><span class=\"constructor\">TCP_NODELAY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Control the Nagle algorithm for TCP sockets</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.IPV6_ONLY\"><span class=\"constructor\">IPV6_ONLY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Forbid binding an IPv6 socket to an IPv4 address</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The socket options that can be consulted with <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a>\n   and modified with <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a>.  These options have a boolean\n   (<code class=\"code\"><span class=\"keyword\">true</span></code>/<code class=\"code\"><span class=\"keyword\">false</span></code>) value.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "socket_int_option", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_int_option.SO_SNDBUF\"><span class=\"constructor\">SO_SNDBUF</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Size of send buffer</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_int_option.SO_RCVBUF\"><span class=\"constructor\">SO_RCVBUF</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Size of received buffer</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_int_option.SO_ERROR\"><span class=\"constructor\">SO_ERROR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Deprecated.  Use <a href=\"Unix.html#VALgetsockopt_error\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt_error</code></a> instead.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_int_option.SO_TYPE\"><span class=\"constructor\">SO_TYPE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Report the socket type</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_int_option.SO_RCVLOWAT\"><span class=\"constructor\">SO_RCVLOWAT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Minimum number of bytes to process for input operations</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_int_option.SO_SNDLOWAT\"><span class=\"constructor\">SO_SNDLOWAT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Minimum number of bytes to process for output\n                       operations</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The socket options that can be consulted with <a href=\"Unix.html#VALgetsockopt_int\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt_int</code></a>\n   and modified with <a href=\"Unix.html#VALsetsockopt_int\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt_int</code></a>.  These options have an\n   integer value.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "socket_optint_option", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_optint_option.SO_LINGER\"><span class=\"constructor\">SO_LINGER</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Whether to linger on closed connections\n                    that have data present, and for how long\n                    (in seconds)</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The socket options that can be consulted with <a href=\"Unix.html#VALgetsockopt_optint\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt_optint</code></a>\n   and modified with <a href=\"Unix.html#VALsetsockopt_optint\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt_optint</code></a>.  These options have a\n   value of type <code class=\"code\">int&nbsp;option</code>, with <code class=\"code\"><span class=\"constructor\">None</span></code> meaning ``disabled''.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "socket_float_option", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_float_option.SO_RCVTIMEO\"><span class=\"constructor\">SO_RCVTIMEO</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Timeout for input operations</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_float_option.SO_SNDTIMEO\"><span class=\"constructor\">SO_SNDTIMEO</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Timeout for output operations</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The socket options that can be consulted with <a href=\"Unix.html#VALgetsockopt_float\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt_float</code></a>\n   and modified with <a href=\"Unix.html#VALsetsockopt_float\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt_float</code></a>.  These options have a\n   floating-point value representing a time in seconds.\n   The value 0 means infinite timeout.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getsockopt", "file_descr -> socket_bool_option -> bool",
              "\n<div class=\"info-desc\">\n<p>Return the current status of a boolean-valued option\n   in the given socket.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setsockopt",
              "file_descr -> socket_bool_option -> bool -> unit",
              "\n<div class=\"info-desc\">\n<p>Set or clear a boolean-valued option in the given socket.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getsockopt_int", "file_descr -> socket_int_option -> int",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for an integer-valued socket option.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setsockopt_int",
              "file_descr -> socket_int_option -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for an integer-valued socket option.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getsockopt_optint",
              "file_descr -> socket_optint_option -> int option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for a socket option whose value is an\n   <code class=\"code\">int&nbsp;option</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setsockopt_optint",
              "file_descr -> socket_optint_option -> int option -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for a socket option whose value is an\n   <code class=\"code\">int&nbsp;option</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getsockopt_float",
              "file_descr -> socket_float_option -> float",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for a socket option whose value is a\n   floating-point number.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setsockopt_float",
              "file_descr -> socket_float_option -> float -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for a socket option whose value is a\n   floating-point number.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getsockopt_error", "file_descr -> error option",
              "\n<div class=\"info-desc\">\n<p>Return the error condition associated with the given socket,\n    and clear it.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "High-level network connection functions",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "open_connection", "sockaddr -> in_channel * out_channel",
              "\n<div class=\"info-desc\">\n<p>Connect to a server at the given address.\n   Return a pair of buffered channels connected to the server.\n   Remember to call <a href=\"Pervasives.html#VALflush\"><code class=\"code\">flush</code></a> on the output channel at the right\n   times to ensure correct synchronization.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "shutdown_connection", "in_channel -> unit",
              "\n<div class=\"info-desc\">\n<p>``Shut down'' a connection established with <a href=\"Unix.html#VALopen_connection\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_connection</code></a>;\n   that is, transmit an end-of-file condition to the server reading\n   on the other side of the connection. This does not fully close the\n   file descriptor associated with the channel, which you must remember\n   to free via <a href=\"Pervasives.html#VALclose_in\"><code class=\"code\">close_in</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "establish_server",
              "( in_channel -> out_channel -> unit) -> sockaddr -> unit",
              "\n<div class=\"info-desc\">\n<p>Establish a server on the given address.\n   The function given as first argument is called for each connection\n   with two buffered channels connected to the client. A new process\n   is created for each connection. The function <a href=\"Unix.html#VALestablish_server\"><code class=\"code\"><span class=\"constructor\">Unix</span>.establish_server</code></a>\n   never returns normally.</p>\n\n<p>On Windows, it is not implemented.  Use threads.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Host and protocol databases",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "host_entry", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELThost_entry.h_name\">h_name</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELThost_entry.h_aliases\">h_aliases</span>&nbsp;: <code class=\"type\">string array</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELThost_entry.h_addrtype\">h_addrtype</span>&nbsp;: <code class=\"type\"><a href=\"Unix.html#TYPEsocket_domain\">socket_domain</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELThost_entry.h_addr_list\">h_addr_list</span>&nbsp;: <code class=\"type\"><a href=\"Unix.html#TYPEinet_addr\">inet_addr</a> array</code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Structure of entries in the <code class=\"code\">hosts</code> database.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "protocol_entry", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprotocol_entry.p_name\">p_name</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprotocol_entry.p_aliases\">p_aliases</span>&nbsp;: <code class=\"type\">string array</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprotocol_entry.p_proto\">p_proto</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Structure of entries in the <code class=\"code\">protocols</code> database.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "service_entry", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTservice_entry.s_name\">s_name</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTservice_entry.s_aliases\">s_aliases</span>&nbsp;: <code class=\"type\">string array</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTservice_entry.s_port\">s_port</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTservice_entry.s_proto\">s_proto</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Structure of entries in the <code class=\"code\">services</code> database.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "gethostname", "unit -> string",
              "\n<div class=\"info-desc\">\n<p>Return the name of the local host.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "gethostbyname", "string -> host_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">hosts</code> with the given name.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Not_found</code> if no such entry exist.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "gethostbyaddr", "inet_addr -> host_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">hosts</code> with the given address.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Not_found</code> if no such entry exist.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "getprotobyname", "string -> protocol_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">protocols</code> with the given name.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Not_found</code> if no such entry exist.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "getprotobynumber", "int -> protocol_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">protocols</code> with the given protocol number.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Not_found</code> if no such entry exist.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "getservbyname", "string -> string -> service_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">services</code> with the given name.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Not_found</code> if no such entry exist.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "getservbyport", "int -> string -> service_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">services</code> with the given service number.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Not_found</code> if no such entry exist.</li>\n</ul>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "addr_info", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaddr_info.ai_family\">ai_family</span>&nbsp;: <code class=\"type\"><a href=\"Unix.html#TYPEsocket_domain\">socket_domain</a></code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Socket domain</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaddr_info.ai_socktype\">ai_socktype</span>&nbsp;: <code class=\"type\"><a href=\"Unix.html#TYPEsocket_type\">socket_type</a></code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Socket type</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaddr_info.ai_protocol\">ai_protocol</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Socket protocol number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaddr_info.ai_addr\">ai_addr</span>&nbsp;: <code class=\"type\"><a href=\"Unix.html#TYPEsockaddr\">sockaddr</a></code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Address</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaddr_info.ai_canonname\">ai_canonname</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Canonical host name</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Address information returned by <a href=\"Unix.html#VALgetaddrinfo\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getaddrinfo</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "getaddrinfo_option", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetaddrinfo_option.AI_FAMILY\"><span class=\"constructor\">AI_FAMILY</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Unix.html#TYPEsocket_domain\">socket_domain</a></code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Impose the given socket domain</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetaddrinfo_option.AI_SOCKTYPE\"><span class=\"constructor\">AI_SOCKTYPE</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"Unix.html#TYPEsocket_type\">socket_type</a></code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Impose the given socket type</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetaddrinfo_option.AI_PROTOCOL\"><span class=\"constructor\">AI_PROTOCOL</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Impose the given protocol</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetaddrinfo_option.AI_NUMERICHOST\"><span class=\"constructor\">AI_NUMERICHOST</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Do not call name resolver,\n                                            expect numeric IP address</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetaddrinfo_option.AI_CANONNAME\"><span class=\"constructor\">AI_CANONNAME</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Fill the <code class=\"code\">ai_canonname</code> field\n                                            of the result</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetaddrinfo_option.AI_PASSIVE\"><span class=\"constructor\">AI_PASSIVE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Set address to ``any'' address\n                                            for use with <a href=\"Unix.html#VALbind\"><code class=\"code\"><span class=\"constructor\">Unix</span>.bind</code></a></p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Options to <a href=\"Unix.html#VALgetaddrinfo\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getaddrinfo</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getaddrinfo",
              "string -> string -> getaddrinfo_option list -> addr_info list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">getaddrinfo&nbsp;host&nbsp;service&nbsp;opts</code> returns a list of <a href=\"Unix.html#TYPEaddr_info\"><code class=\"code\"><span class=\"constructor\">Unix</span>.addr_info</code></a>\n    records describing socket parameters and addresses suitable for\n    communicating with the given host and service.  The empty list is\n    returned if the host or service names are unknown, or the constraints\n    expressed in <code class=\"code\">opts</code> cannot be satisfied.</p>\n\n<p><code class=\"code\">host</code> is either a host name or the string representation of an IP\n    address.  <code class=\"code\">host</code> can be given as the empty string; in this case,\n    the ``any'' address or the ``loopback'' address are used,\n    depending whether <code class=\"code\">opts</code> contains <code class=\"code\"><span class=\"constructor\">AI_PASSIVE</span></code>.\n    <code class=\"code\">service</code> is either a service name or the string representation of\n    a port number.  <code class=\"code\">service</code> can be given as the empty string;\n    in this case, the port field of the returned addresses is set to 0.\n    <code class=\"code\">opts</code> is a possibly empty list of options that allows the caller\n    to force a particular socket domain (e.g. IPv6 only or IPv4 only)\n    or a particular socket type (e.g. TCP only or UDP only).</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "name_info", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTname_info.ni_hostname\">ni_hostname</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Name or IP address of host</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTname_info.ni_service\">ni_service</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Name of service or port number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Host and service information returned by <a href=\"Unix.html#VALgetnameinfo\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getnameinfo</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "getnameinfo_option", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetnameinfo_option.NI_NOFQDN\"><span class=\"constructor\">NI_NOFQDN</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Do not qualify local host names</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetnameinfo_option.NI_NUMERICHOST\"><span class=\"constructor\">NI_NUMERICHOST</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Always return host as IP address</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetnameinfo_option.NI_NAMEREQD\"><span class=\"constructor\">NI_NAMEREQD</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Fail if host name cannot be determined</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetnameinfo_option.NI_NUMERICSERV\"><span class=\"constructor\">NI_NUMERICSERV</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Always return service as port number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetnameinfo_option.NI_DGRAM\"><span class=\"constructor\">NI_DGRAM</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Consider the service as UDP-based\n                             instead of the default TCP</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Options to <a href=\"Unix.html#VALgetnameinfo\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getnameinfo</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getnameinfo",
              "sockaddr -> getnameinfo_option list -> name_info",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">getnameinfo&nbsp;addr&nbsp;opts</code> returns the host name and service name\n    corresponding to the socket address <code class=\"code\">addr</code>.  <code class=\"code\">opts</code> is a possibly\n    empty list of options that governs how these names are obtained.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>Not_found</code> if an error occurs.</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Terminal interface",
        "section_info":
          "<p>The following functions implement the POSIX standard terminal\n   interface. They provide control over asynchronous communication ports\n   and pseudo-terminals. Refer to the <code class=\"code\">termios</code> man page for a\n   complete description.</p>",
        "elements": [
          [
            "Typevariant",
            [
              "terminal_io", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_ignbrk\">c_ignbrk</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Ignore the break condition.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_brkint\">c_brkint</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Signal interrupt on break condition.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_ignpar\">c_ignpar</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Ignore characters with parity errors.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_parmrk\">c_parmrk</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Mark parity errors.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_inpck\">c_inpck</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Enable parity check on input.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_istrip\">c_istrip</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Strip 8th bit on input characters.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_inlcr\">c_inlcr</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Map NL to CR on input.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_igncr\">c_igncr</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Ignore CR on input.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_icrnl\">c_icrnl</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Map CR to NL on input.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_ixon\">c_ixon</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Recognize XON/XOFF characters on input.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_ixoff\">c_ixoff</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Emit XON/XOFF chars to control input flow.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_opost\">c_opost</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Enable output processing.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_obaud\">c_obaud</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Output baud rate (0 means close connection).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_ibaud\">c_ibaud</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Input baud rate.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_csize\">c_csize</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of bits per character (5-8).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_cstopb\">c_cstopb</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of stop bits (1-2).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_cread\">c_cread</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Reception is enabled.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_parenb\">c_parenb</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Enable parity generation and detection.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_parodd\">c_parodd</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Specify odd parity instead of even.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_hupcl\">c_hupcl</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Hang up on last close.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_clocal\">c_clocal</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Ignore modem status lines.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_isig\">c_isig</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Generate signal on INTR, QUIT, SUSP.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_icanon\">c_icanon</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Enable canonical processing\n                                 (line buffering and editing)</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_noflsh\">c_noflsh</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Disable flush after INTR, QUIT, SUSP.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_echo\">c_echo</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Echo input characters.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_echoe\">c_echoe</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Echo ERASE (to erase previous character).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_echok\">c_echok</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Echo KILL (to erase the current line).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_echonl\">c_echonl</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Echo NL even if c_echo is not set.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_vintr\">c_vintr</span>&nbsp;: <code class=\"type\">char</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Interrupt character (usually ctrl-C).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_vquit\">c_vquit</span>&nbsp;: <code class=\"type\">char</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Quit character (usually ctrl-\\).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_verase\">c_verase</span>&nbsp;: <code class=\"type\">char</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Erase character (usually DEL or ctrl-H).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_vkill\">c_vkill</span>&nbsp;: <code class=\"type\">char</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Kill line character (usually ctrl-U).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_veof\">c_veof</span>&nbsp;: <code class=\"type\">char</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>End-of-file character (usually ctrl-D).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_veol\">c_veol</span>&nbsp;: <code class=\"type\">char</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Alternate end-of-line char. (usually none).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_vmin\">c_vmin</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Minimum number of characters to read\n                                 before the read request is satisfied.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_vtime\">c_vtime</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Maximum read wait (in 0.1s units).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_vstart\">c_vstart</span>&nbsp;: <code class=\"type\">char</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Start character (usually ctrl-Q).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_vstop\">c_vstop</span>&nbsp;: <code class=\"type\">char</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Stop character (usually ctrl-S).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "tcgetattr", "file_descr -> terminal_io",
              "\n<div class=\"info-desc\">\n<p>Return the status of the terminal referred to by the given\n   file descriptor.\n   On Windows, not implemented.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "setattr_when", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsetattr_when.TCSANOW\"><span class=\"constructor\">TCSANOW</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsetattr_when.TCSADRAIN\"><span class=\"constructor\">TCSADRAIN</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsetattr_when.TCSAFLUSH\"><span class=\"constructor\">TCSAFLUSH</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "tcsetattr",
              "file_descr -> setattr_when -> terminal_io -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the status of the terminal referred to by the given\n   file descriptor. The second argument indicates when the\n   status change takes place: immediately (<code class=\"code\"><span class=\"constructor\">TCSANOW</span></code>),\n   when all pending output has been transmitted (<code class=\"code\"><span class=\"constructor\">TCSADRAIN</span></code>),\n   or after flushing all input that has been received but not\n   read (<code class=\"code\"><span class=\"constructor\">TCSAFLUSH</span></code>). <code class=\"code\"><span class=\"constructor\">TCSADRAIN</span></code> is recommended when changing\n   the output parameters; <code class=\"code\"><span class=\"constructor\">TCSAFLUSH</span></code>, when changing the input\n   parameters.</p>\n\n<p>On Windows, not implemented.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "tcsendbreak", "file_descr -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Send a break condition on the given file descriptor.\n   The second argument is the duration of the break, in 0.1s units;\n   0 means standard duration (0.25s).</p>\n\n<p>On Windows, not implemented.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "tcdrain", "file_descr -> unit",
              "\n<div class=\"info-desc\">\n<p>Waits until all output written on the given file descriptor\n   has been transmitted.</p>\n\n<p>On Windows, not implemented.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "flush_queue", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTflush_queue.TCIFLUSH\"><span class=\"constructor\">TCIFLUSH</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTflush_queue.TCOFLUSH\"><span class=\"constructor\">TCOFLUSH</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTflush_queue.TCIOFLUSH\"><span class=\"constructor\">TCIOFLUSH</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "tcflush", "file_descr -> flush_queue -> unit",
              "\n<div class=\"info-desc\">\n<p>Discard data written on the given file descriptor but not yet\n   transmitted, or data received but not yet read, depending on the\n   second argument: <code class=\"code\"><span class=\"constructor\">TCIFLUSH</span></code> flushes data received but not read,\n   <code class=\"code\"><span class=\"constructor\">TCOFLUSH</span></code> flushes data written but not transmitted, and\n   <code class=\"code\"><span class=\"constructor\">TCIOFLUSH</span></code> flushes both.</p>\n\n<p>On Windows, not implemented.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "flow_action", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTflow_action.TCOOFF\"><span class=\"constructor\">TCOOFF</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTflow_action.TCOON\"><span class=\"constructor\">TCOON</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTflow_action.TCIOFF\"><span class=\"constructor\">TCIOFF</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTflow_action.TCION\"><span class=\"constructor\">TCION</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "tcflow", "file_descr -> flow_action -> unit",
              "\n<div class=\"info-desc\">\n<p>Suspend or restart reception or transmission of data on\n   the given file descriptor, depending on the second argument:\n   <code class=\"code\"><span class=\"constructor\">TCOOFF</span></code> suspends output, <code class=\"code\"><span class=\"constructor\">TCOON</span></code> restarts output,\n   <code class=\"code\"><span class=\"constructor\">TCIOFF</span></code> transmits a STOP character to suspend input,\n   and <code class=\"code\"><span class=\"constructor\">TCION</span></code> transmits a START character to restart input.</p>\n\n<p>On Windows, not implemented.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setsid", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Put the calling process in a new session and detach it from\n   its controlling terminal.</p>\n\n<p>On Windows, not implemented.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Unix.LargeFile",
    "module_info":
      "\n<p>File operations on large files.\n  This sub-module provides 64-bit variants of the functions\n  <a href=\"Unix.html#VALlseek\"><code class=\"code\"><span class=\"constructor\">Unix</span>.lseek</code></a> (for positioning a file descriptor),\n  <a href=\"Unix.html#VALtruncate\"><code class=\"code\"><span class=\"constructor\">Unix</span>.truncate</code></a> and <a href=\"Unix.html#VALftruncate\"><code class=\"code\"><span class=\"constructor\">Unix</span>.ftruncate</code></a> (for changing the size of a file),\n  and <a href=\"Unix.html#VALstat\"><code class=\"code\"><span class=\"constructor\">Unix</span>.stat</code></a>, <a href=\"Unix.html#VALlstat\"><code class=\"code\"><span class=\"constructor\">Unix</span>.lstat</code></a> and <a href=\"Unix.html#VALfstat\"><code class=\"code\"><span class=\"constructor\">Unix</span>.fstat</code></a> (for obtaining\n  information on files).  These alternate functions represent\n  positions and sizes by 64-bit integers (type <code class=\"code\">int64</code>) instead of\n  regular integers (type <code class=\"code\">int</code>), thus allowing operating on files\n  whose sizes are greater than <code class=\"code\">max_int</code>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "lseek",
              "Unix.file_descr -> int64 -> Unix.seek_command -> int64",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Unix.html#VALlseek\"><code class=\"code\"><span class=\"constructor\">Unix</span>.lseek</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "truncate", "string -> int64 -> unit",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Unix.html#VALtruncate\"><code class=\"code\"><span class=\"constructor\">Unix</span>.truncate</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "ftruncate", "Unix.file_descr -> int64 -> unit",
              "\n<div class=\"info-desc\">\n<p>See <a href=\"Unix.html#VALftruncate\"><code class=\"code\"><span class=\"constructor\">Unix</span>.ftruncate</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "stats", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_dev\">st_dev</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Device number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_ino\">st_ino</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Inode number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_kind\">st_kind</span>&nbsp;: <code class=\"type\"><a href=\"Unix.html#TYPEfile_kind\">Unix.file_kind</a></code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Kind of the file</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_perm\">st_perm</span>&nbsp;: <code class=\"type\"><a href=\"Unix.html#TYPEfile_perm\">Unix.file_perm</a></code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Access rights</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_nlink\">st_nlink</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of links</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_uid\">st_uid</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>User id of the owner</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_gid\">st_gid</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Group ID of the file's group</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_rdev\">st_rdev</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Device minor number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_size\">st_size</span>&nbsp;: <code class=\"type\">int64</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Size in bytes</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_atime\">st_atime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Last access time</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_mtime\">st_mtime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Last modification time</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_ctime\">st_ctime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Last status change time</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              null
            ]
          ],
          [ "Function", [ "stat", "string -> stats", null ] ],
          [ "Function", [ "lstat", "string -> stats", null ] ],
          [ "Function", [ "fstat", "Unix.file_descr -> stats", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "UnixLabels",
    "module_info":
      "\n<p>Interface to the Unix system.\n   To use as replacement to default <a href=\"Unix.html\"><code class=\"code\"><span class=\"constructor\">Unix</span></code></a> module,\n   add <code class=\"code\"><span class=\"keyword\">module</span>&nbsp;<span class=\"constructor\">Unix</span>&nbsp;=&nbsp;<span class=\"constructor\">UnixLabels</span></code> in your implementation.</p>\n",
    "sections": [
      {
        "section_name": "Error report",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "error", "= Unix.error =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.E2BIG\"><span class=\"constructor\">E2BIG</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Argument list too long</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EACCES\"><span class=\"constructor\">EACCES</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Permission denied</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EAGAIN\"><span class=\"constructor\">EAGAIN</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Resource temporarily unavailable; try again</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EBADF\"><span class=\"constructor\">EBADF</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Bad file descriptor</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EBUSY\"><span class=\"constructor\">EBUSY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Resource unavailable</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ECHILD\"><span class=\"constructor\">ECHILD</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No child process</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EDEADLK\"><span class=\"constructor\">EDEADLK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Resource deadlock would occur</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EDOM\"><span class=\"constructor\">EDOM</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Domain error for math functions, etc.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EEXIST\"><span class=\"constructor\">EEXIST</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>File exists</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EFAULT\"><span class=\"constructor\">EFAULT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Bad address</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EFBIG\"><span class=\"constructor\">EFBIG</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>File too large</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EINTR\"><span class=\"constructor\">EINTR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Function interrupted by signal</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EINVAL\"><span class=\"constructor\">EINVAL</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Invalid argument</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EIO\"><span class=\"constructor\">EIO</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Hardware I/O error</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EISDIR\"><span class=\"constructor\">EISDIR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Is a directory</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EMFILE\"><span class=\"constructor\">EMFILE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Too many open files by the process</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EMLINK\"><span class=\"constructor\">EMLINK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Too many links</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENAMETOOLONG\"><span class=\"constructor\">ENAMETOOLONG</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Filename too long</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENFILE\"><span class=\"constructor\">ENFILE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Too many open files in the system</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENODEV\"><span class=\"constructor\">ENODEV</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No such device</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOENT\"><span class=\"constructor\">ENOENT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No such file or directory</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOEXEC\"><span class=\"constructor\">ENOEXEC</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Not an executable file</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOLCK\"><span class=\"constructor\">ENOLCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No locks available</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOMEM\"><span class=\"constructor\">ENOMEM</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Not enough memory</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOSPC\"><span class=\"constructor\">ENOSPC</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No space left on device</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOSYS\"><span class=\"constructor\">ENOSYS</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Function not supported</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOTDIR\"><span class=\"constructor\">ENOTDIR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Not a directory</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOTEMPTY\"><span class=\"constructor\">ENOTEMPTY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Directory not empty</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOTTY\"><span class=\"constructor\">ENOTTY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Inappropriate I/O control operation</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENXIO\"><span class=\"constructor\">ENXIO</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No such device or address</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EPERM\"><span class=\"constructor\">EPERM</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Operation not permitted</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EPIPE\"><span class=\"constructor\">EPIPE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Broken pipe</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ERANGE\"><span class=\"constructor\">ERANGE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Result too large</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EROFS\"><span class=\"constructor\">EROFS</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Read-only file system</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ESPIPE\"><span class=\"constructor\">ESPIPE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Invalid seek e.g. on a pipe</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ESRCH\"><span class=\"constructor\">ESRCH</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No such process</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EXDEV\"><span class=\"constructor\">EXDEV</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Invalid link</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EWOULDBLOCK\"><span class=\"constructor\">EWOULDBLOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Operation would block</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EINPROGRESS\"><span class=\"constructor\">EINPROGRESS</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Operation now in progress</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EALREADY\"><span class=\"constructor\">EALREADY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Operation already in progress</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOTSOCK\"><span class=\"constructor\">ENOTSOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Socket operation on non-socket</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EDESTADDRREQ\"><span class=\"constructor\">EDESTADDRREQ</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Destination address required</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EMSGSIZE\"><span class=\"constructor\">EMSGSIZE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Message too long</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EPROTOTYPE\"><span class=\"constructor\">EPROTOTYPE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Protocol wrong type for socket</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOPROTOOPT\"><span class=\"constructor\">ENOPROTOOPT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Protocol not available</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EPROTONOSUPPORT\"><span class=\"constructor\">EPROTONOSUPPORT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Protocol not supported</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ESOCKTNOSUPPORT\"><span class=\"constructor\">ESOCKTNOSUPPORT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Socket type not supported</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EOPNOTSUPP\"><span class=\"constructor\">EOPNOTSUPP</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Operation not supported on socket</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EPFNOSUPPORT\"><span class=\"constructor\">EPFNOSUPPORT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Protocol family not supported</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EAFNOSUPPORT\"><span class=\"constructor\">EAFNOSUPPORT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Address family not supported by protocol family</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EADDRINUSE\"><span class=\"constructor\">EADDRINUSE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Address already in use</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EADDRNOTAVAIL\"><span class=\"constructor\">EADDRNOTAVAIL</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Can't assign requested address</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENETDOWN\"><span class=\"constructor\">ENETDOWN</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Network is down</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENETUNREACH\"><span class=\"constructor\">ENETUNREACH</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Network is unreachable</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENETRESET\"><span class=\"constructor\">ENETRESET</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Network dropped connection on reset</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ECONNABORTED\"><span class=\"constructor\">ECONNABORTED</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Software caused connection abort</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ECONNRESET\"><span class=\"constructor\">ECONNRESET</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Connection reset by peer</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOBUFS\"><span class=\"constructor\">ENOBUFS</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No buffer space available</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EISCONN\"><span class=\"constructor\">EISCONN</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Socket is already connected</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ENOTCONN\"><span class=\"constructor\">ENOTCONN</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Socket is not connected</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ESHUTDOWN\"><span class=\"constructor\">ESHUTDOWN</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Can't send after socket shutdown</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ETOOMANYREFS\"><span class=\"constructor\">ETOOMANYREFS</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Too many references: can't splice</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ETIMEDOUT\"><span class=\"constructor\">ETIMEDOUT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Connection timed out</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ECONNREFUSED\"><span class=\"constructor\">ECONNREFUSED</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Connection refused</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EHOSTDOWN\"><span class=\"constructor\">EHOSTDOWN</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Host is down</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EHOSTUNREACH\"><span class=\"constructor\">EHOSTUNREACH</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>No route to host</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.ELOOP\"><span class=\"constructor\">ELOOP</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Too many levels of symbolic links</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EOVERFLOW\"><span class=\"constructor\">EOVERFLOW</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>File size or position not representable</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTerror.EUNKNOWNERR\"><span class=\"constructor\">EUNKNOWNERR</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Unknown error</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The type of error codes.\n   Errors defined in the POSIX standard\n   and additional errors from UNIX98 and BSD.\n   All other errors are mapped to EUNKNOWNERR.</p>\n</div>\n"
            ]
          ],
          [
            "Exception",
            [
              "Unix_error", "error",
              "\n<div class=\"info-desc\">\n<p>Raised by the system calls below when an error is encountered.\n   The first component is the error code; the second component\n   is the function name; the third component is the string parameter\n   to the function, if it has one, or the empty string otherwise.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "error_message", "error -> string",
              "\n<div class=\"info-desc\">\n<p>Return a string describing the given error code.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "handle_unix_error", "('a -> 'b) -> 'a -> 'b",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">handle_unix_error&nbsp;f&nbsp;x</code> applies <code class=\"code\">f</code> to <code class=\"code\">x</code> and returns the result.\n   If the exception <code class=\"code\"><span class=\"constructor\">Unix_error</span></code> is raised, it prints a message\n   describing the error and exits with code 2.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Access to the process environment",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "environment", "unit -> string array",
              "\n<div class=\"info-desc\">\n<p>Return the process environment, as an array of strings\n    with the format ``variable=value''.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getenv", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return the value associated to a variable in the process\n   environment. Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the variable is unbound.\n   (This function is identical to <code class=\"code\"><span class=\"constructor\">Sys</span>.getenv</code>.)</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "unsafe_getenv", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Return the value associated to a variable in the process\n   environment.</p>\n\n<p>Unlike <a href=\"UnixLabels.html#VALgetenv\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.getenv</code></a>, this function returns the value even if the\n   process has special privileges. It is considered unsafe because the\n   programmer of a setuid or setgid program must be careful to avoid\n   using maliciously crafted environment variables in the search path\n   for executables, the locations for temporary files or logs, and the\n   like.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n<li><b>Raises</b> <code>Not_found</code> if the variable is unbound.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "putenv", "string -> string -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Unix</span>.putenv&nbsp;name&nbsp;value</code> sets the value associated to a\n   variable in the process environment.\n   <code class=\"code\">name</code> is the name of the environment variable,\n   and <code class=\"code\">value</code> its new associated value.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Process handling",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "process_status", "= Unix.process_status =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprocess_status.WEXITED\"><span class=\"constructor\">WEXITED</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The process terminated normally by <code class=\"code\">exit</code>;\n           the argument is the return code.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprocess_status.WSIGNALED\"><span class=\"constructor\">WSIGNALED</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The process was killed by a signal;\n           the argument is the signal number.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprocess_status.WSTOPPED\"><span class=\"constructor\">WSTOPPED</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The process was stopped by a signal; the argument is the\n           signal number.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The termination status of a process.  See module <a href=\"Sys.html\"><code class=\"code\"><span class=\"constructor\">Sys</span></code></a> for the\n    definitions of the standard signal numbers.  Note that they are\n    not the numbers used by the OS.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "wait_flag", "= Unix.wait_flag =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTwait_flag.WNOHANG\"><span class=\"constructor\">WNOHANG</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>do not block if no child has\n               died yet, but immediately return with a pid equal to 0.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTwait_flag.WUNTRACED\"><span class=\"constructor\">WUNTRACED</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>report also the children that receive stop signals.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Flags for <a href=\"UnixLabels.html#VALwaitpid\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.waitpid</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "execv", "prog:string -> args:string array -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">execv&nbsp;prog&nbsp;args</code> execute the program in file <code class=\"code\">prog</code>, with\n   the arguments <code class=\"code\">args</code>, and the current process environment.\n   These <code class=\"code\">execv*</code> functions never return: on success, the current\n   program is replaced by the new one;\n   on failure, a <a href=\"UnixLabels.html#EXCEPTIONUnix_error\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.<span class=\"constructor\">Unix_error</span></code></a> exception is raised.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "execve",
              "prog:string -> args:string array -> env:string array -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"UnixLabels.html#VALexecv\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.execv</code></a>, except that the third argument provides the\n   environment to the program executed.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "execvp", "prog:string -> args:string array -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"UnixLabels.html#VALexecv\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.execv</code></a>, except that\n   the program is searched in the path.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "execvpe",
              "prog:string -> args:string array -> env:string array -> 'a",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"UnixLabels.html#VALexecve\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.execve</code></a>, except that\n   the program is searched in the path.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fork", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Fork a new process. The returned integer is 0 for the child\n   process, the pid of the child process for the parent process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "wait", "unit -> int * process_status",
              "\n<div class=\"info-desc\">\n<p>Wait until one of the children processes die, and return its pid\n   and termination status.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "waitpid",
              "mode: wait_flag list -> int -> int * process_status",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"UnixLabels.html#VALwait\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.wait</code></a>, but waits for the child process whose pid\n   is given.\n   A pid of <code class=\"code\">-1</code> means wait for any child.\n   A pid of <code class=\"code\">0</code> means wait for any child in the same process group\n   as the current process.\n   Negative pid arguments represent process groups.\n   The list of options indicates whether <code class=\"code\">waitpid</code> should return\n   immediately without waiting, or also report stopped children.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "system", "string -> process_status",
              "\n<div class=\"info-desc\">\n<p>Execute the given command, wait until it terminates, and return\n   its termination status. The string is interpreted by the shell\n   <code class=\"code\">/bin/sh</code> and therefore can contain redirections, quotes, variables,\n   etc. The result <code class=\"code\"><span class=\"constructor\">WEXITED</span>&nbsp;127</code> indicates that the shell couldn't\n   be executed.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getpid", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the pid of the process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getppid", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the pid of the parent process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "nice", "int -> int",
              "\n<div class=\"info-desc\">\n<p>Change the process priority. The integer argument is added to the\n   ``nice'' value. (Higher values of the ``nice'' value mean\n   lower priorities.) Return the new nice value.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Basic file input/output",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "file_descr", "= Unix.file_descr", null,
              "\n<div class=\"info-desc\">\n<p>The abstract type of file descriptors.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stdin", "file_descr",
              "\n<div class=\"info-desc\">\n<p>File descriptor for standard input.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stdout", "file_descr",
              "\n<div class=\"info-desc\">\n<p>File descriptor for standard output.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stderr", "file_descr",
              "\n<div class=\"info-desc\">\n<p>File descriptor for standard error.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "open_flag", "= Unix.open_flag =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_RDONLY\"><span class=\"constructor\">O_RDONLY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Open for reading</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_WRONLY\"><span class=\"constructor\">O_WRONLY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Open for writing</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_RDWR\"><span class=\"constructor\">O_RDWR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Open for reading and writing</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_NONBLOCK\"><span class=\"constructor\">O_NONBLOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Open in non-blocking mode</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_APPEND\"><span class=\"constructor\">O_APPEND</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Open for append</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_CREAT\"><span class=\"constructor\">O_CREAT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Create if nonexistent</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_TRUNC\"><span class=\"constructor\">O_TRUNC</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Truncate to 0 length if existing</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_EXCL\"><span class=\"constructor\">O_EXCL</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Fail if existing</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_NOCTTY\"><span class=\"constructor\">O_NOCTTY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Don't make this dev a controlling tty</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_DSYNC\"><span class=\"constructor\">O_DSYNC</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Writes complete as `Synchronised I/O data\n                                    integrity completion'</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_SYNC\"><span class=\"constructor\">O_SYNC</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Writes complete as `Synchronised I/O file\n                                    integrity completion'</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_RSYNC\"><span class=\"constructor\">O_RSYNC</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Reads complete as writes (depending\n                                    on O_SYNC/O_DSYNC)</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_SHARE_DELETE\"><span class=\"constructor\">O_SHARE_DELETE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Windows only: allow the file to be deleted\n                                    while still open</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_CLOEXEC\"><span class=\"constructor\">O_CLOEXEC</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Set the close-on-exec flag on the\n                                   descriptor returned by <a href=\"UnixLabels.html#VALopenfile\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.openfile</code></a></p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTopen_flag.O_KEEPEXEC\"><span class=\"constructor\">O_KEEPEXEC</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Clear the close-on-exec flag.\n                                    This is currently the default.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The flags to <a href=\"UnixLabels.html#VALopenfile\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.openfile</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "file_perm", "= int", null,
              "\n<div class=\"info-desc\">\n<p>The type of file access rights, e.g. <code class=\"code\">0o640</code> is read and write for user,\n    read for group, none for others</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "openfile",
              "string -> mode: open_flag list -> perm: file_perm -> file_descr",
              "\n<div class=\"info-desc\">\n<p>Open the named file with the given flags. Third argument is\n   the permissions to give to the file if it is created. Return\n   a file descriptor on the named file.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "close", "file_descr -> unit",
              "\n<div class=\"info-desc\">\n<p>Close a file descriptor.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "read", "file_descr -> buf:bytes -> pos:int -> len:int -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">read&nbsp;fd&nbsp;buff&nbsp;ofs&nbsp;len</code> reads <code class=\"code\">len</code> bytes from descriptor <code class=\"code\">fd</code>,\n    storing them in byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code> in\n    <code class=\"code\">buff</code>. Return the number of bytes actually read.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "write",
              "file_descr -> buf:bytes -> pos:int -> len:int -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">write&nbsp;fd&nbsp;buff&nbsp;ofs&nbsp;len</code> writes <code class=\"code\">len</code> bytes to descriptor <code class=\"code\">fd</code>,\n    taking them from byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code>\n    in <code class=\"code\">buff</code>. Return the number of bytes actually written.  <code class=\"code\">write</code>\n    repeats the writing operation until all bytes have been written or\n    an error occurs.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "single_write",
              "file_descr -> buf:bytes -> pos:int -> len:int -> int",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">write</code>, but attempts to write only once.\n   Thus, if an error occurs, <code class=\"code\">single_write</code> guarantees that no data\n   has been written.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "write_substring",
              "file_descr -> buf:string -> pos:int -> len:int -> int",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">write</code>, but take the data from a string instead of a byte\n    sequence.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "single_write_substring",
              "file_descr -> buf:string -> pos:int -> len:int -> int",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">single_write</code>, but take the data from a string instead of\n    a byte sequence.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Interfacing with the standard input/output library",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "in_channel_of_descr", "file_descr -> in_channel",
              "\n<div class=\"info-desc\">\n<p>Create an input channel reading from the given descriptor.\n   The channel is initially in binary mode; use\n   <code class=\"code\">set_binary_mode_in&nbsp;ic&nbsp;<span class=\"keyword\">false</span></code> if text mode is desired.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "out_channel_of_descr", "file_descr -> out_channel",
              "\n<div class=\"info-desc\">\n<p>Create an output channel writing on the given descriptor.\n   The channel is initially in binary mode; use\n   <code class=\"code\">set_binary_mode_out&nbsp;oc&nbsp;<span class=\"keyword\">false</span></code> if text mode is desired.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "descr_of_in_channel", "in_channel -> file_descr",
              "\n<div class=\"info-desc\">\n<p>Return the descriptor corresponding to an input channel.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "descr_of_out_channel", "out_channel -> file_descr",
              "\n<div class=\"info-desc\">\n<p>Return the descriptor corresponding to an output channel.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Seeking and truncating",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "seek_command", "= Unix.seek_command =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTseek_command.SEEK_SET\"><span class=\"constructor\">SEEK_SET</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>indicates positions relative to the beginning of the file</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTseek_command.SEEK_CUR\"><span class=\"constructor\">SEEK_CUR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>indicates positions relative to the current position</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTseek_command.SEEK_END\"><span class=\"constructor\">SEEK_END</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>indicates positions relative to the end of the file</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Positioning modes for <a href=\"UnixLabels.html#VALlseek\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.lseek</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lseek", "file_descr -> int -> mode: seek_command -> int",
              "\n<div class=\"info-desc\">\n<p>Set the current position for a file descriptor, and return the resulting\n    offset (from the beginning of the file).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "truncate", "string -> len:int -> unit",
              "\n<div class=\"info-desc\">\n<p>Truncates the named file to the given size.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "ftruncate", "file_descr -> len:int -> unit",
              "\n<div class=\"info-desc\">\n<p>Truncates the file corresponding to the given descriptor\n   to the given size.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "File status",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "file_kind", "= Unix.file_kind =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfile_kind.S_REG\"><span class=\"constructor\">S_REG</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Regular file</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfile_kind.S_DIR\"><span class=\"constructor\">S_DIR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Directory</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfile_kind.S_CHR\"><span class=\"constructor\">S_CHR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Character device</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfile_kind.S_BLK\"><span class=\"constructor\">S_BLK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Block device</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfile_kind.S_LNK\"><span class=\"constructor\">S_LNK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Symbolic link</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfile_kind.S_FIFO\"><span class=\"constructor\">S_FIFO</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Named pipe</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTfile_kind.S_SOCK\"><span class=\"constructor\">S_SOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Socket</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "stats", "= Unix.stats = {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_dev\">st_dev</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Device number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_ino\">st_ino</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Inode number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_kind\">st_kind</span>&nbsp;: <code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_kind\">file_kind</a></code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Kind of the file</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_perm\">st_perm</span>&nbsp;: <code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_perm\">file_perm</a></code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Access rights</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_nlink\">st_nlink</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of links</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_uid\">st_uid</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>User id of the owner</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_gid\">st_gid</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Group ID of the file's group</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_rdev\">st_rdev</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Device minor number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_size\">st_size</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Size in bytes</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_atime\">st_atime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Last access time</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_mtime\">st_mtime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Last modification time</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_ctime\">st_ctime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Last status change time</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The information returned by the <a href=\"UnixLabels.html#VALstat\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.stat</code></a> calls.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stat", "string -> stats",
              "\n<div class=\"info-desc\">\n<p>Return the information for the named file.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lstat", "string -> stats",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"UnixLabels.html#VALstat\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.stat</code></a>, but in case the file is a symbolic link,\n   return the information for the link itself.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fstat", "file_descr -> stats",
              "\n<div class=\"info-desc\">\n<p>Return the information for the file associated with the given\n   descriptor.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "isatty", "file_descr -> bool",
              "\n<div class=\"info-desc\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given file descriptor refers to a terminal or\n   console window, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "File operations on large files",
        "section_info": null,
        "elements": [
          [
            "Module",
            [ "LargeFile", "\n<p>File operations on large files.</p>\n\n" ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Mapping files into memory",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "map_file",
              "file_descr -> ?pos:int64 -> kind:('a, 'b) Bigarray.kind -> layout:'c Bigarray.layout -> shared:bool -> dims:int array -> ('a, 'b, 'c) Bigarray.Genarray.t",
              "\n<div class=\"info-desc\">\n<p>Memory mapping of a file as a big array.\n  <code class=\"code\">map_file&nbsp;fd&nbsp;kind&nbsp;layout&nbsp;shared&nbsp;dims</code>\n  returns a big array of kind <code class=\"code\">kind</code>, layout <code class=\"code\">layout</code>,\n  and dimensions as specified in <code class=\"code\">dims</code>.  The data contained in\n  this big array are the contents of the file referred to by\n  the file descriptor <code class=\"code\">fd</code> (as opened previously with\n  <code class=\"code\"><span class=\"constructor\">Unix</span>.openfile</code>, for example).  The optional <code class=\"code\">pos</code> parameter\n  is the byte offset in the file of the data being mapped;\n  it defaults to 0 (map from the beginning of the file).</p>\n\n<p>If <code class=\"code\">shared</code> is <code class=\"code\"><span class=\"keyword\">true</span></code>, all modifications performed on the array\n  are reflected in the file.  This requires that <code class=\"code\">fd</code> be opened\n  with write permissions.  If <code class=\"code\">shared</code> is <code class=\"code\"><span class=\"keyword\">false</span></code>, modifications\n  performed on the array are done in memory only, using\n  copy-on-write of the modified pages; the underlying file is not\n  affected.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">Genarray</span>.map_file</code> is much more efficient than reading\n  the whole file in a big array, modifying that big array,\n  and writing it afterwards.</p>\n\n<p>To adjust automatically the dimensions of the big array to\n  the actual size of the file, the major dimension (that is,\n  the first dimension for an array with C layout, and the last\n  dimension for an array with Fortran layout) can be given as\n  <code class=\"code\">-1</code>.  <code class=\"code\"><span class=\"constructor\">Genarray</span>.map_file</code> then determines the major dimension\n  from the size of the file.  The file must contain an integral\n  number of sub-arrays as determined by the non-major dimensions,\n  otherwise <code class=\"code\"><span class=\"constructor\">Failure</span></code> is raised.</p>\n\n<p>If all dimensions of the big array are given, the file size is\n  matched against the size of the big array.  If the file is larger\n  than the big array, only the initial portion of the file is\n  mapped to the big array.  If the file is smaller than the big\n  array, the file is automatically grown to the size of the big array.\n  This requires write permissions on <code class=\"code\">fd</code>.</p>\n\n<p>Array accesses are bounds-checked, but the bounds are determined by\n  the initial call to <code class=\"code\">map_file</code>. Therefore, you should make sure no\n  other process modifies the mapped file while you're accessing it,\n  or a SIGBUS signal may be raised. This happens, for instance, if the\n  file is shrunk.</p>\n\n<p><code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code> or <code class=\"code\"><span class=\"constructor\">Failure</span></code> may be raised in cases where argument\n  validation fails.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.06.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Operations on file names",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "unlink", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>Removes the named file</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rename", "src:string -> dst:string -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">rename&nbsp;old&nbsp;<span class=\"keyword\">new</span></code> changes the name of a file from <code class=\"code\">old</code> to <code class=\"code\"><span class=\"keyword\">new</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "link", "src:string -> dst:string -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">link&nbsp;source&nbsp;dest</code> creates a hard link named <code class=\"code\">dest</code> to the file\n   named <code class=\"code\">source</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "File permissions and ownership",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "access_permission", "= Unix.access_permission =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaccess_permission.R_OK\"><span class=\"constructor\">R_OK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Read permission</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaccess_permission.W_OK\"><span class=\"constructor\">W_OK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Write permission</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaccess_permission.X_OK\"><span class=\"constructor\">X_OK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Execution permission</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaccess_permission.F_OK\"><span class=\"constructor\">F_OK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>File exists</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Flags for the <a href=\"UnixLabels.html#VALaccess\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.access</code></a> call.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "chmod", "string -> perm: file_perm -> unit",
              "\n<div class=\"info-desc\">\n<p>Change the permissions of the named file.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fchmod", "file_descr -> perm: file_perm -> unit",
              "\n<div class=\"info-desc\">\n<p>Change the permissions of an opened file.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "chown", "string -> uid:int -> gid:int -> unit",
              "\n<div class=\"info-desc\">\n<p>Change the owner uid and owner gid of the named file.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fchown", "file_descr -> uid:int -> gid:int -> unit",
              "\n<div class=\"info-desc\">\n<p>Change the owner uid and owner gid of an opened file.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "umask", "int -> int",
              "\n<div class=\"info-desc\">\n<p>Set the process's file mode creation mask, and return the previous\n    mask.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "access", "string -> perm: access_permission list -> unit",
              "\n<div class=\"info-desc\">\n<p>Check that the process has the given permissions over the named\n   file. Raise <code class=\"code\"><span class=\"constructor\">Unix_error</span></code> otherwise.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Operations on file descriptors",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "dup", "?cloexec:bool -> file_descr -> file_descr",
              "\n<div class=\"info-desc\">\n<p>Return a new file descriptor referencing the same file as\n   the given descriptor.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "dup2",
              "?cloexec:bool -> src: file_descr -> dst: file_descr -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">dup2&nbsp;fd1&nbsp;fd2</code> duplicates <code class=\"code\">fd1</code> to <code class=\"code\">fd2</code>, closing <code class=\"code\">fd2</code> if already\n   opened.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_nonblock", "file_descr -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the ``non-blocking'' flag on the given descriptor.\n   When the non-blocking flag is set, reading on a descriptor\n   on which there is temporarily no data available raises the\n   <code class=\"code\"><span class=\"constructor\">EAGAIN</span></code> or <code class=\"code\"><span class=\"constructor\">EWOULDBLOCK</span></code> error instead of blocking;\n   writing on a descriptor on which there is temporarily no room\n   for writing also raises <code class=\"code\"><span class=\"constructor\">EAGAIN</span></code> or <code class=\"code\"><span class=\"constructor\">EWOULDBLOCK</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "clear_nonblock", "file_descr -> unit",
              "\n<div class=\"info-desc\">\n<p>Clear the ``non-blocking'' flag on the given descriptor.\n   See <a href=\"UnixLabels.html#VALset_nonblock\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.set_nonblock</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set_close_on_exec", "file_descr -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the ``close-on-exec'' flag on the given descriptor.\n   A descriptor with the close-on-exec flag is automatically\n   closed when the current process starts another program with\n   one of the <code class=\"code\">exec</code> functions.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "clear_close_on_exec", "file_descr -> unit",
              "\n<div class=\"info-desc\">\n<p>Clear the ``close-on-exec'' flag on the given descriptor.\n   See <a href=\"UnixLabels.html#VALset_close_on_exec\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.set_close_on_exec</code></a>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Directories",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "mkdir", "string -> perm: file_perm -> unit",
              "\n<div class=\"info-desc\">\n<p>Create a directory with the given permissions.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "rmdir", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>Remove an empty directory.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "chdir", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>Change the process working directory.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getcwd", "unit -> string",
              "\n<div class=\"info-desc\">\n<p>Return the name of the current working directory.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "chroot", "string -> unit",
              "\n<div class=\"info-desc\">\n<p>Change the process root directory.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "dir_handle", "= Unix.dir_handle", null,
              "\n<div class=\"info-desc\">\n<p>The type of descriptors over opened directories.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "opendir", "string -> dir_handle",
              "\n<div class=\"info-desc\">\n<p>Open a descriptor on a directory</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "readdir", "dir_handle -> string",
              "\n<div class=\"info-desc\">\n<p>Return the next entry in a directory.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Raises</b> <code>End_of_file</code> when the end of the directory has been reached.</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "rewinddir", "dir_handle -> unit",
              "\n<div class=\"info-desc\">\n<p>Reposition the descriptor to the beginning of the directory</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "closedir", "dir_handle -> unit",
              "\n<div class=\"info-desc\">\n<p>Close a directory descriptor.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Pipes and redirections",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "pipe", "?cloexec:bool -> unit -> file_descr * file_descr",
              "\n<div class=\"info-desc\">\n<p>Create a pipe. The first component of the result is opened\n   for reading, that's the exit to the pipe. The second component is\n   opened for writing, that's the entrance to the pipe.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mkfifo", "string -> perm: file_perm -> unit",
              "\n<div class=\"info-desc\">\n<p>Create a named pipe with the given permissions.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "High-level process and redirection management",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "create_process",
              "prog:string -> args:string array -> stdin: file_descr -> stdout: file_descr -> stderr: file_descr -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">create_process&nbsp;prog&nbsp;args&nbsp;new_stdin&nbsp;new_stdout&nbsp;new_stderr</code>\n   forks a new process that executes the program\n   in file <code class=\"code\">prog</code>, with arguments <code class=\"code\">args</code>. The pid of the new\n   process is returned immediately; the new process executes\n   concurrently with the current process.\n   The standard input and outputs of the new process are connected\n   to the descriptors <code class=\"code\">new_stdin</code>, <code class=\"code\">new_stdout</code> and <code class=\"code\">new_stderr</code>.\n   Passing e.g. <code class=\"code\">stdout</code> for <code class=\"code\">new_stdout</code> prevents the redirection\n   and causes the new process to have the same standard output\n   as the current process.\n   The executable file <code class=\"code\">prog</code> is searched in the path.\n   The new process has the same environment as the current process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create_process_env",
              "prog:string -> args:string array -> env:string array -> stdin: file_descr -> stdout: file_descr -> stderr: file_descr -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">create_process_env&nbsp;prog&nbsp;args&nbsp;env&nbsp;new_stdin&nbsp;new_stdout&nbsp;new_stderr</code>\n   works as <a href=\"UnixLabels.html#VALcreate_process\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.create_process</code></a>, except that the extra argument\n   <code class=\"code\">env</code> specifies the environment passed to the program.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "open_process_in", "string -> in_channel",
              "\n<div class=\"info-desc\">\n<p>High-level pipe and process management. This function\n   runs the given command in parallel with the program.\n   The standard output of the command is redirected to a pipe,\n   which can be read via the returned input channel.\n   The command is interpreted by the shell <code class=\"code\">/bin/sh</code> (cf. <code class=\"code\">system</code>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "open_process_out", "string -> out_channel",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"UnixLabels.html#VALopen_process_in\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_in</code></a>, but redirect the standard input of\n   the command to a pipe.  Data written to the returned output channel\n   is sent to the standard input of the command.\n   Warning: writes on output channels are buffered, hence be careful\n   to call <a href=\"Pervasives.html#VALflush\"><code class=\"code\">flush</code></a> at the right times to ensure\n   correct synchronization.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "open_process", "string -> in_channel * out_channel",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"UnixLabels.html#VALopen_process_out\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_out</code></a>, but redirects both the standard\n   input and standard output of the command to pipes connected to the two\n   returned channels.  The input channel is connected to the output\n   of the command, and the output channel to the input of the command.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "open_process_full",
              "string -> env:string array -> in_channel * out_channel * in_channel",
              "\n<div class=\"info-desc\">\n<p>Similar to <a href=\"UnixLabels.html#VALopen_process\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process</code></a>, but the second argument specifies\n   the environment passed to the command.  The result is a triple\n   of channels connected respectively to the standard output, standard input,\n   and standard error of the command.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "close_process_in", "in_channel -> process_status",
              "\n<div class=\"info-desc\">\n<p>Close channels opened by <a href=\"UnixLabels.html#VALopen_process_in\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_in</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "close_process_out", "out_channel -> process_status",
              "\n<div class=\"info-desc\">\n<p>Close channels opened by <a href=\"UnixLabels.html#VALopen_process_out\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_out</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "close_process", "in_channel * out_channel -> process_status",
              "\n<div class=\"info-desc\">\n<p>Close channels opened by <a href=\"UnixLabels.html#VALopen_process\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "close_process_full",
              "in_channel * out_channel * in_channel -> process_status",
              "\n<div class=\"info-desc\">\n<p>Close channels opened by <a href=\"UnixLabels.html#VALopen_process_full\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_full</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Symbolic links",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "symlink", "?to_dir:bool -> src:string -> dst:string -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">symlink&nbsp;source&nbsp;dest</code> creates the file <code class=\"code\">dest</code> as a symbolic link\n   to the file <code class=\"code\">source</code>. See <a href=\"Unix.html#VALsymlink\"><code class=\"code\"><span class=\"constructor\">Unix</span>.symlink</code></a> for details of <code class=\"code\">~to_dir</code></p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "has_symlink", "unit -> bool",
              "\n<div class=\"info-desc\">\n<p>Returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the user is able to create symbolic links. On Windows,\n   this indicates that the user not only has the SeCreateSymbolicLinkPrivilege\n   but is also running elevated, if necessary. On other platforms, this is\n   simply indicates that the symlink system call is available.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.03.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "readlink", "string -> string",
              "\n<div class=\"info-desc\">\n<p>Read the contents of a link.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Polling",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "select",
              "read: file_descr list -> write: file_descr list -> except: file_descr list -> timeout:float -> file_descr list * file_descr list * file_descr list",
              "\n<div class=\"info-desc\">\n<p>Wait until some input/output operations become possible on\n   some channels. The three list arguments are, respectively, a set\n   of descriptors to check for reading (first argument), for writing\n   (second argument), or for exceptional conditions (third argument).\n   The fourth argument is the maximal timeout, in seconds; a\n   negative fourth argument means no timeout (unbounded wait).\n   The result is composed of three sets of descriptors: those ready\n   for reading (first component), ready for writing (second component),\n   and over which an exceptional condition is pending (third\n   component).</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Locking",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "lock_command", "= Unix.lock_command =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlock_command.F_ULOCK\"><span class=\"constructor\">F_ULOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Unlock a region</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlock_command.F_LOCK\"><span class=\"constructor\">F_LOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Lock a region for writing, and block if already locked</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlock_command.F_TLOCK\"><span class=\"constructor\">F_TLOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Lock a region for writing, or fail if already locked</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlock_command.F_TEST\"><span class=\"constructor\">F_TEST</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Test a region for other process locks</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlock_command.F_RLOCK\"><span class=\"constructor\">F_RLOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Lock a region for reading, and block if already locked</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTlock_command.F_TRLOCK\"><span class=\"constructor\">F_TRLOCK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Lock a region for reading, or fail if already locked</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Commands for <a href=\"UnixLabels.html#VALlockf\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.lockf</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "lockf", "file_descr -> mode: lock_command -> len:int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">lockf&nbsp;fd&nbsp;cmd&nbsp;size</code> puts a lock on a region of the file opened\n   as <code class=\"code\">fd</code>. The region starts at the current read/write position for\n   <code class=\"code\">fd</code> (as set by <a href=\"UnixLabels.html#VALlseek\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.lseek</code></a>), and extends <code class=\"code\">size</code> bytes forward if\n   <code class=\"code\">size</code> is positive, <code class=\"code\">size</code> bytes backwards if <code class=\"code\">size</code> is negative,\n   or to the end of the file if <code class=\"code\">size</code> is zero.\n   A write lock prevents any other\n   process from acquiring a read or write lock on the region.\n   A read lock prevents any other\n   process from acquiring a write lock on the region, but lets\n   other processes acquire read locks on it.</p>\n\n<p>The <code class=\"code\"><span class=\"constructor\">F_LOCK</span></code> and <code class=\"code\"><span class=\"constructor\">F_TLOCK</span></code> commands attempts to put a write lock\n   on the specified region.\n   The <code class=\"code\"><span class=\"constructor\">F_RLOCK</span></code> and <code class=\"code\"><span class=\"constructor\">F_TRLOCK</span></code> commands attempts to put a read lock\n   on the specified region.\n   If one or several locks put by another process prevent the current process\n   from acquiring the lock, <code class=\"code\"><span class=\"constructor\">F_LOCK</span></code> and <code class=\"code\"><span class=\"constructor\">F_RLOCK</span></code> block until these locks\n   are removed, while <code class=\"code\"><span class=\"constructor\">F_TLOCK</span></code> and <code class=\"code\"><span class=\"constructor\">F_TRLOCK</span></code> fail immediately with an\n   exception.\n   The <code class=\"code\"><span class=\"constructor\">F_ULOCK</span></code> removes whatever locks the current process has on\n   the specified region.\n   Finally, the <code class=\"code\"><span class=\"constructor\">F_TEST</span></code> command tests whether a write lock can be\n   acquired on the specified region, without actually putting a lock.\n   It returns immediately if successful, or fails otherwise.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Signals",
        "section_info":
          "<p>Note: installation of signal handlers is performed via\n   the functions <a href=\"Sys.html#VALsignal\"><code class=\"code\"><span class=\"constructor\">Sys</span>.signal</code></a> and <a href=\"Sys.html#VALset_signal\"><code class=\"code\"><span class=\"constructor\">Sys</span>.set_signal</code></a>.</p>",
        "elements": [
          [
            "Function",
            [
              "kill", "pid:int -> signal:int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">kill&nbsp;pid&nbsp;<span class=\"keyword\">sig</span></code> sends signal number <code class=\"code\"><span class=\"keyword\">sig</span></code> to the process\n   with id <code class=\"code\">pid</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "sigprocmask_command", "= Unix.sigprocmask_command =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsigprocmask_command.SIG_SETMASK\"><span class=\"constructor\">SIG_SETMASK</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsigprocmask_command.SIG_BLOCK\"><span class=\"constructor\">SIG_BLOCK</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsigprocmask_command.SIG_UNBLOCK\"><span class=\"constructor\">SIG_UNBLOCK</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "sigprocmask",
              "mode: sigprocmask_command -> int list -> int list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">sigprocmask&nbsp;cmd&nbsp;sigs</code> changes the set of blocked signals.\n   If <code class=\"code\">cmd</code> is <code class=\"code\"><span class=\"constructor\">SIG_SETMASK</span></code>, blocked signals are set to those in\n   the list <code class=\"code\">sigs</code>.\n   If <code class=\"code\">cmd</code> is <code class=\"code\"><span class=\"constructor\">SIG_BLOCK</span></code>, the signals in <code class=\"code\">sigs</code> are added to\n   the set of blocked signals.\n   If <code class=\"code\">cmd</code> is <code class=\"code\"><span class=\"constructor\">SIG_UNBLOCK</span></code>, the signals in <code class=\"code\">sigs</code> are removed\n   from the set of blocked signals.\n   <code class=\"code\">sigprocmask</code> returns the set of previously blocked signals.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sigpending", "unit -> int list",
              "\n<div class=\"info-desc\">\n<p>Return the set of blocked signals that are currently pending.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sigsuspend", "int list -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">sigsuspend&nbsp;sigs</code> atomically sets the blocked signals to <code class=\"code\">sigs</code>\n   and waits for a non-ignored, non-blocked signal to be delivered.\n   On return, the blocked signals are reset to their initial value.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "pause", "unit -> unit",
              "\n<div class=\"info-desc\">\n<p>Wait until a non-ignored, non-blocked signal is delivered.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Time functions",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "process_times", "= Unix.process_times = {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprocess_times.tms_utime\">tms_utime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>User time for the process</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprocess_times.tms_stime\">tms_stime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>System time for the process</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprocess_times.tms_cutime\">tms_cutime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>User time for the children processes</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprocess_times.tms_cstime\">tms_cstime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>System time for the children processes</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The execution times (CPU times) of a process.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "tm", "= Unix.tm = {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_sec\">tm_sec</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Seconds 0..60</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_min\">tm_min</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Minutes 0..59</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_hour\">tm_hour</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Hours 0..23</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_mday\">tm_mday</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Day of month 1..31</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_mon\">tm_mon</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Month of year 0..11</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_year\">tm_year</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Year - 1900</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_wday\">tm_wday</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Day of week (Sunday is 0)</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_yday\">tm_yday</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Day of year 0..365</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTtm.tm_isdst\">tm_isdst</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Daylight time savings in effect</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The type representing wallclock time and calendar date.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "time", "unit -> float",
              "\n<div class=\"info-desc\">\n<p>Return the current time since 00:00:00 GMT, Jan. 1, 1970,\n   in seconds.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "gettimeofday", "unit -> float",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"UnixLabels.html#VALtime\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.time</code></a>, but with resolution better than 1 second.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "gmtime", "float -> tm",
              "\n<div class=\"info-desc\">\n<p>Convert a time in seconds, as returned by <a href=\"UnixLabels.html#VALtime\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.time</code></a>, into a date\n   and a time. Assumes UTC (Coordinated Universal Time), also known as GMT.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "localtime", "float -> tm",
              "\n<div class=\"info-desc\">\n<p>Convert a time in seconds, as returned by <a href=\"UnixLabels.html#VALtime\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.time</code></a>, into a date\n   and a time. Assumes the local time zone.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mktime", "tm -> float * tm",
              "\n<div class=\"info-desc\">\n<p>Convert a date and time, specified by the <code class=\"code\">tm</code> argument, into\n   a time in seconds, as returned by <a href=\"UnixLabels.html#VALtime\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.time</code></a>.  The <code class=\"code\">tm_isdst</code>,\n   <code class=\"code\">tm_wday</code> and <code class=\"code\">tm_yday</code> fields of <code class=\"code\">tm</code> are ignored.  Also return a\n   normalized copy of the given <code class=\"code\">tm</code> record, with the <code class=\"code\">tm_wday</code>,\n   <code class=\"code\">tm_yday</code>, and <code class=\"code\">tm_isdst</code> fields recomputed from the other fields,\n   and the other fields normalized (so that, e.g., 40 October is\n   changed into 9 November).  The <code class=\"code\">tm</code> argument is interpreted in the\n   local time zone.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "alarm", "int -> int",
              "\n<div class=\"info-desc\">\n<p>Schedule a <code class=\"code\"><span class=\"constructor\">SIGALRM</span></code> signal after the given number of seconds.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sleep", "int -> unit",
              "\n<div class=\"info-desc\">\n<p>Stop execution for the given number of seconds.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "times", "unit -> process_times",
              "\n<div class=\"info-desc\">\n<p>Return the execution times of the process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "utimes", "string -> access:float -> modif:float -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the last access time (second arg) and last modification time\n   (third arg) for a file. Times are expressed in seconds from\n   00:00:00 GMT, Jan. 1, 1970.  A time of <code class=\"code\">0.0</code> is interpreted as the\n   current time.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "interval_timer", "= Unix.interval_timer =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinterval_timer.ITIMER_REAL\"><span class=\"constructor\">ITIMER_REAL</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>decrements in real time, and sends the signal <code class=\"code\"><span class=\"constructor\">SIGALRM</span></code> when\n          expired.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinterval_timer.ITIMER_VIRTUAL\"><span class=\"constructor\">ITIMER_VIRTUAL</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>decrements in process virtual time, and sends <code class=\"code\"><span class=\"constructor\">SIGVTALRM</span></code> when\n          expired.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinterval_timer.ITIMER_PROF\"><span class=\"constructor\">ITIMER_PROF</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>(for profiling) decrements both when the process\n         is running and when the system is running on behalf of the\n         process; it sends <code class=\"code\"><span class=\"constructor\">SIGPROF</span></code> when expired.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The three kinds of interval timers.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "interval_timer_status", "= Unix.interval_timer_status = {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinterval_timer_status.it_interval\">it_interval</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Period</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTinterval_timer_status.it_value\">it_value</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Current value of the timer</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The type describing the status of an interval timer</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getitimer", "interval_timer -> interval_timer_status",
              "\n<div class=\"info-desc\">\n<p>Return the current status of the given interval timer.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setitimer",
              "interval_timer -> interval_timer_status -> interval_timer_status",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">setitimer&nbsp;t&nbsp;s</code> sets the interval timer <code class=\"code\">t</code> and returns\n   its previous status. The <code class=\"code\">s</code> argument is interpreted as follows:\n   <code class=\"code\">s.it_value</code>, if nonzero, is the time to the next timer expiration;\n   <code class=\"code\">s.it_interval</code>, if nonzero, specifies a value to\n   be used in reloading it_value when the timer expires.\n   Setting <code class=\"code\">s.it_value</code> to zero disable the timer.\n   Setting <code class=\"code\">s.it_interval</code> to zero causes the timer to be disabled\n   after its next expiration.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "User id, group id",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "getuid", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the user id of the user executing the process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "geteuid", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the effective user id under which the process runs.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setuid", "int -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the real user id and effective user id for the process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getgid", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the group id of the user executing the process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getegid", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Return the effective group id under which the process runs.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setgid", "int -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the real group id and effective group id for the process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getgroups", "unit -> int array",
              "\n<div class=\"info-desc\">\n<p>Return the list of groups to which the user executing the process\n   belongs.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setgroups", "int array -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">setgroups&nbsp;groups</code> sets the supplementary group IDs for the\n      calling process. Appropriate privileges are required.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "initgroups", "string -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">initgroups&nbsp;user&nbsp;group</code> initializes the group access list by\n      reading the group database /etc/group and using all groups of\n      which <code class=\"code\">user</code> is a member. The additional group <code class=\"code\">group</code> is also\n      added to the list.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "passwd_entry", "= Unix.passwd_entry = {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpasswd_entry.pw_name\">pw_name</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpasswd_entry.pw_passwd\">pw_passwd</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpasswd_entry.pw_uid\">pw_uid</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpasswd_entry.pw_gid\">pw_gid</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpasswd_entry.pw_gecos\">pw_gecos</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpasswd_entry.pw_dir\">pw_dir</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTpasswd_entry.pw_shell\">pw_shell</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Structure of entries in the <code class=\"code\">passwd</code> database.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "group_entry", "= Unix.group_entry = {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgroup_entry.gr_name\">gr_name</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgroup_entry.gr_passwd\">gr_passwd</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgroup_entry.gr_gid\">gr_gid</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgroup_entry.gr_mem\">gr_mem</span>&nbsp;: <code class=\"type\">string array</code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Structure of entries in the <code class=\"code\">groups</code> database.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getlogin", "unit -> string",
              "\n<div class=\"info-desc\">\n<p>Return the login name of the user executing the process.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getpwnam", "string -> passwd_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">passwd</code> with the given name, or raise\n   <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the matching entry is not found.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getgrnam", "string -> group_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">group</code> with the given name, or raise\n   <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the matching entry is not found.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getpwuid", "int -> passwd_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">passwd</code> with the given user id, or raise\n   <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the matching entry is not found.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getgrgid", "int -> group_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">group</code> with the given group id, or raise\n   <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the matching entry is not found.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Internet addresses",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "inet_addr", "= Unix.inet_addr", null,
              "\n<div class=\"info-desc\">\n<p>The abstract type of Internet addresses.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "inet_addr_of_string", "string -> inet_addr",
              "\n<div class=\"info-desc\">\n<p>Conversion from the printable representation of an Internet\n    address to its internal representation.  The argument string\n    consists of 4 numbers separated by periods (<code class=\"code\"><span class=\"constructor\">XXX</span>.<span class=\"constructor\">YYY</span>.<span class=\"constructor\">ZZZ</span>.<span class=\"constructor\">TTT</span></code>)\n    for IPv4 addresses, and up to 8 numbers separated by colons\n    for IPv6 addresses.  Raise <code class=\"code\"><span class=\"constructor\">Failure</span></code> when given a string that\n    does not match these formats.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "string_of_inet_addr", "inet_addr -> string",
              "\n<div class=\"info-desc\">\n<p>Return the printable representation of the given Internet address.\n    See <a href=\"Unix.html#VALinet_addr_of_string\"><code class=\"code\"><span class=\"constructor\">Unix</span>.inet_addr_of_string</code></a> for a description of the\n    printable representation.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "inet_addr_any", "inet_addr",
              "\n<div class=\"info-desc\">\n<p>A special IPv4 address, for use only with <code class=\"code\">bind</code>, representing\n   all the Internet addresses that the host machine possesses.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "inet_addr_loopback", "inet_addr",
              "\n<div class=\"info-desc\">\n<p>A special IPv4 address representing the host machine (<code class=\"code\">127.0.0.1</code>).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "inet6_addr_any", "inet_addr",
              "\n<div class=\"info-desc\">\n<p>A special IPv6 address, for use only with <code class=\"code\">bind</code>, representing\n   all the Internet addresses that the host machine possesses.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "inet6_addr_loopback", "inet_addr",
              "\n<div class=\"info-desc\">\n<p>A special IPv6 address representing the host machine (<code class=\"code\">::1</code>).</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Sockets",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "socket_domain", "= Unix.socket_domain =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_domain.PF_UNIX\"><span class=\"constructor\">PF_UNIX</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Unix domain</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_domain.PF_INET\"><span class=\"constructor\">PF_INET</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Internet domain (IPv4)</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_domain.PF_INET6\"><span class=\"constructor\">PF_INET6</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Internet domain (IPv6)</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The type of socket domains.  Not all platforms support\n    IPv6 sockets (type <code class=\"code\"><span class=\"constructor\">PF_INET6</span></code>).</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "socket_type", "= Unix.socket_type =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_type.SOCK_STREAM\"><span class=\"constructor\">SOCK_STREAM</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Stream socket</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_type.SOCK_DGRAM\"><span class=\"constructor\">SOCK_DGRAM</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Datagram socket</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_type.SOCK_RAW\"><span class=\"constructor\">SOCK_RAW</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Raw socket</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_type.SOCK_SEQPACKET\"><span class=\"constructor\">SOCK_SEQPACKET</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Sequenced packets socket</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The type of socket kinds, specifying the semantics of\n   communications.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "sockaddr", "= Unix.sockaddr =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsockaddr.ADDR_UNIX\"><span class=\"constructor\">ADDR_UNIX</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsockaddr.ADDR_INET\"><span class=\"constructor\">ADDR_INET</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"UnixLabels.html#TYPEinet_addr\">inet_addr</a> * int</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The type of socket addresses. <code class=\"code\"><span class=\"constructor\">ADDR_UNIX</span>&nbsp;name</code> is a socket\n   address in the Unix domain; <code class=\"code\">name</code> is a file name in the file\n   system. <code class=\"code\"><span class=\"constructor\">ADDR_INET</span>(addr,port)</code> is a socket address in the Internet\n   domain; <code class=\"code\">addr</code> is the Internet address of the machine, and\n   <code class=\"code\">port</code> is the port number.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "socket",
              "?cloexec:bool -> domain: socket_domain -> kind: socket_type -> protocol:int -> file_descr",
              "\n<div class=\"info-desc\">\n<p>Create a new socket in the given domain, and with the\n   given kind. The third argument is the protocol type; 0 selects\n   the default protocol for that kind of sockets.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "domain_of_sockaddr", "sockaddr -> socket_domain",
              "\n<div class=\"info-desc\">\n<p>Return the socket domain adequate for the given socket address.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "socketpair",
              "?cloexec:bool -> domain: socket_domain -> kind: socket_type -> protocol:int -> file_descr * file_descr",
              "\n<div class=\"info-desc\">\n<p>Create a pair of unnamed sockets, connected together.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "accept",
              "?cloexec:bool -> file_descr -> file_descr * sockaddr",
              "\n<div class=\"info-desc\">\n<p>Accept connections on the given socket. The returned descriptor\n   is a socket connected to the client; the returned address is\n   the address of the connecting client.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "bind", "file_descr -> addr: sockaddr -> unit",
              "\n<div class=\"info-desc\">\n<p>Bind a socket to an address.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "connect", "file_descr -> addr: sockaddr -> unit",
              "\n<div class=\"info-desc\">\n<p>Connect a socket to an address.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "listen", "file_descr -> max:int -> unit",
              "\n<div class=\"info-desc\">\n<p>Set up a socket for receiving connection requests. The integer\n   argument is the maximal number of pending requests.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "shutdown_command", "= Unix.shutdown_command =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTshutdown_command.SHUTDOWN_RECEIVE\"><span class=\"constructor\">SHUTDOWN_RECEIVE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Close for receiving</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTshutdown_command.SHUTDOWN_SEND\"><span class=\"constructor\">SHUTDOWN_SEND</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Close for sending</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTshutdown_command.SHUTDOWN_ALL\"><span class=\"constructor\">SHUTDOWN_ALL</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Close both</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The type of commands for <code class=\"code\">shutdown</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "shutdown", "file_descr -> mode: shutdown_command -> unit",
              "\n<div class=\"info-desc\">\n<p>Shutdown a socket connection. <code class=\"code\"><span class=\"constructor\">SHUTDOWN_SEND</span></code> as second argument\n   causes reads on the other end of the connection to return\n   an end-of-file condition.\n   <code class=\"code\"><span class=\"constructor\">SHUTDOWN_RECEIVE</span></code> causes writes on the other end of the connection\n   to return a closed pipe condition (<code class=\"code\"><span class=\"constructor\">SIGPIPE</span></code> signal).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getsockname", "file_descr -> sockaddr",
              "\n<div class=\"info-desc\">\n<p>Return the address of the given socket.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getpeername", "file_descr -> sockaddr",
              "\n<div class=\"info-desc\">\n<p>Return the address of the host connected to the given socket.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "msg_flag", "= Unix.msg_flag =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmsg_flag.MSG_OOB\"><span class=\"constructor\">MSG_OOB</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmsg_flag.MSG_DONTROUTE\"><span class=\"constructor\">MSG_DONTROUTE</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTmsg_flag.MSG_PEEK\"><span class=\"constructor\">MSG_PEEK</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>The flags for <a href=\"UnixLabels.html#VALrecv\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.recv</code></a>,  <a href=\"UnixLabels.html#VALrecvfrom\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.recvfrom</code></a>,\n   <a href=\"UnixLabels.html#VALsend\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.send</code></a> and <a href=\"UnixLabels.html#VALsendto\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.sendto</code></a>.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "recv",
              "file_descr -> buf:bytes -> pos:int -> len:int -> mode: msg_flag list -> int",
              "\n<div class=\"info-desc\">\n<p>Receive data from a connected socket.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "recvfrom",
              "file_descr -> buf:bytes -> pos:int -> len:int -> mode: msg_flag list -> int * sockaddr",
              "\n<div class=\"info-desc\">\n<p>Receive data from an unconnected socket.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "send",
              "file_descr -> buf:bytes -> pos:int -> len:int -> mode: msg_flag list -> int",
              "\n<div class=\"info-desc\">\n<p>Send data over a connected socket.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "send_substring",
              "file_descr -> buf:string -> pos:int -> len:int -> mode: msg_flag list -> int",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">send</code>, but take the data from a string instead of a byte\n    sequence.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "sendto",
              "file_descr -> buf:bytes -> pos:int -> len:int -> mode: msg_flag list -> addr: sockaddr -> int",
              "\n<div class=\"info-desc\">\n<p>Send data over an unconnected socket.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "sendto_substring",
              "file_descr -> buf:string -> pos:int -> len:int -> mode: msg_flag list -> sockaddr -> int",
              "\n<div class=\"info-desc\">\n<p>Same as <code class=\"code\">sendto</code>, but take the data from a string instead of a\n    byte sequence.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.02.0</li>\n</ul>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Socket options",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "socket_bool_option", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.SO_DEBUG\"><span class=\"constructor\">SO_DEBUG</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Record debugging information</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.SO_BROADCAST\"><span class=\"constructor\">SO_BROADCAST</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Permit sending of broadcast messages</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.SO_REUSEADDR\"><span class=\"constructor\">SO_REUSEADDR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Allow reuse of local addresses for bind</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.SO_KEEPALIVE\"><span class=\"constructor\">SO_KEEPALIVE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Keep connection active</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.SO_DONTROUTE\"><span class=\"constructor\">SO_DONTROUTE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Bypass the standard routing algorithms</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.SO_OOBINLINE\"><span class=\"constructor\">SO_OOBINLINE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Leave out-of-band data in line</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.SO_ACCEPTCONN\"><span class=\"constructor\">SO_ACCEPTCONN</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Report whether socket listening is enabled</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.TCP_NODELAY\"><span class=\"constructor\">TCP_NODELAY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Control the Nagle algorithm for TCP sockets</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_bool_option.IPV6_ONLY\"><span class=\"constructor\">IPV6_ONLY</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Forbid binding an IPv6 socket to an IPv4 address</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The socket options that can be consulted with <a href=\"UnixLabels.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.getsockopt</code></a>\n   and modified with <a href=\"UnixLabels.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.setsockopt</code></a>.  These options have a boolean\n   (<code class=\"code\"><span class=\"keyword\">true</span></code>/<code class=\"code\"><span class=\"keyword\">false</span></code>) value.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "socket_int_option", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_int_option.SO_SNDBUF\"><span class=\"constructor\">SO_SNDBUF</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Size of send buffer</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_int_option.SO_RCVBUF\"><span class=\"constructor\">SO_RCVBUF</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Size of received buffer</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_int_option.SO_ERROR\"><span class=\"constructor\">SO_ERROR</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Deprecated.  Use <a href=\"Unix.html#VALgetsockopt_error\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt_error</code></a> instead.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_int_option.SO_TYPE\"><span class=\"constructor\">SO_TYPE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Report the socket type</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_int_option.SO_RCVLOWAT\"><span class=\"constructor\">SO_RCVLOWAT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Minimum number of bytes to process for input operations</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_int_option.SO_SNDLOWAT\"><span class=\"constructor\">SO_SNDLOWAT</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Minimum number of bytes to process for output operations</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The socket options that can be consulted with <a href=\"UnixLabels.html#VALgetsockopt_int\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.getsockopt_int</code></a>\n   and modified with <a href=\"UnixLabels.html#VALsetsockopt_int\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.setsockopt_int</code></a>.  These options have an\n   integer value.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "socket_optint_option", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_optint_option.SO_LINGER\"><span class=\"constructor\">SO_LINGER</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Whether to linger on closed connections\n                    that have data present, and for how long\n                    (in seconds)</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The socket options that can be consulted with <a href=\"Unix.html#VALgetsockopt_optint\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt_optint</code></a>\n   and modified with <a href=\"Unix.html#VALsetsockopt_optint\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt_optint</code></a>.  These options have a\n   value of type <code class=\"code\">int&nbsp;option</code>, with <code class=\"code\"><span class=\"constructor\">None</span></code> meaning ``disabled''.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "socket_float_option", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_float_option.SO_RCVTIMEO\"><span class=\"constructor\">SO_RCVTIMEO</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Timeout for input operations</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsocket_float_option.SO_SNDTIMEO\"><span class=\"constructor\">SO_SNDTIMEO</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Timeout for output operations</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>The socket options that can be consulted with <a href=\"UnixLabels.html#VALgetsockopt_float\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.getsockopt_float</code></a>\n   and modified with <a href=\"UnixLabels.html#VALsetsockopt_float\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.setsockopt_float</code></a>.  These options have a\n   floating-point value representing a time in seconds.\n   The value 0 means infinite timeout.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getsockopt", "file_descr -> socket_bool_option -> bool",
              "\n<div class=\"info-desc\">\n<p>Return the current status of a boolean-valued option\n   in the given socket.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setsockopt",
              "file_descr -> socket_bool_option -> bool -> unit",
              "\n<div class=\"info-desc\">\n<p>Set or clear a boolean-valued option in the given socket.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getsockopt_int", "file_descr -> socket_int_option -> int",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for an integer-valued socket option.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setsockopt_int",
              "file_descr -> socket_int_option -> int -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for an integer-valued socket option.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getsockopt_optint",
              "file_descr -> socket_optint_option -> int option",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for a socket option whose value is\n    an <code class=\"code\">int&nbsp;option</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setsockopt_optint",
              "file_descr -> socket_optint_option -> int option -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for a socket option whose value is\n    an <code class=\"code\">int&nbsp;option</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getsockopt_float",
              "file_descr -> socket_float_option -> float",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for a socket option whose value is a\n    floating-point number.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setsockopt_float",
              "file_descr -> socket_float_option -> float -> unit",
              "\n<div class=\"info-desc\">\n<p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for a socket option whose value is a\n    floating-point number.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getsockopt_error", "file_descr -> error option",
              "\n<div class=\"info-desc\">\n<p>Return the error condition associated with the given socket,\n    and clear it.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "High-level network connection functions",
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "open_connection", "sockaddr -> in_channel * out_channel",
              "\n<div class=\"info-desc\">\n<p>Connect to a server at the given address.\n   Return a pair of buffered channels connected to the server.\n   Remember to call <a href=\"Pervasives.html#VALflush\"><code class=\"code\">flush</code></a> on the output channel at the right\n   times to ensure correct synchronization.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "shutdown_connection", "in_channel -> unit",
              "\n<div class=\"info-desc\">\n<p>``Shut down'' a connection established with <a href=\"UnixLabels.html#VALopen_connection\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_connection</code></a>;\n   that is, transmit an end-of-file condition to the server reading\n   on the other side of the connection.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "establish_server",
              "( in_channel -> out_channel -> unit) -> addr: sockaddr -> unit",
              "\n<div class=\"info-desc\">\n<p>Establish a server on the given address.\n   The function given as first argument is called for each connection\n   with two buffered channels connected to the client. A new process\n   is created for each connection. The function <a href=\"UnixLabels.html#VALestablish_server\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.establish_server</code></a>\n   never returns normally.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Host and protocol databases",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "host_entry", "= Unix.host_entry = {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELThost_entry.h_name\">h_name</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELThost_entry.h_aliases\">h_aliases</span>&nbsp;: <code class=\"type\">string array</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELThost_entry.h_addrtype\">h_addrtype</span>&nbsp;: <code class=\"type\"><a href=\"UnixLabels.html#TYPEsocket_domain\">socket_domain</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELThost_entry.h_addr_list\">h_addr_list</span>&nbsp;: <code class=\"type\"><a href=\"UnixLabels.html#TYPEinet_addr\">inet_addr</a> array</code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Structure of entries in the <code class=\"code\">hosts</code> database.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "protocol_entry", "= Unix.protocol_entry = {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprotocol_entry.p_name\">p_name</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprotocol_entry.p_aliases\">p_aliases</span>&nbsp;: <code class=\"type\">string array</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTprotocol_entry.p_proto\">p_proto</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Structure of entries in the <code class=\"code\">protocols</code> database.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "service_entry", "= Unix.service_entry = {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTservice_entry.s_name\">s_name</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTservice_entry.s_aliases\">s_aliases</span>&nbsp;: <code class=\"type\">string array</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTservice_entry.s_port\">s_port</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTservice_entry.s_proto\">s_proto</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Structure of entries in the <code class=\"code\">services</code> database.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "gethostname", "unit -> string",
              "\n<div class=\"info-desc\">\n<p>Return the name of the local host.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "gethostbyname", "string -> host_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">hosts</code> with the given name, or raise\n   <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "gethostbyaddr", "inet_addr -> host_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">hosts</code> with the given address, or raise\n   <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getprotobyname", "string -> protocol_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">protocols</code> with the given name, or raise\n   <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getprotobynumber", "int -> protocol_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">protocols</code> with the given protocol number,\n   or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getservbyname", "string -> protocol:string -> service_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">services</code> with the given name, or raise\n   <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getservbyport", "int -> protocol:string -> service_entry",
              "\n<div class=\"info-desc\">\n<p>Find an entry in <code class=\"code\">services</code> with the given service number,\n   or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "addr_info", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaddr_info.ai_family\">ai_family</span>&nbsp;: <code class=\"type\"><a href=\"UnixLabels.html#TYPEsocket_domain\">socket_domain</a></code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Socket domain</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaddr_info.ai_socktype\">ai_socktype</span>&nbsp;: <code class=\"type\"><a href=\"UnixLabels.html#TYPEsocket_type\">socket_type</a></code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Socket type</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaddr_info.ai_protocol\">ai_protocol</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Socket protocol number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaddr_info.ai_addr\">ai_addr</span>&nbsp;: <code class=\"type\"><a href=\"UnixLabels.html#TYPEsockaddr\">sockaddr</a></code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Address</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTaddr_info.ai_canonname\">ai_canonname</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Canonical host name</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Address information returned by <a href=\"Unix.html#VALgetaddrinfo\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getaddrinfo</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "getaddrinfo_option", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetaddrinfo_option.AI_FAMILY\"><span class=\"constructor\">AI_FAMILY</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"UnixLabels.html#TYPEsocket_domain\">socket_domain</a></code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Impose the given socket domain</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetaddrinfo_option.AI_SOCKTYPE\"><span class=\"constructor\">AI_SOCKTYPE</span></span> <span class=\"keyword\">of</span> <code class=\"type\"><a href=\"UnixLabels.html#TYPEsocket_type\">socket_type</a></code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Impose the given socket type</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetaddrinfo_option.AI_PROTOCOL\"><span class=\"constructor\">AI_PROTOCOL</span></span> <span class=\"keyword\">of</span> <code class=\"type\">int</code></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Impose the given protocol</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetaddrinfo_option.AI_NUMERICHOST\"><span class=\"constructor\">AI_NUMERICHOST</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Do not call name resolver,\n                                            expect numeric IP address</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetaddrinfo_option.AI_CANONNAME\"><span class=\"constructor\">AI_CANONNAME</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Fill the <code class=\"code\">ai_canonname</code> field\n                                            of the result</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetaddrinfo_option.AI_PASSIVE\"><span class=\"constructor\">AI_PASSIVE</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Set address to ``any'' address\n                                            for use with <a href=\"Unix.html#VALbind\"><code class=\"code\"><span class=\"constructor\">Unix</span>.bind</code></a></p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Options to <a href=\"Unix.html#VALgetaddrinfo\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getaddrinfo</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getaddrinfo",
              "string -> string -> getaddrinfo_option list -> addr_info list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">getaddrinfo&nbsp;host&nbsp;service&nbsp;opts</code> returns a list of <a href=\"Unix.html#TYPEaddr_info\"><code class=\"code\"><span class=\"constructor\">Unix</span>.addr_info</code></a>\n    records describing socket parameters and addresses suitable for\n    communicating with the given host and service.  The empty list is\n    returned if the host or service names are unknown, or the constraints\n    expressed in <code class=\"code\">opts</code> cannot be satisfied.</p>\n\n<p><code class=\"code\">host</code> is either a host name or the string representation of an IP\n    address.  <code class=\"code\">host</code> can be given as the empty string; in this case,\n    the ``any'' address or the ``loopback'' address are used,\n    depending whether <code class=\"code\">opts</code> contains <code class=\"code\"><span class=\"constructor\">AI_PASSIVE</span></code>.\n    <code class=\"code\">service</code> is either a service name or the string representation of\n    a port number.  <code class=\"code\">service</code> can be given as the empty string;\n    in this case, the port field of the returned addresses is set to 0.\n    <code class=\"code\">opts</code> is a possibly empty list of options that allows the caller\n    to force a particular socket domain (e.g. IPv6 only or IPv4 only)\n    or a particular socket type (e.g. TCP only or UDP only).</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "name_info", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTname_info.ni_hostname\">ni_hostname</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Name or IP address of host</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTname_info.ni_service\">ni_service</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Name of service or port number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Host and service information returned by <a href=\"Unix.html#VALgetnameinfo\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getnameinfo</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "getnameinfo_option", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetnameinfo_option.NI_NOFQDN\"><span class=\"constructor\">NI_NOFQDN</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Do not qualify local host names</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetnameinfo_option.NI_NUMERICHOST\"><span class=\"constructor\">NI_NUMERICHOST</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Always return host as IP address</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetnameinfo_option.NI_NAMEREQD\"><span class=\"constructor\">NI_NAMEREQD</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Fail if host name cannot be determined</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetnameinfo_option.NI_NUMERICSERV\"><span class=\"constructor\">NI_NUMERICSERV</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Always return service as port number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTgetnameinfo_option.NI_DGRAM\"><span class=\"constructor\">NI_DGRAM</span></span></code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Consider the service as UDP-based\n                             instead of the default TCP</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              "\n<div class=\"info-desc\">\n<p>Options to <a href=\"Unix.html#VALgetnameinfo\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getnameinfo</code></a>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "getnameinfo",
              "sockaddr -> getnameinfo_option list -> name_info",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">getnameinfo&nbsp;addr&nbsp;opts</code> returns the host name and service name\n    corresponding to the socket address <code class=\"code\">addr</code>.  <code class=\"code\">opts</code> is a possibly\n    empty list of options that governs how these names are obtained.\n    Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if an error occurs.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Terminal interface",
        "section_info":
          "<p>The following functions implement the POSIX standard terminal\n   interface. They provide control over asynchronous communication ports\n   and pseudo-terminals. Refer to the <code class=\"code\">termios</code> man page for a\n   complete description.</p>",
        "elements": [
          [
            "Typevariant",
            [
              "terminal_io", "= Unix.terminal_io = {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_ignbrk\">c_ignbrk</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Ignore the break condition.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_brkint\">c_brkint</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Signal interrupt on break condition.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_ignpar\">c_ignpar</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Ignore characters with parity errors.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_parmrk\">c_parmrk</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Mark parity errors.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_inpck\">c_inpck</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Enable parity check on input.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_istrip\">c_istrip</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Strip 8th bit on input characters.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_inlcr\">c_inlcr</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Map NL to CR on input.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_igncr\">c_igncr</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Ignore CR on input.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_icrnl\">c_icrnl</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Map CR to NL on input.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_ixon\">c_ixon</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Recognize XON/XOFF characters on input.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_ixoff\">c_ixoff</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Emit XON/XOFF chars to control input flow.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_opost\">c_opost</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Enable output processing.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_obaud\">c_obaud</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Output baud rate (0 means close connection).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_ibaud\">c_ibaud</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Input baud rate.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_csize\">c_csize</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of bits per character (5-8).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_cstopb\">c_cstopb</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of stop bits (1-2).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_cread\">c_cread</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Reception is enabled.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_parenb\">c_parenb</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Enable parity generation and detection.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_parodd\">c_parodd</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Specify odd parity instead of even.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_hupcl\">c_hupcl</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Hang up on last close.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_clocal\">c_clocal</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Ignore modem status lines.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_isig\">c_isig</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Generate signal on INTR, QUIT, SUSP.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_icanon\">c_icanon</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Enable canonical processing\n                                 (line buffering and editing)</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_noflsh\">c_noflsh</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Disable flush after INTR, QUIT, SUSP.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_echo\">c_echo</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Echo input characters.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_echoe\">c_echoe</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Echo ERASE (to erase previous character).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_echok\">c_echok</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Echo KILL (to erase the current line).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_echonl\">c_echonl</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Echo NL even if c_echo is not set.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_vintr\">c_vintr</span>&nbsp;: <code class=\"type\">char</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Interrupt character (usually ctrl-C).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_vquit\">c_vquit</span>&nbsp;: <code class=\"type\">char</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Quit character (usually ctrl-\\).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_verase\">c_verase</span>&nbsp;: <code class=\"type\">char</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Erase character (usually DEL or ctrl-H).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_vkill\">c_vkill</span>&nbsp;: <code class=\"type\">char</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Kill line character (usually ctrl-U).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_veof\">c_veof</span>&nbsp;: <code class=\"type\">char</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>End-of-file character (usually ctrl-D).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_veol\">c_veol</span>&nbsp;: <code class=\"type\">char</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Alternate end-of-line char. (usually none).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_vmin\">c_vmin</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Minimum number of characters to read\n                                 before the read request is satisfied.</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_vtime\">c_vtime</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Maximum read wait (in 0.1s units).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_vstart\">c_vstart</span>&nbsp;: <code class=\"type\">char</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Start character (usually ctrl-Q).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">mutable&nbsp;</span><span id=\"TYPEELTterminal_io.c_vstop\">c_vstop</span>&nbsp;: <code class=\"type\">char</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Stop character (usually ctrl-S).</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "tcgetattr", "file_descr -> terminal_io",
              "\n<div class=\"info-desc\">\n<p>Return the status of the terminal referred to by the given\n   file descriptor.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "setattr_when", "= Unix.setattr_when =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsetattr_when.TCSANOW\"><span class=\"constructor\">TCSANOW</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsetattr_when.TCSADRAIN\"><span class=\"constructor\">TCSADRAIN</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTsetattr_when.TCSAFLUSH\"><span class=\"constructor\">TCSAFLUSH</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "tcsetattr",
              "file_descr -> mode: setattr_when -> terminal_io -> unit",
              "\n<div class=\"info-desc\">\n<p>Set the status of the terminal referred to by the given\n   file descriptor. The second argument indicates when the\n   status change takes place: immediately (<code class=\"code\"><span class=\"constructor\">TCSANOW</span></code>),\n   when all pending output has been transmitted (<code class=\"code\"><span class=\"constructor\">TCSADRAIN</span></code>),\n   or after flushing all input that has been received but not\n   read (<code class=\"code\"><span class=\"constructor\">TCSAFLUSH</span></code>). <code class=\"code\"><span class=\"constructor\">TCSADRAIN</span></code> is recommended when changing\n   the output parameters; <code class=\"code\"><span class=\"constructor\">TCSAFLUSH</span></code>, when changing the input\n   parameters.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "tcsendbreak", "file_descr -> duration:int -> unit",
              "\n<div class=\"info-desc\">\n<p>Send a break condition on the given file descriptor.\n   The second argument is the duration of the break, in 0.1s units;\n   0 means standard duration (0.25s).</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "tcdrain", "file_descr -> unit",
              "\n<div class=\"info-desc\">\n<p>Waits until all output written on the given file descriptor\n   has been transmitted.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "flush_queue", "= Unix.flush_queue =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTflush_queue.TCIFLUSH\"><span class=\"constructor\">TCIFLUSH</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTflush_queue.TCOFLUSH\"><span class=\"constructor\">TCOFLUSH</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTflush_queue.TCIOFLUSH\"><span class=\"constructor\">TCIOFLUSH</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "tcflush", "file_descr -> mode: flush_queue -> unit",
              "\n<div class=\"info-desc\">\n<p>Discard data written on the given file descriptor but not yet\n   transmitted, or data received but not yet read, depending on the\n   second argument: <code class=\"code\"><span class=\"constructor\">TCIFLUSH</span></code> flushes data received but not read,\n   <code class=\"code\"><span class=\"constructor\">TCOFLUSH</span></code> flushes data written but not transmitted, and\n   <code class=\"code\"><span class=\"constructor\">TCIOFLUSH</span></code> flushes both.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "flow_action", "= Unix.flow_action =",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTflow_action.TCOOFF\"><span class=\"constructor\">TCOOFF</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTflow_action.TCOON\"><span class=\"constructor\">TCOON</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTflow_action.TCIOFF\"><span class=\"constructor\">TCIOFF</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTflow_action.TCION\"><span class=\"constructor\">TCION</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "tcflow", "file_descr -> mode: flow_action -> unit",
              "\n<div class=\"info-desc\">\n<p>Suspend or restart reception or transmission of data on\n   the given file descriptor, depending on the second argument:\n   <code class=\"code\"><span class=\"constructor\">TCOOFF</span></code> suspends output, <code class=\"code\"><span class=\"constructor\">TCOON</span></code> restarts output,\n   <code class=\"code\"><span class=\"constructor\">TCIOFF</span></code> transmits a STOP character to suspend input,\n   and <code class=\"code\"><span class=\"constructor\">TCION</span></code> transmits a START character to restart input.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "setsid", "unit -> int",
              "\n<div class=\"info-desc\">\n<p>Put the calling process in a new session and detach it from\n   its controlling terminal.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "UnixLabels.LargeFile",
    "module_info":
      "\n<p>File operations on large files.\n  This sub-module provides 64-bit variants of the functions\n  <a href=\"UnixLabels.html#VALlseek\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.lseek</code></a> (for positioning a file descriptor),\n  <a href=\"UnixLabels.html#VALtruncate\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.truncate</code></a> and <a href=\"UnixLabels.html#VALftruncate\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.ftruncate</code></a>\n  (for changing the size of a file),\n  and <a href=\"UnixLabels.html#VALstat\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.stat</code></a>, <a href=\"UnixLabels.html#VALlstat\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.lstat</code></a> and <a href=\"UnixLabels.html#VALfstat\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.fstat</code></a>\n  (for obtaining information on files).  These alternate functions represent\n  positions and sizes by 64-bit integers (type <code class=\"code\">int64</code>) instead of\n  regular integers (type <code class=\"code\">int</code>), thus allowing operating on files\n  whose sizes are greater than <code class=\"code\">max_int</code>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Function",
            [
              "lseek",
              "UnixLabels.file_descr -> int64 -> mode: UnixLabels.seek_command -> int64",
              null
            ]
          ],
          [ "Function", [ "truncate", "string -> len:int64 -> unit", null ] ],
          [
            "Function",
            [
              "ftruncate", "UnixLabels.file_descr -> len:int64 -> unit", null
            ]
          ],
          [
            "Typevariant",
            [
              "stats", "= Unix.LargeFile.stats = {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_dev\">st_dev</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Device number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_ino\">st_ino</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Inode number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_kind\">st_kind</span>&nbsp;: <code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_kind\">UnixLabels.file_kind</a></code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Kind of the file</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_perm\">st_perm</span>&nbsp;: <code class=\"type\"><a href=\"UnixLabels.html#TYPEfile_perm\">UnixLabels.file_perm</a></code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Access rights</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_nlink\">st_nlink</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Number of links</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_uid\">st_uid</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>User id of the owner</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_gid\">st_gid</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Group ID of the file's group</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_rdev\">st_rdev</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Device minor number</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_size\">st_size</span>&nbsp;: <code class=\"type\">int64</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Size in bytes</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_atime\">st_atime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Last access time</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_mtime\">st_mtime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Last modification time</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTstats.st_ctime\">st_ctime</span>&nbsp;: <code class=\"type\">float</code>;</code></td>\n<td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><code>(*</code></td><td class=\"typefieldcomment\" align=\"left\" valign=\"top\"><div class=\"info \">\n<div class=\"info-desc\">\n<p>Last status change time</p>\n</div>\n</div>\n</td><td class=\"typefieldcomment\" align=\"left\" valign=\"bottom\"><code>*)</code></td>\n</tr></tbody>",
              null
            ]
          ],
          [ "Function", [ "stat", "string -> stats", null ] ],
          [ "Function", [ "lstat", "string -> stats", null ] ],
          [ "Function", [ "fstat", "UnixLabels.file_descr -> stats", null ] ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Warnings",
    "module_info": "",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "loc", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTloc.loc_start\">loc_start</span>&nbsp;: <code class=\"type\"><a href=\"Lexing.html#TYPEposition\">Lexing.position</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTloc.loc_end\">loc_end</span>&nbsp;: <code class=\"type\"><a href=\"Lexing.html#TYPEposition\">Lexing.position</a></code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTloc.loc_ghost\">loc_ghost</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Typevariant",
            [
              "t", "=",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Comment_start\"><span class=\"constructor\">Comment_start</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Comment_not_end\"><span class=\"constructor\">Comment_not_end</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Deprecated\"><span class=\"constructor\">Deprecated</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * <a href=\"Warnings.html#TYPEloc\">loc</a> * <a href=\"Warnings.html#TYPEloc\">loc</a></code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Fragile_match\"><span class=\"constructor\">Fragile_match</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Partial_application\"><span class=\"constructor\">Partial_application</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Labels_omitted\"><span class=\"constructor\">Labels_omitted</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Method_override\"><span class=\"constructor\">Method_override</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Partial_match\"><span class=\"constructor\">Partial_match</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Non_closed_record_pattern\"><span class=\"constructor\">Non_closed_record_pattern</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Statement_type\"><span class=\"constructor\">Statement_type</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Unused_match\"><span class=\"constructor\">Unused_match</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Unused_pat\"><span class=\"constructor\">Unused_pat</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Instance_variable_override\"><span class=\"constructor\">Instance_variable_override</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Illegal_backslash\"><span class=\"constructor\">Illegal_backslash</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Implicit_public_methods\"><span class=\"constructor\">Implicit_public_methods</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Unerasable_optional_argument\"><span class=\"constructor\">Unerasable_optional_argument</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Undeclared_virtual_method\"><span class=\"constructor\">Undeclared_virtual_method</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Not_principal\"><span class=\"constructor\">Not_principal</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Without_principality\"><span class=\"constructor\">Without_principality</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Unused_argument\"><span class=\"constructor\">Unused_argument</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Nonreturning_statement\"><span class=\"constructor\">Nonreturning_statement</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Preprocessor\"><span class=\"constructor\">Preprocessor</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Useless_record_with\"><span class=\"constructor\">Useless_record_with</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Bad_module_name\"><span class=\"constructor\">Bad_module_name</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.All_clauses_guarded\"><span class=\"constructor\">All_clauses_guarded</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Unused_var\"><span class=\"constructor\">Unused_var</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Unused_var_strict\"><span class=\"constructor\">Unused_var_strict</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Wildcard_arg_to_constant_constr\"><span class=\"constructor\">Wildcard_arg_to_constant_constr</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Eol_in_string\"><span class=\"constructor\">Eol_in_string</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Duplicate_definitions\"><span class=\"constructor\">Duplicate_definitions</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * string * string * string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Multiple_definition\"><span class=\"constructor\">Multiple_definition</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * string * string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Unused_value_declaration\"><span class=\"constructor\">Unused_value_declaration</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Unused_open\"><span class=\"constructor\">Unused_open</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Unused_type_declaration\"><span class=\"constructor\">Unused_type_declaration</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Unused_for_index\"><span class=\"constructor\">Unused_for_index</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Unused_ancestor\"><span class=\"constructor\">Unused_ancestor</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Unused_constructor\"><span class=\"constructor\">Unused_constructor</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * bool * bool</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Unused_extension\"><span class=\"constructor\">Unused_extension</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * bool * bool * bool</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Unused_rec_flag\"><span class=\"constructor\">Unused_rec_flag</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Name_out_of_scope\"><span class=\"constructor\">Name_out_of_scope</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * string list * bool</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Ambiguous_name\"><span class=\"constructor\">Ambiguous_name</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string list * string list * bool</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Disambiguated_name\"><span class=\"constructor\">Disambiguated_name</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Nonoptional_label\"><span class=\"constructor\">Nonoptional_label</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Open_shadow_identifier\"><span class=\"constructor\">Open_shadow_identifier</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Open_shadow_label_constructor\"><span class=\"constructor\">Open_shadow_label_constructor</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Bad_env_variable\"><span class=\"constructor\">Bad_env_variable</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Attribute_payload\"><span class=\"constructor\">Attribute_payload</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Eliminated_optional_arguments\"><span class=\"constructor\">Eliminated_optional_arguments</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.No_cmi_file\"><span class=\"constructor\">No_cmi_file</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string * string option</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Bad_docstring\"><span class=\"constructor\">Bad_docstring</span></span> <span class=\"keyword\">of</span> <code class=\"type\">bool</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Expect_tailcall\"><span class=\"constructor\">Expect_tailcall</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Fragile_literal_pattern\"><span class=\"constructor\">Fragile_literal_pattern</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Misplaced_attribute\"><span class=\"constructor\">Misplaced_attribute</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Duplicated_attribute\"><span class=\"constructor\">Duplicated_attribute</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Inlining_impossible\"><span class=\"constructor\">Inlining_impossible</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Unreachable_case\"><span class=\"constructor\">Unreachable_case</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Ambiguous_pattern\"><span class=\"constructor\">Ambiguous_pattern</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string list</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.No_cmx_file\"><span class=\"constructor\">No_cmx_file</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Assignment_to_non_mutable_value\"><span class=\"constructor\">Assignment_to_non_mutable_value</span></span></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Unused_module\"><span class=\"constructor\">Unused_module</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Unboxable_type_in_prim_decl\"><span class=\"constructor\">Unboxable_type_in_prim_decl</span></span> <span class=\"keyword\">of</span> <code class=\"type\">string</code></code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code><span class=\"keyword\">|</span></code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTt.Constraint_on_gadt\"><span class=\"constructor\">Constraint_on_gadt</span></span></code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [ "Function", [ "parse_options", "bool -> string -> unit", null ] ],
          [ "Function", [ "without_warnings", "(unit -> 'a) -> 'a", null ] ],
          [ "Function", [ "is_active", "t -> bool", null ] ],
          [ "Function", [ "is_error", "t -> bool", null ] ],
          [ "Function", [ "defaults_w", "string", null ] ],
          [ "Function", [ "defaults_warn_error", "string", null ] ],
          [
            "Typevariant",
            [
              "reporting_information", "= {",
              "\n<tbody><tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTreporting_information.number\">number</span>&nbsp;: <code class=\"type\">int</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTreporting_information.message\">message</span>&nbsp;: <code class=\"type\">string</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTreporting_information.is_error\">is_error</span>&nbsp;: <code class=\"type\">bool</code>;</code></td>\n\n</tr>\n<tr>\n<td align=\"left\" valign=\"top\">\n<code>&nbsp;&nbsp;</code></td>\n<td align=\"left\" valign=\"top\">\n<code><span id=\"TYPEELTreporting_information.sub_locs\">sub_locs</span>&nbsp;: <code class=\"type\">(<a href=\"Warnings.html#TYPEloc\">loc</a> * string) list</code>;</code></td>\n\n</tr></tbody>",
              null
            ]
          ],
          [
            "Function",
            [
              "report",
              "t -> [ `Active of reporting_information | `Inactive ]", null
            ]
          ],
          [ "Exception", [ "Errors", null, null ] ],
          [ "Function", [ "check_fatal", "unit -> unit", null ] ],
          [ "Function", [ "reset_fatal", "unit -> unit", null ] ],
          [ "Function", [ "help_warnings", "unit -> unit", null ] ],
          [ "Typevariant", [ "state", null, null, null ] ],
          [ "Function", [ "backup", "unit -> state", null ] ],
          [ "Function", [ "restore", "state -> unit", null ] ],
          [
            "Function",
            [
              "mk_lazy", "(unit -> 'a) -> 'a Lazy.t",
              "\n<div class=\"info-desc\">\n<p>Like <code class=\"code\"><span class=\"constructor\">Lazy</span>.of_fun</code>, but the function is applied with\n        the warning settings at the time <code class=\"code\">mk_lazy</code> is called.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Weak",
    "module_info":
      "\n<p>Arrays of weak pointers and hash sets of weak pointers.</p>\n",
    "sections": [
      {
        "section_name": "Low-level functions",
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "'a", "t", null,
              "\n<div class=\"info-desc\">\n<p>The type of arrays of weak pointers (weak arrays).  A weak\n   pointer is a value that the garbage collector may erase whenever\n   the value is not used any more (through normal pointers) by the\n   program.  Note that finalisation functions are run after the\n   weak pointers are erased.</p>\n\n<p>A weak pointer is said to be full if it points to a value,\n   empty if the value was erased by the GC.</p>\n\n<p>Notes:</p>\n<ul>\n<li>Integers are not allocated and cannot be stored in weak arrays.</li>\n<li>Weak arrays cannot be marshaled using <a href=\"Pervasives.html#VALoutput_value\"><code class=\"code\">output_value</code></a>\n     nor the functions of the <a href=\"Marshal.html\"><code class=\"code\"><span class=\"constructor\">Marshal</span></code></a> module.</li>\n</ul>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "int -> 'a t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.create&nbsp;n</code> returns a new weak array of length <code class=\"code\">n</code>.\n   All the pointers are initially empty.  Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code>\n   if <code class=\"code\">n</code> is negative or greater than <a href=\"Sys.html#VALmax_array_length\"><code class=\"code\"><span class=\"constructor\">Sys</span>.max_array_length</code></a><code class=\"code\">-1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "length", "'a t -> int",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.length&nbsp;ar</code> returns the length (number of elements) of\n   <code class=\"code\">ar</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "set", "'a t -> int -> 'a option -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.set&nbsp;ar&nbsp;n&nbsp;(<span class=\"constructor\">Some</span>&nbsp;el)</code> sets the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> to be a\n   (full) pointer to <code class=\"code\">el</code>; <code class=\"code\"><span class=\"constructor\">Weak</span>.set&nbsp;ar&nbsp;n&nbsp;<span class=\"constructor\">None</span></code> sets the <code class=\"code\">n</code>th\n   cell of <code class=\"code\">ar</code> to empty.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Weak.set\"</span></code> if <code class=\"code\">n</code> is not in the range\n   0 to <a href=\"Weak.html#VALlength\"><code class=\"code\"><span class=\"constructor\">Weak</span>.length</code></a><code class=\"code\">&nbsp;a&nbsp;-&nbsp;1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get", "'a t -> int -> 'a option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.get&nbsp;ar&nbsp;n</code> returns None if the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> is\n   empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is the value) if it is full.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Weak.get\"</span></code> if <code class=\"code\">n</code> is not in the range\n   0 to <a href=\"Weak.html#VALlength\"><code class=\"code\"><span class=\"constructor\">Weak</span>.length</code></a><code class=\"code\">&nbsp;a&nbsp;-&nbsp;1</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "get_copy", "'a t -> int -> 'a option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.get_copy&nbsp;ar&nbsp;n</code> returns None if the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> is\n   empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is a (shallow) copy of the value) if\n   it is full.\n   In addition to pitfalls with mutable values, the interesting\n   difference with <code class=\"code\">get</code> is that <code class=\"code\">get_copy</code> does not prevent\n   the incremental GC from erasing the value in its current cycle\n   (<code class=\"code\">get</code> may delay the erasure to the next GC cycle).\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Weak.get\"</span></code> if <code class=\"code\">n</code> is not in the range\n   0 to <a href=\"Weak.html#VALlength\"><code class=\"code\"><span class=\"constructor\">Weak</span>.length</code></a><code class=\"code\">&nbsp;a&nbsp;-&nbsp;1</code>.</p>\n\n<p>If the element is a custom block it is not copied.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "check", "'a t -> int -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.check&nbsp;ar&nbsp;n</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> is\n   full, <code class=\"code\"><span class=\"keyword\">false</span></code> if it is empty.  Note that even if <code class=\"code\"><span class=\"constructor\">Weak</span>.check&nbsp;ar&nbsp;n</code>\n   returns <code class=\"code\"><span class=\"keyword\">true</span></code>, a subsequent <a href=\"Weak.html#VALget\"><code class=\"code\"><span class=\"constructor\">Weak</span>.get</code></a><code class=\"code\">&nbsp;ar&nbsp;n</code> can return <code class=\"code\"><span class=\"constructor\">None</span></code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fill", "'a t -> int -> int -> 'a option -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.fill&nbsp;ar&nbsp;ofs&nbsp;len&nbsp;el</code> sets to <code class=\"code\">el</code> all pointers of <code class=\"code\">ar</code> from\n   <code class=\"code\">ofs</code> to <code class=\"code\">ofs&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>.  Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Weak.fill\"</span></code>\n   if <code class=\"code\">ofs</code> and <code class=\"code\">len</code> do not designate a valid subarray of <code class=\"code\">a</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "blit", "'a t -> int -> 'a t -> int -> int -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.blit&nbsp;ar1&nbsp;off1&nbsp;ar2&nbsp;off2&nbsp;len</code> copies <code class=\"code\">len</code> weak pointers\n   from <code class=\"code\">ar1</code> (starting at <code class=\"code\">off1</code>) to <code class=\"code\">ar2</code> (starting at <code class=\"code\">off2</code>).\n   It works correctly even if <code class=\"code\">ar1</code> and <code class=\"code\">ar2</code> are the same.\n   Raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span>&nbsp;<span class=\"string\">\"Weak.blit\"</span></code> if <code class=\"code\">off1</code> and <code class=\"code\">len</code> do\n   not designate a valid subarray of <code class=\"code\">ar1</code>, or if <code class=\"code\">off2</code> and <code class=\"code\">len</code>\n   do not designate a valid subarray of <code class=\"code\">ar2</code>.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      },
      {
        "section_name": "Weak hash sets",
        "section_info":
          "<p>A weak hash set is a hashed set of values.  Each value may\n    magically disappear from the set when it is not used by the\n    rest of the program any more.  This is normally used to share\n    data structures without inducing memory leaks.\n    Weak hash sets are defined on values from a <a href=\"Hashtbl.HashedType.html\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">HashedType</span></code></a>\n    module; the <code class=\"code\">equal</code> relation and <code class=\"code\">hash</code> function are taken from that\n    module.  We will say that <code class=\"code\">v</code> is an instance of <code class=\"code\">x</code> if <code class=\"code\">equal&nbsp;x&nbsp;v</code>\n    is <code class=\"code\"><span class=\"keyword\">true</span></code>.</p><p>The <code class=\"code\">equal</code> relation must be able to work on a shallow copy of\n    the values and give the same result as with the values themselves.</p>",
        "elements": [
          [
            "Moduletype",
            [
              "S",
              "\n<p>The output signature of the functor <a href=\"Weak.Make.html\"><code class=\"code\"><span class=\"constructor\">Weak</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n\n"
            ]
          ],
          [
            "Module",
            [
              "Make",
              "\n<p>Functor building an implementation of the weak hash set structure.</p>\n\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": true,
    "is_module_type": false,
    "functor_info": null
  },
  {
    "module_name": "Weak.Make",
    "module_info":
      "\n<div class=\"info-desc\">\n<p>Functor building an implementation of the weak hash set structure.\n    <code class=\"code\"><span class=\"constructor\">H</span>.equal</code> can't be the physical equality, since only shallow\n    copies of the elements in the set are given to it.</p>\n</div>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "data", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the elements stored in the table.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of tables that contain elements of type <code class=\"code\">data</code>.\n        Note that weak hash sets cannot be marshaled using\n        <a href=\"Pervasives.html#VALoutput_value\"><code class=\"code\">output_value</code></a> or the functions of the <a href=\"Marshal.html\"><code class=\"code\"><span class=\"constructor\">Marshal</span></code></a>\n        module.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "int -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">create&nbsp;n</code> creates a new empty weak hash set, of initial\n        size <code class=\"code\">n</code>.  The table will grow as needed.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "clear", "t -> unit",
              "\n<div class=\"info-desc\">\n<p>Remove all elements from the table.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "merge", "t -> data -> data",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">merge&nbsp;t&nbsp;x</code> returns an instance of <code class=\"code\">x</code> found in <code class=\"code\">t</code> if any,\n        or else adds <code class=\"code\">x</code> to <code class=\"code\">t</code> and return <code class=\"code\">x</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "t -> data -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add&nbsp;t&nbsp;x</code> adds <code class=\"code\">x</code> to <code class=\"code\">t</code>.  If there is already an instance\n        of <code class=\"code\">x</code> in <code class=\"code\">t</code>, it is unspecified which one will be\n        returned by subsequent calls to <code class=\"code\">find</code> and <code class=\"code\">merge</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "remove", "t -> data -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">remove&nbsp;t&nbsp;x</code> removes from <code class=\"code\">t</code> one instance of <code class=\"code\">x</code>.  Does\n        nothing if there is no instance of <code class=\"code\">x</code> in <code class=\"code\">t</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find", "t -> data -> data",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;t&nbsp;x</code> returns an instance of <code class=\"code\">x</code> found in <code class=\"code\">t</code>.\n        Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if there is no such element.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find_opt", "t -> data -> data option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_opt&nbsp;t&nbsp;x</code> returns an instance of <code class=\"code\">x</code> found in <code class=\"code\">t</code>\n        or <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no such element.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_all", "t -> data -> data list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_all&nbsp;t&nbsp;x</code> returns a list of all the instances of <code class=\"code\">x</code>\n        found in <code class=\"code\">t</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mem", "t -> data -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;t&nbsp;x</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if there is at least one instance\n        of <code class=\"code\">x</code> in <code class=\"code\">t</code>, false otherwise.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "( data -> unit) -> t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;t</code> calls <code class=\"code\">f</code> on each element of <code class=\"code\">t</code>, in some unspecified\n        order.  It is not specified what happens if <code class=\"code\">f</code> tries to change\n        <code class=\"code\">t</code> itself.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold", "( data -> 'a -> 'a) -> t -> 'a -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;t&nbsp;init</code> computes <code class=\"code\">(f&nbsp;d1&nbsp;(...&nbsp;(f&nbsp;dN&nbsp;init)))</code> where\n        <code class=\"code\">d1&nbsp;...&nbsp;dN</code> are the elements of <code class=\"code\">t</code> in some unspecified order.\n        It is not specified what happens if <code class=\"code\">f</code> tries to change <code class=\"code\">t</code>\n        itself.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "count", "t -> int",
              "\n<div class=\"info-desc\">\n<p>Count the number of elements in the table.  <code class=\"code\">count&nbsp;t</code> gives the\n        same result as <code class=\"code\">fold&nbsp;(<span class=\"keyword\">fun</span>&nbsp;_&nbsp;n&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;n+1)&nbsp;t&nbsp;0</code> but does not delay the\n        deallocation of the dead elements.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stats", "t -> int * int * int * int * int * int",
              "\n<div class=\"info-desc\">\n<p>Return statistics on the table.  The numbers are, in order:\n        table length, number of entries, sum of bucket lengths,\n        smallest bucket length, median bucket length, biggest bucket length.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": false,
    "functor_info": {
      "begin_sig":
        "<span id=\"MODULEMake\"><span class=\"keyword\">module</span> Make</span>: <div class=\"sig_block\"><code class=\"code\"><span class=\"keyword\">functor</span>&nbsp;(</code><code class=\"code\"><span class=\"constructor\">H</span></code><code class=\"code\">&nbsp;:&nbsp;</code><code class=\"type\"><a href=\"Hashtbl.HashedType.html\">Hashtbl.HashedType</a></code><code class=\"code\">)&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;</code><code class=\"type\"><a href=\"Weak.S.html\">S</a></code><code class=\"type\">  with type data = H.t</code></div>",
      "functor_elements": [],
      "end_sig": "",
      "table":
        "\n<tbody><tr>\n<td align=\"left\" valign=\"top\" width=\"1%%\"><b>Parameters: </b></td>\n<td>\n<table class=\"paramstable\">\n<tbody><tr>\n<td align=\"center\" valign=\"top\" width=\"15%\">\n<code>H</code></td>\n<td align=\"center\" valign=\"top\">:</td>\n<td><code class=\"type\"><a href=\"Hashtbl.HashedType.html\">Hashtbl.HashedType</a></code>\n</td></tr></tbody></table>\n</td>\n</tr>\n</tbody>"
    }
  },
  {
    "module_name": "Weak.S",
    "module_info":
      "\n<p>The output signature of the functor <a href=\"Weak.Make.html\"><code class=\"code\"><span class=\"constructor\">Weak</span>.<span class=\"constructor\">Make</span></code></a>.</p>\n",
    "sections": [
      {
        "section_name": null,
        "section_info": null,
        "elements": [
          [
            "Typevariant",
            [
              "data", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of the elements stored in the table.</p>\n</div>\n"
            ]
          ],
          [
            "Typevariant",
            [
              "t", null, null,
              "\n<div class=\"info-desc\">\n<p>The type of tables that contain elements of type <code class=\"code\">data</code>.\n        Note that weak hash sets cannot be marshaled using\n        <a href=\"Pervasives.html#VALoutput_value\"><code class=\"code\">output_value</code></a> or the functions of the <a href=\"Marshal.html\"><code class=\"code\"><span class=\"constructor\">Marshal</span></code></a>\n        module.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "create", "int -> t",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">create&nbsp;n</code> creates a new empty weak hash set, of initial\n        size <code class=\"code\">n</code>.  The table will grow as needed.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "clear", "t -> unit",
              "\n<div class=\"info-desc\">\n<p>Remove all elements from the table.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "merge", "t -> data -> data",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">merge&nbsp;t&nbsp;x</code> returns an instance of <code class=\"code\">x</code> found in <code class=\"code\">t</code> if any,\n        or else adds <code class=\"code\">x</code> to <code class=\"code\">t</code> and return <code class=\"code\">x</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "add", "t -> data -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">add&nbsp;t&nbsp;x</code> adds <code class=\"code\">x</code> to <code class=\"code\">t</code>.  If there is already an instance\n        of <code class=\"code\">x</code> in <code class=\"code\">t</code>, it is unspecified which one will be\n        returned by subsequent calls to <code class=\"code\">find</code> and <code class=\"code\">merge</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "remove", "t -> data -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">remove&nbsp;t&nbsp;x</code> removes from <code class=\"code\">t</code> one instance of <code class=\"code\">x</code>.  Does\n        nothing if there is no instance of <code class=\"code\">x</code> in <code class=\"code\">t</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find", "t -> data -> data",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find&nbsp;t&nbsp;x</code> returns an instance of <code class=\"code\">x</code> found in <code class=\"code\">t</code>.\n        Raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if there is no such element.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "find_opt", "t -> data -> data option",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_opt&nbsp;t&nbsp;x</code> returns an instance of <code class=\"code\">x</code> found in <code class=\"code\">t</code>\n        or <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no such element.</p>\n</div>\n<ul class=\"info-attributes\">\n<li><b>Since</b> 4.05</li>\n</ul>\n"
            ]
          ],
          [
            "Function",
            [
              "find_all", "t -> data -> data list",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">find_all&nbsp;t&nbsp;x</code> returns a list of all the instances of <code class=\"code\">x</code>\n        found in <code class=\"code\">t</code>.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "mem", "t -> data -> bool",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">mem&nbsp;t&nbsp;x</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if there is at least one instance\n        of <code class=\"code\">x</code> in <code class=\"code\">t</code>, false otherwise.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "iter", "( data -> unit) -> t -> unit",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;t</code> calls <code class=\"code\">f</code> on each element of <code class=\"code\">t</code>, in some unspecified\n        order.  It is not specified what happens if <code class=\"code\">f</code> tries to change\n        <code class=\"code\">t</code> itself.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "fold", "( data -> 'a -> 'a) -> t -> 'a -> 'a",
              "\n<div class=\"info-desc\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;t&nbsp;init</code> computes <code class=\"code\">(f&nbsp;d1&nbsp;(...&nbsp;(f&nbsp;dN&nbsp;init)))</code> where\n        <code class=\"code\">d1&nbsp;...&nbsp;dN</code> are the elements of <code class=\"code\">t</code> in some unspecified order.\n        It is not specified what happens if <code class=\"code\">f</code> tries to change <code class=\"code\">t</code>\n        itself.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "count", "t -> int",
              "\n<div class=\"info-desc\">\n<p>Count the number of elements in the table.  <code class=\"code\">count&nbsp;t</code> gives the\n        same result as <code class=\"code\">fold&nbsp;(<span class=\"keyword\">fun</span>&nbsp;_&nbsp;n&nbsp;<span class=\"keywordsign\">-&gt;</span>&nbsp;n+1)&nbsp;t&nbsp;0</code> but does not delay the\n        deallocation of the dead elements.</p>\n</div>\n"
            ]
          ],
          [
            "Function",
            [
              "stats", "t -> int * int * int * int * int * int",
              "\n<div class=\"info-desc\">\n<p>Return statistics on the table.  The numbers are, in order:\n        table length, number of entries, sum of bucket lengths,\n        smallest bucket length, median bucket length, biggest bucket length.</p>\n</div>\n"
            ]
          ]
        ],
        "sub_sections": []
      }
    ],
    "is_standard": false,
    "is_module_type": true,
    "functor_info": null
  }
]